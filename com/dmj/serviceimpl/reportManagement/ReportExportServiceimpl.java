package com.dmj.serviceimpl.reportManagement;

import cn.hutool.core.collection.CollUtil;
import cn.hutool.core.convert.Convert;
import cn.hutool.core.img.ImgUtil;
import cn.hutool.core.io.FileUtil;
import cn.hutool.core.util.StrUtil;
import cn.hutool.poi.excel.ExcelUtil;
import cn.hutool.poi.excel.ExcelWriter;
import cn.hutool.poi.excel.StyleSet;
import com.dmj.action.paperCommentManagment.ChangePassingScoreChartPath;
import com.dmj.action.teachingInformation.BubbleChart;
import com.dmj.action.teachingInformation.CalibrationSpiderWebPlot;
import com.dmj.action.teachingInformation.LineChar;
import com.dmj.action.teachingInformation.PolarChart;
import com.dmj.action.teachingInformation.Stack;
import com.dmj.auth.bean.License;
import com.dmj.bean.DengJi;
import com.dmj.daoimpl.base.BaseDaoImpl2;
import com.dmj.daoimpl.reportManagement.ReportDaoImpl;
import com.dmj.daoimpl.teachingInformation.InitStudentDAOImpl;
import com.dmj.domain.AjaxData;
import com.dmj.domain.Class;
import com.dmj.domain.Define;
import com.dmj.domain.Exam;
import com.dmj.domain.Examinationnum;
import com.dmj.domain.Exampaper;
import com.dmj.domain.Examsetting;
import com.dmj.domain.Grade;
import com.dmj.domain.Gradelevel;
import com.dmj.domain.IndexIntegral;
import com.dmj.domain.Knowledge;
import com.dmj.domain.Levelstudent;
import com.dmj.domain.ObjecterrorAnaly;
import com.dmj.domain.QuestionType;
import com.dmj.domain.Resource;
import com.dmj.domain.RptHeader;
import com.dmj.domain.Student;
import com.dmj.domain.Studentlevel;
import com.dmj.domain.Subject;
import com.dmj.service.analysisManagement.AnalysisService;
import com.dmj.service.examManagement.ExamService;
import com.dmj.service.reportManagement.C10SingleSubectStudentQuestionScoreService;
import com.dmj.service.reportManagement.C15AverageRangeService;
import com.dmj.service.reportManagement.C16SubjectAllQueryService;
import com.dmj.service.reportManagement.C17SubjectDengjiDuizhaoService;
import com.dmj.service.reportManagement.C18SubjectDengjiService;
import com.dmj.service.reportManagement.C1StuMoreScoreService;
import com.dmj.service.reportManagement.C20ClassQualityAnalyzeService;
import com.dmj.service.reportManagement.C22AllSchoolSubjectRankService;
import com.dmj.service.reportManagement.C22AllSubjectFourRatesAveService;
import com.dmj.service.reportManagement.C22AllSubjectScoreCountService;
import com.dmj.service.reportManagement.C24Service;
import com.dmj.service.reportManagement.C27Service;
import com.dmj.service.reportManagement.C2SingleSubjectQuestionScoreService;
import com.dmj.service.reportManagement.C4ClassTypeService;
import com.dmj.service.reportManagement.C5gradeTopScoreService;
import com.dmj.service.reportManagement.C6TopScoreStudentService;
import com.dmj.service.reportManagement.C7AllsubjectScore_rank_compareService;
import com.dmj.service.reportManagement.C8SubjectDifficultyService;
import com.dmj.service.reportManagement.CustomReportsService;
import com.dmj.service.reportManagement.F6service;
import com.dmj.service.reportManagement.G1allIndexService;
import com.dmj.service.reportManagement.G2SchoolRankCompareService;
import com.dmj.service.reportManagement.G3LeverRankService;
import com.dmj.service.reportManagement.G5StudentScoreRankService;
import com.dmj.service.reportManagement.G6StudentScoreGradeRankService;
import com.dmj.service.reportManagement.G7studentScoreClassCompareService;
import com.dmj.service.reportManagement.G8StudentScoreGradeCompareSevice;
import com.dmj.service.reportManagement.L13Service;
import com.dmj.service.reportManagement.OneScoreTwoRateService;
import com.dmj.service.reportManagement.ReportExportService;
import com.dmj.service.reportManagement.ReportService;
import com.dmj.service.reportManagement.StudentKnowAndAbilityService;
import com.dmj.service.reportManagement.StudentMoreExamScoreService;
import com.dmj.service.reportManagement.StudentPersonalScoreService;
import com.dmj.service.reportManagement.StudentQuestionTypeService;
import com.dmj.service.reportManagement.T15UnstandardScribbleCountService;
import com.dmj.service.reportManagement.T16StudentExamMonitorService;
import com.dmj.service.reportManagement.T17knowledgeDefenlvService;
import com.dmj.service.reportManagement.ToTeacherSubjectiveService;
import com.dmj.service.systemManagement.SystemService;
import com.dmj.service.teachingInformation.StudentService;
import com.dmj.service.userManagement.UserService;
import com.dmj.serviceimpl.analysisManagement.AnalysisServiceImpl;
import com.dmj.serviceimpl.examManagement.ExamServiceImpl;
import com.dmj.serviceimpl.systemManagement.SystemServiceImpl;
import com.dmj.serviceimpl.teachingInformation.StudentServiceimpl;
import com.dmj.serviceimpl.userManagement.UserServiceImpl;
import com.dmj.util.CellRangeAddressUtil;
import com.dmj.util.CommonUtil;
import com.dmj.util.Const;
import com.dmj.util.DateUtil;
import com.dmj.util.GUID;
import com.dmj.util.config.Configuration;
import com.dmj.util.excel.ExcelHelper;
import com.zht.db.RowArg;
import com.zht.db.ServiceFactory;
import com.zht.db.StreamMap;
import com.zht.db.SubException;
import com.zht.db.TypeEnum;
import java.awt.Color;
import java.io.BufferedInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.net.URLEncoder;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Pattern;
import java.util.stream.Collectors;
import javax.servlet.ServletContext;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import jxl.Workbook;
import jxl.format.Alignment;
import jxl.format.Border;
import jxl.format.BorderLineStyle;
import jxl.format.CellFormat;
import jxl.format.Colour;
import jxl.format.ScriptStyle;
import jxl.format.UnderlineStyle;
import jxl.format.VerticalAlignment;
import jxl.write.Blank;
import jxl.write.DateFormat;
import jxl.write.Label;
import jxl.write.Number;
import jxl.write.NumberFormat;
import jxl.write.WritableCellFormat;
import jxl.write.WritableFont;
import jxl.write.WritableImage;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;
import net.sf.json.JSONObject;
import org.apache.commons.collections.map.ListOrderedMap;
import org.apache.log4j.Logger;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFDataFormat;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRichTextString;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.BorderStyle;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.ClientAnchor;
import org.apache.poi.ss.usermodel.DataFormat;
import org.apache.poi.ss.usermodel.FillPatternType;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.HorizontalAlignment;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.ss.util.CellUtil;
import org.apache.poi.ss.util.RegionUtil;
import org.apache.poi.xssf.streaming.SXSSFRow;
import org.apache.poi.xssf.streaming.SXSSFSheet;
import org.apache.poi.xssf.streaming.SXSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFClientAnchor;
import org.apache.poi.xssf.usermodel.XSSFDataFormat;
import org.apache.poi.xssf.usermodel.XSSFDrawing;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.struts2.ServletActionContext;
import org.apache.tools.zip.ZipEntry;
import org.apache.tools.zip.ZipOutputStream;
import org.jfree.chart.ChartColor;
import org.jfree.chart.ChartUtils;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.title.LegendTitle;
import org.jfree.chart.title.TextTitle;
import org.jfree.chart.ui.RectangleEdge;
import org.jfree.chart.util.Rotation;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.util.Log;

/* loaded from: ReportExportServiceimpl.class */
public class ReportExportServiceimpl implements ReportExportService {
    public static ReportService report = (ReportService) ServiceFactory.getObject(new ReportServiceImpl());
    BaseDaoImpl2<?, ?, ?> dao2 = new BaseDaoImpl2<>();
    private ReportService reportService = (ReportService) ServiceFactory.getObject(new ReportServiceImpl());
    private Logger log = Logger.getLogger(getClass());
    private AnalysisService analy = (AnalysisService) ServiceFactory.getObject(new AnalysisServiceImpl());
    private ReportDaoImpl reportDao = new ReportDaoImpl();
    private UserService userService = (UserService) ServiceFactory.getObject(new UserServiceImpl());
    private StudentPersonalScoreService sp = (StudentPersonalScoreService) ServiceFactory.getObject(new StudentPersonalScoreServiceimpl());
    private InitStudentDAOImpl initDAO = new InitStudentDAOImpl();
    ServletContext context = ServletActionContext.getServletContext();
    String showAnalyiseImage = (String) this.context.getAttribute("showAnalyiseImage");
    private LineChar lc = new LineChar();
    private BubbleChart bubbleChart = new BubbleChart();
    private ToTeacherSubjectiveService tt = (ToTeacherSubjectiveService) ServiceFactory.getObject(new ToTeacherSubjectiveServiceImpl());
    private Stack st = new Stack();
    private G1allIndexService g = (G1allIndexService) ServiceFactory.getObject(new G1allIndexServiceimpl());
    private G2SchoolRankCompareService g2 = (G2SchoolRankCompareService) ServiceFactory.getObject(new G2SchoolRankCompareServiceimpl());
    private G3LeverRankService g3 = (G3LeverRankService) ServiceFactory.getObject(new G3LeverRankServiceimpl());
    private G5StudentScoreRankService g5 = (G5StudentScoreRankService) ServiceFactory.getObject(new G5StudentScoreRankServiceimpl());
    private G6StudentScoreGradeRankService g6 = (G6StudentScoreGradeRankService) ServiceFactory.getObject(new G6StudentScoreGradeRankServiceimpl());
    private G7studentScoreClassCompareService g7 = (G7studentScoreClassCompareService) ServiceFactory.getObject(new G7studentScoreClassCompareServiceimpl());
    private G8StudentScoreGradeCompareSevice g8 = (G8StudentScoreGradeCompareSevice) ServiceFactory.getObject(new G8StudentScoreGradeCompareServiceimpl());
    private F6service f6 = (F6service) ServiceFactory.getObject(new F6serviceImpl());
    private C1StuMoreScoreService c1 = (C1StuMoreScoreService) ServiceFactory.getObject(new C1StuMoreScoreServiceImpl());
    private C2SingleSubjectQuestionScoreService c2 = (C2SingleSubjectQuestionScoreService) ServiceFactory.getObject(new C2SingleSubjectQuestionScoreServiceimpl());
    private C4ClassTypeService c4 = (C4ClassTypeService) ServiceFactory.getObject(new C4ClassTypeServiceimpl());
    private C5gradeTopScoreService c5 = (C5gradeTopScoreService) ServiceFactory.getObject(new C5gradeTopScoreServiceimpl());
    public C6TopScoreStudentService c6 = (C6TopScoreStudentService) ServiceFactory.getObject(new C6TopScoreStudentServiceImpl());
    private C7AllsubjectScore_rank_compareService c7 = (C7AllsubjectScore_rank_compareService) ServiceFactory.getObject(new C7AllsubjectScore_rank_compareServiceimpl());
    public C8SubjectDifficultyService c8 = (C8SubjectDifficultyService) ServiceFactory.getObject(new C8SubjectDifficultyServiceimpl());
    public C10SingleSubectStudentQuestionScoreService c10 = (C10SingleSubectStudentQuestionScoreService) ServiceFactory.getObject(new C10SingleSubectStudentQuestionScoreServiceimpl());
    public C15AverageRangeService c15 = (C15AverageRangeService) ServiceFactory.getObject(new C15AverageRangeServiceImpl());
    public C16SubjectAllQueryService c16 = (C16SubjectAllQueryService) ServiceFactory.getObject(new C16SubjectAllQueryServiceImpl());
    public C17SubjectDengjiDuizhaoService c17 = (C17SubjectDengjiDuizhaoService) ServiceFactory.getObject(new C17SubjectDengjiDuizhaoServiceImpl());
    public C18SubjectDengjiService c18 = (C18SubjectDengjiService) ServiceFactory.getObject(new C18SubjectDengjiServiceImpl());
    private CustomReportsService c19 = (CustomReportsService) ServiceFactory.getObject(new CustomReportsServiceimpl());
    public C20ClassQualityAnalyzeService c20 = (C20ClassQualityAnalyzeService) ServiceFactory.getObject(new C20ClassQualityAnalyzeServiceImpl());
    public C22AllSubjectScoreCountService c22 = (C22AllSubjectScoreCountService) ServiceFactory.getObject(new C22AllSubjectScoreCountServiceImpl());
    public C22AllSchoolSubjectRankService c22Rank = (C22AllSchoolSubjectRankService) ServiceFactory.getObject(new C22AllSchoolSubjectRankServiceImpl());
    public C22AllSubjectFourRatesAveService c22Rates = (C22AllSubjectFourRatesAveService) ServiceFactory.getObject(new C22AllSubjectFourRatesAveServiceImpl());
    private C24Service c24 = (C24Service) ServiceFactory.getObject(new C24ServiceImpl());
    public T15UnstandardScribbleCountService t15Service = (T15UnstandardScribbleCountService) ServiceFactory.getObject(new T15UnstandardScribbleCountServiceImpl());
    private T16StudentExamMonitorService t16service = (T16StudentExamMonitorService) ServiceFactory.getObject(new T16StudentExamMonitorServiceImpl());
    private C27Service c27 = (C27Service) ServiceFactory.getObject(new C27ServiceImpl());
    private T17knowledgeDefenlvService t17service = (T17knowledgeDefenlvService) ServiceFactory.getObject(new T17knowledgeDfenlvServiceImpl());
    private OneScoreTwoRateService one = (OneScoreTwoRateService) ServiceFactory.getObject(new OneScoreTwoRateServiceImpl());
    private L13Service L13 = (L13Service) ServiceFactory.getObject(new L13ServiceImple());
    private PolarChart polarChart = new PolarChart();
    private ExamService examService = (ExamService) ServiceFactory.getObject(new ExamServiceImpl());
    private StudentKnowAndAbilityService ska = (StudentKnowAndAbilityService) ServiceFactory.getObject(new StudentKnowAndAbilityServiceImpl());
    private StudentMoreExamScoreService sm = (StudentMoreExamScoreService) ServiceFactory.getObject(new StudentMoreExamScoreImpl());
    private StudentQuestionTypeService sq = (StudentQuestionTypeService) ServiceFactory.getObject(new StudentQuestionTypeServiceImpl());
    private SystemService system = (SystemService) ServiceFactory.getObject(new SystemServiceImpl());
    private StudentService studentService = (StudentService) ServiceFactory.getObject(new StudentServiceimpl());
    String viewRankInfo = "";

    private void throwJbcdException(Exception e) {
        if (e != null && e.getClass().getName().equals("com.dmj.daoimpl.base.MyException")) {
            Throwable cause = e.getCause();
            if (cause != null) {
                Throwable subCause = cause.getCause();
                if (subCause != null) {
                    throw new SubException(subCause.getMessage());
                }
                throw new SubException(cause.getMessage());
            }
            throw new SubException(e.getMessage());
        }
        throw new RuntimeException(e.getMessage());
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public void deleteFileAndDirect(String basicDir, String srcName) {
        File dir = new File(basicDir + srcName);
        if (dir.isDirectory()) {
            File[] files = dir.listFiles();
            if (files.length == 0) {
                deleteEmptyDir(dir);
                return;
            }
            for (int i = 0; i < files.length; i++) {
                if (files[i].isFile()) {
                    deleteSingleFile_file(files[i].toString());
                } else {
                    deleteDirect(files[i]);
                }
            }
            deleteEmptyDir(dir);
        }
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public void deleteFile(String filePath) {
        File file = new File(filePath);
        if (file.exists()) {
            file.delete();
        }
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public void deleteDirect(File dird) {
        if (dird.isDirectory()) {
            File[] files = dird.listFiles();
            if (files.length == 0) {
                deleteEmptyDir(dird);
                return;
            }
            for (int i = 0; i < files.length; i++) {
                if (files[i].isFile()) {
                    deleteSingleFile_file(files[i].toString());
                } else {
                    deleteDirect(files[i]);
                }
            }
            deleteEmptyDir(dird);
        }
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public void deleteSingleFile_file(String srcName) {
        File file = new File(srcName);
        file.delete();
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public void deleteEmptyDir(File dir) {
        if (dir.isDirectory() && dir.listFiles().length == 0) {
            dir.delete();
        }
    }

    public void deleteZipAll(String baseFolder, String folderName) {
        String zipFileName = baseFolder.replace('\\', '/') + folderName + ".zip";
        File zipFile = new File(zipFileName);
        if (zipFile.exists()) {
            zipFile.delete();
        }
    }

    public void compressAllZip(String dirPath, String srcName, String targetName) {
        if (null == dirPath || "".equals(dirPath)) {
            this.log.info("压缩失败:" + dirPath + "目录不存在");
            return;
        }
        File baseDir = new File(dirPath);
        if (!baseDir.exists() || !baseDir.isDirectory()) {
            this.log.info("压缩失败-----------:" + dirPath + "目录不存在");
            return;
        }
        String basicRootDir = baseDir.getAbsolutePath();
        File targetFile = new File(targetName);
        try {
            ZipOutputStream out = new ZipOutputStream(new FileOutputStream(targetFile));
            out.setEncoding("gbk");
            if (srcName.equals("*")) {
                compressDirToZip(basicRootDir, baseDir, out);
            } else {
                File file = new File(baseDir, srcName);
                if (file.isFile()) {
                    compressFileToZip(basicRootDir, file, out);
                } else {
                    compressDirToZip(basicRootDir, file, out);
                }
            }
            out.close();
        } catch (IOException e) {
            this.log.info(DateUtil.getCurrentTime() + "-----压缩失败：");
            this.log.info("", e);
        }
    }

    private void compressDirToZip(String basicRootDir, File dir, ZipOutputStream out) {
        if (dir.isDirectory()) {
            File[] files = dir.listFiles();
            if (files.length == 0) {
                ZipEntry entry = new ZipEntry(getFileName(basicRootDir, dir));
                try {
                    out.putNextEntry(entry);
                    out.closeEntry();
                    return;
                } catch (IOException e) {
                    this.log.info("", e);
                    return;
                }
            }
            for (int i = 0; i < files.length; i++) {
                if (files[i].isFile()) {
                    compressFileToZip(basicRootDir, files[i], out);
                } else {
                    compressDirToZip(basicRootDir, files[i], out);
                }
            }
        }
    }

    private void compressFileToZip(String basicRootDir, File file, ZipOutputStream out) {
        byte[] buffer = new byte[4096];
        if (file.isFile()) {
            try {
                FileInputStream in = new FileInputStream(file);
                ZipEntry entry = new ZipEntry(getFileName(basicRootDir, file));
                out.putNextEntry(entry);
                while (true) {
                    int bytes_read = in.read(buffer);
                    if (bytes_read != -1) {
                        out.write(buffer, 0, bytes_read);
                    } else {
                        out.closeEntry();
                        in.close();
                        return;
                    }
                }
            } catch (IOException e) {
                this.log.info("", e);
            }
        }
    }

    private String getFileName(String basicRootDir, File file) {
        if (!basicRootDir.endsWith(File.separator)) {
            basicRootDir = basicRootDir + File.separator;
        }
        String filePath = file.getAbsolutePath();
        if (file.isDirectory()) {
            filePath = filePath + "/";
        }
        int index = filePath.indexOf(basicRootDir);
        return filePath.substring(index + basicRootDir.length());
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public void batchReportExcel(String dirPath, String exlHome, String srcName, String loginUserNum, String[] stuRptArr, String[] teachRptArr, String[] custRptArr, String examNum, String gradeNum, String subjectNum, String uri, String gradeName, String subjectName, String startTime, String endTime, String viewRankInfo, String subCompose, String islevel, String teachUnit, String contrastObject, String sPid, String teachUnit_s, String contrasct_s) {
        List<AjaxData> clalist;
        List<AjaxData> clalist2;
        List<AjaxData> clalist3;
        List<AjaxData> clalist4;
        List<AjaxData> clalist5;
        List<AjaxData> clalist6;
        List<AjaxData> clalist7;
        List<AjaxData> clalist8;
        List<AjaxData> clalist9;
        List<AjaxData> clalist10;
        List<AjaxData> clalist11;
        List<AjaxData> clalist12;
        List<AjaxData> clalist13;
        List<AjaxData> clalist14;
        List<AjaxData> clalist15;
        List<AjaxData> clalist16;
        List<AjaxData> clalist17;
        List<AjaxData> clalist18;
        List<AjaxData> clalist19;
        List<AjaxData> clalist20;
        List<AjaxData> clalist21;
        List<AjaxData> clalist22;
        List<AjaxData> clalist23;
        String levelclass = Configuration.getInstance().getLevelclass();
        String l2Allsubpassrait = Configuration.getInstance().getL2Allsubpassrait();
        try {
            List<AjaxData> schlist = this.analy.getSchool(examNum, subjectNum, null, null, "0");
            if (null != schlist && schlist.size() > 0) {
                for (int schI = 0; schI < schlist.size(); schI++) {
                    List<AjaxData> cexamlist = this.analy.getCompareExam(examNum, gradeNum, subjectNum, null, null, null, null, null);
                    String cexamNum = "";
                    if (null != cexamlist && cexamlist.size() > 0) {
                        cexamNum = cexamlist.get(0).getNum();
                    }
                    List<AjaxData> stuTypelist = this.analy.getSubjectType(examNum, subjectNum, schlist.get(schI).getNum(), gradeNum);
                    if (null != stuTypelist && stuTypelist.size() > 0) {
                        for (int stuTypeI = 0; stuTypeI < stuTypelist.size(); stuTypeI++) {
                            if (null != teachRptArr && teachRptArr.length > 0) {
                                String path = gradeName + File.separator + schlist.get(schI).getName();
                                for (int childRptI = 1; childRptI < teachRptArr.length; childRptI++) {
                                    Resource cObj = (Resource) this.reportDao.getRptNameFromRes(teachRptArr[childRptI]);
                                    String para = cObj.getPara();
                                    JSONObject jsonObject = JSONObject.fromObject(para);
                                    String type = jsonObject.getString("type");
                                    String isShowAllGrade = jsonObject.getString("isShowAllGrade");
                                    String isClassCheck = jsonObject.getString("ischeck");
                                    String isShowSubject = jsonObject.getString("showSubject");
                                    jsonObject.getString("isShowSubjectType");
                                    jsonObject.getString("showStep");
                                    String path2 = path;
                                    if (null == teachRptArr[childRptI] || !teachRptArr[childRptI].equals("62328")) {
                                        path2 = path2 + File.separator + stuTypelist.get(stuTypeI).getName();
                                    }
                                    if (null != isShowSubject && isShowSubject.equals("true")) {
                                        path2 = path2 + File.separator + subjectName;
                                    }
                                    if (null != type && type.equals("2")) {
                                        path2 = path2 + File.separator + cObj.getName();
                                    }
                                    String fileRoot = makeDirMethod(exlHome, path2);
                                    new ArrayList();
                                    switch (Integer.valueOf(teachRptArr[childRptI]).intValue()) {
                                        case 62100:
                                            if (null != type && type.equals("2") && null != (clalist23 = this.analy.getClass(examNum, subjectNum, schlist.get(schI).getNum(), gradeNum, stuTypelist.get(stuTypeI).getNum(), levelclass, subCompose, islevel)) && clalist23.size() > 0) {
                                                for (int claI = 0; claI < clalist23.size(); claI++) {
                                                    exportMethod_scoreList(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, clalist23.get(claI).getNum(), "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, clalist23.get(claI).getName(), subjectName, dirPath, "", "", "0", viewRankInfo, subCompose, islevel, sPid, "1", "1");
                                                }
                                                break;
                                            }
                                            break;
                                        case 62101:
                                            if (null != type && type.equals("2") && null != (clalist13 = this.analy.getClass(examNum, subjectNum, schlist.get(schI).getNum(), gradeNum, stuTypelist.get(stuTypeI).getNum(), levelclass, subCompose, islevel)) && clalist13.size() > 0) {
                                                String allClaStr = "";
                                                for (int claI2 = 0; claI2 < clalist13.size(); claI2++) {
                                                    allClaStr = allClaStr + clalist13.get(claI2).getNum() + Const.STRING_SEPERATOR;
                                                    exportMethod_stuanalyAction(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, clalist13.get(claI2).getNum(), "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, clalist13.get(claI2).getName(), subjectName, dirPath, "", "", subCompose, teachUnit, teachUnit_s);
                                                }
                                                if (null != isShowAllGrade && isShowAllGrade.equals("true")) {
                                                    exportMethod_stuanalyAction(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, Const.class_grade, "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", Const.EXPORTREPORT_c_exam, cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, "全年级", subjectName, dirPath, "", "", subCompose, teachUnit, teachUnit_s);
                                                    if (null != isClassCheck && isClassCheck.equals("true")) {
                                                        exportMethod_stuanalyAction(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, allClaStr + Const.class_grade, "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, null, subjectName, dirPath, "", "", subCompose, teachUnit, teachUnit_s);
                                                    }
                                                } else if (null != isClassCheck && isClassCheck.equals("true")) {
                                                    exportMethod_stuanalyAction(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, allClaStr.substring(0, allClaStr.length() - 1), "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, null, subjectName, dirPath, "", "", subCompose, teachUnit, teachUnit_s);
                                                }
                                                break;
                                            }
                                            break;
                                        case 62103:
                                            if (null != type && type.equals("2") && null != (clalist21 = this.analy.getClass(examNum, subjectNum, schlist.get(schI).getNum(), gradeNum, stuTypelist.get(stuTypeI).getNum(), levelclass, subCompose, islevel)) && clalist21.size() > 0) {
                                                String allClaStr2 = "";
                                                for (int claI3 = 0; claI3 < clalist21.size(); claI3++) {
                                                    allClaStr2 = allClaStr2 + clalist21.get(claI3).getNum() + Const.STRING_SEPERATOR;
                                                    exportT3Jxl_quesScoreAction(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, clalist21.get(claI3).getNum(), "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, clalist21.get(claI3).getName(), subjectName, dirPath, "", "0", subCompose, teachUnit, contrastObject, teachUnit_s, contrasct_s);
                                                }
                                                if (null != isShowAllGrade && isShowAllGrade.equals("true")) {
                                                    if (null != isClassCheck && isClassCheck.equals("true")) {
                                                        exportT3Jxl_quesScoreAction(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, allClaStr2 + Const.class_grade, "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, null, subjectName, dirPath, "", "0", subCompose, teachUnit, contrastObject, teachUnit_s, contrasct_s);
                                                    }
                                                } else if (null != isClassCheck && isClassCheck.equals("true")) {
                                                    exportT3Jxl_quesScoreAction(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, allClaStr2.substring(0, allClaStr2.length() - 1), "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, null, subjectName, dirPath, "", "0", subCompose, teachUnit, contrastObject, teachUnit_s, contrasct_s);
                                                }
                                                break;
                                            }
                                            break;
                                        case 62104:
                                            if (null != type && type.equals("2") && null != (clalist22 = this.analy.getClass(examNum, subjectNum, schlist.get(schI).getNum(), gradeNum, stuTypelist.get(stuTypeI).getNum(), levelclass, subCompose, islevel)) && clalist22.size() > 0) {
                                                for (int claI4 = 0; claI4 < clalist22.size(); claI4++) {
                                                    objAnaly_exportMethod(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, clalist22.get(claI4).getNum(), "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, clalist22.get(claI4).getName(), subjectName, dirPath, "", "", "2", subCompose);
                                                }
                                                if (null != isShowAllGrade && isShowAllGrade.equals("true")) {
                                                    objAnaly_exportMethod(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, Const.class_grade, "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, "全年级", subjectName, dirPath, "", "", "2", subCompose);
                                                    break;
                                                }
                                            }
                                            break;
                                        case 62105:
                                            if (null != type && type.equals("2") && null != (clalist17 = this.analy.getClass(examNum, subjectNum, schlist.get(schI).getNum(), gradeNum, stuTypelist.get(stuTypeI).getNum(), levelclass, subCompose, islevel)) && clalist17.size() > 0) {
                                                String allClaStr3 = "";
                                                for (int claI5 = 0; claI5 < clalist17.size(); claI5++) {
                                                    allClaStr3 = allClaStr3 + clalist17.get(claI5).getNum() + Const.STRING_SEPERATOR;
                                                    totsubAction_exportMethod(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, clalist17.get(claI5).getNum(), "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, clalist17.get(claI5).getName(), subjectName, dirPath, "", "");
                                                }
                                                if (null != isShowAllGrade && isShowAllGrade.equals("true")) {
                                                    totsubAction_exportMethod(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, Const.class_grade, "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, "全年级", subjectName, dirPath, "", "");
                                                    if (null != isClassCheck && isClassCheck.equals("true")) {
                                                        totsubAction_exportMethod(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, allClaStr3 + Const.class_grade, "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, null, subjectName, dirPath, "", "");
                                                    }
                                                } else if (null != isClassCheck && isClassCheck.equals("true")) {
                                                    totsubAction_exportMethod(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, allClaStr3.substring(0, allClaStr3.length() - 1), "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, null, subjectName, dirPath, "", "");
                                                }
                                                break;
                                            }
                                            break;
                                        case 62106:
                                            if (null != type && type.equals("2") && null != (clalist20 = this.analy.getClass(examNum, subjectNum, schlist.get(schI).getNum(), gradeNum, stuTypelist.get(stuTypeI).getNum(), levelclass, subCompose, islevel)) && clalist20.size() > 0) {
                                                String allClaStr4 = "";
                                                for (int claI6 = 0; claI6 < clalist20.size(); claI6++) {
                                                    allClaStr4 = allClaStr4 + clalist20.get(claI6).getNum() + Const.STRING_SEPERATOR;
                                                    knledgScore_exportMethod(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, clalist20.get(claI6).getNum(), "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, clalist20.get(claI6).getName(), subjectName, dirPath, "", subCompose, teachUnit, teachUnit_s, contrastObject, contrasct_s);
                                                }
                                                if (null != isShowAllGrade && isShowAllGrade.equals("true")) {
                                                    knledgScore_exportMethod(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, Const.class_grade, "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, "全年级", subjectName, dirPath, "", subCompose, teachUnit, teachUnit_s, contrastObject, contrasct_s);
                                                    if (null != isClassCheck && isClassCheck.equals("true")) {
                                                        knledgScore_exportMethod(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, allClaStr4 + Const.class_grade, "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, null, subjectName, dirPath, "", subCompose, teachUnit, teachUnit_s, contrastObject, contrasct_s);
                                                    }
                                                } else if (null != isClassCheck && isClassCheck.equals("true")) {
                                                    knledgScore_exportMethod(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, allClaStr4.substring(0, allClaStr4.length() - 1), "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, null, subjectName, dirPath, "", subCompose, teachUnit, teachUnit_s, contrastObject, contrasct_s);
                                                }
                                                break;
                                            }
                                            break;
                                        case 62107:
                                            if (null != type && type.equals("2") && null != (clalist16 = this.analy.getClass(examNum, subjectNum, schlist.get(schI).getNum(), gradeNum, stuTypelist.get(stuTypeI).getNum(), levelclass, subCompose, islevel)) && clalist16.size() > 0) {
                                                String allClaStr5 = "";
                                                for (int claI7 = 0; claI7 < clalist16.size(); claI7++) {
                                                    allClaStr5 = allClaStr5 + clalist16.get(claI7).getNum() + Const.STRING_SEPERATOR;
                                                    knowScoreRank_exportMethod(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, clalist16.get(claI7).getNum(), "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, clalist16.get(claI7).getName(), subjectName, dirPath, "");
                                                }
                                                if (null != isShowAllGrade && isShowAllGrade.equals("true")) {
                                                    knowScoreRank_exportMethod(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, Const.class_grade, "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, "全年级", subjectName, dirPath, "");
                                                    if (null != isClassCheck && isClassCheck.equals("true")) {
                                                        knowScoreRank_exportMethod(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, allClaStr5 + Const.class_grade, "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, null, subjectName, dirPath, "");
                                                    }
                                                } else if (null != isClassCheck && isClassCheck.equals("true")) {
                                                    knowScoreRank_exportMethod(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, allClaStr5.substring(0, allClaStr5.length() - 1), "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, null, subjectName, dirPath, "");
                                                }
                                                break;
                                            }
                                            break;
                                        case 62108:
                                            if (null != type && type.equals("2") && null != (clalist19 = this.analy.getClass(examNum, subjectNum, schlist.get(schI).getNum(), gradeNum, stuTypelist.get(stuTypeI).getNum(), levelclass, subCompose, islevel)) && clalist19.size() > 0) {
                                                String allClaStr6 = "";
                                                for (int claI8 = 0; claI8 < clalist19.size(); claI8++) {
                                                    allClaStr6 = allClaStr6 + clalist19.get(claI8).getNum() + Const.STRING_SEPERATOR;
                                                    abilityScore_exportMethod(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, clalist19.get(claI8).getNum(), "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, clalist19.get(claI8).getName(), subjectName, dirPath, "", subCompose, teachUnit, teachUnit_s, contrastObject, contrasct_s);
                                                }
                                                if (null != isShowAllGrade && isShowAllGrade.equals("true")) {
                                                    abilityScore_exportMethod(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, Const.class_grade, "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, "全年级", subjectName, dirPath, "", subCompose, teachUnit, teachUnit_s, contrastObject, contrasct_s);
                                                    if (null != isClassCheck && isClassCheck.equals("true")) {
                                                        abilityScore_exportMethod(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, allClaStr6 + Const.class_grade, "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, null, subjectName, dirPath, "", subCompose, teachUnit, teachUnit_s, contrastObject, contrasct_s);
                                                    }
                                                } else if (null != isClassCheck && isClassCheck.equals("true")) {
                                                    abilityScore_exportMethod(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, allClaStr6.substring(0, allClaStr6.length() - 1), "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, null, subjectName, dirPath, "", subCompose, teachUnit, teachUnit_s, contrastObject, contrasct_s);
                                                }
                                                break;
                                            }
                                            break;
                                        case 62109:
                                            if (null != type && type.equals("2") && null != (clalist15 = this.analy.getClass(examNum, subjectNum, schlist.get(schI).getNum(), gradeNum, stuTypelist.get(stuTypeI).getNum(), levelclass, subCompose, islevel)) && clalist15.size() > 0) {
                                                String allClaStr7 = "";
                                                for (int claI9 = 0; claI9 < clalist15.size(); claI9++) {
                                                    allClaStr7 = allClaStr7 + clalist15.get(claI9).getNum() + Const.STRING_SEPERATOR;
                                                    abltyScoreRank_exportMethod(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, clalist15.get(claI9).getNum(), "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, clalist15.get(claI9).getName(), subjectName, dirPath, "");
                                                }
                                                if (null != isShowAllGrade && isShowAllGrade.equals("true")) {
                                                    abltyScoreRank_exportMethod(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, Const.class_grade, "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, "全年级", subjectName, dirPath, "");
                                                    if (null != isClassCheck && isClassCheck.equals("true")) {
                                                        abltyScoreRank_exportMethod(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, allClaStr7 + Const.class_grade, "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, null, subjectName, dirPath, "");
                                                    }
                                                } else if (null != isClassCheck && isClassCheck.equals("true")) {
                                                    abltyScoreRank_exportMethod(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, allClaStr7.substring(0, allClaStr7.length() - 1), "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, null, subjectName, dirPath, "");
                                                }
                                                break;
                                            }
                                            break;
                                        case 62110:
                                            if (null != type && type.equals("2") && null != (clalist12 = this.analy.getClass(examNum, subjectNum, schlist.get(schI).getNum(), gradeNum, stuTypelist.get(stuTypeI).getNum(), levelclass, subCompose, islevel)) && clalist12.size() > 0) {
                                                for (int claI10 = 0; claI10 < clalist12.size(); claI10++) {
                                                    spTableAction_exportSp(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, clalist12.get(claI10).getNum(), "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, clalist12.get(claI10).getName(), subjectName, dirPath, "", "", islevel, subCompose);
                                                }
                                                break;
                                            }
                                            break;
                                        case 62112:
                                            if (null != type && type.equals("2") && null != (clalist18 = this.analy.getClass(examNum, subjectNum, schlist.get(schI).getNum(), gradeNum, stuTypelist.get(stuTypeI).getNum(), levelclass, subCompose, islevel)) && clalist18.size() > 0) {
                                                String allClaStr8 = "";
                                                for (int claI11 = 0; claI11 < clalist18.size(); claI11++) {
                                                    allClaStr8 = allClaStr8 + clalist18.get(claI11).getNum() + Const.STRING_SEPERATOR;
                                                    qtypeScore_exportgetData(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, clalist18.get(claI11).getNum(), "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, clalist18.get(claI11).getName(), subjectName, dirPath, "", subCompose, teachUnit, teachUnit_s, contrastObject, contrasct_s);
                                                }
                                                if (null != isShowAllGrade && isShowAllGrade.equals("true")) {
                                                    qtypeScore_exportgetData(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, Const.class_grade, "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, "全年级", subjectName, dirPath, "", subCompose, teachUnit, teachUnit_s, contrastObject, contrasct_s);
                                                    if (null != isClassCheck && isClassCheck.equals("true")) {
                                                        qtypeScore_exportgetData(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, allClaStr8 + Const.class_grade, "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, null, subjectName, dirPath, "", subCompose, teachUnit, teachUnit_s, contrastObject, contrasct_s);
                                                    }
                                                } else if (null != isClassCheck && isClassCheck.equals("true")) {
                                                    qtypeScore_exportgetData(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, allClaStr8.substring(0, allClaStr8.length() - 1), "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, null, subjectName, dirPath, "", subCompose, teachUnit, teachUnit_s, contrastObject, contrasct_s);
                                                }
                                                break;
                                            }
                                            break;
                                        case 62113:
                                            if (null != type && type.equals("2") && null != (clalist14 = this.analy.getClass(examNum, subjectNum, schlist.get(schI).getNum(), gradeNum, stuTypelist.get(stuTypeI).getNum(), levelclass, subCompose, islevel)) && clalist14.size() > 0) {
                                                String allClaStr9 = "";
                                                for (int claI12 = 0; claI12 < clalist14.size(); claI12++) {
                                                    allClaStr9 = allClaStr9 + clalist14.get(claI12).getNum() + Const.STRING_SEPERATOR;
                                                    qtypeScoreRank_exportMethod(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, clalist14.get(claI12).getNum(), "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, clalist14.get(claI12).getName(), subjectName, dirPath, "");
                                                }
                                                if (null != isShowAllGrade && isShowAllGrade.equals("true")) {
                                                    qtypeScoreRank_exportMethod(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, Const.class_grade, "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, "全年级", subjectName, dirPath, "");
                                                    if (null != isClassCheck && isClassCheck.equals("true")) {
                                                        qtypeScoreRank_exportMethod(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, allClaStr9 + Const.class_grade, "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, null, subjectName, dirPath, "");
                                                    }
                                                } else if (null != isClassCheck && isClassCheck.equals("true")) {
                                                    qtypeScoreRank_exportMethod(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, allClaStr9.substring(0, allClaStr9.length() - 1), "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, null, subjectName, dirPath, "");
                                                }
                                                break;
                                            }
                                            break;
                                        case 62212:
                                            break;
                                        case 62213:
                                            if (null != type && type.equals("2") && null != (clalist11 = this.analy.getClass(examNum, subjectNum, schlist.get(schI).getNum(), gradeNum, stuTypelist.get(stuTypeI).getNum(), levelclass, subCompose, islevel)) && clalist11.size() > 0) {
                                                String allClaStr10 = "";
                                                for (int claI13 = 0; claI13 < clalist11.size(); claI13++) {
                                                    allClaStr10 = allClaStr10 + clalist11.get(claI13).getNum() + Const.STRING_SEPERATOR;
                                                    G2_exportg2(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, clalist11.get(claI13).getNum(), "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, clalist11.get(claI13).getName(), subjectName, dirPath, "", "", "0", subCompose, islevel, "0");
                                                }
                                                if (null != isShowAllGrade && isShowAllGrade.equals("true")) {
                                                    G2_exportg2(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, Const.class_grade, "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", Const.EXPORTREPORT_c_exam, cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, "全年级", subjectName, dirPath, "", "", "0", subCompose, islevel, "0");
                                                    if (null != isClassCheck && isClassCheck.equals("true")) {
                                                        G2_exportg2(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, allClaStr10 + Const.class_grade, "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, null, subjectName, dirPath, "", "", "0", subCompose, islevel, "0");
                                                    }
                                                } else if (null != isClassCheck && isClassCheck.equals("true")) {
                                                    G2_exportg2(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, allClaStr10.substring(0, allClaStr10.length() - 1), "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, null, subjectName, dirPath, "", "", "0", subCompose, islevel, "0");
                                                }
                                                break;
                                            }
                                            break;
                                        case 62214:
                                            G3_exportg3("-1", examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, null, "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, null, subjectName, dirPath, "", "", "0");
                                            break;
                                        case 62216:
                                            if (null != type && type.equals("2") && null != (clalist10 = this.analy.getClass(examNum, subjectNum, schlist.get(schI).getNum(), gradeNum, stuTypelist.get(stuTypeI).getNum(), levelclass, subCompose, islevel)) && clalist10.size() > 0) {
                                                String allClaStr11 = "";
                                                for (int claI14 = 0; claI14 < clalist10.size(); claI14++) {
                                                    allClaStr11 = allClaStr11 + clalist10.get(claI14).getNum() + Const.STRING_SEPERATOR;
                                                    G5_exportg3(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, clalist10.get(claI14).getNum(), "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, clalist10.get(claI14).getName(), subjectName, dirPath, "", "0", subCompose, islevel);
                                                }
                                                if (null != isShowAllGrade && isShowAllGrade.equals("true")) {
                                                    G5_exportg3(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, Const.class_grade, "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", Const.EXPORTREPORT_c_exam, cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, "全年级", subjectName, dirPath, "", "0", subCompose, islevel);
                                                    if (null != isClassCheck && isClassCheck.equals("true")) {
                                                        G5_exportg3(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, allClaStr11 + Const.class_grade, "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, null, subjectName, dirPath, "", "0", subCompose, islevel);
                                                    }
                                                } else if (null != isClassCheck && isClassCheck.equals("true")) {
                                                    G5_exportg3(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, allClaStr11.substring(0, allClaStr11.length() - 1), "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, null, subjectName, dirPath, "", "0", subCompose, islevel);
                                                }
                                                break;
                                            }
                                            break;
                                        case 62217:
                                            if (null != type && type.equals("2") && null != (clalist9 = this.analy.getClass(examNum, subjectNum, schlist.get(schI).getNum(), gradeNum, stuTypelist.get(stuTypeI).getNum(), levelclass, subCompose, islevel)) && clalist9.size() > 0) {
                                                String allClaStr12 = "";
                                                for (int claI15 = 0; claI15 < clalist9.size(); claI15++) {
                                                    allClaStr12 = allClaStr12 + clalist9.get(claI15).getNum() + Const.STRING_SEPERATOR;
                                                    G6_g6export(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, clalist9.get(claI15).getNum(), "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, clalist9.get(claI15).getName(), subjectName, dirPath, 0, "", "0", "0", "0", "1", subCompose, islevel, "1", "1");
                                                }
                                                if (null != isShowAllGrade && isShowAllGrade.equals("true")) {
                                                    G6_g6export(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, Const.class_grade, "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, "全年级", subjectName, dirPath, 0, "", "0", "0", "0", "1", subCompose, islevel, "1", "1");
                                                    if (null != isClassCheck && isClassCheck.equals("true")) {
                                                        G6_g6export(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, allClaStr12 + Const.class_grade, "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, null, subjectName, dirPath, 0, "", "0", "0", "0", "1", subCompose, islevel, "1", "1");
                                                    }
                                                } else if (null != isClassCheck && isClassCheck.equals("true")) {
                                                    G6_g6export(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, allClaStr12.substring(0, allClaStr12.length() - 1), "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, null, subjectName, dirPath, 0, "", "0", "0", "0", "1", subCompose, islevel, "1", "1");
                                                }
                                                break;
                                            }
                                            break;
                                        case 62218:
                                            if (null != type && type.equals("2") && null != (clalist8 = this.analy.getClass(examNum, subjectNum, schlist.get(schI).getNum(), gradeNum, stuTypelist.get(stuTypeI).getNum(), levelclass, subCompose, islevel)) && clalist8.size() > 0) {
                                                String allClaStr13 = "";
                                                for (int claI16 = 0; claI16 < clalist8.size(); claI16++) {
                                                    allClaStr13 = allClaStr13 + clalist8.get(claI16).getNum() + Const.STRING_SEPERATOR;
                                                    G7_g7export(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, clalist8.get(claI16).getNum(), "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, clalist8.get(claI16).getName(), subjectName, dirPath, "", "", "0", subCompose);
                                                }
                                                break;
                                            }
                                            break;
                                        case 62219:
                                            if (null != type && type.equals("2") && null != (clalist7 = this.analy.getClass(examNum, subjectNum, schlist.get(schI).getNum(), gradeNum, stuTypelist.get(stuTypeI).getNum(), levelclass, subCompose, islevel)) && clalist7.size() > 0) {
                                                String allClaStr14 = "";
                                                for (int claI17 = 0; claI17 < clalist7.size(); claI17++) {
                                                    allClaStr14 = allClaStr14 + clalist7.get(claI17).getNum() + Const.STRING_SEPERATOR;
                                                    G8_g8export(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, clalist7.get(claI17).getNum(), "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, clalist7.get(claI17).getName(), subjectName, dirPath, "", "0", subCompose, "F");
                                                }
                                                if (null != isShowAllGrade && isShowAllGrade.equals("true")) {
                                                    G8_g8export(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, Const.class_grade, "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, "全年级", subjectName, dirPath, "", "0", subCompose, "F");
                                                    if (null != isClassCheck && isClassCheck.equals("true")) {
                                                        G8_g8export(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, allClaStr14 + Const.class_grade, "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, null, subjectName, dirPath, "", "0", subCompose, "F");
                                                    }
                                                } else if (null != isClassCheck && isClassCheck.equals("true")) {
                                                    G8_g8export(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, allClaStr14.substring(0, allClaStr14.length() - 1), "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, null, subjectName, dirPath, "", "0", subCompose, "F");
                                                }
                                                break;
                                            }
                                            break;
                                        case 62321:
                                            if (null != type && type.equals("2") && null != (clalist6 = this.analy.getClass(examNum, subjectNum, schlist.get(schI).getNum(), gradeNum, stuTypelist.get(stuTypeI).getNum(), levelclass, subCompose, islevel)) && clalist6.size() > 0) {
                                                String allClaStr15 = "";
                                                for (int claI18 = 0; claI18 < clalist6.size(); claI18++) {
                                                    allClaStr15 = allClaStr15 + clalist6.get(claI18).getNum() + Const.STRING_SEPERATOR;
                                                    scoreSection_exportgetData("-1", examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, clalist6.get(claI18).getNum(), "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, clalist6.get(claI18).getName(), subjectName, dirPath, "", "0", subCompose, islevel, teachUnit, teachUnit_s, contrastObject, contrasct_s);
                                                }
                                                if (null != isShowAllGrade && isShowAllGrade.equals("true")) {
                                                    scoreSection_exportgetData("-1", examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, Const.class_grade, "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, "全年级", subjectName, dirPath, "", "0", subCompose, islevel, teachUnit, teachUnit_s, contrastObject, contrasct_s);
                                                    if (null != isClassCheck && isClassCheck.equals("true")) {
                                                        scoreSection_exportgetData("-1", examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, allClaStr15 + Const.class_grade, "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, null, subjectName, dirPath, "", "0", subCompose, islevel, teachUnit, teachUnit_s, contrastObject, contrasct_s);
                                                    }
                                                } else if (null != isClassCheck && isClassCheck.equals("true")) {
                                                    scoreSection_exportgetData("-1", examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, allClaStr15.substring(0, allClaStr15.length() - 1), "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, null, subjectName, dirPath, "", "0", subCompose, islevel, teachUnit, teachUnit_s, contrastObject, contrasct_s);
                                                }
                                                break;
                                            }
                                            break;
                                        case 62322:
                                            examScoreVeiw_exportgetData("", examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, null, "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, null, subjectName, dirPath, "", "0", subCompose);
                                            break;
                                        case 62323:
                                            allSubjectAvgVeiw_exportgetData("-1", examNum, gradeNum, schlist.get(schI).getNum(), null, null, "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, null, null, dirPath, "", "0", subCompose, teachUnit, teachUnit_s);
                                            break;
                                        case 62324:
                                            if (null != type && type.equals("2") && null != (clalist5 = this.analy.getClass(examNum, subjectNum, schlist.get(schI).getNum(), gradeNum, stuTypelist.get(stuTypeI).getNum(), levelclass, subCompose, islevel)) && clalist5.size() > 0) {
                                                String allClaStr16 = "";
                                                for (int claI19 = 0; claI19 < clalist5.size(); claI19++) {
                                                    allClaStr16 = allClaStr16 + clalist5.get(claI19).getNum() + Const.STRING_SEPERATOR;
                                                    moreExamOnesjt_exportgetData(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, clalist5.get(claI19).getNum(), "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, clalist5.get(claI19).getName(), subjectName, dirPath, "", "0", subCompose, islevel);
                                                }
                                                if (null != isShowAllGrade && isShowAllGrade.equals("true")) {
                                                    moreExamOnesjt_exportgetData(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, Const.class_grade, "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, "全年级", subjectName, dirPath, "", "0", subCompose, islevel);
                                                    if (null != isClassCheck && isClassCheck.equals("true")) {
                                                        moreExamOnesjt_exportgetData(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, allClaStr16 + Const.class_grade, "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, null, subjectName, dirPath, "", "0", subCompose, islevel);
                                                    }
                                                } else if (null != isClassCheck && isClassCheck.equals("true")) {
                                                    moreExamOnesjt_exportgetData(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, allClaStr16.substring(0, allClaStr16.length() - 1), "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, null, subjectName, dirPath, "", "0", subCompose, islevel);
                                                }
                                                break;
                                            }
                                            break;
                                        case 62325:
                                            if (null != type && type.equals("2") && null != (clalist4 = this.analy.getClass(examNum, subjectNum, schlist.get(schI).getNum(), gradeNum, stuTypelist.get(stuTypeI).getNum(), levelclass, subCompose, islevel)) && clalist4.size() > 0) {
                                                String allClaStr17 = "";
                                                for (int claI20 = 0; claI20 < clalist4.size(); claI20++) {
                                                    allClaStr17 = allClaStr17 + clalist4.get(claI20).getNum() + Const.STRING_SEPERATOR;
                                                    stuImproveFallAnaly_exportgetData(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, clalist4.get(claI20).getNum(), "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", cexamNum, cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, clalist4.get(claI20).getName(), subjectName, dirPath, "", "0", subCompose, islevel);
                                                }
                                                if (null != isShowAllGrade && isShowAllGrade.equals("true")) {
                                                    stuImproveFallAnaly_exportgetData(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, Const.class_grade, "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", cexamNum, cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, "全年级", subjectName, dirPath, "", "0", subCompose, islevel);
                                                    if (null != isClassCheck && isClassCheck.equals("true")) {
                                                        stuImproveFallAnaly_exportgetData(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, allClaStr17 + Const.class_grade, "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", cexamNum, cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, null, subjectName, dirPath, "", "0", subCompose, islevel);
                                                    }
                                                } else if (null != isClassCheck && isClassCheck.equals("true")) {
                                                    stuImproveFallAnaly_exportgetData(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, allClaStr17.substring(0, allClaStr17.length() - 1), "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", cexamNum, cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, null, subjectName, dirPath, "", "0", subCompose, islevel);
                                                }
                                                break;
                                            }
                                            break;
                                        case 62326:
                                            allSubjectAvgVeiw_exportgetData("-1", examNum, gradeNum, schlist.get(schI).getNum(), null, null, "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, null, null, dirPath, "", "0", subCompose, teachUnit, teachUnit_s);
                                            break;
                                        case 62327:
                                            if (null != type && type.equals("2") && null != (clalist3 = this.analy.getClass(examNum, subjectNum, schlist.get(schI).getNum(), gradeNum, stuTypelist.get(stuTypeI).getNum(), levelclass, subCompose, islevel)) && clalist3.size() > 0) {
                                                String allClaStr18 = "";
                                                for (int claI21 = 0; claI21 < clalist3.size(); claI21++) {
                                                    allClaStr18 = allClaStr18 + clalist3.get(claI21).getNum() + Const.STRING_SEPERATOR;
                                                    teachertopStu_exportgetData(examNum, gradeNum, schlist.get(schI).getNum(), null, clalist3.get(claI21).getNum(), "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, clalist3.get(claI21).getName(), null, dirPath, "", "0", subCompose, islevel);
                                                }
                                                if (null != isShowAllGrade && isShowAllGrade.equals("true")) {
                                                    teachertopStu_exportgetData(examNum, gradeNum, schlist.get(schI).getNum(), null, Const.class_grade, "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, "全年级", null, dirPath, "", "0", subCompose, islevel);
                                                    if (null != isClassCheck && isClassCheck.equals("true")) {
                                                        teachertopStu_exportgetData(examNum, gradeNum, schlist.get(schI).getNum(), null, allClaStr18 + Const.class_grade, "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, null, null, dirPath, "", "0", subCompose, islevel);
                                                    }
                                                } else if (null != isClassCheck && isClassCheck.equals("true")) {
                                                    teachertopStu_exportgetData(examNum, gradeNum, schlist.get(schI).getNum(), null, allClaStr18.substring(0, allClaStr18.length() - 1), "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, null, null, dirPath, "", "0", subCompose, islevel);
                                                }
                                                break;
                                            }
                                            break;
                                        case 62328:
                                            teaScoreAnaly_exportgetData(examNum, gradeNum, schlist.get(schI).getNum(), null, null, "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", cexamNum, cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, null, null, dirPath, "", "0", "0", subCompose, islevel, teachUnit, teachUnit_s);
                                            break;
                                        case 62329:
                                            oneSubAnaly_exportgetData("-1", examNum, gradeNum, schlist.get(schI).getNum(), null, null, "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, null, null, dirPath, "", "0", subCompose);
                                            break;
                                        case 62330:
                                            allSubAnaly_exportgetData("-1", examNum, gradeNum, schlist.get(schI).getNum(), null, null, "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, null, null, dirPath, "", "0", l2Allsubpassrait, subCompose, islevel);
                                            break;
                                        case 62331:
                                            upperLineAction_export_old(examNum, subjectNum, gradeNum, schlist.get(schI).getNum(), null, null, "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, null, null, dirPath, "");
                                            break;
                                        case 62332:
                                            doubleLineAction_exportData_old(examNum, subjectNum, gradeNum, schlist.get(schI).getNum(), null, null, "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, null, null, dirPath, "");
                                            break;
                                        case 63302:
                                            if (null != type && type.equals("2") && null != (clalist2 = this.analy.getClass(examNum, subjectNum, schlist.get(schI).getNum(), gradeNum, stuTypelist.get(stuTypeI).getNum(), levelclass, subCompose, islevel)) && clalist2.size() > 0) {
                                                String allClaStr19 = "";
                                                for (int claI22 = 0; claI22 < clalist2.size(); claI22++) {
                                                    allClaStr19 = allClaStr19 + clalist2.get(claI22).getNum() + Const.STRING_SEPERATOR;
                                                    c2_exportMethod(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, clalist2.get(claI22).getNum(), "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, clalist2.get(claI22).getName(), subjectName, dirPath, "", "");
                                                }
                                                if (null != isShowAllGrade && isShowAllGrade.equals("true")) {
                                                    c2_exportMethod(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, Const.class_grade, "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, "全年级", subjectName, dirPath, "", "");
                                                    if (null != isClassCheck && isClassCheck.equals("true")) {
                                                        c2_exportMethod(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, allClaStr19 + Const.class_grade, "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, null, subjectName, dirPath, "", "");
                                                    }
                                                } else if (null != isClassCheck && isClassCheck.equals("true")) {
                                                    c2_exportMethod(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, allClaStr19.substring(0, allClaStr19.length() - 1), "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, null, subjectName, dirPath, "", "");
                                                }
                                                break;
                                            }
                                            break;
                                        case 63303:
                                            subScoreTeacherAction_ExportClaTotalRankData(examNum, gradeNum, schlist.get(schI).getNum(), null, null, "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, null, null, dirPath, "");
                                            break;
                                        case 63304:
                                            teaScoreAnaly_exportgetData(examNum, gradeNum, schlist.get(schI).getNum(), null, null, "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, null, null, dirPath, "", "0", "0", subCompose, islevel, teachUnit, teachUnit_s);
                                            break;
                                        case 63305:
                                            teaScoreAnaly_exportgetData(examNum, gradeNum, schlist.get(schI).getNum(), null, null, "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, null, null, dirPath, "", "0", "0", subCompose, islevel, teachUnit, teachUnit_s);
                                            break;
                                        case 63306:
                                            c6_exportgetData(examNum, gradeNum, schlist.get(schI).getNum(), null, null, "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", cexamNum, cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, null, null, dirPath, "");
                                            break;
                                        case 63307:
                                            teaScoreAnaly_exportgetData(examNum, gradeNum, schlist.get(schI).getNum(), null, null, "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", cexamNum, cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, null, null, dirPath, "", "0", "0", subCompose, islevel, teachUnit, teachUnit_s);
                                            break;
                                        case 63308:
                                            c8_exportgetData(examNum, gradeNum, schlist.get(schI).getNum(), null, null, "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", cexamNum, cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, null, null, dirPath, "", "", subCompose);
                                            break;
                                        case 63309:
                                            if (null != type && type.equals("2") && null != (clalist = this.analy.getClass(examNum, subjectNum, schlist.get(schI).getNum(), gradeNum, stuTypelist.get(stuTypeI).getNum(), levelclass, subCompose, islevel)) && clalist.size() > 0) {
                                                String allClaStr20 = "";
                                                for (int claI23 = 0; claI23 < clalist.size(); claI23++) {
                                                    allClaStr20 = allClaStr20 + clalist.get(claI23).getNum() + Const.STRING_SEPERATOR;
                                                    c9_exportgetData(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, clalist.get(claI23).getNum(), "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, clalist.get(claI23).getName(), subjectName, dirPath, "", "", subCompose);
                                                }
                                                if (null != isShowAllGrade && isShowAllGrade.equals("true")) {
                                                    c9_exportgetData(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, Const.class_grade, "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, "全年级", subjectName, dirPath, "", "", subCompose);
                                                    if (null != isClassCheck && isClassCheck.equals("true")) {
                                                        c9_exportgetData(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, allClaStr20 + Const.class_grade, "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, null, subjectName, dirPath, "", "", subCompose);
                                                    }
                                                } else if (null != isClassCheck && isClassCheck.equals("true")) {
                                                    c9_exportgetData(examNum, gradeNum, schlist.get(schI).getNum(), subjectNum, allClaStr20.substring(0, allClaStr20.length() - 1), "stuId", stuTypelist.get(stuTypeI).getNum(), "0", "0", "10", "100", "", cObj.getName(), "T", "rptTitle", "F", "F", fileRoot, uri, loginUserNum, schlist.get(schI).getName(), gradeName, null, subjectName, dirPath, "", "", subCompose);
                                                }
                                                break;
                                            }
                                            break;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } catch (Exception e) {
            Log.info("报表导出", e);
        }
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String makeDirMethod(String root, String path) {
        File dir = new File(root + File.separator + path + File.separator);
        if (!dir.exists()) {
            dir.mkdirs();
        }
        return dir.toString();
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public File getRptExcelFile(String rpt_name, String root, String folderPath) {
        if (null != folderPath && !folderPath.equals("")) {
            root = root + folderPath + File.separator;
        }
        File dir = new File(root);
        if (!dir.exists()) {
            dir.mkdirs();
        }
        String path = dir + File.separator + rpt_name + ".xls";
        File excelFile = new File(path);
        try {
            if (!excelFile.exists()) {
                excelFile.createNewFile();
            } else {
                excelFile.delete();
                excelFile.createNewFile();
            }
        } catch (Exception e) {
            this.log.info("##---create文件.file.", e);
        }
        return excelFile;
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public File getRptExcelFileXLSX(String rpt_name, String root, String folderPath) {
        if (null != folderPath && !folderPath.equals("")) {
            root = root + folderPath + File.separator;
        }
        File dir = new File(root);
        if (!dir.exists()) {
            dir.mkdirs();
        }
        String path = dir + File.separator + rpt_name + ".xlsx";
        File excelFile = new File(path);
        try {
            if (!excelFile.exists()) {
                excelFile.createNewFile();
            } else {
                excelFile.delete();
                excelFile.createNewFile();
            }
        } catch (Exception e) {
            this.log.info("##---create文件.file.", e);
        }
        return excelFile;
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String methodZipAll(String url, String baseFolder, String folderName, String zipName) {
        deleteZipAll(baseFolder, zipName);
        String zipFileName = baseFolder.replace('\\', '/') + zipName + ".zip";
        compressAllZip(baseFolder, folderName, zipFileName);
        return (url.substring(0, url.lastIndexOf("/") + 1) + "ExportFolder/") + zipName + ".zip";
    }

    public String urlFilePath(String rpt_name, String path, String uri) {
        String aa = path + File.separator + rpt_name + ".xls";
        return uri.substring(0, uri.lastIndexOf("/") + 1) + aa;
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String exportMethod_scoreList(String examNum, String gradeNum, String schoolNum, String subjectNum, String classNum, String studentId, String studentType, String type, String source, String step, String sNum, String c_exam, String rpt_name, String isMoreSchool, String rptTitle, String isHistory, String isSaveWrite, String dirPath, String uri, String userNum, String schName, String gradeName, String className, String subjectName, String imgRoot, String all_class, String agent, String fufen, String viewRankInfo, String subCompose, String islevel, String sPid, String subDisplay, String shouxuanHide) {
        String rptTitle2 = this.sp.getHeaderStr(examNum, subjectNum, gradeNum, schoolNum, classNum, studentId, studentType, true, true, true, true, false, true, true, true, false, true, true, true, true, true, false, subCompose, fufen);
        new ArrayList();
        List list = this.reportService.getScoreList(examNum, gradeNum, schoolNum, subjectNum, classNum, studentType, type, source, "0", fufen, subCompose, islevel);
        String isDengji = this.system.getDengji(examNum, gradeNum, subjectNum, fufen);
        String viewRankOfScoreInfo = Configuration.getInstance().getViewRankOfScoreInfo();
        String folderPath = "reportExcel" + userNum;
        String folderName = "reportExcel" + userNum;
        String zipName = "reportExcel" + userNum;
        String isYufabu = this.reportService.isYufabu(examNum, gradeNum, subjectNum);
        String excelName = (null == gradeName || "".equals(gradeName)) ? rpt_name + "_" + gradeNum : rpt_name + "_" + gradeName;
        if (null != classNum && !"".equals(classNum) && !classNum.contains(Const.STRING_SEPERATOR)) {
            excelName = (null == className || "".equals(className)) ? excelName + "_" + classNum : excelName + "_" + className;
        }
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        String filePath = null;
        try {
            WritableWorkbook wwBook = Workbook.createWorkbook(excelFile);
            WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
            biaotis1.setAlignment(Alignment.LEFT);
            biaotis1.setVerticalAlignment(VerticalAlignment.CENTRE);
            WritableFont titles = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat title = new WritableCellFormat(titles);
            title.setAlignment(Alignment.LEFT);
            title.setVerticalAlignment(VerticalAlignment.CENTRE);
            title.setWrap(true);
            WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            WritableCellFormat cFormat1 = new WritableCellFormat(font1);
            cFormat1.setAlignment(Alignment.CENTRE);
            cFormat1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1.setBackground(Const.titleBackground_color);
            cFormat1.setWrap(true);
            WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat2 = new WritableCellFormat(font2);
            cFormat2.setAlignment(Alignment.CENTRE);
            cFormat2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2.setBackground(Const.textOuBackGround_color);
            cFormat2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2.setWrap(true);
            NumberFormat nf1 = new NumberFormat("0.0");
            WritableCellFormat cFormat2_1 = new WritableCellFormat(font2, nf1);
            cFormat2_1.setAlignment(Alignment.CENTRE);
            cFormat2_1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_1.setBackground(Const.textOuBackGround_color);
            cFormat2_1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_1.setWrap(true);
            WritableCellFormat cFormat2_2 = new WritableCellFormat(font2);
            cFormat2_2.setAlignment(Alignment.CENTRE);
            cFormat2_2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_2.setBackground(Const.textOuBackGround_color);
            cFormat2_2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_2.setWrap(true);
            WritableFont font2_bold = new WritableFont(WritableFont.ARIAL, 10, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat2_bold = new WritableCellFormat(font2_bold);
            cFormat2_bold.setAlignment(Alignment.CENTRE);
            cFormat2_bold.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_bold.setBackground(Const.textOuBackGround_color);
            cFormat2_bold.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_bold.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_bold.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_bold.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_bold.setWrap(true);
            NumberFormat nf2 = new NumberFormat("0.00");
            WritableCellFormat cFormat2_bold_2 = new WritableCellFormat(font2_bold, nf2);
            cFormat2_bold_2.setAlignment(Alignment.CENTRE);
            cFormat2_bold_2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_bold_2.setBackground(Const.textOuBackGround_color);
            cFormat2_bold_2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_bold_2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_bold_2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_bold_2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_bold_2.setWrap(true);
            WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat3 = new WritableCellFormat(font3);
            cFormat3.setAlignment(Alignment.CENTRE);
            cFormat3.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3.setBackground(Const.textJiBackGround_color);
            cFormat3.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3.setWrap(true);
            WritableCellFormat cFormat3_1 = new WritableCellFormat(font3, nf1);
            cFormat3_1.setAlignment(Alignment.CENTRE);
            cFormat3_1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_1.setBackground(Const.textJiBackGround_color);
            cFormat3_1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_1.setWrap(true);
            WritableCellFormat cFormat3_2 = new WritableCellFormat(font3);
            cFormat3_2.setAlignment(Alignment.CENTRE);
            cFormat3_2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_2.setBackground(Const.textJiBackGround_color);
            cFormat3_2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_2.setWrap(true);
            WritableFont font3_bold = new WritableFont(WritableFont.ARIAL, 10, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat3_bold = new WritableCellFormat(font3_bold);
            cFormat3_bold.setAlignment(Alignment.CENTRE);
            cFormat3_bold.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_bold.setBackground(Const.textJiBackGround_color);
            cFormat3_bold.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_bold.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_bold.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_bold.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_bold.setWrap(true);
            WritableCellFormat cFormat3_bold_2 = new WritableCellFormat(font3_bold, nf2);
            cFormat3_bold_2.setAlignment(Alignment.CENTRE);
            cFormat3_bold_2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_bold_2.setBackground(Const.textJiBackGround_color);
            cFormat3_bold_2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_bold_2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_bold_2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_bold_2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_bold_2.setWrap(true);
            try {
                try {
                    new ArrayList();
                    WritableSheet sheet = wwBook.createSheet("excel", 0);
                    sheet.getSettings().setShowGridLines(false);
                    Label biaotou = new Label(0, 0, rpt_name, biaotis1);
                    sheet.addCell(biaotou);
                    DecimalFormat df1 = new DecimalFormat("0.0");
                    DecimalFormat df2 = new DecimalFormat("0.00");
                    df1.setRoundingMode(RoundingMode.HALF_UP);
                    df2.setRoundingMode(RoundingMode.HALF_UP);
                    Label xinxi = new Label(0, 1, rptTitle2, title);
                    sheet.addCell(xinxi);
                    sheet.setRowView(1, Const.height_500);
                    String rankName = "总体排名";
                    if (subCompose != null && !subCompose.equals("0")) {
                        rankName = (sPid == null || !sPid.equals("1")) ? "组内排名" : "首选排名";
                    }
                    boolean isHebingRow = false;
                    if ("T".equals(isDengji) || ("1".equals(viewRankInfo) && "1".equals(viewRankOfScoreInfo))) {
                        isHebingRow = true;
                    }
                    int jj = 0;
                    Label studentNum = new Label(0, 2, "学号", cFormat1);
                    sheet.addCell(studentNum);
                    if (isHebingRow) {
                        sheet.mergeCells(0, 2, 0, 3);
                        jj = 1;
                    }
                    Label studentName = new Label(1, 2, "学生姓名", cFormat1);
                    sheet.addCell(studentName);
                    if (isHebingRow) {
                        sheet.mergeCells(1, 2, 1, 3);
                    }
                    int cc = 0;
                    if (shouxuanHide.equals("1")) {
                        Label sxkm = new Label(2, 2, "首选科目", cFormat1);
                        sheet.addCell(sxkm);
                        if (isHebingRow) {
                            sheet.mergeCells(2, 2, 2, 3);
                        }
                        Label xkzh = new Label(3, 2, "选科组合", cFormat1);
                        sheet.addCell(xkzh);
                        if (isHebingRow) {
                            sheet.mergeCells(3, 2, 3, 3);
                        }
                        cc = 2;
                    } else if (subDisplay.equals("1")) {
                        Label xkzh2 = new Label(2, 2, "选科组合", cFormat1);
                        sheet.addCell(xkzh2);
                        if (isHebingRow) {
                            sheet.mergeCells(2, 2, 2, 3);
                        }
                        cc = 1;
                    }
                    int index = 0;
                    if (!"1".equals(fufen) && subjectNum.length() >= 3) {
                        Label oqts = new Label(2 + cc, 2, "客观题总分", cFormat1);
                        sheet.addCell(oqts);
                        if (isHebingRow) {
                            sheet.mergeCells(2 + cc, 2, 2 + cc, 3);
                        }
                        Label sqts = new Label(3 + cc, 2, "主观题总分", cFormat1);
                        sheet.addCell(sqts);
                        if (isHebingRow) {
                            sheet.mergeCells(3 + cc, 2, 3 + cc, 3);
                        }
                        index = 2;
                    }
                    Label totalScore = new Label(2 + index + cc, 2, fufen.equals("1") ? "赋分" : "总分", cFormat1);
                    sheet.addCell(totalScore);
                    if (isHebingRow) {
                        sheet.mergeCells(2 + index + cc, 2, 2 + index + cc, 3);
                    }
                    sheet.setColumnView(0, 20);
                    sheet.setColumnView(1, 15);
                    sheet.setColumnView(2, 20);
                    sheet.setColumnView(3, 20);
                    sheet.setColumnView(4, 10);
                    int dengjiCount = 0;
                    if ("T".equals(isDengji)) {
                        Label dengjiName = new Label(3 + index + cc, 2, "等级", cFormat1);
                        sheet.addCell(dengjiName);
                        Label dengjixiao = new Label(3 + index + cc, 3, "校等级", cFormat1);
                        sheet.addCell(dengjixiao);
                        dengjiCount = 1;
                        if ("T".equals(isMoreSchool)) {
                            Label dengji = new Label(4 + index + cc, 3, "区等级", cFormat1);
                            sheet.addCell(dengji);
                            dengjiCount = 2;
                            sheet.mergeCells(3 + index + cc, 2, 3 + index + cc + 1, 2);
                        }
                    }
                    int ii = 0;
                    if (viewRankInfo != null && viewRankInfo.equals("1") && viewRankOfScoreInfo.equals("1")) {
                        Label rankname = new Label(3 + index + cc + dengjiCount, 2, rankName, cFormat1);
                        sheet.addCell(rankname);
                        Label classRanking = new Label(3 + index + cc + dengjiCount, 3, "班排", cFormat1);
                        sheet.addCell(classRanking);
                        Label gradeRanking = new Label(4 + index + cc + dengjiCount, 3, "校排", cFormat1);
                        sheet.addCell(gradeRanking);
                        sheet.setColumnView(3 + index + cc + dengjiCount, 15);
                        sheet.setColumnView(4 + index + cc + dengjiCount, 15);
                        ii = 2;
                        if (isMoreSchool.equals("T")) {
                            Label areaRanking = new Label(5 + index + cc + dengjiCount, 3, "区排", cFormat1);
                            sheet.addCell(areaRanking);
                            sheet.setColumnView(5 + index + cc + dengjiCount, 15);
                            ii = 3;
                        }
                        sheet.mergeCells(3 + index + cc + dengjiCount, 2, ((((3 + index) + cc) + dengjiCount) + ii) - 1, 2);
                    }
                    Label beizhu = new Label(3 + index + cc + dengjiCount + ii, 2, "备注", cFormat1);
                    sheet.addCell(beizhu);
                    sheet.setColumnView(3 + index + cc + dengjiCount + ii, 10);
                    if (isHebingRow) {
                        sheet.mergeCells(3 + index + cc + dengjiCount + ii, 2, 3 + index + cc + dengjiCount + ii, 3);
                    }
                    if (list.size() > 0) {
                        List list0 = (List) list.get(0);
                        Number avg_Oqt = new Number(2 + cc, list0.size() + 3 + jj, 0.0d);
                        sheet.addCell(avg_Oqt);
                        Number avg_Sqt = new Number(3 + cc, list0.size() + 3 + jj, 0.0d);
                        sheet.addCell(avg_Sqt);
                        Number avg_TotalScore = new Number(4 + cc, list0.size() + 3 + jj, 0.0d);
                        sheet.addCell(avg_TotalScore);
                        Double avg_total = Double.valueOf(0.0d);
                        Double avg_count_opts = Double.valueOf(0.0d);
                        Double avg_count_sqts = Double.valueOf(0.0d);
                        Integer stuCount = 0;
                        for (int i = 0; i < list0.size(); i++) {
                            if (i % 2 == 0) {
                                if (((Object[]) list0.get(i))[9].equals("缺考") || ((Object[]) list0.get(i))[9].equals("违纪") || ((Object[]) list0.get(i))[9].equals("零分")) {
                                    Label studentNums = new Label(0, i + 3 + jj, ((Object[]) list0.get(i))[1] + "", cFormat2);
                                    sheet.addCell(studentNums);
                                    Label studentNames = new Label(1, i + 3 + jj, ((Object[]) list0.get(i))[2] + "", cFormat2);
                                    sheet.addCell(studentNames);
                                    if (shouxuanHide.equals("1")) {
                                        Label sxkm1 = new Label(2, i + 3 + jj, ((Object[]) list0.get(i))[11] + "", cFormat2);
                                        sheet.addCell(sxkm1);
                                        Label xkzh1 = new Label(3, i + 3 + jj, ((Object[]) list0.get(i))[10] + "", cFormat2);
                                        sheet.addCell(xkzh1);
                                    } else if (subDisplay.equals("1")) {
                                        Label xkzh12 = new Label(2, i + 3 + jj, ((Object[]) list0.get(i))[10] + "", cFormat2);
                                        sheet.addCell(xkzh12);
                                    }
                                    if (!"1".equals(fufen) && subjectNum.length() >= 3) {
                                        Label oqtss = new Label(2 + cc, i + 3 + jj, "", cFormat2);
                                        sheet.addCell(oqtss);
                                        Label sqtss = new Label(3 + cc, i + 3 + jj, "", cFormat2);
                                        sheet.addCell(sqtss);
                                    }
                                    Label totalScores = new Label(2 + index + cc, i + 3 + jj, "", cFormat2);
                                    sheet.addCell(totalScores);
                                    if ("T".equals(isDengji)) {
                                        Label dengjixiao2 = new Label(3 + index + cc, i + 3 + jj, String.valueOf(((Object[]) list0.get(i))[15]), cFormat2);
                                        sheet.addCell(dengjixiao2);
                                        if (isMoreSchool.equals("T")) {
                                            Label dengji2 = new Label(4 + index + cc, i + 3 + jj, String.valueOf(((Object[]) list0.get(i))[14]), cFormat2);
                                            sheet.addCell(dengji2);
                                        }
                                    }
                                    if (viewRankInfo != null && viewRankInfo.equals("1") && viewRankOfScoreInfo.equals("1")) {
                                        Label classRankings = new Label(3 + index + cc + dengjiCount, i + 3 + jj, (String) ((Object[]) list0.get(i))[6], cFormat2);
                                        sheet.addCell(classRankings);
                                        Label gradeRankings = new Label(4 + index + cc + dengjiCount, i + 3 + jj, (String) ((Object[]) list0.get(i))[7], cFormat2);
                                        sheet.addCell(gradeRankings);
                                        if (isMoreSchool.equals("T")) {
                                            Label areaRankings = new Label(5 + index + cc + dengjiCount, i + 3 + jj, ((Object[]) list0.get(i))[8] + "", cFormat2);
                                            sheet.addCell(areaRankings);
                                        }
                                    }
                                    Label beizhus = new Label(3 + index + cc + dengjiCount + ii, i + 3 + jj, ((Object[]) list0.get(i))[9] + "", cFormat2);
                                    sheet.addCell(beizhus);
                                } else {
                                    if (!"总分科目不全".equals(((Object[]) list0.get(i))[9]) && !"不统计".equals(((Object[]) list0.get(i))[9])) {
                                        stuCount = Integer.valueOf(stuCount.intValue() + 1);
                                    }
                                    Label studentNums2 = new Label(0, i + 3 + jj, ((Object[]) list0.get(i))[1] + "", cFormat2);
                                    sheet.addCell(studentNums2);
                                    Label studentNames2 = new Label(1, i + 3 + jj, ((Object[]) list0.get(i))[2] + "", cFormat2);
                                    sheet.addCell(studentNames2);
                                    if (shouxuanHide.equals("1")) {
                                        Label sxkm12 = new Label(2, i + 3 + jj, ((Object[]) list0.get(i))[11] + "", cFormat2);
                                        sheet.addCell(sxkm12);
                                        Label xkzh13 = new Label(3, i + 3 + jj, ((Object[]) list0.get(i))[10] + "", cFormat2);
                                        sheet.addCell(xkzh13);
                                    } else if (subDisplay.equals("1")) {
                                        Label xkzh14 = new Label(2, i + 3 + jj, ((Object[]) list0.get(i))[10] + "", cFormat2);
                                        sheet.addCell(xkzh14);
                                    }
                                    if (!"1".equals(fufen) && subjectNum.length() >= 3) {
                                        String objectscore = Convert.toBigDecimal(df1.format(((Object[]) list0.get(i))[3])).stripTrailingZeros().toPlainString();
                                        Number oqtss2 = new Number(2 + cc, i + 3 + jj, Double.valueOf(objectscore).doubleValue(), cFormat2_2);
                                        sheet.addCell(oqtss2);
                                        if (null == isYufabu || !isYufabu.equals("2")) {
                                            String zhuscore = Convert.toBigDecimal(df1.format(((Object[]) list0.get(i))[4])).stripTrailingZeros().toPlainString();
                                            Number sqtss2 = new Number(3 + cc, i + 3 + jj, Double.valueOf(zhuscore).doubleValue(), cFormat2_2);
                                            sheet.addCell(sqtss2);
                                        } else {
                                            Label sqtss3 = new Label(3 + cc, i + 3 + jj, "--", cFormat2_2);
                                            sheet.addCell(sqtss3);
                                        }
                                    }
                                    String fullscore = Convert.toBigDecimal(df1.format(((Object[]) list0.get(i))[5])).stripTrailingZeros().toPlainString();
                                    Number totalScores2 = new Number(2 + index + cc, i + 3 + jj, Double.valueOf(fullscore).doubleValue(), cFormat2_2);
                                    sheet.addCell(totalScores2);
                                    if ("T".equals(isDengji)) {
                                        Label dengjixiao3 = new Label(3 + index + cc, i + 3 + jj, String.valueOf(((Object[]) list0.get(i))[15]), cFormat2);
                                        sheet.addCell(dengjixiao3);
                                        if (isMoreSchool.equals("T")) {
                                            Label dengji3 = new Label(4 + index + cc, i + 3 + jj, String.valueOf(((Object[]) list0.get(i))[14]), cFormat2);
                                            sheet.addCell(dengji3);
                                        }
                                    }
                                    if (viewRankInfo != null && viewRankInfo.equals("1") && viewRankOfScoreInfo.equals("1")) {
                                        if (StrUtil.isEmpty(Convert.toStr(((Object[]) list0.get(i))[6]))) {
                                            Label classRankings2 = new Label(3 + index + cc + dengjiCount, i + 3 + jj, ((Object[]) list0.get(i))[6] + "", cFormat2);
                                            sheet.addCell(classRankings2);
                                            Label gradeRankings2 = new Label(4 + index + cc + dengjiCount, i + 3 + jj, ((Object[]) list0.get(i))[7] + "", cFormat2);
                                            sheet.addCell(gradeRankings2);
                                            if (isMoreSchool.equals("T")) {
                                                Label areaRankings2 = new Label(5 + index + cc + dengjiCount, i + 3 + jj, ((Object[]) list0.get(i))[8] + "", cFormat2);
                                                sheet.addCell(areaRankings2);
                                            }
                                        } else {
                                            Number classRankings3 = new Number(3 + index + cc + dengjiCount, i + 3 + jj, Integer.valueOf(((Object[]) list0.get(i))[6] + "").intValue(), cFormat2);
                                            sheet.addCell(classRankings3);
                                            Number gradeRankings3 = new Number(4 + index + cc + dengjiCount, i + 3 + jj, Integer.valueOf(((Object[]) list0.get(i))[7] + "").intValue(), cFormat2);
                                            sheet.addCell(gradeRankings3);
                                            if (isMoreSchool.equals("T")) {
                                                Number areaRankings3 = new Number(5 + index + cc + dengjiCount, i + 3 + jj, Integer.valueOf(((Object[]) list0.get(i))[8] + "").intValue(), cFormat2);
                                                sheet.addCell(areaRankings3);
                                            }
                                        }
                                    }
                                    Label beizhus2 = new Label(3 + index + cc + dengjiCount + ii, i + 3 + jj, ((Object[]) list0.get(i))[9] + "", cFormat2);
                                    sheet.addCell(beizhus2);
                                }
                            } else if (((Object[]) list0.get(i))[9].equals("缺考") || ((Object[]) list0.get(i))[9].equals("违纪") || ((Object[]) list0.get(i))[9].equals("零分")) {
                                Label studentNums3 = new Label(0, i + 3 + jj, ((Object[]) list0.get(i))[1] + "", cFormat3);
                                sheet.addCell(studentNums3);
                                Label studentNames3 = new Label(1, i + 3 + jj, ((Object[]) list0.get(i))[2] + "", cFormat3);
                                sheet.addCell(studentNames3);
                                if (shouxuanHide.equals("1")) {
                                    Label sxkm13 = new Label(2, i + 3 + jj, ((Object[]) list0.get(i))[11] + "", cFormat3);
                                    sheet.addCell(sxkm13);
                                    Label xkzh15 = new Label(3, i + 3 + jj, ((Object[]) list0.get(i))[10] + "", cFormat3);
                                    sheet.addCell(xkzh15);
                                } else if (subDisplay.equals("1")) {
                                    Label xkzh16 = new Label(2, i + 3 + jj, ((Object[]) list0.get(i))[10] + "", cFormat3);
                                    sheet.addCell(xkzh16);
                                }
                                if (!"1".equals(fufen) && subjectNum.length() >= 3) {
                                    Label oqtss3 = new Label(2 + cc, i + 3 + jj, "", cFormat3);
                                    sheet.addCell(oqtss3);
                                    Label sqtss4 = new Label(3 + cc, i + 3 + jj, "", cFormat3);
                                    sheet.addCell(sqtss4);
                                }
                                Label totalScores3 = new Label(2 + index + cc, i + 3 + jj, "", cFormat3);
                                sheet.addCell(totalScores3);
                                if ("T".equals(isDengji)) {
                                    Label dengjixiao4 = new Label(3 + index + cc, i + 3 + jj, String.valueOf(((Object[]) list0.get(i))[15]), cFormat3);
                                    sheet.addCell(dengjixiao4);
                                    if (isMoreSchool.equals("T")) {
                                        Label dengji4 = new Label(4 + index + cc, i + 3 + jj, String.valueOf(((Object[]) list0.get(i))[14]), cFormat3);
                                        sheet.addCell(dengji4);
                                    }
                                }
                                if (viewRankInfo != null && viewRankInfo.equals("1") && viewRankOfScoreInfo.equals("1")) {
                                    Label classRankings4 = new Label(3 + index + cc + dengjiCount, i + 3 + jj, (String) ((Object[]) list0.get(i))[6], cFormat3);
                                    sheet.addCell(classRankings4);
                                    Label gradeRankings4 = new Label(4 + index + cc + dengjiCount, i + 3 + jj, (String) ((Object[]) list0.get(i))[7], cFormat3);
                                    sheet.addCell(gradeRankings4);
                                    if (isMoreSchool.equals("T")) {
                                        Label areaRankings4 = new Label(5 + index + cc + dengjiCount, i + 3 + jj, ((Object[]) list0.get(i))[8] + "", cFormat3);
                                        sheet.addCell(areaRankings4);
                                    }
                                }
                                Label beizhus3 = new Label(3 + index + cc + dengjiCount + ii, i + 3 + jj, ((Object[]) list0.get(i))[9] + "", cFormat3);
                                sheet.addCell(beizhus3);
                            } else {
                                if (!"总分科目不全".equals(((Object[]) list0.get(i))[9]) && !"不统计".equals(((Object[]) list0.get(i))[9])) {
                                    stuCount = Integer.valueOf(stuCount.intValue() + 1);
                                }
                                Label studentNums4 = new Label(0, i + 3 + jj, ((Object[]) list0.get(i))[1] + "", cFormat3);
                                sheet.addCell(studentNums4);
                                Label studentNames4 = new Label(1, i + 3 + jj, ((Object[]) list0.get(i))[2] + "", cFormat3);
                                sheet.addCell(studentNames4);
                                if (shouxuanHide.equals("1")) {
                                    Label sxkm14 = new Label(2, i + 3 + jj, ((Object[]) list0.get(i))[11] + "", cFormat3);
                                    sheet.addCell(sxkm14);
                                    Label xkzh17 = new Label(3, i + 3 + jj, ((Object[]) list0.get(i))[10] + "", cFormat3);
                                    sheet.addCell(xkzh17);
                                } else if (subDisplay.equals("1")) {
                                    Label xkzh18 = new Label(2, i + 3 + jj, ((Object[]) list0.get(i))[10] + "", cFormat3);
                                    sheet.addCell(xkzh18);
                                }
                                if (!"1".equals(fufen) && subjectNum.length() >= 3) {
                                    String objectscore2 = Convert.toBigDecimal(df1.format(((Object[]) list0.get(i))[3])).stripTrailingZeros().toPlainString();
                                    Number oqtss4 = new Number(2 + cc, i + 3 + jj, Double.valueOf(objectscore2).doubleValue(), cFormat3_2);
                                    sheet.addCell(oqtss4);
                                    if (null == isYufabu || !isYufabu.equals("2")) {
                                        String zhuscore2 = Convert.toBigDecimal(df1.format(((Object[]) list0.get(i))[4])).stripTrailingZeros().toPlainString();
                                        Number sqtss5 = new Number(3 + cc, i + 3 + jj, Double.valueOf(zhuscore2).doubleValue(), cFormat3_2);
                                        sheet.addCell(sqtss5);
                                    } else {
                                        Label sqtss6 = new Label(3 + cc, i + 3 + jj, "--", cFormat3_2);
                                        sheet.addCell(sqtss6);
                                    }
                                }
                                String fullscore2 = Convert.toBigDecimal(df1.format(((Object[]) list0.get(i))[5])).stripTrailingZeros().toPlainString();
                                Number totalScores4 = new Number(2 + index + cc, i + 3 + jj, Double.valueOf(fullscore2).doubleValue(), cFormat3_2);
                                sheet.addCell(totalScores4);
                                if ("T".equals(isDengji)) {
                                    Label dengjixiao5 = new Label(3 + index + cc, i + 3 + jj, String.valueOf(((Object[]) list0.get(i))[15]), cFormat3);
                                    sheet.addCell(dengjixiao5);
                                    if (isMoreSchool.equals("T")) {
                                        Label dengji5 = new Label(4 + index + cc, i + 3 + jj, String.valueOf(((Object[]) list0.get(i))[14]), cFormat3);
                                        sheet.addCell(dengji5);
                                    }
                                }
                                if (viewRankInfo != null && viewRankInfo.equals("1") && viewRankOfScoreInfo.equals("1")) {
                                    if (StrUtil.isEmpty(Convert.toStr(((Object[]) list0.get(i))[6]))) {
                                        Label classRankings5 = new Label(3 + index + cc + dengjiCount, i + 3 + jj, ((Object[]) list0.get(i))[6] + "", cFormat3);
                                        sheet.addCell(classRankings5);
                                        Label gradeRankings5 = new Label(4 + index + cc + dengjiCount, i + 3 + jj, ((Object[]) list0.get(i))[7] + "", cFormat3);
                                        sheet.addCell(gradeRankings5);
                                        if (isMoreSchool.equals("T")) {
                                            Label areaRankings5 = new Label(5 + index + cc + dengjiCount, i + 3 + jj, ((Object[]) list0.get(i))[8] + "", cFormat3);
                                            sheet.addCell(areaRankings5);
                                        }
                                    } else {
                                        Number classRankings6 = new Number(3 + index + cc + dengjiCount, i + 3 + jj, Integer.valueOf(((Object[]) list0.get(i))[6] + "").intValue(), cFormat3);
                                        sheet.addCell(classRankings6);
                                        Number gradeRankings6 = new Number(4 + index + cc + dengjiCount, i + 3 + jj, Integer.valueOf(((Object[]) list0.get(i))[7] + "").intValue(), cFormat3);
                                        sheet.addCell(gradeRankings6);
                                        if (isMoreSchool.equals("T")) {
                                            Number areaRankings6 = new Number(5 + index + cc + dengjiCount, i + 3 + jj, Integer.valueOf(((Object[]) list0.get(i))[8] + "").intValue(), cFormat3);
                                            sheet.addCell(areaRankings6);
                                        }
                                    }
                                }
                                Label beizhus4 = new Label(3 + index + cc + dengjiCount + ii, i + 3 + jj, ((Object[]) list0.get(i))[9] + "", cFormat3);
                                sheet.addCell(beizhus4);
                            }
                            if (!((Object[]) list0.get(i))[9].equals("缺考") && !((Object[]) list0.get(i))[9].equals("违纪") && !((Object[]) list0.get(i))[9].equals("零分") && !"总分科目不全".equals(((Object[]) list0.get(i))[9]) && !"不统计".equals(((Object[]) list0.get(i))[9])) {
                                Double avgOqts = Double.valueOf(sheet.getCell(2 + cc, list0.size() + 3 + jj).getContents());
                                Double avgSqts = Double.valueOf(sheet.getCell(3 + cc, list0.size() + 3 + jj).getContents());
                                Double avgss = Double.valueOf(sheet.getCell(4 + cc, list0.size() + 3 + jj).getContents());
                                Double avgThisOqts = Double.valueOf(((Object[]) list0.get(i))[3].toString());
                                Double avgThisSqts = Double.valueOf(((Object[]) list0.get(i))[4].toString());
                                Double avgThisSs = Double.valueOf(((Object[]) list0.get(i))[5].toString());
                                Double avg_count = Double.valueOf(avgOqts.doubleValue() + avgThisOqts.doubleValue());
                                Double avg_count_Sqts = Double.valueOf(avgSqts.doubleValue() + avgThisSqts.doubleValue());
                                Double avgs = Double.valueOf(avgss.doubleValue() + avgThisSs.doubleValue());
                                avg_count_opts = Double.valueOf(avg_count_opts.doubleValue() + avg_count.doubleValue());
                                avg_count_sqts = Double.valueOf(avg_count_sqts.doubleValue() + avg_count_Sqts.doubleValue());
                                avg_total = Double.valueOf(avg_total.doubleValue() + avgs.doubleValue());
                            }
                        }
                        Double optsCount = Double.valueOf(df2.format(0L));
                        if (stuCount.intValue() != 0) {
                            Double optsCount2 = Double.valueOf(avg_count_opts.doubleValue() / stuCount.intValue());
                            optsCount = Double.valueOf(df2.format(optsCount2));
                        }
                        Double sqtsCount = Double.valueOf(df2.format(0L));
                        if (stuCount.intValue() != 0) {
                            Double sqtsCount2 = Double.valueOf(avg_count_sqts.doubleValue() / stuCount.intValue());
                            sqtsCount = Double.valueOf(df2.format(sqtsCount2));
                        }
                        Double dou = Double.valueOf(df2.format(0L));
                        if (stuCount.intValue() != 0) {
                            Double dou2 = Double.valueOf(avg_total.doubleValue() / stuCount.intValue());
                            dou = Double.valueOf(df2.format(dou2));
                        }
                        Examsetting examsetting = this.reportService.getExamsettingData(examNum);
                        String examsettingStr = (((("0".equals(examsetting.getMissingExam()) ? "缺考、" : "") + ("0".equals(examsetting.getDiscipline()) ? "违纪、" : "")) + ("0".equals(examsetting.getLingfe()) ? "零分、" : "")) + ("0".equals(examsetting.getZonfen()) ? "总分科目不全、" : "")) + "不统计、";
                        String descStr = "".equals(examsettingStr) ? "" : "不含" + examsettingStr.substring(0, examsettingStr.length() - 1);
                        if (list0.size() % 2 == 0) {
                            Label avgGradeRanking = new Label(0, list0.size() + 3 + jj, "参考人数：" + stuCount + "人", cFormat2_bold);
                            sheet.addCell(avgGradeRanking);
                            Label avg = new Label(1, list0.size() + 3 + jj, "平均分", cFormat2_bold);
                            sheet.addCell(avg);
                            sheet.mergeCells(1, list0.size() + 3 + jj, 1 + cc, list0.size() + 3 + jj);
                            if (!"1".equals(fufen) && subjectNum.length() >= 3) {
                                Number avg_Oqts = new Number(2 + cc, list0.size() + 3 + jj, optsCount.doubleValue(), cFormat2_bold_2);
                                sheet.addCell(avg_Oqts);
                                if (null == isYufabu || !isYufabu.equals("2")) {
                                    Number avg_Sqts = new Number(3 + cc, list0.size() + 3 + jj, sqtsCount.doubleValue(), cFormat2_bold_2);
                                    sheet.addCell(avg_Sqts);
                                } else {
                                    Label avg_Sqts2 = new Label(3 + cc, list0.size() + 3 + jj, "--", cFormat2_bold_2);
                                    sheet.addCell(avg_Sqts2);
                                }
                            }
                            Number avgTotalScore = new Number(2 + index + cc, list0.size() + 3 + jj, dou.doubleValue(), cFormat2_bold_2);
                            sheet.addCell(avgTotalScore);
                            int bzCount = 0;
                            if (isMoreSchool.equals("T")) {
                                if ("T".equals(isDengji)) {
                                    Label beizhus1 = new Label(3 + index + cc, list0.size() + 3 + jj, "", cFormat2_bold);
                                    sheet.addCell(beizhus1);
                                    Label beizhus22 = new Label(4 + index + cc, list0.size() + 3 + jj, "", cFormat2_bold);
                                    sheet.addCell(beizhus22);
                                    bzCount = 0 + 2;
                                }
                                if (viewRankInfo != null && viewRankInfo.equals("1") && viewRankOfScoreInfo.equals("1")) {
                                    Label beizhus12 = new Label(3 + index + cc + bzCount, list0.size() + 3 + jj, "", cFormat2_bold);
                                    sheet.addCell(beizhus12);
                                    Label beizhus23 = new Label(4 + index + cc + bzCount, list0.size() + 3 + jj, "", cFormat2_bold);
                                    sheet.addCell(beizhus23);
                                    Label beizhus32 = new Label(5 + index + cc + bzCount, list0.size() + 3 + jj, "", cFormat2_bold);
                                    sheet.addCell(beizhus32);
                                    bzCount += 3;
                                }
                            } else {
                                if ("T".equals(isDengji)) {
                                    Label beizhus13 = new Label(3 + index + cc, list0.size() + 3 + jj, "", cFormat2_bold);
                                    sheet.addCell(beizhus13);
                                    bzCount = 0 + 1;
                                }
                                if (viewRankInfo != null && viewRankInfo.equals("1") && viewRankOfScoreInfo.equals("1")) {
                                    Label beizhus14 = new Label(3 + index + cc + bzCount, list0.size() + 3 + jj, "", cFormat2_bold);
                                    sheet.addCell(beizhus14);
                                    Label beizhus24 = new Label(4 + index + cc + bzCount, list0.size() + 3 + jj, "", cFormat2_bold);
                                    sheet.addCell(beizhus24);
                                    bzCount += 2;
                                }
                            }
                            Label beizhus5 = new Label(3 + index + cc + bzCount, list0.size() + 3 + jj, descStr, cFormat2_bold);
                            sheet.addCell(beizhus5);
                        } else {
                            Label avgGradeRanking2 = new Label(0, list0.size() + 3 + jj, "参考人数：" + stuCount + "人", cFormat3_bold);
                            sheet.addCell(avgGradeRanking2);
                            Label avg2 = new Label(1, list0.size() + 3 + jj, "平均分", cFormat3_bold);
                            sheet.addCell(avg2);
                            sheet.mergeCells(1, list0.size() + 3 + jj, 1 + cc, list0.size() + 3 + jj);
                            if (!"1".equals(fufen) && subjectNum.length() >= 3) {
                                Number avg_Oqts2 = new Number(2 + cc, list0.size() + 3 + jj, optsCount.doubleValue(), cFormat3_bold_2);
                                sheet.addCell(avg_Oqts2);
                                if (null == isYufabu || !isYufabu.equals("2")) {
                                    Number avg_Sqts3 = new Number(3 + cc, list0.size() + 3 + jj, sqtsCount.doubleValue(), cFormat3_bold_2);
                                    sheet.addCell(avg_Sqts3);
                                } else {
                                    Label avg_Sqts4 = new Label(3 + cc, list0.size() + 3 + jj, "--", cFormat3_bold_2);
                                    sheet.addCell(avg_Sqts4);
                                }
                            }
                            Number avgTotalScore2 = new Number(2 + index + cc, list0.size() + 3 + jj, dou.doubleValue(), cFormat3_bold_2);
                            sheet.addCell(avgTotalScore2);
                            int bzCount2 = 0;
                            if (isMoreSchool.equals("T")) {
                                if ("T".equals(isDengji)) {
                                    Label beizhus15 = new Label(3 + index + cc, list0.size() + 3 + jj, "", cFormat3_bold);
                                    sheet.addCell(beizhus15);
                                    Label beizhus25 = new Label(4 + index + cc, list0.size() + 3 + jj, "", cFormat3_bold);
                                    sheet.addCell(beizhus25);
                                    bzCount2 = 0 + 2;
                                }
                                if (viewRankInfo != null && viewRankInfo.equals("1") && viewRankOfScoreInfo.equals("1")) {
                                    Label beizhus16 = new Label(3 + index + cc + bzCount2, list0.size() + 3 + jj, "", cFormat3_bold);
                                    sheet.addCell(beizhus16);
                                    Label beizhus26 = new Label(4 + index + cc + bzCount2, list0.size() + 3 + jj, "", cFormat3_bold);
                                    sheet.addCell(beizhus26);
                                    Label beizhus33 = new Label(5 + index + cc + bzCount2, list0.size() + 3 + jj, "", cFormat3_bold);
                                    sheet.addCell(beizhus33);
                                    bzCount2 += 3;
                                }
                            } else {
                                if ("T".equals(isDengji)) {
                                    Label beizhus17 = new Label(3 + index + cc, list0.size() + 3 + jj, "", cFormat3_bold);
                                    sheet.addCell(beizhus17);
                                    bzCount2 = 0 + 1;
                                }
                                if (viewRankInfo != null && viewRankInfo.equals("1") && viewRankOfScoreInfo.equals("1")) {
                                    Label beizhus18 = new Label(3 + index + cc + bzCount2, list0.size() + 3 + jj, "", cFormat3_bold);
                                    sheet.addCell(beizhus18);
                                    Label beizhus27 = new Label(4 + index + cc + bzCount2, list0.size() + 3 + jj, "", cFormat3_bold);
                                    sheet.addCell(beizhus27);
                                    bzCount2 += 2;
                                }
                            }
                            Label beizhus6 = new Label(3 + index + cc + bzCount2, list0.size() + 3 + jj, descStr, cFormat3_bold);
                            sheet.addCell(beizhus6);
                        }
                    } else {
                        int cellCount = sheet.getColumns();
                        Label areaRankings7 = new Label(0, 3 + jj, "数据为空", cFormat3);
                        sheet.addCell(areaRankings7);
                        sheet.mergeCells(0, 3 + jj, cellCount - 1, 3 + jj);
                    }
                    wwBook.write();
                    if (wwBook != null) {
                        try {
                            wwBook.close();
                            if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                                if (Integer.valueOf(all_class).intValue() == 1) {
                                    HttpServletResponse response = ServletActionContext.getResponse();
                                    response.reset();
                                    ServletOutputStream outputStream = response.getOutputStream();
                                    String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                    String loadFileName2 = loadFileName.replace("+", " ");
                                    response.setContentType("Content-type: applicationnd.ms-excel");
                                    response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xls");
                                    response.setHeader("Content-length", String.valueOf(excelFile.length()));
                                    byte[] tempByte = new byte[1024];
                                    FileInputStream in = new FileInputStream(excelFile);
                                    while (true) {
                                        int n = in.read(tempByte);
                                        if (n == -1) {
                                            break;
                                        }
                                        try {
                                            outputStream.write(tempByte, 0, n);
                                        } catch (Exception e) {
                                            this.log.error("保存未成功", e);
                                        }
                                    }
                                    outputStream.flush();
                                    outputStream.close();
                                    in.close();
                                } else {
                                    filePath = methodZipAll(uri, dirPath, folderName, zipName);
                                }
                            }
                        } catch (Exception e2) {
                            e2.printStackTrace();
                        }
                    }
                } catch (Throwable th) {
                    if (wwBook != null) {
                        try {
                            wwBook.close();
                            if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                                if (Integer.valueOf(all_class).intValue() == 1) {
                                    HttpServletResponse response2 = ServletActionContext.getResponse();
                                    response2.reset();
                                    ServletOutputStream outputStream2 = response2.getOutputStream();
                                    String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                    String loadFileName4 = loadFileName3.replace("+", " ");
                                    response2.setContentType("Content-type: applicationnd.ms-excel");
                                    response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xls");
                                    response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                                    byte[] tempByte2 = new byte[1024];
                                    FileInputStream in2 = new FileInputStream(excelFile);
                                    while (true) {
                                        int n2 = in2.read(tempByte2);
                                        if (n2 == -1) {
                                            break;
                                        }
                                        try {
                                            outputStream2.write(tempByte2, 0, n2);
                                        } catch (Exception e3) {
                                            this.log.error("保存未成功", e3);
                                        }
                                    }
                                    outputStream2.flush();
                                    outputStream2.close();
                                    in2.close();
                                } else {
                                    methodZipAll(uri, dirPath, folderName, zipName);
                                }
                            }
                        } catch (Exception e4) {
                            e4.printStackTrace();
                            throw th;
                        }
                    }
                    throw th;
                }
            } catch (Exception e5) {
                e5.printStackTrace();
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            if (Integer.valueOf(all_class).intValue() == 1) {
                                HttpServletResponse response3 = ServletActionContext.getResponse();
                                response3.reset();
                                ServletOutputStream outputStream3 = response3.getOutputStream();
                                String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                String loadFileName6 = loadFileName5.replace("+", " ");
                                response3.setContentType("Content-type: applicationnd.ms-excel");
                                response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xls");
                                response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                                byte[] tempByte3 = new byte[1024];
                                FileInputStream in3 = new FileInputStream(excelFile);
                                while (true) {
                                    int n3 = in3.read(tempByte3);
                                    if (n3 == -1) {
                                        break;
                                    }
                                    try {
                                        outputStream3.write(tempByte3, 0, n3);
                                    } catch (Exception e6) {
                                        this.log.error("保存未成功", e6);
                                    }
                                }
                                outputStream3.flush();
                                outputStream3.close();
                                in3.close();
                            } else {
                                filePath = methodZipAll(uri, dirPath, folderName, zipName);
                            }
                        }
                    } catch (Exception e7) {
                        e7.printStackTrace();
                    }
                }
            }
        } catch (Exception e8) {
            e8.printStackTrace();
        }
        return filePath;
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String objAnaly_exportMethod(String examNum, String gradeNum, String schoolNum, String subjectNum, String classNum, String studentId, String studentType, String type, String source, String step, String sNum, String c_exam, String rpt_name, String isMoreSchool, String rptTitle, String isHistory, String isSaveWrite, String dirPath, String uri, String userNum, String schName, String gradeName, String className, String subjectName, String imgRoot, String all_class, String agent, String type1, String subCompose) {
        String rptTitle2 = this.sp.getHeaderStr(examNum, subjectNum, gradeNum, schoolNum, classNum, studentId, studentType, true, true, true, true, false, true, true, true, false, true, true, true, true, true, false, subCompose, "0");
        String folderPath = "reportExcel" + userNum;
        String folderName = "reportExcel" + userNum;
        String zipName = "reportExcel" + userNum;
        String excelName = (null == gradeName || "".equals(gradeName)) ? rpt_name + "_" + gradeNum : rpt_name + "_" + gradeName;
        if (null != classNum && !"".equals(classNum) && !classNum.contains(Const.STRING_SEPERATOR)) {
            excelName = (null == className || "".equals(className)) ? excelName + "_" + classNum : excelName + "_" + className;
        }
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        String filePath = null;
        try {
            WritableWorkbook wwBook = Workbook.createWorkbook(excelFile);
            WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
            biaotis1.setAlignment(Alignment.LEFT);
            biaotis1.setVerticalAlignment(VerticalAlignment.CENTRE);
            WritableFont titles = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat title = new WritableCellFormat(titles);
            title.setAlignment(Alignment.LEFT);
            title.setVerticalAlignment(VerticalAlignment.CENTRE);
            title.setWrap(true);
            WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            WritableCellFormat cFormat1 = new WritableCellFormat(font1);
            cFormat1.setAlignment(Alignment.CENTRE);
            cFormat1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1.setBackground(Const.titleBackground_color);
            cFormat1.setWrap(true);
            WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat2 = new WritableCellFormat(font2);
            cFormat2.setAlignment(Alignment.CENTRE);
            cFormat2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2.setBackground(Const.textOuBackGround_color);
            cFormat2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2.setWrap(true);
            DateFormat df1 = new DateFormat("0.0%");
            WritableCellFormat cFormat2_0 = new WritableCellFormat(font2, df1);
            cFormat2_0.setAlignment(Alignment.CENTRE);
            cFormat2_0.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_0.setBackground(Const.textOuBackGround_color);
            cFormat2_0.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_0.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_0.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_0.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_0.setWrap(true);
            DateFormat df0 = new DateFormat("0%");
            WritableCellFormat cFormat2_0_0 = new WritableCellFormat(font2, df0);
            cFormat2_0_0.setAlignment(Alignment.CENTRE);
            cFormat2_0_0.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_0_0.setBackground(Const.textOuBackGround_color);
            cFormat2_0_0.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_0_0.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_0_0.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_0_0.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_0_0.setWrap(true);
            WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat3 = new WritableCellFormat(font3);
            cFormat3.setAlignment(Alignment.CENTRE);
            cFormat3.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3.setBackground(Const.textJiBackGround_color);
            cFormat3.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3.setWrap(true);
            WritableCellFormat cFormat3_0 = new WritableCellFormat(font3, df1);
            cFormat3_0.setAlignment(Alignment.CENTRE);
            cFormat3_0.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_0.setBackground(Const.textJiBackGround_color);
            cFormat3_0.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_0.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_0.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_0.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_0.setWrap(true);
            WritableCellFormat cFormat3_0_0 = new WritableCellFormat(font3, df0);
            cFormat3_0_0.setAlignment(Alignment.CENTRE);
            cFormat3_0_0.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_0_0.setBackground(Const.textJiBackGround_color);
            cFormat3_0_0.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_0_0.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_0_0.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_0_0.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_0_0.setWrap(true);
            WritableFont font2_red = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.D5Text_color1);
            WritableCellFormat cFormat2_red = new WritableCellFormat(font2_red);
            cFormat2_red.setAlignment(Alignment.CENTRE);
            cFormat2_red.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_red.setBackground(Const.textOuBackGround_color);
            cFormat2_red.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_red.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_red.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_red.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_red.setWrap(true);
            WritableCellFormat cFormat2_red_0 = new WritableCellFormat(font2_red, df1);
            cFormat2_red_0.setAlignment(Alignment.CENTRE);
            cFormat2_red_0.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_red_0.setBackground(Const.textOuBackGround_color);
            cFormat2_red_0.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_red_0.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_red_0.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_red_0.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_red_0.setWrap(true);
            WritableFont font3_red = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.D5Text_color1);
            WritableCellFormat cFormat3_red = new WritableCellFormat(font3_red);
            cFormat3_red.setAlignment(Alignment.CENTRE);
            cFormat3_red.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_red.setBackground(Const.textJiBackGround_color);
            cFormat3_red.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_red.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_red.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_red.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_red.setWrap(true);
            WritableCellFormat cFormat3_red_0 = new WritableCellFormat(font3_red, df1);
            cFormat3_red_0.setAlignment(Alignment.CENTRE);
            cFormat3_red_0.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_red_0.setBackground(Const.textJiBackGround_color);
            cFormat3_red_0.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_red_0.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_red_0.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_red_0.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_red_0.setWrap(true);
            WritableFont font2_blue = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.D5Text_color2);
            WritableCellFormat cFormat2_blue = new WritableCellFormat(font2_blue);
            cFormat2_blue.setAlignment(Alignment.CENTRE);
            cFormat2_blue.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_blue.setBackground(Const.textOuBackGround_color);
            cFormat2_blue.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_blue.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_blue.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_blue.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_blue.setWrap(true);
            WritableCellFormat cFormat2_blue_0 = new WritableCellFormat(font2_blue, df1);
            cFormat2_blue_0.setAlignment(Alignment.CENTRE);
            cFormat2_blue_0.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_blue_0.setBackground(Const.textOuBackGround_color);
            cFormat2_blue_0.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_blue_0.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_blue_0.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_blue_0.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_blue_0.setWrap(true);
            WritableFont font3_blue = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.D5Text_color2);
            WritableCellFormat cFormat3_blue = new WritableCellFormat(font3_blue);
            cFormat3_blue.setAlignment(Alignment.CENTRE);
            cFormat3_blue.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_blue.setBackground(Const.textJiBackGround_color);
            cFormat3_blue.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_blue.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_blue.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_blue.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_blue.setWrap(true);
            WritableCellFormat cFormat3_blue_0 = new WritableCellFormat(font3_blue, df1);
            cFormat3_blue_0.setAlignment(Alignment.CENTRE);
            cFormat3_blue_0.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_blue_0.setBackground(Const.textJiBackGround_color);
            cFormat3_blue_0.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_blue_0.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_blue_0.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_blue_0.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_blue_0.setWrap(true);
            String viewRankOfScoreInfo = Configuration.getInstance().getViewRankOfScoreInfo();
            List list = this.reportService.getObjOption(examNum, gradeNum, schoolNum, subjectNum, classNum, studentType, type, source, "0", subCompose);
            try {
                WritableSheet sheet = wwBook.createSheet(rpt_name, 0);
                sheet.getSettings().setShowGridLines(false);
                try {
                    new ArrayList();
                    List quest = (List) list.get(0);
                    Object[] ans = (Object[]) list.get(1);
                    Label biaotou = new Label(0, 0, rpt_name, biaotis1);
                    sheet.addCell(biaotou);
                    DecimalFormat df03 = new DecimalFormat("0.000");
                    df03.setRoundingMode(RoundingMode.HALF_UP);
                    Label xinxi = new Label(0, 1, rptTitle2, title);
                    sheet.addCell(xinxi);
                    sheet.setRowView(1, Const.height_500);
                    sheet.mergeCells(0, 0, 6 + ans.length, 0);
                    sheet.mergeCells(0, 1, 6 + ans.length, 1);
                    Label aaImage = new Label(0, 2, "选项选中率分布", cFormat1);
                    sheet.addCell(aaImage);
                    sheet.setColumnView(0, 40);
                    Label bbImage = new Label(1, 2, "小题错选率分布", cFormat1);
                    sheet.addCell(bbImage);
                    sheet.setColumnView(1, 40);
                    Label questionNum = new Label(2, 2, "题号", cFormat1);
                    sheet.addCell(questionNum);
                    Label correctAnswer = new Label(3, 2, "正确答案", cFormat1);
                    sheet.addCell(correctAnswer);
                    Label attendExamNumber = new Label(4, 2, "参考人数", cFormat1);
                    sheet.addCell(attendExamNumber);
                    Label correctAnswerNumber = new Label(5, 2, "正答人数", cFormat1);
                    sheet.addCell(correctAnswerNumber);
                    Label correctAnswerRatio = new Label(6, 2, "正答率", cFormat1);
                    sheet.addCell(correctAnswerRatio);
                    if (schoolNum.contains(Const.STRING_SEPERATOR) || schoolNum.contains("allschool")) {
                        Label a1 = new Label(7, 2, "校均分", cFormat1);
                        sheet.addCell(a1);
                        Label a2 = new Label(8, 2, "区均分", cFormat1);
                        sheet.addCell(a2);
                    } else {
                        Label a12 = new Label(7, 2, "班均分", cFormat1);
                        sheet.addCell(a12);
                        Label a22 = new Label(8, 2, "校均分", cFormat1);
                        sheet.addCell(a22);
                    }
                    int ii = 0;
                    if (!viewRankOfScoreInfo.equals("3")) {
                        Label a3 = new Label(9, 2, "排名", cFormat1);
                        sheet.addCell(a3);
                        ii = 1;
                    }
                    int index = 8;
                    if (type1.equals("1")) {
                        index = 15;
                        Label optionRatio = new Label(9 + ii, 2, "选项人数", cFormat1);
                        sheet.addCell(optionRatio);
                    } else {
                        Label optionRatio2 = new Label(9 + ii, 2, "选项选中率", cFormat1);
                        sheet.addCell(optionRatio2);
                    }
                    if (quest.size() <= 0 || ans.length <= 0) {
                        Label correctAnswerRatios = new Label(0, 3, "数据为空", cFormat3);
                        sheet.addCell(correctAnswerRatios);
                        sheet.mergeCells(0, 3, 7, 3);
                    } else {
                        sheet.mergeCells(0, 2, 0, 3);
                        sheet.mergeCells(1, 2, 1, 3);
                        sheet.mergeCells(2, 2, 2, 3);
                        sheet.mergeCells(3, 2, 3, 3);
                        sheet.mergeCells(4, 2, 4, 3);
                        sheet.mergeCells(5, 2, 5, 3);
                        sheet.mergeCells(6, 2, 6, 3);
                        sheet.mergeCells(7, 2, 7, 3);
                        sheet.mergeCells(8, 2, 8, 3);
                        if (!viewRankOfScoreInfo.equals("3")) {
                            sheet.mergeCells(9, 2, 9, 3);
                        }
                        sheet.mergeCells(9 + ii, 2, 8 + ans.length + ii, 2);
                        for (int a = 0; a < ans.length; a++) {
                            Label optionRatios = new Label(9 + a + ii, 3, ans[a] + "", cFormat1);
                            sheet.addCell(optionRatios);
                        }
                        for (int i = 0; i < quest.size(); i++) {
                            sheet.setRowView(4 + i, 2500, false);
                            Object Ratio = ((Object[]) ((List) ((List) quest.get(i)).get(0)).get(0))[6];
                            Double Ratiod = Double.valueOf(Double.parseDouble(String.valueOf(Ratio)));
                            Double Ratio_D = Double.valueOf(df03.format(Ratiod));
                            if (i % 2 == 0) {
                                if (Ratio_D.doubleValue() <= 0.5d) {
                                    Label questionNums = new Label(2, 4 + i, "T" + ((Object[]) ((List) ((List) quest.get(i)).get(0)).get(0))[2], cFormat2_red);
                                    sheet.addCell(questionNums);
                                } else if (Ratio_D.doubleValue() >= 0.8d) {
                                    Label questionNums2 = new Label(2, 4 + i, "T" + ((Object[]) ((List) ((List) quest.get(i)).get(0)).get(0))[2], cFormat2_blue);
                                    sheet.addCell(questionNums2);
                                } else {
                                    Label questionNums3 = new Label(2, 4 + i, "T" + ((Object[]) ((List) ((List) quest.get(i)).get(0)).get(0))[2], cFormat2);
                                    sheet.addCell(questionNums3);
                                }
                                Label correctAnswers = new Label(3, 4 + i, ((Object[]) ((List) ((List) quest.get(i)).get(0)).get(0))[3] + "", cFormat2);
                                sheet.addCell(correctAnswers);
                                String ckrenshu = String.valueOf(((Object[]) ((List) ((List) quest.get(i)).get(0)).get(0))[4]);
                                Number attendExamNumbers = new Number(4, 4 + i, Integer.parseInt(ckrenshu), cFormat2);
                                sheet.addCell(attendExamNumbers);
                                String zdrenshu = String.valueOf(((Object[]) ((List) ((List) quest.get(i)).get(0)).get(0))[5]);
                                Number correctAnswerNumbers = new Number(5, 4 + i, Integer.parseInt(zdrenshu), cFormat2);
                                sheet.addCell(correctAnswerNumbers);
                                if (Ratio_D.doubleValue() <= 0.5d) {
                                    Number correctAnswerRatios2 = new Number(6, 4 + i, Ratio_D.doubleValue(), cFormat2_red_0);
                                    sheet.addCell(correctAnswerRatios2);
                                } else if (Ratio_D.doubleValue() >= 0.8d) {
                                    Number correctAnswerRatios3 = new Number(6, 4 + i, Ratio_D.doubleValue(), cFormat2_blue_0);
                                    sheet.addCell(correctAnswerRatios3);
                                } else {
                                    Number correctAnswerRatios4 = new Number(6, 4 + i, Ratio_D.doubleValue(), cFormat2_0);
                                    sheet.addCell(correctAnswerRatios4);
                                }
                                if (String.valueOf(((Object[]) ((List) ((List) quest.get(i)).get(0)).get(0))[11]).equals("-")) {
                                    Label a11 = new Label(7, 4 + i, String.valueOf(((Object[]) ((List) ((List) quest.get(i)).get(0)).get(0))[11]), cFormat2);
                                    sheet.addCell(a11);
                                } else {
                                    Number a112 = new Number(7, 4 + i, Double.valueOf(((Object[]) ((List) ((List) quest.get(i)).get(0)).get(0))[11] + "").doubleValue(), cFormat2);
                                    sheet.addCell(a112);
                                }
                                Number a222 = new Number(8, 4 + i, Double.valueOf(((Object[]) ((List) ((List) quest.get(i)).get(0)).get(0))[13] + "").doubleValue(), cFormat2);
                                sheet.addCell(a222);
                                if (!viewRankOfScoreInfo.equals("3")) {
                                    if (String.valueOf(((Object[]) ((List) ((List) quest.get(i)).get(0)).get(0))[12]).equals("-")) {
                                        Label a33 = new Label(9, 4 + i, String.valueOf(((Object[]) ((List) ((List) quest.get(i)).get(0)).get(0))[12]), cFormat2);
                                        sheet.addCell(a33);
                                    } else {
                                        Number a332 = new Number(9, 4 + i, Double.valueOf(((Object[]) ((List) ((List) quest.get(i)).get(0)).get(0))[12] + "").doubleValue(), cFormat2);
                                        sheet.addCell(a332);
                                    }
                                }
                                for (int a4 = 0; a4 < ans.length; a4++) {
                                    if (type1.equals("1")) {
                                        Number aa = new Number(9 + a4 + ii, 4 + i, 0.0d, cFormat2);
                                        sheet.addCell(aa);
                                    } else {
                                        Number aa2 = new Number(9 + a4 + ii, 4 + i, 0.0d, cFormat2_0_0);
                                        sheet.addCell(aa2);
                                    }
                                }
                                List answerLength = (List) ((List) quest.get(i)).get(0);
                                for (int a5 = 0; a5 < ans.length; a5++) {
                                    sheet.getRow(3);
                                    String cellValue = String.valueOf(ans[a5]);
                                    for (int s = 0; s < answerLength.size(); s++) {
                                        String answerValue = (String) ((Object[]) answerLength.get(s))[7];
                                        if (cellValue.equals(answerValue)) {
                                            Object option = ((Object[]) ((List) ((List) quest.get(i)).get(0)).get(s))[index];
                                            if (type1.equals("1")) {
                                                Number optionRatios2 = new Number(9 + a5 + ii, 4 + i, Integer.parseInt(option + ""), cFormat2);
                                                sheet.addCell(optionRatios2);
                                            } else {
                                                Double optiond = Double.valueOf(Double.parseDouble(String.valueOf(option)));
                                                Double option_s = Double.valueOf(df03.format(optiond));
                                                Number optionRatios3 = new Number(9 + a5 + ii, 4 + i, option_s.doubleValue(), cFormat2_0);
                                                sheet.addCell(optionRatios3);
                                            }
                                        }
                                    }
                                }
                            } else {
                                if (Ratio_D.doubleValue() <= 0.5d) {
                                    Label questionNums4 = new Label(2, 4 + i, "T" + ((Object[]) ((List) ((List) quest.get(i)).get(0)).get(0))[2], cFormat3_red);
                                    sheet.addCell(questionNums4);
                                } else if (Ratio_D.doubleValue() >= 0.8d) {
                                    Label questionNums5 = new Label(2, 4 + i, "T" + ((Object[]) ((List) ((List) quest.get(i)).get(0)).get(0))[2], cFormat3_blue);
                                    sheet.addCell(questionNums5);
                                } else {
                                    Label questionNums6 = new Label(2, 4 + i, "T" + ((Object[]) ((List) ((List) quest.get(i)).get(0)).get(0))[2], cFormat3);
                                    sheet.addCell(questionNums6);
                                }
                                Label correctAnswers2 = new Label(3, 4 + i, ((Object[]) ((List) ((List) quest.get(i)).get(0)).get(0))[3] + "", cFormat3);
                                sheet.addCell(correctAnswers2);
                                String ckrenshu1 = String.valueOf(((Object[]) ((List) ((List) quest.get(i)).get(0)).get(0))[4]);
                                Number attendExamNumbers2 = new Number(4, 4 + i, Integer.parseInt(ckrenshu1), cFormat3);
                                sheet.addCell(attendExamNumbers2);
                                String zdrenshu1 = String.valueOf(((Object[]) ((List) ((List) quest.get(i)).get(0)).get(0))[5]);
                                Number correctAnswerNumbers2 = new Number(5, 4 + i, Integer.parseInt(zdrenshu1), cFormat3);
                                sheet.addCell(correctAnswerNumbers2);
                                if (Ratio_D.doubleValue() <= 0.5d) {
                                    Number correctAnswerRatios5 = new Number(6, 4 + i, Ratio_D.doubleValue(), cFormat3_red_0);
                                    sheet.addCell(correctAnswerRatios5);
                                } else if (Ratio_D.doubleValue() >= 0.8d) {
                                    Number correctAnswerRatios6 = new Number(6, 4 + i, Ratio_D.doubleValue(), cFormat3_blue_0);
                                    sheet.addCell(correctAnswerRatios6);
                                } else {
                                    Number correctAnswerRatios7 = new Number(6, 4 + i, Ratio_D.doubleValue(), cFormat3_0);
                                    sheet.addCell(correctAnswerRatios7);
                                }
                                if (String.valueOf(((Object[]) ((List) ((List) quest.get(i)).get(0)).get(0))[11]).equals("-")) {
                                    Label a113 = new Label(7, 4 + i, String.valueOf(((Object[]) ((List) ((List) quest.get(i)).get(0)).get(0))[11]), cFormat3);
                                    sheet.addCell(a113);
                                } else {
                                    Number a114 = new Number(7, 4 + i, Double.valueOf(((Object[]) ((List) ((List) quest.get(i)).get(0)).get(0))[11] + "").doubleValue(), cFormat3);
                                    sheet.addCell(a114);
                                }
                                Number a223 = new Number(8, 4 + i, Double.valueOf(((Object[]) ((List) ((List) quest.get(i)).get(0)).get(0))[13] + "").doubleValue(), cFormat3);
                                sheet.addCell(a223);
                                if (!viewRankOfScoreInfo.equals("3")) {
                                    if (String.valueOf(((Object[]) ((List) ((List) quest.get(i)).get(0)).get(0))[12]).equals("-")) {
                                        Label a333 = new Label(9, 4 + i, String.valueOf(((Object[]) ((List) ((List) quest.get(i)).get(0)).get(0))[12]), cFormat3);
                                        sheet.addCell(a333);
                                    } else {
                                        Number a334 = new Number(9, 4 + i, Double.valueOf(((Object[]) ((List) ((List) quest.get(i)).get(0)).get(0))[12] + "").doubleValue(), cFormat3);
                                        sheet.addCell(a334);
                                    }
                                }
                                for (int a6 = 0; a6 < ans.length; a6++) {
                                    if (type1.equals("1")) {
                                        Number aa3 = new Number(9 + a6 + ii, 4 + i, 0.0d, cFormat3);
                                        sheet.addCell(aa3);
                                    } else {
                                        Number aa4 = new Number(9 + a6 + ii, 4 + i, 0.0d, cFormat3_0_0);
                                        sheet.addCell(aa4);
                                    }
                                }
                                List answerLength2 = (List) ((List) quest.get(i)).get(0);
                                for (int a7 = 0; a7 < ans.length; a7++) {
                                    sheet.getRow(3);
                                    String cellValue2 = String.valueOf(ans[a7]);
                                    for (int s2 = 0; s2 < answerLength2.size(); s2++) {
                                        String answerValue2 = (String) ((Object[]) answerLength2.get(s2))[7];
                                        if (cellValue2.equals(answerValue2)) {
                                            Object option2 = ((Object[]) ((List) ((List) quest.get(i)).get(0)).get(s2))[index];
                                            if (type1.equals("1")) {
                                                Number optionRatios4 = new Number(9 + a7 + ii, 4 + i, Integer.parseInt(option2 + ""), cFormat3);
                                                sheet.addCell(optionRatios4);
                                            } else {
                                                Double optiond2 = Double.valueOf(Double.parseDouble(String.valueOf(option2)));
                                                Double option_s2 = Double.valueOf(df03.format(optiond2));
                                                Number optionRatios5 = new Number(9 + a7 + ii, 4 + i, option_s2.doubleValue(), cFormat3_0);
                                                sheet.addCell(optionRatios5);
                                            }
                                        }
                                    }
                                }
                            }
                            String ques_val = ((Object[]) ((List) ((List) quest.get(i)).get(0)).get(0))[2] + "";
                            String an_val = ((Object[]) ((List) ((List) quest.get(i)).get(0)).get(0))[3] + "";
                            if (null != this.showAnalyiseImage && this.showAnalyiseImage.equals("1")) {
                                String[] rowKeys_Bing = {"T4bing"};
                                for (int x = 0; x < rowKeys_Bing.length; x++) {
                                    WritableImage image = new WritableImage(x, 4 + i, 1.0d, 1.0d, getSubChartImgFile_objAnaly(list, userNum, ques_val, an_val, Integer.valueOf(x), i, rowKeys_Bing[x], imgRoot));
                                    sheet.addImage(image);
                                }
                                String[] rowKeys = {"T4zhu"};
                                for (int x2 = 0; x2 < rowKeys.length; x2++) {
                                    if (Ratio_D.doubleValue() != 100.0d) {
                                        File imgFile = getSubChartImgFile_objAnaly(list, userNum, ques_val, an_val, Integer.valueOf(x2), i, rowKeys[x2], imgRoot);
                                        if (imgFile.exists()) {
                                            WritableImage image2 = new WritableImage(1 + x2, 4 + i, 1.0d, 1.0d, imgFile);
                                            sheet.addImage(image2);
                                        }
                                    }
                                }
                            } else if (i % 2 == 0) {
                                String[] rowKeys_Bing2 = {"T4bing"};
                                for (int x3 = 0; x3 < rowKeys_Bing2.length; x3++) {
                                    Label image3 = new Label(x3, 4 + i, "", cFormat2);
                                    sheet.addCell(image3);
                                }
                                String[] rowKeys2 = {"T4zhu"};
                                for (int x4 = 0; x4 < rowKeys2.length; x4++) {
                                    if (Ratio_D.doubleValue() != 100.0d) {
                                        Label image4 = new Label(1 + x4, 4 + i, "", cFormat2);
                                        sheet.addCell(image4);
                                    }
                                }
                            } else {
                                String[] rowKeys_Bing3 = {"T4bing"};
                                for (int x5 = 0; x5 < rowKeys_Bing3.length; x5++) {
                                    Label image5 = new Label(x5, 4 + i, "", cFormat3);
                                    sheet.addCell(image5);
                                }
                                String[] rowKeys3 = {"T4zhu"};
                                for (int x6 = 0; x6 < rowKeys3.length; x6++) {
                                    if (Ratio_D.doubleValue() != 100.0d) {
                                        Label image6 = new Label(1 + x6, 4 + i, "", cFormat3);
                                        sheet.addCell(image6);
                                    }
                                }
                            }
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                wwBook.write();
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            if (Integer.valueOf(all_class).intValue() == 1) {
                                HttpServletResponse response = ServletActionContext.getResponse();
                                response.reset();
                                ServletOutputStream outputStream = response.getOutputStream();
                                String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                String loadFileName2 = loadFileName.replace("+", " ");
                                response.setContentType("Content-type: applicationnd.ms-excel");
                                response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xls");
                                response.setHeader("Content-length", String.valueOf(excelFile.length()));
                                byte[] tempByte = new byte[1024];
                                FileInputStream in = new FileInputStream(excelFile);
                                while (true) {
                                    int n = in.read(tempByte);
                                    if (n == -1) {
                                        break;
                                    }
                                    try {
                                        outputStream.write(tempByte, 0, n);
                                    } catch (Exception e2) {
                                        this.log.error("保存未成功", e2);
                                    }
                                }
                                outputStream.flush();
                                outputStream.close();
                                in.close();
                            } else {
                                filePath = methodZipAll(uri, dirPath, folderName, zipName);
                            }
                        }
                    } catch (WriteException e3) {
                        e3.printStackTrace();
                    }
                }
            } catch (Exception e4) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            if (Integer.valueOf(all_class).intValue() == 1) {
                                HttpServletResponse response2 = ServletActionContext.getResponse();
                                response2.reset();
                                ServletOutputStream outputStream2 = response2.getOutputStream();
                                String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                String loadFileName4 = loadFileName3.replace("+", " ");
                                response2.setContentType("Content-type: applicationnd.ms-excel");
                                response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xls");
                                response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                                byte[] tempByte2 = new byte[1024];
                                FileInputStream in2 = new FileInputStream(excelFile);
                                while (true) {
                                    int n2 = in2.read(tempByte2);
                                    if (n2 == -1) {
                                        break;
                                    }
                                    try {
                                        outputStream2.write(tempByte2, 0, n2);
                                    } catch (Exception e5) {
                                        this.log.error("保存未成功", e5);
                                    }
                                }
                                outputStream2.flush();
                                outputStream2.close();
                                in2.close();
                            } else {
                                filePath = methodZipAll(uri, dirPath, folderName, zipName);
                            }
                        }
                    } catch (WriteException e6) {
                        e6.printStackTrace();
                    }
                }
            } catch (Throwable th) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            if (Integer.valueOf(all_class).intValue() == 1) {
                                HttpServletResponse response3 = ServletActionContext.getResponse();
                                response3.reset();
                                ServletOutputStream outputStream3 = response3.getOutputStream();
                                String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                String loadFileName6 = loadFileName5.replace("+", " ");
                                response3.setContentType("Content-type: applicationnd.ms-excel");
                                response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xls");
                                response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                                byte[] tempByte3 = new byte[1024];
                                FileInputStream in3 = new FileInputStream(excelFile);
                                while (true) {
                                    int n3 = in3.read(tempByte3);
                                    if (n3 == -1) {
                                        break;
                                    }
                                    try {
                                        outputStream3.write(tempByte3, 0, n3);
                                    } catch (Exception e7) {
                                        this.log.error("保存未成功", e7);
                                    }
                                }
                                outputStream3.flush();
                                outputStream3.close();
                                in3.close();
                            } else {
                                methodZipAll(uri, dirPath, folderName, zipName);
                            }
                        }
                    } catch (WriteException e8) {
                        e8.printStackTrace();
                        throw th;
                    }
                }
                throw th;
            }
        } catch (Exception e9) {
            e9.printStackTrace();
        }
        return filePath;
    }

    public File getSubChartImgFile_objAnaly(List list, String userId, String questionNum, String an_val, Integer ii, int i, String tuName, String dirPath) {
        if (ii.intValue() == 0) {
            subjectLineImage_objAnaly(list, userId, questionNum, an_val, ii, i);
        }
        File file = new File(dirPath + File.separator + "tmpLinePng" + File.separator + tuName + userId + questionNum + ".png");
        return file;
    }

    public void subjectLineImage_objAnaly(List list, String userId, String questionNum, String an_val, Integer ii, int i) {
        String[] rowKeys1;
        new ArrayList();
        List quest = (List) list.get(0);
        DefaultPieDataset dataset = new DefaultPieDataset();
        List answerLength = (List) ((List) quest.get(i)).get(0);
        String[] rowKeys = new String[answerLength.size()];
        String[] columnKeys = {""};
        double[][] dArr = new double[rowKeys.length][columnKeys.length];
        for (int s = 0; s < answerLength.size(); s++) {
            String objArr = (String) ((Object[]) answerLength.get(s))[7];
            rowKeys[s] = objArr + "";
            String option = ((Object[]) ((List) ((List) quest.get(Integer.valueOf(i).intValue())).get(0)).get(s))[8] + "";
            BigDecimal option_s = BigDecimal.valueOf(Double.valueOf(option).doubleValue() * 100.0d).setScale(1, 4);
            String str = option_s + "%";
            dataset.setValue(objArr, option_s);
        }
        String[] an_vals = an_val.split(Const.STRING_SEPERATOR);
        new String[1][0] = "";
        if (isHave(rowKeys, an_val) && !"".equals(an_val)) {
            rowKeys1 = new String[answerLength.size() - an_vals.length];
        } else {
            rowKeys1 = new String[answerLength.size()];
        }
        double[][] data1 = new double[rowKeys1.length][columnKeys.length];
        int count = 0;
        for (int x = 0; x < rowKeys.length; x++) {
            if (!rowKeys[x].equals(an_vals[0])) {
                rowKeys1[count] = rowKeys[x] + "";
                String option2 = ((Object[]) ((List) ((List) quest.get(Integer.valueOf(i).intValue())).get(0)).get(x))[8] + "";
                Double option_s1 = Double.valueOf(option2);
                DecimalFormat dfs = new DecimalFormat("0.0");
                data1[count][0] = Double.valueOf(Double.parseDouble(dfs.format(option_s1.doubleValue() * 100.0d))).doubleValue();
                count++;
            }
        }
        try {
            HttpServletResponse response = ServletActionContext.getResponse();
            response.reset();
            response.setContentType("image/jpeg");
            LineChar lineChar = this.lc;
            JFreeChart chart1 = LineChar.makePieChart3D(dataset);
            getChartImageFolder(chart1, "tmpLinePng", 300, 260, "T4bing" + userId + questionNum);
            if (data1.length > 0) {
                JFreeChart chart = this.lc.makeT4(data1, rowKeys1, columnKeys);
                getChartImageFolder(chart, "tmpLinePng", 300, 300, "T4zhu" + userId + questionNum);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static boolean isHave(String[] strs, String s) {
        for (String str : strs) {
            if (str.indexOf(s) != -1) {
                return true;
            }
        }
        return false;
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String exportMethod_stuanalyAction(String examNum, String gradeNum, String schoolNum, String subjectNum, String classNum, String studentId, String studentType, String type, String source, String step, String sNum, String c_exam, String rpt_name, String isMoreSchool, String rptTitle, String isHistory, String isSaveWrite, String dirPath, String uri, String userNum, String schName, String gradeName, String className, String subjectName, String imgRoot, String all_class, String agent, String subCompose, String teachUnit, String teachUnit_s) {
        CellFormat cellFormat;
        CellFormat cellFormat2;
        CellFormat cellFormat3;
        CellFormat cellFormat4;
        String questionNum_value;
        String rptTitle2 = this.sp.getHeaderStr(examNum, subjectNum, gradeNum, schoolNum, classNum, studentId, studentType, true, true, true, true, false, true, true, true, false, true, true, true, true, true, false, subCompose, "0");
        new ArrayList();
        List list = this.reportService.getStuQuesAnaly(examNum, gradeNum, schoolNum, subjectNum, classNum, studentType, type, source, "0", subCompose, teachUnit, teachUnit_s);
        Map<Object, List<Map<String, Object>>> nanDuDengJi = this.reportService.getNanDuDengJi(examNum, gradeNum, subjectNum, studentType, type, source, subCompose, teachUnit, teachUnit_s);
        Map<Object, List<Map<String, Object>>> qufendudengji = this.reportService.getQuFenDuDengJi(examNum, gradeNum, subjectNum, studentType, type, source, subCompose, teachUnit, teachUnit_s);
        String folderPath = "reportExcel" + userNum;
        String str = "reportExcel" + userNum;
        String str2 = "reportExcel" + userNum;
        String excelName = (null == gradeName || "".equals(gradeName)) ? rpt_name + "_" + gradeNum : rpt_name + "_" + gradeName;
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        String filePath = "ExportFolder/" + folderPath + "/" + excelName + ".xls";
        try {
            WritableWorkbook wwBook = Workbook.createWorkbook(excelFile);
            WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
            biaotis1.setAlignment(Alignment.LEFT);
            WritableFont nandu_qufendu_biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat nandu_qufendu_biaotis1 = new WritableCellFormat(nandu_qufendu_biaotis);
            nandu_qufendu_biaotis1.setAlignment(Alignment.CENTRE);
            WritableFont titles = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat title = new WritableCellFormat(titles);
            title.setAlignment(Alignment.LEFT);
            title.setVerticalAlignment(VerticalAlignment.CENTRE);
            title.setWrap(true);
            WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            WritableCellFormat cFormat1 = new WritableCellFormat(font1);
            cFormat1.setAlignment(Alignment.CENTRE);
            cFormat1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1.setBackground(Const.titleBackground_color);
            cFormat1.setWrap(true);
            WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            CellFormat writableCellFormat = new WritableCellFormat(font2);
            writableCellFormat.setAlignment(Alignment.CENTRE);
            writableCellFormat.setVerticalAlignment(VerticalAlignment.CENTRE);
            writableCellFormat.setBackground(Const.textOuBackGround_color);
            writableCellFormat.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            writableCellFormat.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            writableCellFormat.setBorder(Border.LEFT, BorderLineStyle.THIN);
            writableCellFormat.setBorder(Border.TOP, BorderLineStyle.THIN);
            writableCellFormat.setWrap(true);
            NumberFormat nf1 = new NumberFormat("0.0");
            WritableCellFormat cFormat2_1 = new WritableCellFormat(font2, nf1);
            cFormat2_1.setAlignment(Alignment.CENTRE);
            cFormat2_1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_1.setBackground(Const.textOuBackGround_color);
            cFormat2_1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_1.setWrap(true);
            NumberFormat nf2 = new NumberFormat("0.00");
            CellFormat writableCellFormat2 = new WritableCellFormat(font2, nf2);
            writableCellFormat2.setAlignment(Alignment.CENTRE);
            writableCellFormat2.setVerticalAlignment(VerticalAlignment.CENTRE);
            writableCellFormat2.setBackground(Const.textOuBackGround_color);
            writableCellFormat2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            writableCellFormat2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            writableCellFormat2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            writableCellFormat2.setBorder(Border.TOP, BorderLineStyle.THIN);
            writableCellFormat2.setWrap(true);
            WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            CellFormat writableCellFormat3 = new WritableCellFormat(font3);
            writableCellFormat3.setAlignment(Alignment.CENTRE);
            writableCellFormat3.setVerticalAlignment(VerticalAlignment.CENTRE);
            writableCellFormat3.setBackground(Const.textJiBackGround_color);
            writableCellFormat3.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            writableCellFormat3.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            writableCellFormat3.setBorder(Border.LEFT, BorderLineStyle.THIN);
            writableCellFormat3.setBorder(Border.TOP, BorderLineStyle.THIN);
            writableCellFormat3.setWrap(true);
            WritableCellFormat cFormat3_1 = new WritableCellFormat(font3, nf1);
            cFormat3_1.setAlignment(Alignment.CENTRE);
            cFormat3_1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_1.setBackground(Const.textJiBackGround_color);
            cFormat3_1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_1.setWrap(true);
            CellFormat writableCellFormat4 = new WritableCellFormat(font3, nf2);
            writableCellFormat4.setAlignment(Alignment.CENTRE);
            writableCellFormat4.setVerticalAlignment(VerticalAlignment.CENTRE);
            writableCellFormat4.setBackground(Const.textJiBackGround_color);
            writableCellFormat4.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            writableCellFormat4.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            writableCellFormat4.setBorder(Border.LEFT, BorderLineStyle.THIN);
            writableCellFormat4.setBorder(Border.TOP, BorderLineStyle.THIN);
            writableCellFormat4.setWrap(true);
            try {
                WritableSheet sheet = wwBook.createSheet(rpt_name, 0);
                WritableSheet nandusheet = wwBook.createSheet("学科试题难度等级分布", 1);
                WritableSheet qufendusheet = wwBook.createSheet("学科试题区分度等级分布", 2);
                sheet.getSettings().setShowGridLines(false);
                try {
                    Label biaotou = new Label(0, 0, rpt_name, biaotis1);
                    sheet.addCell(biaotou);
                    DecimalFormat df2 = new DecimalFormat("0.0");
                    DecimalFormat df3 = new DecimalFormat("0.00");
                    df2.setRoundingMode(RoundingMode.HALF_UP);
                    df3.setRoundingMode(RoundingMode.HALF_UP);
                    Label xinxi = new Label(0, 1, rptTitle2, title);
                    sheet.addCell(xinxi);
                    sheet.setRowView(1, Const.height_500);
                    sheet.mergeCells(0, 0, 9, 0);
                    sheet.mergeCells(0, 1, 9, 1);
                    Label questionNum_title = new Label(0, 2, "题号", cFormat1);
                    sheet.addCell(questionNum_title);
                    Label questionType_title = new Label(1, 2, "题型", cFormat1);
                    sheet.addCell(questionType_title);
                    Label fullScore_title = new Label(2, 2, "满分", cFormat1);
                    sheet.addCell(fullScore_title);
                    Label numOfStudent_title = new Label(3, 2, "参考人数", cFormat1);
                    sheet.addCell(numOfStudent_title);
                    Label fullNumOfStudent_title = new Label(4, 2, "满分人数", cFormat1);
                    sheet.addCell(fullNumOfStudent_title);
                    Label zeroNumOfStudent_title = new Label(5, 2, "零分人数", cFormat1);
                    sheet.addCell(zeroNumOfStudent_title);
                    Label maxScore_title = new Label(6, 2, "最高分", cFormat1);
                    sheet.addCell(maxScore_title);
                    Label minScore_title = new Label(7, 2, "最低分", cFormat1);
                    sheet.addCell(minScore_title);
                    Label averageScore_title = new Label(8, 2, "平均分", cFormat1);
                    sheet.addCell(averageScore_title);
                    Label difficulty_title = new Label(9, 2, "难度", cFormat1);
                    sheet.addCell(difficulty_title);
                    Label discrimination_title = new Label(10, 2, "区分度", cFormat1);
                    sheet.addCell(discrimination_title);
                    Label standard_title = new Label(11, 2, "标准差", cFormat1);
                    sheet.addCell(standard_title);
                    Label coefficient_title = new Label(12, 2, "变异系数", cFormat1);
                    sheet.addCell(coefficient_title);
                    Label pingjia_title = new Label(13, 2, "评价", cFormat1);
                    sheet.addCell(pingjia_title);
                    Label knowledge_title = new Label(14, 2, "知识点", cFormat1);
                    sheet.addCell(knowledge_title);
                    sheet.setColumnView(13, 30);
                    sheet.setColumnView(14, 50);
                    String questionNumCount = "";
                    String difficultyCount = "";
                    String discriminationCount = "";
                    String standardCount = "";
                    String coefficientCount = "";
                    String questionFull = "";
                    for (int i = 0; i < list.size(); i++) {
                        String fullscoe_valstr = Convert.toBigDecimal(df2.format(Double.valueOf(((Object[]) list.get(i))[4] + ""))).stripTrailingZeros().toPlainString();
                        Double fullScores_val = Double.valueOf(fullscoe_valstr);
                        String maxScores_valstr = Convert.toBigDecimal(df2.format(Double.valueOf(((Object[]) list.get(i))[5] + ""))).stripTrailingZeros().toPlainString();
                        Double maxScores_val = Double.valueOf(maxScores_valstr);
                        String minScores_valstr = Convert.toBigDecimal(df2.format(Double.valueOf(((Object[]) list.get(i))[6] + ""))).stripTrailingZeros().toPlainString();
                        Double minScores_val = Double.valueOf(minScores_valstr);
                        Double averageScores_val = Double.valueOf(df2.format(Double.valueOf(((Object[]) list.get(i))[2] + "")));
                        Double difficultys_val = Double.valueOf(df3.format(Double.valueOf(((Object[]) list.get(i))[7] + "")));
                        Double discriminations_val = Double.valueOf(df3.format(Double.valueOf(((Object[]) list.get(i))[10] + "")));
                        Double standards_val = Double.valueOf(df3.format(Double.valueOf(((Object[]) list.get(i))[8] + "")));
                        Double coefficients_val = Double.valueOf(df3.format(Double.valueOf(((Object[]) list.get(i))[9] + "")));
                        String questionNum = ((Object[]) list.get(i))[0] + "";
                        String questionNum_val = questionNum.replaceAll("_", "");
                        String questionNum_val1 = questionNum.replaceAll("-", "");
                        Pattern pattern = Pattern.compile("[0-9]*");
                        pattern.matcher(questionNum_val).matches();
                        pattern.matcher(questionNum_val1).matches();
                        if (pattern.matcher(questionNum_val).matches() || pattern.matcher(questionNum_val1).matches()) {
                            questionNum_value = "T" + ((Object[]) list.get(i))[0];
                        } else {
                            questionNum_value = "" + ((Object[]) list.get(i))[0];
                        }
                        if (i % 2 == 0) {
                            Label questionNums = new Label(0, 3 + i, questionNum_value, writableCellFormat);
                            sheet.addCell(questionNums);
                            questionNumCount = questionNumCount + ((Object[]) list.get(i))[0] + Const.STRING_SEPERATOR;
                            Label questionTypes = new Label(1, 3 + i, ((Object[]) list.get(i))[1] + "", writableCellFormat);
                            sheet.addCell(questionTypes);
                            Number fullScores = new Number(2, 3 + i, fullScores_val.doubleValue(), writableCellFormat);
                            sheet.addCell(fullScores);
                            questionFull = questionFull + fullScores_val + Const.STRING_SEPERATOR;
                            Label numOfStudent = new Label(3, 3 + i, ((Object[]) list.get(i))[14] + "", writableCellFormat);
                            sheet.addCell(numOfStudent);
                            Label fullNumOfStudent = new Label(4, 3 + i, ((Object[]) list.get(i))[15] + "", writableCellFormat);
                            sheet.addCell(fullNumOfStudent);
                            Label zeroNumOfStudent = new Label(5, 3 + i, ((Object[]) list.get(i))[16] + "", writableCellFormat);
                            sheet.addCell(zeroNumOfStudent);
                            Number maxScores = new Number(6, 3 + i, maxScores_val.doubleValue(), writableCellFormat);
                            sheet.addCell(maxScores);
                            Number minScores = new Number(7, 3 + i, minScores_val.doubleValue(), writableCellFormat);
                            sheet.addCell(minScores);
                            Number averageScores = new Number(8, 3 + i, averageScores_val.doubleValue(), cFormat2_1);
                            sheet.addCell(averageScores);
                            Number difficultys = new Number(9, 3 + i, difficultys_val.doubleValue(), writableCellFormat2);
                            sheet.addCell(difficultys);
                            difficultyCount = difficultyCount + ((Object[]) list.get(i))[7] + Const.STRING_SEPERATOR;
                            Number discriminations = new Number(10, 3 + i, discriminations_val.doubleValue(), writableCellFormat2);
                            sheet.addCell(discriminations);
                            discriminationCount = discriminationCount + ((Object[]) list.get(i))[10] + Const.STRING_SEPERATOR;
                            Number standards = new Number(11, 3 + i, standards_val.doubleValue(), writableCellFormat2);
                            sheet.addCell(standards);
                            standardCount = standardCount + ((Object[]) list.get(i))[8] + Const.STRING_SEPERATOR;
                            Number coefficients = new Number(12, 3 + i, coefficients_val.doubleValue(), writableCellFormat2);
                            sheet.addCell(coefficients);
                            Label pingjia = new Label(13, 3 + i, ((Object[]) list.get(i))[12] + "", writableCellFormat2);
                            sheet.addCell(pingjia);
                            Label knowledge = new Label(14, 3 + i, ((Object[]) list.get(i))[13] + "", writableCellFormat2);
                            sheet.addCell(knowledge);
                            coefficientCount = coefficientCount + ((Object[]) list.get(i))[9] + Const.STRING_SEPERATOR;
                        } else {
                            Label questionNums2 = new Label(0, 3 + i, questionNum_value, writableCellFormat3);
                            sheet.addCell(questionNums2);
                            questionNumCount = questionNumCount + ((Object[]) list.get(i))[0] + Const.STRING_SEPERATOR;
                            Label questionTypes2 = new Label(1, 3 + i, ((Object[]) list.get(i))[1] + "", writableCellFormat3);
                            sheet.addCell(questionTypes2);
                            Number fullScores2 = new Number(2, 3 + i, fullScores_val.doubleValue(), writableCellFormat3);
                            sheet.addCell(fullScores2);
                            questionFull = questionFull + fullScores_val + Const.STRING_SEPERATOR;
                            Label numOfStudent2 = new Label(3, 3 + i, ((Object[]) list.get(i))[14] + "", cFormat3_1);
                            sheet.addCell(numOfStudent2);
                            Label fullNumOfStudent2 = new Label(4, 3 + i, ((Object[]) list.get(i))[15] + "", cFormat3_1);
                            sheet.addCell(fullNumOfStudent2);
                            Label zeroNumOfStudent2 = new Label(5, 3 + i, ((Object[]) list.get(i))[16] + "", cFormat3_1);
                            sheet.addCell(zeroNumOfStudent2);
                            Number maxScores2 = new Number(6, 3 + i, maxScores_val.doubleValue(), writableCellFormat3);
                            sheet.addCell(maxScores2);
                            Number minScores2 = new Number(7, 3 + i, minScores_val.doubleValue(), writableCellFormat3);
                            sheet.addCell(minScores2);
                            Number averageScores2 = new Number(8, 3 + i, averageScores_val.doubleValue(), cFormat3_1);
                            sheet.addCell(averageScores2);
                            Number difficultys2 = new Number(9, 3 + i, difficultys_val.doubleValue(), writableCellFormat4);
                            sheet.addCell(difficultys2);
                            difficultyCount = difficultyCount + ((Object[]) list.get(i))[7] + Const.STRING_SEPERATOR;
                            Number discriminations2 = new Number(10, 3 + i, discriminations_val.doubleValue(), writableCellFormat4);
                            sheet.addCell(discriminations2);
                            discriminationCount = discriminationCount + ((Object[]) list.get(i))[10] + Const.STRING_SEPERATOR;
                            Number standards2 = new Number(11, 3 + i, standards_val.doubleValue(), writableCellFormat4);
                            sheet.addCell(standards2);
                            standardCount = standardCount + ((Object[]) list.get(i))[8] + Const.STRING_SEPERATOR;
                            Number coefficients2 = new Number(12, 3 + i, coefficients_val.doubleValue(), writableCellFormat4);
                            sheet.addCell(coefficients2);
                            Label pingjia2 = new Label(13, 3 + i, ((Object[]) list.get(i))[12] + "", writableCellFormat4);
                            sheet.addCell(pingjia2);
                            Label knowledge2 = new Label(14, 3 + i, ((Object[]) list.get(i))[13] + "", writableCellFormat4);
                            sheet.addCell(knowledge2);
                            coefficientCount = coefficientCount + ((Object[]) list.get(i))[9] + Const.STRING_SEPERATOR;
                        }
                    }
                    String[] questionNumCounts = questionNumCount.split(Const.STRING_SEPERATOR);
                    int count = 0;
                    for (String str3 : questionNumCounts) {
                        if (!str3.equals("整卷")) {
                            count++;
                        }
                    }
                    Label nandutitle = new Label(0, 0, "学科试题难度等级分布", nandu_qufendu_biaotis1);
                    nandusheet.addCell(nandutitle);
                    nandusheet.setRowView(0, 650);
                    nandusheet.setRowView(1, Const.height_500);
                    nandusheet.setColumnView(3, 35);
                    nandusheet.setColumnView(7, 50);
                    nandusheet.mergeCells(0, 0, 7, 0);
                    Label qTypeName_biaotou = new Label(0, 1, "题型", cFormat1);
                    nandusheet.addCell(qTypeName_biaotou);
                    Label sumCount_biaotou = new Label(1, 1, "数量", cFormat1);
                    nandusheet.addCell(sumCount_biaotou);
                    Label sumfullScore_biaotou = new Label(2, 1, "满分", cFormat1);
                    nandusheet.addCell(sumfullScore_biaotou);
                    Label qufendu_biaotou = new Label(3, 1, "难度等级", cFormat1);
                    nandusheet.addCell(qufendu_biaotou);
                    Label count_biaotou = new Label(4, 1, "题量", cFormat1);
                    nandusheet.addCell(count_biaotou);
                    Label fullScore_biaotou = new Label(5, 1, "分值", cFormat1);
                    nandusheet.addCell(fullScore_biaotou);
                    Label baifenbi_biaotou = new Label(6, 1, "占比(%)", cFormat1);
                    nandusheet.addCell(baifenbi_biaotou);
                    Label questionName_biaotou = new Label(7, 1, "题号", cFormat1);
                    nandusheet.addCell(questionName_biaotou);
                    int l = 0;
                    for (Object key : nanDuDengJi.keySet()) {
                        String qtype = Convert.toStr(key);
                        List<Map<String, Object>> nandulist = nanDuDengJi.get(key);
                        int i2 = 0;
                        for (int j = 0; j < nandulist.size(); j++) {
                            if ((((l * nandulist.size()) + j) + 2) % 2 == 0) {
                                cellFormat3 = writableCellFormat4;
                                cellFormat4 = writableCellFormat3;
                            } else {
                                cellFormat3 = writableCellFormat2;
                                cellFormat4 = writableCellFormat;
                            }
                            if (i2 == 0) {
                                if (qtype.equals("0")) {
                                    type = "客观题";
                                } else if (qtype.equals("1")) {
                                    type = "主观题";
                                } else if (qtype.equals("-1")) {
                                    type = "合计";
                                }
                                Label qTypeName_con = new Label(0, (l * nandulist.size()) + j + 2, type, cFormat3_1);
                                nandusheet.addCell(qTypeName_con);
                                Number sumCount_con = new Number(1, (l * nandulist.size()) + j + 2, Convert.toInt(nandulist.get(j).get("sumCount")).intValue(), writableCellFormat3);
                                nandusheet.addCell(sumCount_con);
                                Number sumfullScore_con = new Number(2, (l * nandulist.size()) + j + 2, Convert.toDouble(nandulist.get(j).get("sumfullScore")).doubleValue(), cFormat3_1);
                                nandusheet.addCell(sumfullScore_con);
                                Label qufendu_con = new Label(3, (l * nandulist.size()) + j + 2, Convert.toStr(nandulist.get(j).get("nandu")), cellFormat3);
                                nandusheet.addCell(qufendu_con);
                                if (Convert.toInt(nandulist.get(j).get("count")).intValue() == 0) {
                                    Label count_con = new Label(4, (l * nandulist.size()) + j + 2, (String) null, cellFormat4);
                                    nandusheet.addCell(count_con);
                                } else {
                                    Number count_con2 = new Number(4, (l * nandulist.size()) + j + 2, Convert.toInt(nandulist.get(j).get("count")).intValue(), cellFormat4);
                                    nandusheet.addCell(count_con2);
                                }
                                if (Convert.toDouble(nandulist.get(j).get("fullScore")).doubleValue() == 0.0d) {
                                    Label fullScore_con = new Label(5, (l * nandulist.size()) + j + 2, (String) null, cellFormat3);
                                    nandusheet.addCell(fullScore_con);
                                } else {
                                    Number fullScore_con2 = new Number(5, (l * nandulist.size()) + j + 2, Convert.toDouble(nandulist.get(j).get("fullScore")).doubleValue(), cellFormat3);
                                    nandusheet.addCell(fullScore_con2);
                                }
                                if (Convert.toDouble(nandulist.get(j).get("baifenbi")).doubleValue() == 0.0d) {
                                    Label baifenbi_con = new Label(6, (l * nandulist.size()) + j + 2, (String) null, cellFormat3);
                                    nandusheet.addCell(baifenbi_con);
                                } else {
                                    Number baifenbi_con2 = new Number(6, (l * nandulist.size()) + j + 2, Convert.toDouble(nandulist.get(j).get("baifenbi")).doubleValue(), cellFormat3);
                                    nandusheet.addCell(baifenbi_con2);
                                }
                                String questionName = "";
                                if (nandulist.get(j).get("questionName") != null) {
                                    for (String str4 : Convert.toStr(nandulist.get(j).get("questionName")).split(Const.STRING_SEPERATOR)) {
                                        questionName = questionName + "  T" + str4;
                                    }
                                }
                                Label questionName_con = new Label(7, (l * nandulist.size()) + j + 2, questionName, cellFormat3);
                                nandusheet.addCell(questionName_con);
                                nandusheet.mergeCells(0, (l * nandulist.size()) + j + 2, 0, (l * nandulist.size()) + j + 2 + 2);
                                nandusheet.mergeCells(1, (l * nandulist.size()) + j + 2, 1, (l * nandulist.size()) + j + 2 + 2);
                                nandusheet.mergeCells(2, (l * nandulist.size()) + j + 2, 2, (l * nandulist.size()) + j + 2 + 2);
                            } else {
                                Label qufendu_con2 = new Label(3, (l * nandulist.size()) + j + 2, Convert.toStr(nandulist.get(j).get("nandu")), cellFormat3);
                                nandusheet.addCell(qufendu_con2);
                                if (Convert.toInt(nandulist.get(j).get("count")).intValue() == 0) {
                                    Label count_con3 = new Label(4, (l * nandulist.size()) + j + 2, (String) null, cellFormat4);
                                    nandusheet.addCell(count_con3);
                                } else {
                                    Number count_con4 = new Number(4, (l * nandulist.size()) + j + 2, (Convert.toInt(nandulist.get(j).get("count")).intValue() == 0 ? null : Convert.toInt(nandulist.get(j).get("count"))).intValue(), cellFormat4);
                                    nandusheet.addCell(count_con4);
                                }
                                if (Convert.toDouble(nandulist.get(j).get("fullScore")).doubleValue() == 0.0d) {
                                    Label fullScore_con3 = new Label(5, (l * nandulist.size()) + j + 2, (String) null, cellFormat3);
                                    nandusheet.addCell(fullScore_con3);
                                } else {
                                    Number fullScore_con4 = new Number(5, (l * nandulist.size()) + j + 2, Convert.toDouble(nandulist.get(j).get("fullScore")).doubleValue(), cellFormat3);
                                    nandusheet.addCell(fullScore_con4);
                                }
                                if (Convert.toDouble(nandulist.get(j).get("baifenbi")).doubleValue() == 0.0d) {
                                    Label baifenbi_con3 = new Label(6, (l * nandulist.size()) + j + 2, (String) null, cellFormat3);
                                    nandusheet.addCell(baifenbi_con3);
                                } else {
                                    Number baifenbi_con4 = new Number(6, (l * nandulist.size()) + j + 2, Convert.toDouble(nandulist.get(j).get("baifenbi")).doubleValue(), cellFormat3);
                                    nandusheet.addCell(baifenbi_con4);
                                }
                                String questionName2 = "";
                                if (nandulist.get(j).get("questionName") != null) {
                                    for (String str5 : Convert.toStr(nandulist.get(j).get("questionName")).split(Const.STRING_SEPERATOR)) {
                                        questionName2 = questionName2 + "  T" + str5;
                                    }
                                }
                                Label questionName_con2 = new Label(7, (l * nandulist.size()) + j + 2, questionName2, cellFormat3);
                                nandusheet.addCell(questionName_con2);
                            }
                            nandusheet.setRowView((l * nandulist.size()) + j + 2, 650);
                            i2++;
                        }
                        l++;
                    }
                    Label qufendutitle = new Label(0, 0, "学科试题区分度等级分布", nandu_qufendu_biaotis1);
                    qufendusheet.addCell(qufendutitle);
                    qufendusheet.setRowView(0, 650);
                    qufendusheet.setRowView(1, Const.height_500);
                    qufendusheet.setColumnView(3, 35);
                    qufendusheet.setColumnView(7, 50);
                    qufendusheet.mergeCells(0, 0, 7, 0);
                    Label qTypeName_biaotou_qufendu = new Label(0, 1, "题型", cFormat1);
                    qufendusheet.addCell(qTypeName_biaotou_qufendu);
                    Label sumCount_biaotou_qufendu = new Label(1, 1, "数量", cFormat1);
                    qufendusheet.addCell(sumCount_biaotou_qufendu);
                    Label sumfullScore_biaotou_qufendu = new Label(2, 1, "满分", cFormat1);
                    qufendusheet.addCell(sumfullScore_biaotou_qufendu);
                    Label qufendu_biaotou_qufendu = new Label(3, 1, "区分度等级", cFormat1);
                    qufendusheet.addCell(qufendu_biaotou_qufendu);
                    Label count_biaotou_qufendu = new Label(4, 1, "题量", cFormat1);
                    qufendusheet.addCell(count_biaotou_qufendu);
                    Label fullScore_biaotou_qufendu = new Label(5, 1, "分值", cFormat1);
                    qufendusheet.addCell(fullScore_biaotou_qufendu);
                    Label baifenbi_biaotou_qufendu = new Label(6, 1, "占比(%)", cFormat1);
                    qufendusheet.addCell(baifenbi_biaotou_qufendu);
                    Label questionName_biaotou_qufendu = new Label(7, 1, "题号", cFormat1);
                    qufendusheet.addCell(questionName_biaotou_qufendu);
                    int l1 = 0;
                    for (Object key2 : qufendudengji.keySet()) {
                        String qtype2 = Convert.toStr(key2);
                        List<Map<String, Object>> qufendulist = qufendudengji.get(key2);
                        int i3 = 0;
                        for (int j2 = 0; j2 < qufendulist.size(); j2++) {
                            if ((((l1 * qufendulist.size()) + j2) + 2) % 2 == 0) {
                                cellFormat = writableCellFormat4;
                                cellFormat2 = writableCellFormat3;
                            } else {
                                cellFormat = writableCellFormat2;
                                cellFormat2 = writableCellFormat;
                            }
                            if (i3 == 0) {
                                if (qtype2.equals("0")) {
                                    type = "客观题";
                                } else if (qtype2.equals("1")) {
                                    type = "主观题";
                                } else if (qtype2.equals("-1")) {
                                    type = "合计";
                                }
                                Label qTypeName_con2 = new Label(0, (l1 * qufendulist.size()) + j2 + 2, type, cFormat3_1);
                                qufendusheet.addCell(qTypeName_con2);
                                Number sumCount_con2 = new Number(1, (l1 * qufendulist.size()) + j2 + 2, Convert.toInt(qufendulist.get(j2).get("sumCount")).intValue(), writableCellFormat3);
                                qufendusheet.addCell(sumCount_con2);
                                Number sumfullScore_con2 = new Number(2, (l1 * qufendulist.size()) + j2 + 2, Convert.toDouble(qufendulist.get(j2).get("sumfullScore")).doubleValue(), cFormat3_1);
                                qufendusheet.addCell(sumfullScore_con2);
                                Label qufendu_con3 = new Label(3, (l1 * qufendulist.size()) + j2 + 2, Convert.toStr(qufendulist.get(j2).get("qufendu")), cellFormat);
                                qufendusheet.addCell(qufendu_con3);
                                if (Convert.toInt(qufendulist.get(j2).get("count")).intValue() == 0) {
                                    Label count_con5 = new Label(4, (l1 * qufendulist.size()) + j2 + 2, (String) null, cellFormat2);
                                    qufendusheet.addCell(count_con5);
                                } else {
                                    Number count_con6 = new Number(4, (l1 * qufendulist.size()) + j2 + 2, Convert.toInt(qufendulist.get(j2).get("count")).intValue(), cellFormat2);
                                    qufendusheet.addCell(count_con6);
                                }
                                if (Convert.toDouble(qufendulist.get(j2).get("fullScore")).doubleValue() == 0.0d) {
                                    Label fullScore_con5 = new Label(5, (l1 * qufendulist.size()) + j2 + 2, (String) null, cellFormat);
                                    qufendusheet.addCell(fullScore_con5);
                                } else {
                                    Number fullScore_con6 = new Number(5, (l1 * qufendulist.size()) + j2 + 2, Convert.toDouble(qufendulist.get(j2).get("fullScore")).doubleValue(), cellFormat);
                                    qufendusheet.addCell(fullScore_con6);
                                }
                                if (Convert.toDouble(qufendulist.get(j2).get("baifenbi")).doubleValue() == 0.0d) {
                                    Label baifenbi_con5 = new Label(6, (l1 * qufendulist.size()) + j2 + 2, (String) null, cellFormat);
                                    qufendusheet.addCell(baifenbi_con5);
                                } else {
                                    Number baifenbi_con6 = new Number(6, (l1 * qufendulist.size()) + j2 + 2, Convert.toDouble(qufendulist.get(j2).get("baifenbi")).doubleValue(), cellFormat);
                                    qufendusheet.addCell(baifenbi_con6);
                                }
                                String questionName3 = "";
                                if (qufendulist.get(j2).get("questionName") != null) {
                                    for (String str6 : Convert.toStr(qufendulist.get(j2).get("questionName")).split(Const.STRING_SEPERATOR)) {
                                        questionName3 = questionName3 + "  T" + str6;
                                    }
                                }
                                Label questionName_con3 = new Label(7, (l1 * qufendulist.size()) + j2 + 2, questionName3, cellFormat);
                                qufendusheet.addCell(questionName_con3);
                                qufendusheet.mergeCells(0, (l1 * qufendulist.size()) + j2 + 2, 0, (l1 * qufendulist.size()) + j2 + 2 + 3);
                                qufendusheet.mergeCells(1, (l1 * qufendulist.size()) + j2 + 2, 1, (l1 * qufendulist.size()) + j2 + 2 + 3);
                                qufendusheet.mergeCells(2, (l1 * qufendulist.size()) + j2 + 2, 2, (l1 * qufendulist.size()) + j2 + 2 + 3);
                            } else {
                                Label qufendu_con4 = new Label(3, (l1 * qufendulist.size()) + j2 + 2, Convert.toStr(qufendulist.get(j2).get("qufendu")), cellFormat);
                                qufendusheet.addCell(qufendu_con4);
                                if (Convert.toInt(qufendulist.get(j2).get("count")).intValue() == 0) {
                                    Label count_con7 = new Label(4, (l1 * qufendulist.size()) + j2 + 2, (String) null, cellFormat2);
                                    qufendusheet.addCell(count_con7);
                                } else {
                                    Number count_con8 = new Number(4, (l1 * qufendulist.size()) + j2 + 2, Convert.toInt(qufendulist.get(j2).get("count")).intValue(), cellFormat2);
                                    qufendusheet.addCell(count_con8);
                                }
                                if (Convert.toDouble(qufendulist.get(j2).get("fullScore")).doubleValue() == 0.0d) {
                                    Label fullScore_con7 = new Label(5, (l1 * qufendulist.size()) + j2 + 2, (String) null, cellFormat);
                                    qufendusheet.addCell(fullScore_con7);
                                } else {
                                    Number fullScore_con8 = new Number(5, (l1 * qufendulist.size()) + j2 + 2, Convert.toDouble(qufendulist.get(j2).get("fullScore")).doubleValue(), cellFormat);
                                    qufendusheet.addCell(fullScore_con8);
                                }
                                if (Convert.toDouble(qufendulist.get(j2).get("baifenbi")).doubleValue() == 0.0d) {
                                    Label baifenbi_con7 = new Label(6, (l1 * qufendulist.size()) + j2 + 2, (String) null, cellFormat);
                                    qufendusheet.addCell(baifenbi_con7);
                                } else {
                                    Number baifenbi_con8 = new Number(6, (l1 * qufendulist.size()) + j2 + 2, Convert.toDouble(qufendulist.get(j2).get("baifenbi")).doubleValue(), cellFormat);
                                    qufendusheet.addCell(baifenbi_con8);
                                }
                                String questionName4 = "";
                                if (qufendulist.get(j2).get("questionName") != null) {
                                    String[] questionNames = Convert.toStr(qufendulist.get(j2).get("questionName")).split(Const.STRING_SEPERATOR);
                                    for (String str7 : questionNames) {
                                        questionName4 = questionName4 + "  T" + str7;
                                    }
                                }
                                Label questionName_con4 = new Label(7, (l1 * qufendulist.size()) + j2 + 2, questionName4, cellFormat);
                                qufendusheet.addCell(questionName_con4);
                            }
                            qufendusheet.setRowView((l1 * qufendulist.size()) + j2 + 2, 650);
                            i3++;
                        }
                        l1++;
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                wwBook.write();
                if (wwBook != null) {
                    try {
                        wwBook.close();
                    } catch (WriteException e2) {
                        e2.printStackTrace();
                    }
                }
            } catch (Exception e3) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                    } catch (WriteException e4) {
                        e4.printStackTrace();
                    }
                }
            } catch (Throwable th) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                    } catch (WriteException e5) {
                        e5.printStackTrace();
                        throw th;
                    }
                }
                throw th;
            }
        } catch (Exception e6) {
            e6.printStackTrace();
        }
        return filePath;
    }

    public File getSubChartImgFile_stuanalyAction(String userId, String rowKeys, String questionNumCount, String difficultyCount, String discriminationCount, String standardCount, String coefficientCount, String questionFull, String dirPath, String[] rowKey, boolean flg) {
        if (flg) {
            subjectLineImage_stuanalyAction(userId, rowKeys, questionNumCount, difficultyCount, discriminationCount, standardCount, coefficientCount, questionFull, rowKey);
            return null;
        }
        File file = new File(dirPath + File.separator + "tmpLinePng" + File.separator + userId + rowKeys + ".png");
        return file;
    }

    public void subjectLineImage_stuanalyAction(String userId, String rowKey, String questionNumCount, String difficultyCount, String discriminationCount, String standardCount, String coefficientCount, String questionFull, String[] titleName2) {
        String[] questionNums = questionNumCount.split(Const.STRING_SEPERATOR);
        String[] difficultys = difficultyCount.split(Const.STRING_SEPERATOR);
        String[] totalScores = discriminationCount.split(Const.STRING_SEPERATOR);
        String[] stanScore = coefficientCount.split(Const.STRING_SEPERATOR);
        standardCount.split(Const.STRING_SEPERATOR);
        String[] questionFull_val = questionFull.split(Const.STRING_SEPERATOR);
        int count = 0;
        for (String str : questionNums) {
            if (!str.equals("整卷")) {
                count++;
            }
        }
        String[] rowKeys = new String[2];
        rowKeys[0] = "难度";
        rowKeys[1] = "区分度";
        for (int i = 0; i < rowKeys.length; i++) {
            rowKeys[i] = rowKeys[i];
        }
        String[] rowKeys1 = new String[2];
        rowKeys1[0] = "难度";
        rowKeys1[1] = "区分度";
        for (int i2 = 0; i2 < rowKeys1.length; i2++) {
            rowKeys1[i2] = rowKeys1[i2];
        }
        String[] rowKeys2 = new String[1];
        rowKeys2[0] = "变异系数";
        for (int i3 = 0; i3 < rowKeys2.length; i3++) {
            rowKeys2[i3] = rowKeys2[i3];
        }
        String[] titleName = {"小题难度-区分度折线图", "小题难度-区分度二维图", "小题得分离散情况对比图"};
        String[] columnKeys = new String[questionNums.length];
        double[][] data = new double[rowKeys.length][questionNums.length];
        double[] bubbleX = new double[questionNums.length];
        double[] bubbleY = new double[questionNums.length];
        double[] bubbleZ = new double[questionNums.length];
        String[] bubbleName = new String[questionNums.length];
        String[] columnKeys3 = new String[count];
        double[][] data_2 = new double[rowKeys2.length][count];
        DecimalFormat df = new DecimalFormat("0.00");
        DecimalFormat dfunit = new DecimalFormat("0.0");
        for (int i4 = 0; i4 < questionNums.length; i4++) {
            String questionNum = questionNums[i4];
            String questionNum_val = questionNum.replaceAll("_", "");
            String questionNum_val1 = questionNum.replaceAll("-", "");
            Pattern pattern = Pattern.compile("[0-9]*");
            pattern.matcher(questionNum_val).matches();
            pattern.matcher(questionNum_val1).matches();
            if (pattern.matcher(questionNum_val).matches() || pattern.matcher(questionNum_val1).matches()) {
                columnKeys[i4] = "T" + questionNums[i4];
                columnKeys3[i4] = "T" + questionNums[i4];
            } else {
                columnKeys[i4] = questionNums[i4];
            }
        }
        List list_data = new ArrayList();
        Double.valueOf(0.0d);
        Double.valueOf(0.0d);
        List list_data_2 = new ArrayList();
        Double.valueOf(0.0d);
        Double.valueOf(0.0d);
        for (int i5 = 0; i5 < questionNums.length; i5++) {
            data[0][i5] = Double.parseDouble(df.format(Double.parseDouble(difficultys[i5])));
            data[1][i5] = Double.parseDouble(df.format(Double.parseDouble(totalScores[i5])));
            list_data.add(Double.valueOf(Double.parseDouble(df.format(Double.parseDouble(difficultys[i5])))));
            list_data.add(Double.valueOf(Double.parseDouble(df.format(Double.parseDouble(totalScores[i5])))));
            if (!questionNums[i5].contains("整卷")) {
                data_2[0][i5] = Double.parseDouble(df.format(Double.parseDouble(stanScore[i5])));
                list_data_2.add(Double.valueOf(Double.parseDouble(df.format(Double.parseDouble(stanScore[i5])))));
            }
            bubbleX[i5] = Double.parseDouble(df.format(Double.parseDouble(difficultys[i5])));
            bubbleY[i5] = Double.parseDouble(df.format(Double.parseDouble(totalScores[i5])));
            if (questionNums[i5].contains("整卷")) {
                bubbleZ[i5] = 0.01d * Double.parseDouble(df.format(Double.parseDouble(questionFull_val[i5])));
                bubbleName[i5] = questionNums[i5];
            } else {
                bubbleZ[i5] = 0.01d * Double.parseDouble(df.format(Double.parseDouble(questionFull_val[i5])));
                bubbleName[i5] = "T" + questionNums[i5];
            }
        }
        List<String> keyList = new ArrayList<>();
        keyList.add("难度");
        new ArrayList();
        int length = questionNums.length * 80;
        Double maxDesc = (Double) Collections.max(list_data);
        Double minDesc = (Double) Collections.min(list_data);
        Double count_unit = Double.valueOf(Double.parseDouble(dfunit.format((maxDesc.doubleValue() - minDesc.doubleValue()) / 5.0d)));
        Double count_unit_2 = Double.valueOf(0.0d);
        if (count > 0) {
            Double maxDesc_2 = (Double) Collections.max(list_data_2);
            Double minDesc_2 = (Double) Collections.min(list_data_2);
            count_unit_2 = Double.valueOf(Double.parseDouble(dfunit.format((maxDesc_2.doubleValue() - minDesc_2.doubleValue()) / 3.0d)));
        }
        try {
            HttpServletResponse response = ServletActionContext.getResponse();
            response.reset();
            response.setContentType("image/jpeg");
            JFreeChart chart = this.lc.getLineChar_questions(data, rowKeys, columnKeys, "题号", "", titleName[0], "#0.0", count_unit, "Y");
            getChartImageFolder(chart, "tmpLinePng", Const.width_1100, Const.height_500, userId + titleName2[0]);
            JFreeChart chart1 = this.bubbleChart.createBubbleChart(bubbleX, bubbleY, bubbleZ, bubbleName, titleName[1], "难度", "区分度");
            getChartImageFolder(chart1, "tmpLinePng", Const.width_1100, Const.height_500, userId + titleName2[1]);
            JFreeChart chart_2 = this.lc.getLineChar_questions(data_2, rowKeys2, columnKeys3, "题号", "", titleName[2], "#0.0", count_unit_2, "N");
            getChartImageFolder(chart_2, "tmpLinePng", Const.width_1100, Const.height_500, userId + titleName2[2]);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String exportT3Jxl_quesScoreAction(String examNum, String gradeNum, String schoolNum, String subjectNum, String classNum, String studentId, String studentType, String type, String source, String step, String sNum, String c_exam, String rpt_name, String isMoreSchool, String rptTitle, String isHistory, String isSaveWrite, String dirPath, String uri, String userNum, String schName, String gradeName, String className, String subjectName, String imgRoot, String agent, String srval, String subCompose, String teachUnit, String contrastObject, String teachUnit_s, String contrast_s) throws IOException {
        String srname;
        String excelName;
        String qtypeName;
        Double score_D;
        Double score_D2;
        String rptTitle2 = this.sp.getHeaderStr(examNum, subjectNum, gradeNum, schoolNum, classNum, studentId, studentType, true, true, true, true, false, true, true, true, false, true, true, true, true, true, false, subCompose, "0");
        new ArrayList();
        new ArrayList();
        List list = this.reportService.getQuesScore(examNum, gradeNum, schoolNum, subjectNum, classNum, studentType, type, source, "0", subCompose, teachUnit, contrastObject, teachUnit_s, contrast_s);
        String count = this.reportService.idhavechoose(examNum, gradeNum, subjectNum);
        Integer ishavechoose = Integer.valueOf(count.equals("0") ? 0 : 1);
        String folderPath = "ExportFolder/reportExcel" + userNum;
        String str = "reportExcel" + userNum;
        String str2 = "reportExcel" + userNum;
        String excelName2 = (null == gradeName || "".equals(gradeName)) ? rpt_name + "_" + gradeNum : rpt_name + "_" + gradeName;
        if (null != classNum && !"".equals(classNum) && !classNum.contains(Const.STRING_SEPERATOR)) {
            excelName2 = (null == className || "".equals(className)) ? excelName2 + "_" + classNum : excelName2 + "_" + className;
        }
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFileXLSX(excelName2, dirPath, folderPath);
        SXSSFWorkbook wb = new SXSSFWorkbook();
        wb.setCompressTempFiles(true);
        Font fontCent = wb.createFont();
        fontCent.setFontName("Arial");
        fontCent.setFontHeightInPoints((short) 15);
        fontCent.setBold(true);
        fontCent.setColor(Convert.toShort(32767).shortValue());
        CellStyle biaotis1 = wb.createCellStyle();
        biaotis1.setFont(fontCent);
        biaotis1.setWrapText(true);
        biaotis1.setAlignment(HorizontalAlignment.LEFT);
        biaotis1.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
        Font fontCent1 = wb.createFont();
        fontCent1.setFontName("Arial");
        fontCent1.setFontHeightInPoints((short) 10);
        fontCent1.setColor(Convert.toShort(32767).shortValue());
        CellStyle title = wb.createCellStyle();
        title.setFont(fontCent1);
        title.setWrapText(true);
        title.setAlignment(HorizontalAlignment.LEFT);
        title.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
        Font fontCent3 = wb.createFont();
        fontCent3.setFontName("Arial");
        fontCent3.setFontHeightInPoints((short) 10);
        fontCent3.setColor(Convert.toShort(32767).shortValue());
        CellStyle cFormat1 = wb.createCellStyle();
        cFormat1.setFont(fontCent3);
        cFormat1.setBorderBottom(BorderStyle.THIN);
        cFormat1.setBorderRight(BorderStyle.THIN);
        cFormat1.setBorderLeft(BorderStyle.THIN);
        cFormat1.setBorderTop(BorderStyle.THIN);
        cFormat1.setWrapText(true);
        cFormat1.setFillForegroundColor(IndexedColors.LIGHT_TURQUOISE.getIndex());
        cFormat1.setAlignment(HorizontalAlignment.CENTER);
        cFormat1.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
        cFormat1.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        DataFormat df = wb.createDataFormat();
        CellStyle cFormat2 = wb.createCellStyle();
        cFormat2.setFont(fontCent3);
        cFormat2.setBorderBottom(BorderStyle.THIN);
        cFormat2.setBorderRight(BorderStyle.THIN);
        cFormat2.setBorderLeft(BorderStyle.THIN);
        cFormat2.setBorderTop(BorderStyle.THIN);
        cFormat2.setWrapText(true);
        cFormat2.setFillForegroundColor(IndexedColors.WHITE.index);
        cFormat2.setAlignment(HorizontalAlignment.CENTER);
        cFormat2.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
        cFormat2.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        CellStyle cFormat2_0 = wb.createCellStyle();
        cFormat2_0.setFont(fontCent3);
        cFormat2_0.setBorderBottom(BorderStyle.THIN);
        cFormat2_0.setBorderRight(BorderStyle.THIN);
        cFormat2_0.setBorderLeft(BorderStyle.THIN);
        cFormat2_0.setBorderTop(BorderStyle.THIN);
        cFormat2_0.setWrapText(true);
        cFormat2_0.setDataFormat(df.getFormat("0.0%"));
        cFormat2_0.setFillForegroundColor(IndexedColors.WHITE.index);
        cFormat2_0.setAlignment(HorizontalAlignment.CENTER);
        cFormat2_0.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
        cFormat2_0.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        CellStyle cFormat2_1 = wb.createCellStyle();
        cFormat2_1.setFont(fontCent3);
        cFormat2_1.setBorderBottom(BorderStyle.THIN);
        cFormat2_1.setBorderRight(BorderStyle.THIN);
        cFormat2_1.setBorderLeft(BorderStyle.THIN);
        cFormat2_1.setBorderTop(BorderStyle.THIN);
        cFormat2_1.setWrapText(true);
        cFormat2_1.setDataFormat(df.getFormat("0.0"));
        cFormat2_1.setFillForegroundColor(IndexedColors.WHITE.index);
        cFormat2_1.setAlignment(HorizontalAlignment.CENTER);
        cFormat2_1.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
        cFormat2_1.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        CellStyle cFormat2_2 = wb.createCellStyle();
        cFormat2_2.setFont(fontCent3);
        cFormat2_2.setBorderBottom(BorderStyle.THIN);
        cFormat2_2.setBorderRight(BorderStyle.THIN);
        cFormat2_2.setBorderLeft(BorderStyle.THIN);
        cFormat2_2.setBorderTop(BorderStyle.THIN);
        cFormat2_2.setWrapText(true);
        cFormat2_2.setDataFormat(df.getFormat("0.00"));
        cFormat2_2.setFillForegroundColor(IndexedColors.WHITE.index);
        cFormat2_2.setAlignment(HorizontalAlignment.CENTER);
        cFormat2_2.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
        cFormat2_2.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        CellStyle cFormat3 = wb.createCellStyle();
        cFormat3.setFont(fontCent3);
        cFormat3.setBorderBottom(BorderStyle.THIN);
        cFormat3.setBorderRight(BorderStyle.THIN);
        cFormat3.setBorderLeft(BorderStyle.THIN);
        cFormat3.setBorderTop(BorderStyle.THIN);
        cFormat3.setWrapText(true);
        cFormat3.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.index);
        cFormat3.setAlignment(HorizontalAlignment.CENTER);
        cFormat3.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
        cFormat3.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        CellStyle cFormat3_0 = wb.createCellStyle();
        cFormat3_0.setFont(fontCent3);
        cFormat3_0.setBorderBottom(BorderStyle.THIN);
        cFormat3_0.setBorderRight(BorderStyle.THIN);
        cFormat3_0.setBorderLeft(BorderStyle.THIN);
        cFormat3_0.setBorderTop(BorderStyle.THIN);
        cFormat3_0.setWrapText(true);
        cFormat3_0.setDataFormat(df.getFormat("0.0%"));
        cFormat3_0.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.index);
        cFormat3_0.setAlignment(HorizontalAlignment.CENTER);
        cFormat3_0.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
        cFormat3_0.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        CellStyle cFormat3_1 = wb.createCellStyle();
        cFormat3_1.setFont(fontCent3);
        cFormat3_1.setBorderBottom(BorderStyle.THIN);
        cFormat3_1.setBorderRight(BorderStyle.THIN);
        cFormat3_1.setBorderLeft(BorderStyle.THIN);
        cFormat3_1.setBorderTop(BorderStyle.THIN);
        cFormat3_1.setWrapText(true);
        cFormat3_1.setDataFormat(df.getFormat("0.0"));
        cFormat3_1.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.index);
        cFormat3_1.setAlignment(HorizontalAlignment.CENTER);
        cFormat3_1.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
        cFormat3_1.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        CellStyle cFormat3_2 = wb.createCellStyle();
        cFormat3_2.setFont(fontCent3);
        cFormat3_2.setBorderBottom(BorderStyle.THIN);
        cFormat3_2.setBorderRight(BorderStyle.THIN);
        cFormat3_2.setBorderLeft(BorderStyle.THIN);
        cFormat3_2.setBorderTop(BorderStyle.THIN);
        cFormat3_2.setWrapText(true);
        cFormat3_2.setDataFormat(df.getFormat("0.00"));
        cFormat3_2.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.index);
        cFormat3_2.setAlignment(HorizontalAlignment.CENTER);
        cFormat3_2.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
        cFormat3_2.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        if (srval.equals("0")) {
            srname = "平均分";
        } else {
            srname = "得分率";
        }
        SXSSFSheet sheet = wb.createSheet(rpt_name);
        List list0 = (List) list.get(0);
        List list1 = (List) list.get(1);
        DecimalFormat df01 = new DecimalFormat("0.0");
        DecimalFormat df02 = new DecimalFormat("0.00");
        DecimalFormat df03 = new DecimalFormat("0.000");
        df01.setRoundingMode(RoundingMode.HALF_UP);
        df02.setRoundingMode(RoundingMode.HALF_UP);
        df03.setRoundingMode(RoundingMode.HALF_UP);
        Cell cell0 = sheet.createRow(0).createCell(0);
        cell0.setCellValue(rpt_name);
        SXSSFRow createRow = sheet.createRow(1);
        Cell cell1 = createRow.createCell(0);
        cell1.setCellValue(rptTitle2);
        createRow.setHeight((short) 500);
        SXSSFRow createRow2 = sheet.createRow(2);
        Cell cell2_0 = createRow2.createCell(0);
        cell2_0.setCellValue("题号");
        Cell cell2_1 = createRow2.createCell(1);
        cell2_1.setCellValue("题型");
        Cell cell2_2 = createRow2.createCell(2);
        cell2_2.setCellValue("满分");
        cell0.setCellStyle(biaotis1);
        cell1.setCellStyle(title);
        cell2_0.setCellStyle(cFormat1);
        cell2_1.setCellStyle(cFormat1);
        cell2_2.setCellStyle(cFormat1);
        SXSSFRow createRow3 = sheet.createRow(3);
        Cell cell3_0 = createRow3.createCell(0);
        Cell cell3_1 = createRow3.createCell(1);
        Cell cell3_2 = createRow3.createCell(2);
        cell3_0.setCellStyle(cFormat1);
        cell3_1.setCellStyle(cFormat1);
        cell3_2.setCellStyle(cFormat1);
        int claCount = list1.size() / list0.size();
        if (claCount < 4) {
            sheet.addMergedRegion(new CellRangeAddress(0, 0, 0, (claCount * 2) + 2));
            sheet.addMergedRegion(new CellRangeAddress(1, 1, 0, 11));
        } else {
            sheet.addMergedRegion(new CellRangeAddress(0, 0, 0, (claCount * 2) + 2));
            sheet.addMergedRegion(new CellRangeAddress(1, 1, 0, (claCount * 2) + 2));
        }
        sheet.addMergedRegion(new CellRangeAddress(2, 3, 0, 0));
        sheet.addMergedRegion(new CellRangeAddress(2, 3, 1, 1));
        sheet.addMergedRegion(new CellRangeAddress(2, 3, 2, 2));
        if (list0.size() > 0 && list1.size() > 0) {
            Integer bei = 2;
            if (ishavechoose.intValue() == 1) {
                bei = 3;
            }
            for (int i = 0; i < list0.size(); i++) {
                if (null != ((Define) list0.get(i)).getQuestionType() && !((Define) list0.get(i)).getQuestionType().equals("") && ((Define) list0.get(i)).getQuestionType().equals("1")) {
                    qtypeName = "主观题";
                } else if (null != ((Define) list0.get(i)).getQuestionType() && !((Define) list0.get(i)).getQuestionType().equals("") && ((Define) list0.get(i)).getQuestionType().equals("0")) {
                    qtypeName = "客观题";
                } else {
                    qtypeName = "";
                }
                SXSSFRow createRow4 = sheet.createRow(i + 4);
                if (i % 2 == 0) {
                    if (((Define) list0.get(i)).getQuestionNum().equals("整卷")) {
                        Cell celli4_0 = createRow4.createCell(0);
                        celli4_0.setCellValue(((Define) list0.get(i)).getQuestionNum());
                        celli4_0.setCellStyle(cFormat2);
                    } else {
                        Cell celli4_02 = createRow4.createCell(0);
                        celli4_02.setCellValue("T" + ((Define) list0.get(i)).getQuestionNum());
                        celli4_02.setCellStyle(cFormat2);
                    }
                    Cell celli4_1 = createRow4.createCell(1);
                    celli4_1.setCellValue(qtypeName);
                    celli4_1.setCellStyle(cFormat2);
                    String fullscoreStr = Convert.toBigDecimal(df01.format(((Define) list0.get(i)).getFullScore())).stripTrailingZeros().toPlainString();
                    Cell celli4_2 = createRow4.createCell(2);
                    celli4_2.setCellValue(Double.valueOf(fullscoreStr).doubleValue());
                    celli4_2.setCellStyle(cFormat2);
                    for (int j = 0; j < claCount; j++) {
                        Double.valueOf(df02.format(0L));
                        if (srval.equals("0")) {
                            Object score = ((Object[]) list1.get((j * list0.size()) + i))[10];
                            score_D2 = Double.valueOf(df02.format(score));
                        } else {
                            Object score2 = ((Object[]) list1.get((j * list0.size()) + i))[7];
                            score_D2 = Double.valueOf(df03.format(score2));
                        }
                        if (srval.equals("0")) {
                            Cell scoreRates = createRow4.createCell(3 + (bei.intValue() * j));
                            if (score_D2.doubleValue() == 1.0d) {
                                scoreRates.setCellValue("-");
                                scoreRates.setCellStyle(cFormat2_2);
                            } else {
                                scoreRates.setCellValue(score_D2.doubleValue());
                                scoreRates.setCellStyle(cFormat2_2);
                            }
                        } else {
                            Cell scoreRates2 = createRow4.createCell(3 + (bei.intValue() * j));
                            if (score_D2.doubleValue() == -1.0d) {
                                scoreRates2.setCellValue("-");
                                scoreRates2.setCellStyle(cFormat2_0);
                            } else {
                                scoreRates2.setCellValue(score_D2.doubleValue());
                                scoreRates2.setCellStyle(cFormat2_0);
                            }
                        }
                        Double variations_val = Double.valueOf(df02.format(((Object[]) list1.get((j * list0.size()) + i))[8]));
                        Cell variations = createRow4.createCell(4 + (bei.intValue() * j));
                        if (variations_val.doubleValue() == -1.0d) {
                            variations.setCellValue("-");
                        } else {
                            variations.setCellValue(variations_val.doubleValue());
                        }
                        variations.setCellStyle(cFormat2_2);
                        if (ishavechoose.intValue() == 1) {
                            String choosenums = Convert.toStr(((Object[]) list1.get((j * list0.size()) + i))[15]);
                            Cell choosenum = createRow4.createCell(5 + (bei.intValue() * j));
                            if (choosenums.equals("")) {
                                choosenum.setCellValue(choosenums);
                            } else {
                                choosenum.setCellValue(choosenums + "人选做");
                            }
                            choosenum.setCellStyle(cFormat2);
                        }
                        if (i == 0) {
                            Cell classNames = createRow2.createCell(3 + (bei.intValue() * j));
                            classNames.setCellValue(((Object[]) list1.get(j * list0.size()))[4] + "");
                            classNames.setCellStyle(cFormat1);
                            Cell classNames2 = createRow2.createCell(4 + (bei.intValue() * j));
                            classNames2.setCellStyle(cFormat1);
                            if (ishavechoose.intValue() == 1) {
                                sheet.addMergedRegion(new CellRangeAddress(2, 2, 3 + (bei.intValue() * j), 5 + (bei.intValue() * j)));
                            } else {
                                sheet.addMergedRegion(new CellRangeAddress(2, 2, 3 + (bei.intValue() * j), 4 + (bei.intValue() * j)));
                            }
                            Cell scoreRate = createRow3.createCell(3 + (bei.intValue() * j));
                            scoreRate.setCellValue(srname);
                            scoreRate.setCellStyle(cFormat1);
                            Cell variation = createRow3.createCell(4 + (bei.intValue() * j));
                            variation.setCellValue("变异系数");
                            variation.setCellStyle(cFormat1);
                            if (ishavechoose.intValue() == 1) {
                                createRow3.createCell(5 + (bei.intValue() * j));
                                scoreRate.setCellValue("备注");
                                scoreRate.setCellStyle(cFormat1);
                            }
                        }
                    }
                } else {
                    if (((Define) list0.get(i)).getQuestionNum().equals("整卷")) {
                        Cell celli4_03 = createRow4.createCell(0);
                        celli4_03.setCellValue(((Define) list0.get(i)).getQuestionNum());
                        celli4_03.setCellStyle(cFormat3);
                    } else {
                        Cell celli4_04 = createRow4.createCell(0);
                        celli4_04.setCellValue("T" + ((Define) list0.get(i)).getQuestionNum());
                        celli4_04.setCellStyle(cFormat3);
                    }
                    Cell celli4_12 = createRow4.createCell(1);
                    celli4_12.setCellValue(qtypeName);
                    celli4_12.setCellStyle(cFormat3);
                    String fullscoreStr2 = Convert.toBigDecimal(df01.format(((Define) list0.get(i)).getFullScore())).stripTrailingZeros().toPlainString();
                    Cell celli4_22 = createRow4.createCell(2);
                    celli4_22.setCellValue(Double.valueOf(fullscoreStr2).doubleValue());
                    celli4_22.setCellStyle(cFormat3);
                    for (int j2 = 0; j2 < claCount; j2++) {
                        Double.valueOf(df02.format(0L));
                        if (srval.equals("0")) {
                            Object score3 = ((Object[]) list1.get((j2 * list0.size()) + i))[10];
                            score_D = Double.valueOf(df02.format(score3));
                        } else {
                            Object score4 = ((Object[]) list1.get((j2 * list0.size()) + i))[7];
                            score_D = Double.valueOf(df03.format(score4));
                        }
                        if (srval.equals("0")) {
                            Cell scoreRates3 = createRow4.createCell(3 + (bei.intValue() * j2));
                            if (score_D.doubleValue() == -1.0d) {
                                scoreRates3.setCellValue("-");
                            } else {
                                scoreRates3.setCellValue(score_D.doubleValue());
                            }
                            scoreRates3.setCellStyle(cFormat3_2);
                        } else {
                            Cell scoreRates4 = createRow4.createCell(3 + (bei.intValue() * j2));
                            if (score_D.doubleValue() == -1.0d) {
                                scoreRates4.setCellValue("-");
                            } else {
                                scoreRates4.setCellValue(score_D.doubleValue());
                            }
                            scoreRates4.setCellStyle(cFormat3_0);
                        }
                        Double variations_val2 = Double.valueOf(df02.format(((Object[]) list1.get((j2 * list0.size()) + i))[8]));
                        Cell variations2 = createRow4.createCell(4 + (bei.intValue() * j2));
                        if (variations_val2.doubleValue() == -1.0d) {
                            variations2.setCellValue("-");
                        } else {
                            variations2.setCellValue(variations_val2.doubleValue());
                        }
                        variations2.setCellStyle(cFormat3_2);
                        if (ishavechoose.intValue() == 1) {
                            String choosenums2 = Convert.toStr(((Object[]) list1.get((j2 * list0.size()) + i))[15]);
                            Cell choosenum2 = createRow4.createCell(5 + (bei.intValue() * j2));
                            if (choosenums2.equals("")) {
                                choosenum2.setCellValue(choosenums2);
                            } else {
                                choosenum2.setCellValue(choosenums2 + "人选做");
                            }
                            choosenum2.setCellStyle(cFormat3);
                        }
                        if (i == 0) {
                            Cell classNames3 = createRow2.createCell(3 + (bei.intValue() * j2));
                            classNames3.setCellValue(((Object[]) list1.get(j2 * list0.size()))[4] + "");
                            classNames3.setCellStyle(cFormat1);
                            Cell classNames22 = createRow2.createCell(4 + (bei.intValue() * j2));
                            classNames22.setCellStyle(cFormat1);
                            if (ishavechoose.intValue() == 1) {
                                sheet.addMergedRegion(new CellRangeAddress(2, 2, 3 + (bei.intValue() * j2), 5 + (bei.intValue() * j2)));
                            } else {
                                sheet.addMergedRegion(new CellRangeAddress(2, 2, 3 + (bei.intValue() * j2), 4 + (bei.intValue() * j2)));
                            }
                            Cell scoreRate2 = createRow3.createCell(3 + (bei.intValue() * j2));
                            scoreRate2.setCellValue(srname);
                            scoreRate2.setCellStyle(cFormat1);
                            Cell variation2 = createRow3.createCell(4 + (bei.intValue() * j2));
                            variation2.setCellValue("变异系数");
                            variation2.setCellStyle(cFormat1);
                            if (ishavechoose.intValue() == 1) {
                                createRow3.createCell(5 + (bei.intValue() * j2));
                                scoreRate2.setCellValue("备注");
                                scoreRate2.setCellStyle(cFormat1);
                            }
                        }
                    }
                }
            }
        } else {
            Cell dataNull = createRow3.createCell(0);
            dataNull.setCellValue("数据为空");
            dataNull.setCellStyle(cFormat2);
            sheet.addMergedRegion(new CellRangeAddress(3, 3, 0, 1));
        }
        FileOutputStream fileout = new FileOutputStream(excelFile);
        wb.write(fileout);
        fileout.flush();
        if (wb != null) {
            wb.close();
            if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                HttpServletResponse response = ServletActionContext.getResponse();
                response.reset();
                ServletOutputStream outputStream = response.getOutputStream();
                if (agent.indexOf("firefox") == -1) {
                    excelName = URLEncoder.encode(excelName2, "UTF-8");
                } else {
                    excelName = new String(excelName2.getBytes("UTF-8"), "ISO8859-1");
                }
                response.setContentType("Content-type: applicationnd.ms-excel");
                response.setHeader("Content-disposition", "attachment;filename=" + excelName + ".xlsx");
                response.setHeader("Content-length", String.valueOf(excelFile.length()));
                byte[] tempByte = new byte[1024];
                FileInputStream in = new FileInputStream(excelFile);
                while (true) {
                    int n = in.read(tempByte);
                    if (n == -1) {
                        break;
                    }
                    try {
                        outputStream.write(tempByte, 0, n);
                    } catch (Exception e) {
                        this.log.error("保存未成功", e);
                    }
                }
                outputStream.flush();
                outputStream.close();
                in.close();
            }
        }
        return null;
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String exportT3Jxl_quesScoreAction2(String examNum, String gradeNum, String schoolNum, String subjectNum, String classNum, String studentId, String studentType, String type, String source, String step, String sNum, String c_exam, String rpt_name, String isMoreSchool, String rptTitle, String isHistory, String isSaveWrite, String dirPath, String uri, String userNum, String schName, String gradeName, String className, String subjectName, String imgRoot, String agent, String srval, String subCompose, String teachUnit, String contrastObject, String teachUnit_s, String contrast_s) {
        Double score_D;
        Double score_D2;
        String rptTitle2 = this.sp.getHeaderStr(examNum, subjectNum, gradeNum, schoolNum, classNum, studentId, studentType, true, true, true, true, false, true, true, true, false, true, true, true, true, true, false, subCompose, "0");
        new ArrayList();
        new ArrayList();
        List list = this.reportService.getQuesScore(examNum, gradeNum, schoolNum, subjectNum, classNum, studentType, type, source, "0", subCompose, teachUnit, contrastObject, teachUnit_s, contrast_s);
        String count = this.reportService.idhavechoose(examNum, gradeNum, subjectNum);
        Integer ishavechoose = Integer.valueOf(count.equals("0") ? 0 : 1);
        String folderPath = "ExportFolder/reportExcel" + userNum;
        String str = "reportExcel" + userNum;
        String str2 = "reportExcel" + userNum;
        String excelName = (null == gradeName || "".equals(gradeName)) ? rpt_name + "_" + gradeNum : rpt_name + "_" + gradeName;
        if (null != classNum && !"".equals(classNum) && !classNum.contains(Const.STRING_SEPERATOR)) {
            excelName = (null == className || "".equals(className)) ? excelName + "_" + classNum : excelName + "_" + className;
        }
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        try {
            WritableWorkbook wwBook = Workbook.createWorkbook(excelFile);
            WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
            biaotis1.setAlignment(Alignment.LEFT);
            biaotis1.setVerticalAlignment(VerticalAlignment.CENTRE);
            WritableFont titles = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat title = new WritableCellFormat(titles);
            title.setAlignment(Alignment.LEFT);
            title.setVerticalAlignment(VerticalAlignment.CENTRE);
            title.setWrap(true);
            WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            WritableCellFormat cFormat1 = new WritableCellFormat(font1);
            cFormat1.setAlignment(Alignment.CENTRE);
            cFormat1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1.setBackground(Const.titleBackground_color);
            cFormat1.setWrap(true);
            WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat2 = new WritableCellFormat(font2);
            cFormat2.setAlignment(Alignment.CENTRE);
            cFormat2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2.setBackground(Const.textOuBackGround_color);
            cFormat2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2.setWrap(true);
            DateFormat df1 = new DateFormat("0.0%");
            WritableCellFormat cFormat2_0 = new WritableCellFormat(font2, df1);
            cFormat2_0.setAlignment(Alignment.CENTRE);
            cFormat2_0.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_0.setBackground(Const.textOuBackGround_color);
            cFormat2_0.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_0.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_0.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_0.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_0.setWrap(true);
            NumberFormat nf1 = new NumberFormat("0.0");
            WritableCellFormat cFormat2_1 = new WritableCellFormat(font2, nf1);
            cFormat2_1.setAlignment(Alignment.CENTRE);
            cFormat2_1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_1.setBackground(Const.textOuBackGround_color);
            cFormat2_1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_1.setWrap(true);
            WritableCellFormat cFormat2_3 = new WritableCellFormat(font2);
            cFormat2_3.setAlignment(Alignment.CENTRE);
            cFormat2_3.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_3.setBackground(Const.textOuBackGround_color);
            cFormat2_3.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_3.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_3.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_3.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_3.setWrap(true);
            NumberFormat nf2 = new NumberFormat("0.00");
            WritableCellFormat cFormat2_2 = new WritableCellFormat(font2, nf2);
            cFormat2_2.setAlignment(Alignment.CENTRE);
            cFormat2_2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_2.setBackground(Const.textOuBackGround_color);
            cFormat2_2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_2.setWrap(true);
            WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat3 = new WritableCellFormat(font3);
            cFormat3.setAlignment(Alignment.CENTRE);
            cFormat3.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3.setBackground(Const.textJiBackGround_color);
            cFormat3.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3.setWrap(true);
            WritableCellFormat cFormat3_0 = new WritableCellFormat(font3, df1);
            cFormat3_0.setAlignment(Alignment.CENTRE);
            cFormat3_0.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_0.setBackground(Const.textJiBackGround_color);
            cFormat3_0.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_0.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_0.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_0.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_0.setWrap(true);
            WritableCellFormat cFormat3_1 = new WritableCellFormat(font3, nf1);
            cFormat3_1.setAlignment(Alignment.CENTRE);
            cFormat3_1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_1.setBackground(Const.textJiBackGround_color);
            cFormat3_1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_1.setWrap(true);
            WritableCellFormat cFormat3_3 = new WritableCellFormat(font3);
            cFormat3_3.setAlignment(Alignment.CENTRE);
            cFormat3_3.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_3.setBackground(Const.textJiBackGround_color);
            cFormat3_3.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_3.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_3.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_3.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_3.setWrap(true);
            WritableCellFormat cFormat3_2 = new WritableCellFormat(font3, nf2);
            cFormat3_2.setAlignment(Alignment.CENTRE);
            cFormat3_2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_2.setBackground(Const.textJiBackGround_color);
            cFormat3_2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_2.setWrap(true);
            String srname = srval.equals("0") ? "平均分" : "得分率";
            try {
                WritableSheet sheet = wwBook.createSheet(rpt_name, 0);
                sheet.getSettings().setShowGridLines(false);
                try {
                    List list0 = (List) list.get(0);
                    List list1 = (List) list.get(1);
                    DecimalFormat df01 = new DecimalFormat("0.0");
                    DecimalFormat df02 = new DecimalFormat("0.00");
                    DecimalFormat df03 = new DecimalFormat("0.000");
                    df01.setRoundingMode(RoundingMode.HALF_UP);
                    df02.setRoundingMode(RoundingMode.HALF_UP);
                    df03.setRoundingMode(RoundingMode.HALF_UP);
                    Label biaotou = new Label(0, 0, rpt_name, biaotis1);
                    sheet.addCell(biaotou);
                    Label xinxi = new Label(0, 1, rptTitle2, title);
                    sheet.addCell(xinxi);
                    sheet.setRowView(1, Const.height_500);
                    Label questionNum = new Label(0, 2, "题号", cFormat1);
                    sheet.addCell(questionNum);
                    Label questionType = new Label(1, 2, "题型", cFormat1);
                    sheet.addCell(questionType);
                    Label fullScore = new Label(2, 2, "满分", cFormat1);
                    sheet.addCell(fullScore);
                    int claCount = list1.size() / list0.size();
                    if (claCount < 4) {
                        sheet.mergeCells(0, 0, (claCount * 2) + 2, 0);
                        sheet.mergeCells(0, 1, 11, 1);
                    } else {
                        sheet.mergeCells(0, 0, (claCount * 2) + 2, 0);
                        sheet.mergeCells(0, 1, (claCount * 2) + 2, 1);
                    }
                    sheet.mergeCells(0, 2, 0, 3);
                    sheet.mergeCells(1, 2, 1, 3);
                    sheet.mergeCells(2, 2, 2, 3);
                    if (list0.size() <= 0 || list1.size() <= 0) {
                        Label dataNull = new Label(0, 3, "数据为空", cFormat2);
                        sheet.addCell(dataNull);
                        sheet.mergeCells(0, 3, 1, 3);
                    } else {
                        Integer bei = ishavechoose.intValue() == 1 ? 3 : 2;
                        for (int i = 0; i < list0.size(); i++) {
                            String qtypeName = (null == ((Define) list0.get(i)).getQuestionType() || ((Define) list0.get(i)).getQuestionType().equals("") || !((Define) list0.get(i)).getQuestionType().equals("1")) ? (null == ((Define) list0.get(i)).getQuestionType() || ((Define) list0.get(i)).getQuestionType().equals("") || !((Define) list0.get(i)).getQuestionType().equals("0")) ? "" : "客观题" : "主观题";
                            if (i % 2 == 0) {
                                if (((Define) list0.get(i)).getQuestionNum().equals("整卷")) {
                                    Label questionNums = new Label(0, i + 4, ((Define) list0.get(i)).getQuestionNum(), cFormat2);
                                    sheet.addCell(questionNums);
                                } else {
                                    Label questionNums2 = new Label(0, i + 4, "T" + ((Define) list0.get(i)).getQuestionNum(), cFormat2);
                                    sheet.addCell(questionNums2);
                                }
                                Label questionTypes = new Label(1, i + 4, qtypeName, cFormat2);
                                sheet.addCell(questionTypes);
                                String fullscoreStr = Convert.toBigDecimal(df01.format(((Define) list0.get(i)).getFullScore())).stripTrailingZeros().toPlainString();
                                Number fullScores = new Number(2, i + 4, Double.valueOf(fullscoreStr).doubleValue(), cFormat2_3);
                                sheet.addCell(fullScores);
                                for (int j = 0; j < claCount; j++) {
                                    Double.valueOf(df02.format(0L));
                                    if (srval.equals("0")) {
                                        Object score = ((Object[]) list1.get((j * list0.size()) + i))[10];
                                        score_D2 = Double.valueOf(df02.format(score));
                                    } else {
                                        Object score2 = ((Object[]) list1.get((j * list0.size()) + i))[7];
                                        score_D2 = Double.valueOf(df03.format(score2));
                                    }
                                    if (srval.equals("0")) {
                                        Number scoreRates = new Number(3 + (bei.intValue() * j), i + 4, score_D2.doubleValue(), cFormat2_2);
                                        if (scoreRates.getValue() == -1.0d) {
                                            Label scoreRateNull = new Label(3 + (bei.intValue() * j), i + 4, "-", cFormat2_2);
                                            sheet.addCell(scoreRateNull);
                                        } else {
                                            sheet.addCell(scoreRates);
                                        }
                                    } else {
                                        Number scoreRates2 = new Number(3 + (bei.intValue() * j), i + 4, score_D2.doubleValue(), cFormat2_0);
                                        if (scoreRates2.getValue() == -1.0d) {
                                            Label scoreRateNull2 = new Label(3 + (bei.intValue() * j), i + 4, "-", cFormat2_0);
                                            sheet.addCell(scoreRateNull2);
                                        } else {
                                            sheet.addCell(scoreRates2);
                                        }
                                    }
                                    Number variations = new Number(4 + (bei.intValue() * j), i + 4, Double.valueOf(df02.format(((Object[]) list1.get((j * list0.size()) + i))[8])).doubleValue(), cFormat2_2);
                                    if (variations.getValue() == -1.0d) {
                                        Label variationNull = new Label(4 + (bei.intValue() * j), i + 4, "-", cFormat2_2);
                                        sheet.addCell(variationNull);
                                    } else {
                                        sheet.addCell(variations);
                                    }
                                    if (ishavechoose.intValue() == 1) {
                                        String choosenums = Convert.toStr(((Object[]) list1.get((j * list0.size()) + i))[15]);
                                        if (choosenums.equals("")) {
                                            Label choosenum = new Label(5 + (bei.intValue() * j), i + 4, choosenums, cFormat2);
                                            sheet.addCell(choosenum);
                                        } else {
                                            Label choosenum2 = new Label(5 + (bei.intValue() * j), i + 4, choosenums + "人选做", cFormat2);
                                            sheet.addCell(choosenum2);
                                        }
                                    }
                                    if (i == 0) {
                                        Label classNames = new Label(3 + (bei.intValue() * j), i + 2, ((Object[]) list1.get(j * list0.size()))[4] + "", cFormat1);
                                        sheet.addCell(classNames);
                                        if (ishavechoose.intValue() == 1) {
                                            sheet.mergeCells(3 + (bei.intValue() * j), 2, 5 + (bei.intValue() * j), 2);
                                        } else {
                                            sheet.mergeCells(3 + (bei.intValue() * j), 2, 4 + (bei.intValue() * j), 2);
                                        }
                                        Label scoreRate = new Label(3 + (bei.intValue() * j), i + 3, srname, cFormat1);
                                        sheet.addCell(scoreRate);
                                        Label variation = new Label(4 + (bei.intValue() * j), i + 3, "变异系数", cFormat1);
                                        sheet.addCell(variation);
                                        sheet.setColumnView(4 + (bei.intValue() * j), 10);
                                        if (ishavechoose.intValue() == 1) {
                                            Label beizhu = new Label(5 + (bei.intValue() * j), i + 3, "备注", cFormat1);
                                            sheet.addCell(beizhu);
                                            sheet.setColumnView(5 + (bei.intValue() * j), 10);
                                        }
                                    }
                                }
                            } else {
                                if (((Define) list0.get(i)).getQuestionNum().equals("整卷")) {
                                    Label questionNums3 = new Label(0, i + 4, ((Define) list0.get(i)).getQuestionNum(), cFormat3);
                                    sheet.addCell(questionNums3);
                                } else {
                                    Label questionNums4 = new Label(0, i + 4, "T" + ((Define) list0.get(i)).getQuestionNum(), cFormat3);
                                    sheet.addCell(questionNums4);
                                }
                                Label questionTypes2 = new Label(1, i + 4, qtypeName, cFormat3);
                                sheet.addCell(questionTypes2);
                                String fullscoreStr2 = Convert.toBigDecimal(df01.format(((Define) list0.get(i)).getFullScore())).stripTrailingZeros().toPlainString();
                                Number fullScores2 = new Number(2, i + 4, Double.valueOf(fullscoreStr2).doubleValue(), cFormat3_3);
                                sheet.addCell(fullScores2);
                                for (int j2 = 0; j2 < claCount; j2++) {
                                    Double.valueOf(0.0d);
                                    if (srval.equals("0")) {
                                        Object score3 = ((Object[]) list1.get((j2 * list0.size()) + i))[10];
                                        score_D = Double.valueOf(df02.format(score3));
                                    } else {
                                        Object score4 = ((Object[]) list1.get((j2 * list0.size()) + i))[7];
                                        score_D = Double.valueOf(df03.format(score4));
                                    }
                                    if (srval.equals("0")) {
                                        Number scoreRates3 = new Number(3 + (bei.intValue() * j2), i + 4, score_D.doubleValue(), cFormat3_2);
                                        if (scoreRates3.getValue() == -1.0d) {
                                            Label scoreRateNull3 = new Label(3 + (bei.intValue() * j2), i + 4, "-", cFormat3_2);
                                            sheet.addCell(scoreRateNull3);
                                        } else {
                                            sheet.addCell(scoreRates3);
                                        }
                                    } else {
                                        Number scoreRates4 = new Number(3 + (bei.intValue() * j2), i + 4, score_D.doubleValue(), cFormat3_0);
                                        if (scoreRates4.getValue() == -1.0d) {
                                            Label scoreRateNull4 = new Label(3 + (bei.intValue() * j2), i + 4, "-", cFormat3_0);
                                            sheet.addCell(scoreRateNull4);
                                        } else {
                                            sheet.addCell(scoreRates4);
                                        }
                                    }
                                    Number variations2 = new Number(4 + (bei.intValue() * j2), i + 4, Double.valueOf(df02.format(((Object[]) list1.get((j2 * list0.size()) + i))[8])).doubleValue(), cFormat3_2);
                                    if (variations2.getValue() == -1.0d) {
                                        Label variationNull2 = new Label(4 + (bei.intValue() * j2), i + 4, "-", cFormat3_2);
                                        sheet.addCell(variationNull2);
                                    } else {
                                        sheet.addCell(variations2);
                                    }
                                    if (ishavechoose.intValue() == 1) {
                                        String choosenums2 = Convert.toStr(((Object[]) list1.get((j2 * list0.size()) + i))[15]);
                                        if (choosenums2.equals("")) {
                                            Label choosenum3 = new Label(5 + (bei.intValue() * j2), i + 4, choosenums2, cFormat3);
                                            sheet.addCell(choosenum3);
                                        } else {
                                            Label choosenum4 = new Label(5 + (bei.intValue() * j2), i + 4, choosenums2 + "人选做", cFormat3);
                                            sheet.addCell(choosenum4);
                                        }
                                    }
                                    if (i == 0) {
                                        Label classNames2 = new Label(3 + (bei.intValue() * j2), i + 2, ((Object[]) list1.get(j2 * list0.size()))[4] + "", cFormat1);
                                        sheet.addCell(classNames2);
                                        if (ishavechoose.intValue() == 1) {
                                            sheet.mergeCells(3 + (bei.intValue() * j2), 2, 5 + (bei.intValue() * j2), 2);
                                        } else {
                                            sheet.mergeCells(3 + (bei.intValue() * j2), 2, 4 + (bei.intValue() * j2), 2);
                                        }
                                        Label scoreRate2 = new Label(3 + (bei.intValue() * j2), i + 3, srname, cFormat1);
                                        sheet.addCell(scoreRate2);
                                        Label variation2 = new Label(4 + (bei.intValue() * j2), i + 3, "变异系数", cFormat1);
                                        sheet.addCell(variation2);
                                        sheet.setColumnView(4 + (bei.intValue() * j2), 10);
                                        if (ishavechoose.intValue() == 1) {
                                            Label beizhu2 = new Label(5 + (bei.intValue() * j2), i + 3, "备注", cFormat1);
                                            sheet.addCell(beizhu2);
                                            sheet.setColumnView(5 + (bei.intValue() * j2), 10);
                                        }
                                    }
                                }
                            }
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                wwBook.write();
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response = ServletActionContext.getResponse();
                            response.reset();
                            ServletOutputStream outputStream = response.getOutputStream();
                            String excelName2 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            response.setContentType("Content-type: applicationnd.ms-excel");
                            response.setHeader("Content-disposition", "attachment;filename=" + excelName2 + ".xls");
                            response.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte = new byte[1024];
                            FileInputStream in = new FileInputStream(excelFile);
                            while (true) {
                                int n = in.read(tempByte);
                                if (n == -1) {
                                    break;
                                }
                                try {
                                    outputStream.write(tempByte, 0, n);
                                } catch (Exception e2) {
                                    this.log.error("保存未成功", e2);
                                }
                            }
                            outputStream.flush();
                            outputStream.close();
                            in.close();
                        }
                    } catch (WriteException e3) {
                        e3.printStackTrace();
                    }
                }
            } catch (Exception e4) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response2 = ServletActionContext.getResponse();
                            response2.reset();
                            ServletOutputStream outputStream2 = response2.getOutputStream();
                            String excelName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            response2.setContentType("Content-type: applicationnd.ms-excel");
                            response2.setHeader("Content-disposition", "attachment;filename=" + excelName3 + ".xls");
                            response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte2 = new byte[1024];
                            FileInputStream in2 = new FileInputStream(excelFile);
                            while (true) {
                                int n2 = in2.read(tempByte2);
                                if (n2 == -1) {
                                    break;
                                }
                                try {
                                    outputStream2.write(tempByte2, 0, n2);
                                } catch (Exception e5) {
                                    this.log.error("保存未成功", e5);
                                }
                            }
                            outputStream2.flush();
                            outputStream2.close();
                            in2.close();
                        }
                    } catch (WriteException e6) {
                        e6.printStackTrace();
                    }
                }
            } catch (Throwable th) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response3 = ServletActionContext.getResponse();
                            response3.reset();
                            ServletOutputStream outputStream3 = response3.getOutputStream();
                            String excelName4 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            response3.setContentType("Content-type: applicationnd.ms-excel");
                            response3.setHeader("Content-disposition", "attachment;filename=" + excelName4 + ".xls");
                            response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte3 = new byte[1024];
                            FileInputStream in3 = new FileInputStream(excelFile);
                            while (true) {
                                int n3 = in3.read(tempByte3);
                                if (n3 == -1) {
                                    break;
                                }
                                try {
                                    outputStream3.write(tempByte3, 0, n3);
                                } catch (Exception e7) {
                                    this.log.error("保存未成功", e7);
                                }
                            }
                            outputStream3.flush();
                            outputStream3.close();
                            in3.close();
                        }
                    } catch (WriteException e8) {
                        e8.printStackTrace();
                        throw th;
                    }
                }
                throw th;
            }
        } catch (Exception e9) {
            e9.printStackTrace();
        }
        return null;
    }

    public void subjectLineImage_03(String userId, String rowKey, List list) {
        new ArrayList();
        new ArrayList();
        List list0 = (List) list.get(0);
        List list1 = (List) list.get(1);
        int claCount = list1.size() / list0.size();
        String[] rowKeys = new String[claCount];
        for (int i = 0; i < claCount; i++) {
            rowKeys[i] = ((Object[]) list1.get(i * list0.size()))[4] + "";
        }
        String[] tupianName = {"T3_avgLine", "T3_scoreLine", "T3_dLine"};
        String[] titleName = {"小题平均分折线图", "小题得分率(%)折线图", "小题变异系数对比图"};
        String[] columnKeys = new String[list0.size()];
        double[][] data = new double[rowKeys.length][list0.size()];
        double[][] data8 = new double[rowKeys.length][list0.size()];
        double[][] data_avg = new double[rowKeys.length][list0.size()];
        for (int i2 = 0; i2 < list0.size(); i2++) {
            String objArr = "T" + ((Define) list0.get(i2)).getQuestionNum();
            columnKeys[i2] = String.valueOf(objArr);
        }
        DecimalFormat df1 = new DecimalFormat("0.0");
        DecimalFormat df2 = new DecimalFormat("0.00");
        Double.valueOf(0.0d);
        Double.valueOf(0.0d);
        Double.valueOf(0.0d);
        Double.valueOf(0.0d);
        Double.valueOf(0.0d);
        Double.valueOf(0.0d);
        List score_list_avg = new ArrayList();
        List score_list = new ArrayList();
        List score_list_D = new ArrayList();
        for (int i3 = 0; i3 < list0.size(); i3++) {
            for (int x = 0; x < claCount; x++) {
                Double score_D = Double.valueOf(Double.parseDouble(df1.format(Double.valueOf(((Object[]) list1.get((x * list0.size()) + i3))[7] + "").doubleValue() * 100.0d)));
                if (score_D.doubleValue() == -100.0d) {
                    score_D = Double.valueOf(0.0d);
                    data[x][i3] = 0.0d;
                } else {
                    data[x][i3] = Double.parseDouble(String.valueOf(score_D));
                    String str = score_D + "%";
                }
                score_list.add(score_D);
                Double score8 = Double.valueOf(((Object[]) list1.get((x * list0.size()) + i3))[8] + "");
                Double score_D8 = Double.valueOf(df2.format(score8));
                if (score_D8.doubleValue() == -1.0d) {
                    score_D8 = Double.valueOf(0.0d);
                    data8[x][i3] = 0.0d;
                } else {
                    data8[x][i3] = Double.parseDouble(String.valueOf(score_D8));
                }
                score_list_D.add(score_D8);
                Double score_avg = Double.valueOf(df2.format(Double.valueOf(((Object[]) list1.get((x * list0.size()) + i3))[10] + "")));
                if (score_avg.doubleValue() == -1.0d) {
                    score_avg = Double.valueOf(0.0d);
                    data_avg[x][i3] = 0.0d;
                } else {
                    data_avg[x][i3] = Double.parseDouble(String.valueOf(score_avg));
                }
                score_list_avg.add(score_avg);
            }
        }
        Double maxDesc_1 = (Double) Collections.max(score_list_avg);
        Double minDesc_1 = (Double) Collections.min(score_list_avg);
        Double maxDesc = (Double) Collections.max(score_list);
        Double minDesc = (Double) Collections.min(score_list);
        Double maxDesc_2 = (Double) Collections.max(score_list_D);
        Double minDesc_2 = (Double) Collections.min(score_list_D);
        Double count_unit_1 = Double.valueOf((maxDesc_1.doubleValue() - minDesc_1.doubleValue()) / 5.0d);
        Double count_unit = Double.valueOf((maxDesc.doubleValue() - minDesc.doubleValue()) / 5.0d);
        Double count_unit_2 = Double.valueOf((maxDesc_2.doubleValue() - minDesc_2.doubleValue()) / 5.0d);
        try {
            HttpServletResponse response = ServletActionContext.getResponse();
            response.reset();
            response.setContentType("image/jpeg");
            JFreeChart chart1 = this.lc.getLineChar(data_avg, rowKeys, columnKeys, "题号", "平均分", titleName[0], "#0.0", count_unit_1, Integer.valueOf(rowKeys.length), "Y", "##.##");
            getChartImageFolder(chart1, "tmpLinePng", Const.width_1100, Const.height_500, userId + tupianName[0]);
            JFreeChart chart = this.lc.getLineChar(data, rowKeys, columnKeys, "题号", "得分率", titleName[1], "#0", count_unit, Integer.valueOf(rowKeys.length), "Y", "##.##");
            getChartImageFolder(chart, "tmpLinePng", Const.width_1100, Const.height_500, userId + tupianName[1]);
            JFreeChart chart8 = this.lc.getLineChar(data8, rowKeys, columnKeys, "题号", "", titleName[2], "#0.0", count_unit_2, Integer.valueOf(rowKeys.length), "Y", "##.##");
            getChartImageFolder(chart8, "tmpLinePng", Const.width_1100, Const.height_500, userId + tupianName[2]);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public File getSubChartImgFile_03(String userId, String rowKeys, Integer ii, String dirPath, List list) {
        if (ii.intValue() == 0) {
            subjectLineImage_03(userId, rowKeys, list);
        }
        File file = new File(dirPath + File.separator + "tmpLinePng" + File.separator + userId + rowKeys + ".png");
        return file;
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String knledgScore_exportMethod(String examNum, String gradeNum, String schoolNum, String subjectNum, String classNum, String studentId, String studentType, String type, String source, String step, String sNum, String c_exam, String rpt_name, String isMoreSchool, String rptTitle, String isHistory, String isSaveWrite, String dirPath, String uri, String userNum, String schName, String gradeName, String className, String subjectName, String imgRoot, String agent, String subCompose, String teachUnit, String teachUnit_s, String contrastObject, String contrast_s) throws IOException {
        String loadFileName;
        String rptTitle2 = this.sp.getHeaderStr(examNum, subjectNum, gradeNum, schoolNum, classNum, studentId, studentType, true, true, true, true, false, true, true, true, false, true, true, true, true, true, false, subCompose, "0");
        List list = this.reportService.getKnledgScore(examNum, gradeNum, schoolNum, subjectNum, classNum, studentType, type, source, "0", subCompose, teachUnit, teachUnit_s, contrastObject, contrast_s);
        String folderPath = "ExportFolder/reportExcel" + userNum;
        String str = "reportExcel" + userNum;
        String str2 = "reportExcel" + userNum;
        String excelName = (null == gradeName || "".equals(gradeName)) ? rpt_name + "_" + gradeNum : rpt_name + "_" + gradeName;
        if (null != classNum && !"".equals(classNum) && !classNum.contains(Const.STRING_SEPERATOR)) {
            excelName = (null == className || "".equals(className)) ? excelName + "_" + classNum : excelName + "_" + className;
        }
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFileXLSX(excelName, dirPath, folderPath);
        SXSSFWorkbook wb = new SXSSFWorkbook();
        wb.setCompressTempFiles(true);
        Font fontCent = wb.createFont();
        fontCent.setFontName("Arial");
        fontCent.setFontHeightInPoints((short) 15);
        fontCent.setBold(true);
        fontCent.setColor(Convert.toShort(32767).shortValue());
        CellStyle biaotis1 = wb.createCellStyle();
        biaotis1.setFont(fontCent);
        biaotis1.setWrapText(true);
        biaotis1.setAlignment(HorizontalAlignment.LEFT);
        biaotis1.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
        Font fontCent1 = wb.createFont();
        fontCent1.setFontName("Arial");
        fontCent1.setFontHeightInPoints((short) 10);
        fontCent1.setColor(Convert.toShort(32767).shortValue());
        CellStyle title = wb.createCellStyle();
        title.setFont(fontCent1);
        title.setWrapText(true);
        title.setAlignment(HorizontalAlignment.LEFT);
        title.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
        Font fontCent3 = wb.createFont();
        fontCent3.setFontName("Arial");
        fontCent3.setFontHeightInPoints((short) 10);
        fontCent3.setColor(Convert.toShort(32767).shortValue());
        CellStyle cFormat1 = wb.createCellStyle();
        cFormat1.setFont(fontCent3);
        cFormat1.setBorderBottom(BorderStyle.THIN);
        cFormat1.setBorderRight(BorderStyle.THIN);
        cFormat1.setBorderLeft(BorderStyle.THIN);
        cFormat1.setBorderTop(BorderStyle.THIN);
        cFormat1.setWrapText(true);
        cFormat1.setFillForegroundColor(IndexedColors.LIGHT_TURQUOISE.getIndex());
        cFormat1.setAlignment(HorizontalAlignment.CENTER);
        cFormat1.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
        cFormat1.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        DataFormat df = wb.createDataFormat();
        CellStyle cFormat2 = wb.createCellStyle();
        cFormat2.setFont(fontCent3);
        cFormat2.setBorderBottom(BorderStyle.THIN);
        cFormat2.setBorderRight(BorderStyle.THIN);
        cFormat2.setBorderLeft(BorderStyle.THIN);
        cFormat2.setBorderTop(BorderStyle.THIN);
        cFormat2.setWrapText(true);
        cFormat2.setFillForegroundColor(IndexedColors.WHITE.index);
        cFormat2.setAlignment(HorizontalAlignment.CENTER);
        cFormat2.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
        cFormat2.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        CellStyle cFormat2_left = wb.createCellStyle();
        cFormat2_left.setFont(fontCent3);
        cFormat2_left.setBorderBottom(BorderStyle.THIN);
        cFormat2_left.setBorderRight(BorderStyle.THIN);
        cFormat2_left.setBorderLeft(BorderStyle.THIN);
        cFormat2_left.setBorderTop(BorderStyle.THIN);
        cFormat2_left.setWrapText(true);
        cFormat2_left.setFillForegroundColor(IndexedColors.WHITE.index);
        cFormat2_left.setAlignment(HorizontalAlignment.LEFT);
        cFormat2_left.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
        cFormat2_left.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        CellStyle cFormat2_0 = wb.createCellStyle();
        cFormat2_0.setFont(fontCent3);
        cFormat2_0.setBorderBottom(BorderStyle.THIN);
        cFormat2_0.setBorderRight(BorderStyle.THIN);
        cFormat2_0.setBorderLeft(BorderStyle.THIN);
        cFormat2_0.setBorderTop(BorderStyle.THIN);
        cFormat2_0.setWrapText(true);
        cFormat2_0.setDataFormat(df.getFormat("0.0%"));
        cFormat2_0.setFillForegroundColor(IndexedColors.WHITE.index);
        cFormat2_0.setAlignment(HorizontalAlignment.CENTER);
        cFormat2_0.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
        cFormat2_0.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        CellStyle cFormat2_1 = wb.createCellStyle();
        cFormat2_1.setFont(fontCent3);
        cFormat2_1.setBorderBottom(BorderStyle.THIN);
        cFormat2_1.setBorderRight(BorderStyle.THIN);
        cFormat2_1.setBorderLeft(BorderStyle.THIN);
        cFormat2_1.setBorderTop(BorderStyle.THIN);
        cFormat2_1.setWrapText(true);
        cFormat2_1.setDataFormat(df.getFormat("0.0"));
        cFormat2_1.setFillForegroundColor(IndexedColors.WHITE.index);
        cFormat2_1.setAlignment(HorizontalAlignment.CENTER);
        cFormat2_1.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
        cFormat2_1.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        CellStyle cFormat2_2 = wb.createCellStyle();
        cFormat2_2.setFont(fontCent3);
        cFormat2_2.setBorderBottom(BorderStyle.THIN);
        cFormat2_2.setBorderRight(BorderStyle.THIN);
        cFormat2_2.setBorderLeft(BorderStyle.THIN);
        cFormat2_2.setBorderTop(BorderStyle.THIN);
        cFormat2_2.setWrapText(true);
        cFormat2_2.setDataFormat(df.getFormat("0.00"));
        cFormat2_2.setFillForegroundColor(IndexedColors.WHITE.index);
        cFormat2_2.setAlignment(HorizontalAlignment.CENTER);
        cFormat2_2.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
        cFormat2_2.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        CellStyle cFormat3 = wb.createCellStyle();
        cFormat3.setFont(fontCent3);
        cFormat3.setBorderBottom(BorderStyle.THIN);
        cFormat3.setBorderRight(BorderStyle.THIN);
        cFormat3.setBorderLeft(BorderStyle.THIN);
        cFormat3.setBorderTop(BorderStyle.THIN);
        cFormat3.setWrapText(true);
        cFormat3.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.index);
        cFormat3.setAlignment(HorizontalAlignment.CENTER);
        cFormat3.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
        cFormat3.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        CellStyle cFormat3_left = wb.createCellStyle();
        cFormat3_left.setFont(fontCent3);
        cFormat3_left.setBorderBottom(BorderStyle.THIN);
        cFormat3_left.setBorderRight(BorderStyle.THIN);
        cFormat3_left.setBorderLeft(BorderStyle.THIN);
        cFormat3_left.setBorderTop(BorderStyle.THIN);
        cFormat3_left.setWrapText(true);
        cFormat3_left.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.index);
        cFormat3_left.setAlignment(HorizontalAlignment.LEFT);
        cFormat3_left.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
        cFormat3_left.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        CellStyle cFormat3_0 = wb.createCellStyle();
        cFormat3_0.setFont(fontCent3);
        cFormat3_0.setBorderBottom(BorderStyle.THIN);
        cFormat3_0.setBorderRight(BorderStyle.THIN);
        cFormat3_0.setBorderLeft(BorderStyle.THIN);
        cFormat3_0.setBorderTop(BorderStyle.THIN);
        cFormat3_0.setWrapText(true);
        cFormat3_0.setDataFormat(df.getFormat("0.0%"));
        cFormat3_0.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.index);
        cFormat3_0.setAlignment(HorizontalAlignment.CENTER);
        cFormat3_0.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
        cFormat3_0.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        CellStyle cFormat3_1 = wb.createCellStyle();
        cFormat3_1.setFont(fontCent3);
        cFormat3_1.setBorderBottom(BorderStyle.THIN);
        cFormat3_1.setBorderRight(BorderStyle.THIN);
        cFormat3_1.setBorderLeft(BorderStyle.THIN);
        cFormat3_1.setBorderTop(BorderStyle.THIN);
        cFormat3_1.setWrapText(true);
        cFormat3_1.setDataFormat(df.getFormat("0.0"));
        cFormat3_1.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.index);
        cFormat3_1.setAlignment(HorizontalAlignment.CENTER);
        cFormat3_1.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
        cFormat3_1.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        CellStyle cFormat3_2 = wb.createCellStyle();
        cFormat3_2.setFont(fontCent3);
        cFormat3_2.setBorderBottom(BorderStyle.THIN);
        cFormat3_2.setBorderRight(BorderStyle.THIN);
        cFormat3_2.setBorderLeft(BorderStyle.THIN);
        cFormat3_2.setBorderTop(BorderStyle.THIN);
        cFormat3_2.setWrapText(true);
        cFormat3_2.setDataFormat(df.getFormat("0.00"));
        cFormat3_2.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.index);
        cFormat3_2.setAlignment(HorizontalAlignment.CENTER);
        cFormat3_2.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
        cFormat3_2.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        try {
            if (!excelFile.exists()) {
                excelFile.createNewFile();
            }
            SXSSFSheet sheet = wb.createSheet(rpt_name);
            new ArrayList();
            new ArrayList();
            DecimalFormat df01 = new DecimalFormat("0.0");
            DecimalFormat df02 = new DecimalFormat("0.00");
            df01.setRoundingMode(RoundingMode.HALF_UP);
            df02.setRoundingMode(RoundingMode.HALF_UP);
            Cell cell0 = sheet.createRow(0).createCell(0);
            cell0.setCellValue(rpt_name);
            SXSSFRow createRow = sheet.createRow(1);
            Cell cell1 = createRow.createCell(0);
            cell1.setCellValue(rptTitle2);
            createRow.setHeight((short) 500);
            SXSSFRow createRow2 = sheet.createRow(2);
            Cell cell2_0 = createRow2.createCell(0);
            cell2_0.setCellValue("编号");
            Cell cell2_1 = createRow2.createCell(1);
            cell2_1.setCellValue("知识点");
            Cell cell2_2 = createRow2.createCell(2);
            cell2_2.setCellValue("题号");
            Cell cell2_3 = createRow2.createCell(3);
            cell2_3.setCellValue("满分");
            cell0.setCellStyle(biaotis1);
            cell1.setCellStyle(title);
            cell2_0.setCellStyle(cFormat1);
            cell2_1.setCellStyle(cFormat1);
            cell2_2.setCellStyle(cFormat1);
            cell2_3.setCellStyle(cFormat1);
            SXSSFRow createRow3 = sheet.createRow(3);
            Cell cell3_0 = createRow3.createCell(0);
            Cell cell3_1 = createRow3.createCell(1);
            Cell cell3_2 = createRow3.createCell(2);
            Cell cell3_3 = createRow3.createCell(3);
            cell3_0.setCellStyle(cFormat1);
            cell3_1.setCellStyle(cFormat1);
            cell3_2.setCellStyle(cFormat1);
            cell3_3.setCellStyle(cFormat1);
            sheet.setColumnWidth(1, 8000);
            if (list.size() > 0 && ((List) list.get(0)).size() > 0) {
                List<Map<String, Object>> knoList = (List) list.get(0);
                List dataList = (List) list.get(1);
                int claCount = dataList.size() / knoList.size();
                int knoCount = knoList.size();
                sheet.addMergedRegion(new CellRangeAddress(0, 0, 0, (claCount * 2) + 2));
                sheet.addMergedRegion(new CellRangeAddress(1, 1, 0, (claCount * 2) + 2));
                sheet.addMergedRegion(new CellRangeAddress(2, 3, 0, 0));
                sheet.addMergedRegion(new CellRangeAddress(2, 3, 1, 1));
                sheet.addMergedRegion(new CellRangeAddress(2, 3, 2, 2));
                sheet.addMergedRegion(new CellRangeAddress(2, 3, 3, 3));
                for (int i = 0; i < claCount; i++) {
                    Cell className_title = createRow2.createCell(4 + (i * 2));
                    className_title.setCellValue(((Object[]) dataList.get(i * knoCount))[2] + "");
                    className_title.setCellStyle(cFormat1);
                    Cell className_title2 = createRow2.createCell(5 + (i * 2));
                    className_title2.setCellStyle(cFormat1);
                    sheet.addMergedRegion(new CellRangeAddress(2, 2, 4 + (i * 2), 5 + (i * 2)));
                    Cell frequency = createRow3.createCell(4 + (i * 2));
                    frequency.setCellValue("平均分");
                    frequency.setCellStyle(cFormat1);
                    Cell totalFrequency = createRow3.createCell(5 + (i * 2));
                    totalFrequency.setCellValue("变异系数");
                    totalFrequency.setCellStyle(cFormat1);
                }
                for (int i2 = 0; i2 < knoCount; i2++) {
                    SXSSFRow createRow4 = sheet.createRow(4 + i2);
                    if (i2 % 2 != 0) {
                        Cell knowNum = createRow4.createCell(0);
                        knowNum.setCellValue(knoList.get(i2).get("ext3") + "");
                        knowNum.setCellStyle(cFormat2_left);
                        Cell knowName = createRow4.createCell(1);
                        knowName.setCellValue(knoList.get(i2).get("knoName") + "");
                        knowName.setCellStyle(cFormat2_left);
                        Cell questionName2 = createRow4.createCell(2);
                        questionName2.setCellValue(knoList.get(i2).get("questionName") + "");
                        questionName2.setCellStyle(cFormat2_left);
                        String scorevalue = "";
                        for (int j = 0; j < claCount; j++) {
                            Object totalFrequencys_value = ((Object[]) dataList.get((j * knoCount) + (i2 * 1)))[7];
                            Double totalFrequencys_value_D = Double.valueOf(df02.format(totalFrequencys_value));
                            String frequencys_value = ((Object[]) dataList.get((j * knoCount) + (i2 * 1)))[6] + "";
                            Double frequencys_D = Double.valueOf(frequencys_value);
                            String frequencys_total = ((Object[]) dataList.get((j * knoCount) + (i2 * 1)))[5] + "";
                            Double frequencys_t = Double.valueOf(frequencys_total);
                            if (scorevalue == "-" || scorevalue == "") {
                                if (frequencys_t.doubleValue() == -1.0d) {
                                    scorevalue = "-";
                                } else {
                                    scorevalue = Convert.toBigDecimal(frequencys_total).stripTrailingZeros().toPlainString();
                                }
                            }
                            if (totalFrequencys_value_D.doubleValue() == 9.0d || totalFrequencys_value_D.doubleValue() == -1.0d) {
                                Cell frequencys = createRow4.createCell(4 + (j * 2));
                                frequencys.setCellValue("-");
                                frequencys.setCellStyle(cFormat2);
                                Cell totalFrequencys = createRow4.createCell(5 + (j * 2));
                                totalFrequencys.setCellValue("-");
                                totalFrequencys.setCellStyle(cFormat2);
                            } else {
                                Double frequencys_D2 = Double.valueOf(frequencys_D.doubleValue() * frequencys_t.doubleValue());
                                Cell frequencys2 = createRow4.createCell(4 + (j * 2));
                                frequencys2.setCellValue(Double.valueOf(df02.format(frequencys_D2)).doubleValue());
                                frequencys2.setCellStyle(cFormat2_2);
                                Cell totalFrequencys2 = createRow4.createCell(5 + (j * 2));
                                totalFrequencys2.setCellValue(totalFrequencys_value_D.doubleValue());
                                totalFrequencys2.setCellStyle(cFormat2_2);
                            }
                        }
                        Cell scores = createRow4.createCell(3);
                        scores.setCellValue(scorevalue);
                        scores.setCellStyle(cFormat2);
                    } else {
                        Cell knowNum2 = createRow4.createCell(0);
                        knowNum2.setCellValue(knoList.get(i2).get("ext3") + "");
                        knowNum2.setCellStyle(cFormat3_left);
                        Cell knowName2 = createRow4.createCell(1);
                        knowName2.setCellValue(knoList.get(i2).get("knoName") + "");
                        knowName2.setCellStyle(cFormat3_left);
                        Cell questionName22 = createRow4.createCell(2);
                        questionName22.setCellValue(knoList.get(i2).get("questionName") + "");
                        questionName22.setCellStyle(cFormat3_left);
                        String scorevalue2 = "";
                        for (int j2 = 0; j2 < claCount; j2++) {
                            Object totalFrequencys_value2 = ((Object[]) dataList.get((j2 * knoCount) + (i2 * 1)))[7];
                            Double totalFrequencys_value_D2 = Double.valueOf(df02.format(totalFrequencys_value2));
                            String frequencys_value2 = ((Object[]) dataList.get((j2 * knoCount) + (i2 * 1)))[6] + "";
                            Double frequencys_D3 = Double.valueOf(frequencys_value2);
                            String frequencys_total2 = ((Object[]) dataList.get((j2 * knoCount) + (i2 * 1)))[5] + "";
                            Double frequencys_t2 = Double.valueOf(frequencys_total2);
                            if (scorevalue2 == "-" || scorevalue2 == "") {
                                if (frequencys_t2.doubleValue() == -1.0d) {
                                    scorevalue2 = "-";
                                } else {
                                    scorevalue2 = Convert.toBigDecimal(frequencys_total2).stripTrailingZeros().toPlainString();
                                }
                            }
                            if (totalFrequencys_value_D2.doubleValue() == 9.0d || totalFrequencys_value_D2.doubleValue() == -1.0d) {
                                Cell frequencys3 = createRow4.createCell(4 + (j2 * 2));
                                frequencys3.setCellValue("-");
                                frequencys3.setCellStyle(cFormat3);
                                Cell totalFrequencys3 = createRow4.createCell(5 + (j2 * 2));
                                totalFrequencys3.setCellValue("-");
                                totalFrequencys3.setCellStyle(cFormat3);
                            } else {
                                Double frequencys_D4 = Double.valueOf(frequencys_D3.doubleValue() * frequencys_t2.doubleValue());
                                Cell frequencys4 = createRow4.createCell(4 + (j2 * 2));
                                frequencys4.setCellValue(Double.valueOf(df02.format(frequencys_D4)).doubleValue());
                                frequencys4.setCellStyle(cFormat3_2);
                                Cell totalFrequencys4 = createRow4.createCell(5 + (j2 * 2));
                                totalFrequencys4.setCellValue(totalFrequencys_value_D2.doubleValue());
                                totalFrequencys4.setCellStyle(cFormat3_2);
                            }
                        }
                        Cell scores2 = createRow4.createCell(3);
                        scores2.setCellValue(scorevalue2);
                        scores2.setCellStyle(cFormat3);
                    }
                }
            } else {
                Cell dataNull = createRow3.createCell(0);
                dataNull.setCellValue("数据为空");
                dataNull.setCellStyle(cFormat3);
                sheet.addMergedRegion(new CellRangeAddress(3, 3, 0, 1));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        FileOutputStream fileout = new FileOutputStream(excelFile);
        wb.write(fileout);
        fileout.flush();
        if (wb != null) {
            wb.close();
            if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                HttpServletResponse response = ServletActionContext.getResponse();
                response.reset();
                ServletOutputStream outputStream = response.getOutputStream();
                if (agent.indexOf("firefox") == -1) {
                    loadFileName = URLEncoder.encode(excelName, "UTF-8");
                } else {
                    loadFileName = new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                }
                String loadFileName2 = loadFileName.replace("+", " ");
                response.setContentType("Content-type: applicationnd.ms-excel");
                response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xlsx");
                response.setHeader("Content-length", String.valueOf(excelFile.length()));
                byte[] tempByte = new byte[1024];
                FileInputStream in = new FileInputStream(excelFile);
                while (true) {
                    int n = in.read(tempByte);
                    if (n == -1) {
                        break;
                    }
                    try {
                        outputStream.write(tempByte, 0, n);
                    } catch (Exception e2) {
                        this.log.error("保存未成功", e2);
                    }
                }
                outputStream.flush();
                outputStream.close();
                in.close();
            }
        }
        return null;
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String knledgScore_exportMethod2(String examNum, String gradeNum, String schoolNum, String subjectNum, String classNum, String studentId, String studentType, String type, String source, String step, String sNum, String c_exam, String rpt_name, String isMoreSchool, String rptTitle, String isHistory, String isSaveWrite, String dirPath, String uri, String userNum, String schName, String gradeName, String className, String subjectName, String imgRoot, String agent, String subCompose, String teachUnit, String teachUnit_s, String contrastObject, String contrast_s) {
        String rptTitle2 = this.sp.getHeaderStr(examNum, subjectNum, gradeNum, schoolNum, classNum, studentId, studentType, true, true, true, true, false, true, true, true, false, true, true, true, true, true, false, subCompose, "0");
        List list = this.reportService.getKnledgScore(examNum, gradeNum, schoolNum, subjectNum, classNum, studentType, type, source, "0", subCompose, teachUnit, teachUnit_s, contrastObject, contrast_s);
        String folderPath = "ExportFolder/reportExcel" + userNum;
        String str = "reportExcel" + userNum;
        String str2 = "reportExcel" + userNum;
        String excelName = (null == gradeName || "".equals(gradeName)) ? rpt_name + "_" + gradeNum : rpt_name + "_" + gradeName;
        if (null != classNum && !"".equals(classNum) && !classNum.contains(Const.STRING_SEPERATOR)) {
            excelName = (null == className || "".equals(className)) ? excelName + "_" + classNum : excelName + "_" + className;
        }
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        try {
            if (!excelFile.exists()) {
                excelFile.createNewFile();
            }
            WritableWorkbook wwBook = Workbook.createWorkbook(excelFile);
            WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
            biaotis1.setAlignment(Alignment.LEFT);
            biaotis1.setVerticalAlignment(VerticalAlignment.CENTRE);
            WritableFont titles = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat title = new WritableCellFormat(titles);
            title.setAlignment(Alignment.LEFT);
            title.setVerticalAlignment(VerticalAlignment.CENTRE);
            title.setWrap(true);
            WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            WritableCellFormat cFormat1 = new WritableCellFormat(font1);
            cFormat1.setAlignment(Alignment.CENTRE);
            cFormat1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1.setBackground(Const.titleBackground_color);
            cFormat1.setWrap(true);
            WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat2 = new WritableCellFormat(font2);
            cFormat2.setAlignment(Alignment.CENTRE);
            cFormat2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2.setBackground(Const.textOuBackGround_color);
            cFormat2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2.setWrap(true);
            NumberFormat nf1 = new NumberFormat("0.0");
            WritableCellFormat cFormat2_1 = new WritableCellFormat(font2, nf1);
            cFormat2_1.setAlignment(Alignment.CENTRE);
            cFormat2_1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_1.setBackground(Const.textOuBackGround_color);
            cFormat2_1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_1.setWrap(true);
            WritableCellFormat cFormat2_3 = new WritableCellFormat(font2);
            cFormat2_3.setAlignment(Alignment.CENTRE);
            cFormat2_3.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_3.setBackground(Const.textOuBackGround_color);
            cFormat2_3.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_3.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_3.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_3.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_3.setWrap(true);
            NumberFormat nf2 = new NumberFormat("0.00");
            WritableCellFormat cFormat2_2 = new WritableCellFormat(font2, nf2);
            cFormat2_2.setAlignment(Alignment.CENTRE);
            cFormat2_2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_2.setBackground(Const.textOuBackGround_color);
            cFormat2_2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_2.setWrap(true);
            WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat3 = new WritableCellFormat(font3);
            cFormat3.setAlignment(Alignment.CENTRE);
            cFormat3.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3.setBackground(Const.textJiBackGround_color);
            cFormat3.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3.setWrap(true);
            WritableCellFormat cFormat3_1 = new WritableCellFormat(font3, nf1);
            cFormat3_1.setAlignment(Alignment.CENTRE);
            cFormat3_1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_1.setBackground(Const.textJiBackGround_color);
            cFormat3_1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_1.setWrap(true);
            WritableCellFormat cFormat3_3 = new WritableCellFormat(font3);
            cFormat3_3.setAlignment(Alignment.CENTRE);
            cFormat3_3.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_3.setBackground(Const.textJiBackGround_color);
            cFormat3_3.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_3.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_3.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_3.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_3.setWrap(true);
            WritableCellFormat cFormat3_2 = new WritableCellFormat(font3, nf2);
            cFormat3_2.setAlignment(Alignment.CENTRE);
            cFormat3_2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_2.setBackground(Const.textJiBackGround_color);
            cFormat3_2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_2.setWrap(true);
            WritableFont font2_left = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat2_left = new WritableCellFormat(font2_left);
            cFormat2_left.setAlignment(Alignment.LEFT);
            cFormat2_left.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_left.setBackground(Const.textOuBackGround_color);
            cFormat2_left.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_left.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_left.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_left.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_left.setWrap(true);
            WritableFont font3_left = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat3_left = new WritableCellFormat(font3_left);
            cFormat3_left.setAlignment(Alignment.LEFT);
            cFormat3_left.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_left.setBackground(Const.textJiBackGround_color);
            cFormat3_left.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_left.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_left.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_left.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_left.setWrap(true);
            try {
                WritableSheet sheet = wwBook.createSheet(rpt_name, 0);
                sheet.getSettings().setShowGridLines(false);
                try {
                    new ArrayList();
                    new ArrayList();
                    DecimalFormat df01 = new DecimalFormat("0.0");
                    DecimalFormat df02 = new DecimalFormat("0.00");
                    df01.setRoundingMode(RoundingMode.HALF_UP);
                    df02.setRoundingMode(RoundingMode.HALF_UP);
                    Label biaotou = new Label(0, 0, rpt_name, biaotis1);
                    sheet.addCell(biaotou);
                    Label xinxi = new Label(0, 1, rptTitle2, title);
                    sheet.addCell(xinxi);
                    sheet.setRowView(1, Const.height_500);
                    Label knowledgeNum = new Label(0, 2, "编号", cFormat1);
                    sheet.addCell(knowledgeNum);
                    Label knowledge = new Label(1, 2, "知识点", cFormat1);
                    sheet.addCell(knowledge);
                    Label questionName = new Label(2, 2, "题号", cFormat1);
                    sheet.addCell(questionName);
                    Label fullScore = new Label(3, 2, "满分", cFormat1);
                    sheet.addCell(fullScore);
                    sheet.setColumnView(1, 40);
                    if (list.size() <= 0 || ((List) list.get(0)).size() <= 0) {
                        Label dataNull = new Label(0, 3, "数据为空", cFormat3);
                        sheet.addCell(dataNull);
                        sheet.mergeCells(0, 3, 1, 3);
                    } else {
                        List<Map<String, Object>> knoList = (List) list.get(0);
                        List dataList = (List) list.get(1);
                        int claCount = dataList.size() / knoList.size();
                        int knoCount = knoList.size();
                        sheet.mergeCells(0, 0, (claCount * 2) + 2, 0);
                        sheet.mergeCells(0, 1, (claCount * 2) + 2, 1);
                        sheet.mergeCells(0, 2, 0, 3);
                        sheet.mergeCells(1, 2, 1, 3);
                        sheet.mergeCells(2, 2, 2, 3);
                        sheet.mergeCells(3, 2, 3, 3);
                        for (int i = 0; i < claCount; i++) {
                            Label className_title = new Label(4 + (i * 2), 2, ((Object[]) dataList.get(i * knoCount))[2] + "", cFormat1);
                            sheet.addCell(className_title);
                            sheet.mergeCells(4 + (i * 2), 2, 5 + (i * 2), 2);
                            Label frequency = new Label(4 + (i * 2), 3, "平均分", cFormat1);
                            sheet.addCell(frequency);
                            Label totalFrequency = new Label(5 + (i * 2), 3, "变异系数", cFormat1);
                            sheet.addCell(totalFrequency);
                            sheet.setColumnView(4 + (i * 2), 10);
                        }
                        for (int i2 = 0; i2 < knoCount; i2++) {
                            if (i2 % 2 != 0) {
                                Label knowNum = new Label(0, 4 + i2, knoList.get(i2).get("ext3") + "", cFormat2_left);
                                sheet.addCell(knowNum);
                                Label knowName = new Label(1, 4 + i2, knoList.get(i2).get("knoName") + "", cFormat2_left);
                                sheet.addCell(knowName);
                                Label questionName2 = new Label(2, 4 + i2, knoList.get(i2).get("questionName") + "", cFormat2_left);
                                sheet.addCell(questionName2);
                                String scorevalue = "";
                                for (int j = 0; j < claCount; j++) {
                                    Object totalFrequencys_value = ((Object[]) dataList.get((j * knoCount) + (i2 * 1)))[7];
                                    Double totalFrequencys_value_D = Double.valueOf(df02.format(totalFrequencys_value));
                                    String frequencys_value = ((Object[]) dataList.get((j * knoCount) + (i2 * 1)))[6] + "";
                                    Double frequencys_D = Double.valueOf(frequencys_value);
                                    String frequencys_total = ((Object[]) dataList.get((j * knoCount) + (i2 * 1)))[5] + "";
                                    Double frequencys_t = Double.valueOf(frequencys_total);
                                    if (scorevalue == "-" || scorevalue == "") {
                                        scorevalue = frequencys_t.doubleValue() == -1.0d ? "-" : Convert.toBigDecimal(frequencys_total).stripTrailingZeros().toPlainString();
                                    }
                                    if (totalFrequencys_value_D.doubleValue() == 9.0d || totalFrequencys_value_D.doubleValue() == -1.0d) {
                                        Label frequencys = new Label(4 + (j * 2), 4 + i2, "-", cFormat2);
                                        sheet.addCell(frequencys);
                                        Label totalFrequencys = new Label(5 + (j * 2), 4 + i2, "-", cFormat2);
                                        sheet.addCell(totalFrequencys);
                                    } else {
                                        Number frequencys2 = new Number(4 + (j * 2), 4 + i2, Double.valueOf(df02.format(Double.valueOf(frequencys_D.doubleValue() * frequencys_t.doubleValue()))).doubleValue(), cFormat2_2);
                                        sheet.addCell(frequencys2);
                                        Number totalFrequencys2 = new Number(5 + (j * 2), 4 + i2, totalFrequencys_value_D.doubleValue(), cFormat2_2);
                                        sheet.addCell(totalFrequencys2);
                                    }
                                }
                                Label scores = new Label(3, 4 + i2, scorevalue, cFormat2_3);
                                sheet.addCell(scores);
                            } else {
                                Label knowNum2 = new Label(0, 4 + i2, knoList.get(i2).get("ext3") + "", cFormat3_left);
                                sheet.addCell(knowNum2);
                                Label knowName2 = new Label(1, 4 + i2, knoList.get(i2).get("knoName") + "", cFormat3_left);
                                sheet.addCell(knowName2);
                                Label questionName22 = new Label(2, 4 + i2, knoList.get(i2).get("questionName") + "", cFormat3_left);
                                sheet.addCell(questionName22);
                                String scorevalue2 = "";
                                for (int j2 = 0; j2 < claCount; j2++) {
                                    Object totalFrequencys_value2 = ((Object[]) dataList.get((j2 * knoCount) + (i2 * 1)))[7];
                                    Double totalFrequencys_value_D2 = Double.valueOf(df02.format(totalFrequencys_value2));
                                    String frequencys_value2 = ((Object[]) dataList.get((j2 * knoCount) + (i2 * 1)))[6] + "";
                                    Double frequencys_D2 = Double.valueOf(frequencys_value2);
                                    String frequencys_total2 = ((Object[]) dataList.get((j2 * knoCount) + (i2 * 1)))[5] + "";
                                    Double frequencys_t2 = Double.valueOf(frequencys_total2);
                                    if (scorevalue2 == "-" || scorevalue2 == "") {
                                        scorevalue2 = frequencys_t2.doubleValue() == -1.0d ? "-" : Convert.toBigDecimal(frequencys_total2).stripTrailingZeros().toPlainString();
                                    }
                                    if (totalFrequencys_value_D2.doubleValue() == 9.0d || totalFrequencys_value_D2.doubleValue() == -1.0d) {
                                        Label frequencys3 = new Label(4 + (j2 * 2), 4 + i2, "-", cFormat3);
                                        sheet.addCell(frequencys3);
                                        Label totalFrequencys3 = new Label(5 + (j2 * 2), 4 + i2, "-", cFormat3);
                                        sheet.addCell(totalFrequencys3);
                                    } else {
                                        Number frequencys4 = new Number(4 + (j2 * 2), 4 + i2, Double.valueOf(df02.format(Double.valueOf(frequencys_D2.doubleValue() * frequencys_t2.doubleValue()))).doubleValue(), cFormat3_2);
                                        sheet.addCell(frequencys4);
                                        Number totalFrequencys4 = new Number(5 + (j2 * 2), 4 + i2, totalFrequencys_value_D2.doubleValue(), cFormat3_2);
                                        sheet.addCell(totalFrequencys4);
                                    }
                                }
                                Label scores2 = new Label(3, 4 + i2, scorevalue2, cFormat3_3);
                                sheet.addCell(scores2);
                            }
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                wwBook.write();
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response = ServletActionContext.getResponse();
                            response.reset();
                            ServletOutputStream outputStream = response.getOutputStream();
                            String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName2 = loadFileName.replace("+", " ");
                            response.setContentType("Content-type: applicationnd.ms-excel");
                            response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xls");
                            response.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte = new byte[1024];
                            FileInputStream in = new FileInputStream(excelFile);
                            while (true) {
                                int n = in.read(tempByte);
                                if (n == -1) {
                                    break;
                                }
                                try {
                                    outputStream.write(tempByte, 0, n);
                                } catch (Exception e2) {
                                    this.log.error("保存未成功", e2);
                                }
                            }
                            outputStream.flush();
                            outputStream.close();
                            in.close();
                        }
                    } catch (WriteException e3) {
                        e3.printStackTrace();
                    }
                }
            } catch (Exception e4) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response2 = ServletActionContext.getResponse();
                            response2.reset();
                            ServletOutputStream outputStream2 = response2.getOutputStream();
                            String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName4 = loadFileName3.replace("+", " ");
                            response2.setContentType("Content-type: applicationnd.ms-excel");
                            response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xls");
                            response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte2 = new byte[1024];
                            FileInputStream in2 = new FileInputStream(excelFile);
                            while (true) {
                                int n2 = in2.read(tempByte2);
                                if (n2 == -1) {
                                    break;
                                }
                                try {
                                    outputStream2.write(tempByte2, 0, n2);
                                } catch (Exception e5) {
                                    this.log.error("保存未成功", e5);
                                }
                            }
                            outputStream2.flush();
                            outputStream2.close();
                            in2.close();
                        }
                    } catch (WriteException e6) {
                        e6.printStackTrace();
                    }
                }
            } catch (Throwable th) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response3 = ServletActionContext.getResponse();
                            response3.reset();
                            ServletOutputStream outputStream3 = response3.getOutputStream();
                            String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName6 = loadFileName5.replace("+", " ");
                            response3.setContentType("Content-type: applicationnd.ms-excel");
                            response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xls");
                            response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte3 = new byte[1024];
                            FileInputStream in3 = new FileInputStream(excelFile);
                            while (true) {
                                int n3 = in3.read(tempByte3);
                                if (n3 == -1) {
                                    break;
                                }
                                try {
                                    outputStream3.write(tempByte3, 0, n3);
                                } catch (Exception e7) {
                                    this.log.error("保存未成功", e7);
                                }
                            }
                            outputStream3.flush();
                            outputStream3.close();
                            in3.close();
                        }
                    } catch (WriteException e8) {
                        e8.printStackTrace();
                        throw th;
                    }
                }
                throw th;
            }
        } catch (Exception e9) {
            e9.printStackTrace();
        }
        return null;
    }

    public File getSubChartImgFile_knledgScore(String userId, String[] tuName, String dirPath, List list, String tname, boolean flg) {
        if (flg) {
            subjectLineImage_knledgScore(userId, list, tuName);
            return null;
        }
        File file = new File(dirPath + File.separator + "tmpLinePng" + File.separator + tname + userId + ".png");
        return file;
    }

    public void subjectLineImage_knledgScore(String userId, List list, String[] tuName) {
        String str;
        DecimalFormat df1 = new DecimalFormat("0.0");
        new ArrayList();
        new ArrayList();
        List knoList = (List) list.get(0);
        List dataList = (List) list.get(1);
        int claCount = dataList.size() / knoList.size();
        int knoCount = knoList.size();
        String[] rowKeys = new String[claCount];
        for (int i = 0; i < claCount; i++) {
            rowKeys[i] = ((Object[]) dataList.get(i * knoList.size()))[2] + "";
        }
        String[] columnKeys = new String[knoList.size()];
        double[][] data = new double[rowKeys.length][knoList.size()];
        double[][] data2 = new double[rowKeys.length][knoList.size()];
        for (int i2 = 0; i2 < knoCount; i2++) {
            if (knoList.get(i2) instanceof Knowledge) {
                str = ((Knowledge) knoList.get(i2)).getExt3();
            } else {
                str = (String) ((HashMap) knoList.get(i2)).get("ext3");
            }
            String objArr = str;
            columnKeys[i2] = String.valueOf(objArr);
        }
        Double.valueOf(0.0d);
        Double.valueOf(0.0d);
        Double.valueOf(0.0d);
        Double.valueOf(0.0d);
        List list_data = new ArrayList();
        List list_data2 = new ArrayList();
        for (int i3 = 0; i3 < knoCount; i3++) {
            for (int x = 0; x < claCount; x++) {
                String score = ((Object[]) dataList.get((x * knoList.size()) + i3))[6] + "";
                Double frequencys_D = Double.valueOf(Double.parseDouble(df1.format(Double.valueOf(score).doubleValue() * 100.0d)));
                if (frequencys_D.doubleValue() != -100.0d) {
                    data[x][i3] = Double.parseDouble(String.valueOf(frequencys_D));
                    list_data.add(Double.valueOf(Double.parseDouble(String.valueOf(frequencys_D))));
                }
                Double cv = Double.valueOf(Double.parseDouble(String.valueOf(((Object[]) dataList.get((x * knoList.size()) + i3))[7] + "")));
                if (cv.doubleValue() != 9.0d && cv.doubleValue() != -1.0d) {
                    data2[x][i3] = Double.parseDouble(String.valueOf(cv));
                    list_data2.add(Double.valueOf(Double.parseDouble(String.valueOf(cv))));
                }
            }
        }
        Double maxDesc = (Double) Collections.max(list_data);
        Double minDesc = (Double) Collections.min(list_data);
        Double count_unit = Double.valueOf((maxDesc.doubleValue() - minDesc.doubleValue()) / 5.0d);
        Double maxDesc2 = (Double) Collections.max(list_data2);
        Double minDesc2 = (Double) Collections.min(list_data2);
        Double count_unit2 = Double.valueOf((maxDesc2.doubleValue() - minDesc2.doubleValue()) / 5.0d);
        try {
            HttpServletResponse response = ServletActionContext.getResponse();
            response.reset();
            response.setContentType("image/jpeg");
            JFreeChart chart = this.lc.getLineChar(data, rowKeys, columnKeys, "知识点编号", "", "知识点得分率(%)对比图", "#0", count_unit, Integer.valueOf(rowKeys.length), "Y", "##.#");
            getChartImageFolder(chart, "tmpLinePng", Const.width_1100, Const.height_500, tuName[0] + userId);
            JFreeChart chart2 = this.lc.getLineChar(data2, rowKeys, columnKeys, "知识点编号", "", "变异系数对比图", "#0", count_unit2, Integer.valueOf(rowKeys.length), "Y", "##.##");
            getChartImageFolder(chart2, "tmpLinePng", Const.width_1100, Const.height_500, tuName[1] + userId);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String abilityScore_exportMethod(String examNum, String gradeNum, String schoolNum, String subjectNum, String classNum, String studentId, String studentType, String type, String source, String step, String sNum, String c_exam, String rpt_name, String isMoreSchool, String rptTitle, String isHistory, String isSaveWrite, String dirPath, String uri, String userNum, String schName, String gradeName, String className, String subjectName, String imgRoot, String agent, String subCompose, String teachUnit, String teachUnit_s, String contrastObject, String contrast_s) throws IOException {
        String loadFileName;
        String rptTitle2 = this.sp.getHeaderStr(examNum, subjectNum, gradeNum, schoolNum, classNum, studentId, studentType, true, true, true, true, false, true, true, true, false, true, true, true, true, true, false, subCompose, "0");
        List list = this.reportService.getAblityScore(examNum, gradeNum, schoolNum, subjectNum, classNum, studentType, type, source, "0", subCompose, teachUnit, teachUnit_s, contrastObject, contrast_s);
        String folderPath = "ExportFolder/reportExcel" + userNum;
        String str = "reportExcel" + userNum;
        String str2 = "reportExcel" + userNum;
        String excelName = (null == gradeName || "".equals(gradeName)) ? rpt_name + "_" + gradeNum : rpt_name + "_" + gradeName;
        if (null != classNum && !"".equals(classNum) && !classNum.contains(Const.STRING_SEPERATOR)) {
            excelName = (null == className || "".equals(className)) ? excelName + "_" + classNum : excelName + "_" + className;
        }
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        SXSSFWorkbook wb = new SXSSFWorkbook();
        wb.setCompressTempFiles(true);
        Font fontCent = wb.createFont();
        fontCent.setFontName("Arial");
        fontCent.setFontHeightInPoints((short) 15);
        fontCent.setBold(true);
        fontCent.setColor(Convert.toShort(32767).shortValue());
        CellStyle biaotis1 = wb.createCellStyle();
        biaotis1.setFont(fontCent);
        biaotis1.setWrapText(true);
        biaotis1.setAlignment(HorizontalAlignment.LEFT);
        biaotis1.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
        Font fontCent1 = wb.createFont();
        fontCent1.setFontName("Arial");
        fontCent1.setFontHeightInPoints((short) 10);
        fontCent1.setColor(Convert.toShort(32767).shortValue());
        CellStyle title = wb.createCellStyle();
        title.setFont(fontCent1);
        title.setWrapText(true);
        title.setAlignment(HorizontalAlignment.LEFT);
        title.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
        Font fontCent3 = wb.createFont();
        fontCent3.setFontName("Arial");
        fontCent3.setFontHeightInPoints((short) 10);
        fontCent3.setColor(Convert.toShort(32767).shortValue());
        CellStyle cFormat1 = wb.createCellStyle();
        cFormat1.setFont(fontCent3);
        cFormat1.setBorderBottom(BorderStyle.THIN);
        cFormat1.setBorderRight(BorderStyle.THIN);
        cFormat1.setBorderLeft(BorderStyle.THIN);
        cFormat1.setBorderTop(BorderStyle.THIN);
        cFormat1.setWrapText(true);
        cFormat1.setFillForegroundColor(IndexedColors.LIGHT_TURQUOISE.getIndex());
        cFormat1.setAlignment(HorizontalAlignment.CENTER);
        cFormat1.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
        cFormat1.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        DataFormat df = wb.createDataFormat();
        CellStyle cFormat2 = wb.createCellStyle();
        cFormat2.setFont(fontCent3);
        cFormat2.setBorderBottom(BorderStyle.THIN);
        cFormat2.setBorderRight(BorderStyle.THIN);
        cFormat2.setBorderLeft(BorderStyle.THIN);
        cFormat2.setBorderTop(BorderStyle.THIN);
        cFormat2.setWrapText(true);
        cFormat2.setFillForegroundColor(IndexedColors.WHITE.index);
        cFormat2.setAlignment(HorizontalAlignment.CENTER);
        cFormat2.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
        cFormat2.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        CellStyle cFormat2_left = wb.createCellStyle();
        cFormat2_left.setFont(fontCent3);
        cFormat2_left.setBorderBottom(BorderStyle.THIN);
        cFormat2_left.setBorderRight(BorderStyle.THIN);
        cFormat2_left.setBorderLeft(BorderStyle.THIN);
        cFormat2_left.setBorderTop(BorderStyle.THIN);
        cFormat2_left.setWrapText(true);
        cFormat2_left.setFillForegroundColor(IndexedColors.WHITE.index);
        cFormat2_left.setAlignment(HorizontalAlignment.LEFT);
        cFormat2_left.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
        cFormat2_left.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        CellStyle cFormat2_0 = wb.createCellStyle();
        cFormat2_0.setFont(fontCent3);
        cFormat2_0.setBorderBottom(BorderStyle.THIN);
        cFormat2_0.setBorderRight(BorderStyle.THIN);
        cFormat2_0.setBorderLeft(BorderStyle.THIN);
        cFormat2_0.setBorderTop(BorderStyle.THIN);
        cFormat2_0.setWrapText(true);
        cFormat2_0.setDataFormat(df.getFormat("0.0%"));
        cFormat2_0.setFillForegroundColor(IndexedColors.WHITE.index);
        cFormat2_0.setAlignment(HorizontalAlignment.CENTER);
        cFormat2_0.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
        cFormat2_0.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        CellStyle cFormat2_1 = wb.createCellStyle();
        cFormat2_1.setFont(fontCent3);
        cFormat2_1.setBorderBottom(BorderStyle.THIN);
        cFormat2_1.setBorderRight(BorderStyle.THIN);
        cFormat2_1.setBorderLeft(BorderStyle.THIN);
        cFormat2_1.setBorderTop(BorderStyle.THIN);
        cFormat2_1.setWrapText(true);
        cFormat2_1.setDataFormat(df.getFormat("0.0"));
        cFormat2_1.setFillForegroundColor(IndexedColors.WHITE.index);
        cFormat2_1.setAlignment(HorizontalAlignment.CENTER);
        cFormat2_1.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
        cFormat2_1.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        CellStyle cFormat2_2 = wb.createCellStyle();
        cFormat2_2.setFont(fontCent3);
        cFormat2_2.setBorderBottom(BorderStyle.THIN);
        cFormat2_2.setBorderRight(BorderStyle.THIN);
        cFormat2_2.setBorderLeft(BorderStyle.THIN);
        cFormat2_2.setBorderTop(BorderStyle.THIN);
        cFormat2_2.setWrapText(true);
        cFormat2_2.setDataFormat(df.getFormat("0.00"));
        cFormat2_2.setFillForegroundColor(IndexedColors.WHITE.index);
        cFormat2_2.setAlignment(HorizontalAlignment.CENTER);
        cFormat2_2.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
        cFormat2_2.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        CellStyle cFormat3 = wb.createCellStyle();
        cFormat3.setFont(fontCent3);
        cFormat3.setBorderBottom(BorderStyle.THIN);
        cFormat3.setBorderRight(BorderStyle.THIN);
        cFormat3.setBorderLeft(BorderStyle.THIN);
        cFormat3.setBorderTop(BorderStyle.THIN);
        cFormat3.setWrapText(true);
        cFormat3.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.index);
        cFormat3.setAlignment(HorizontalAlignment.CENTER);
        cFormat3.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
        cFormat3.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        CellStyle cFormat3_left = wb.createCellStyle();
        cFormat3_left.setFont(fontCent3);
        cFormat3_left.setBorderBottom(BorderStyle.THIN);
        cFormat3_left.setBorderRight(BorderStyle.THIN);
        cFormat3_left.setBorderLeft(BorderStyle.THIN);
        cFormat3_left.setBorderTop(BorderStyle.THIN);
        cFormat3_left.setWrapText(true);
        cFormat3_left.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.index);
        cFormat3_left.setAlignment(HorizontalAlignment.LEFT);
        cFormat3_left.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
        cFormat3_left.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        CellStyle cFormat3_0 = wb.createCellStyle();
        cFormat3_0.setFont(fontCent3);
        cFormat3_0.setBorderBottom(BorderStyle.THIN);
        cFormat3_0.setBorderRight(BorderStyle.THIN);
        cFormat3_0.setBorderLeft(BorderStyle.THIN);
        cFormat3_0.setBorderTop(BorderStyle.THIN);
        cFormat3_0.setWrapText(true);
        cFormat3_0.setDataFormat(df.getFormat("0.0%"));
        cFormat3_0.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.index);
        cFormat3_0.setAlignment(HorizontalAlignment.CENTER);
        cFormat3_0.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
        cFormat3_0.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        CellStyle cFormat3_1 = wb.createCellStyle();
        cFormat3_1.setFont(fontCent3);
        cFormat3_1.setBorderBottom(BorderStyle.THIN);
        cFormat3_1.setBorderRight(BorderStyle.THIN);
        cFormat3_1.setBorderLeft(BorderStyle.THIN);
        cFormat3_1.setBorderTop(BorderStyle.THIN);
        cFormat3_1.setWrapText(true);
        cFormat3_1.setDataFormat(df.getFormat("0.0"));
        cFormat3_1.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.index);
        cFormat3_1.setAlignment(HorizontalAlignment.CENTER);
        cFormat3_1.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
        cFormat3_1.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        CellStyle cFormat3_2 = wb.createCellStyle();
        cFormat3_2.setFont(fontCent3);
        cFormat3_2.setBorderBottom(BorderStyle.THIN);
        cFormat3_2.setBorderRight(BorderStyle.THIN);
        cFormat3_2.setBorderLeft(BorderStyle.THIN);
        cFormat3_2.setBorderTop(BorderStyle.THIN);
        cFormat3_2.setWrapText(true);
        cFormat3_2.setDataFormat(df.getFormat("0.00"));
        cFormat3_2.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.index);
        cFormat3_2.setAlignment(HorizontalAlignment.CENTER);
        cFormat3_2.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
        cFormat3_2.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        try {
            if (!excelFile.exists()) {
                excelFile.createNewFile();
            }
            SXSSFSheet sheet = wb.createSheet(rpt_name);
            new ArrayList();
            new ArrayList();
            DecimalFormat df01 = new DecimalFormat("0.0");
            DecimalFormat df02 = new DecimalFormat("0.00");
            df01.setRoundingMode(RoundingMode.HALF_UP);
            df02.setRoundingMode(RoundingMode.HALF_UP);
            Cell cell0 = sheet.createRow(0).createCell(0);
            cell0.setCellValue(rpt_name);
            SXSSFRow createRow = sheet.createRow(1);
            Cell cell1 = createRow.createCell(0);
            cell1.setCellValue(rptTitle2);
            createRow.setHeight((short) 500);
            SXSSFRow createRow2 = sheet.createRow(2);
            Cell cell2_0 = createRow2.createCell(0);
            cell2_0.setCellValue("编号");
            Cell cell2_1 = createRow2.createCell(1);
            cell2_1.setCellValue("能力点");
            Cell cell2_2 = createRow2.createCell(2);
            cell2_2.setCellValue("题号");
            Cell cell2_3 = createRow2.createCell(3);
            cell2_3.setCellValue("满分");
            cell0.setCellStyle(biaotis1);
            cell1.setCellStyle(title);
            cell2_0.setCellStyle(cFormat1);
            cell2_1.setCellStyle(cFormat1);
            cell2_2.setCellStyle(cFormat1);
            cell2_3.setCellStyle(cFormat1);
            SXSSFRow createRow3 = sheet.createRow(3);
            Cell cell3_0 = createRow3.createCell(0);
            Cell cell3_1 = createRow3.createCell(1);
            Cell cell3_2 = createRow3.createCell(2);
            Cell cell3_3 = createRow3.createCell(3);
            cell3_0.setCellStyle(cFormat1);
            cell3_1.setCellStyle(cFormat1);
            cell3_2.setCellStyle(cFormat1);
            cell3_3.setCellStyle(cFormat1);
            sheet.setColumnWidth(1, 8000);
            if (list.size() > 0 && ((List) list.get(0)).size() > 0) {
                List<Map<String, Object>> knoList = (List) list.get(0);
                List dataList = (List) list.get(1);
                int claCount = dataList.size() / knoList.size();
                int knoCount = knoList.size();
                sheet.addMergedRegion(new CellRangeAddress(0, 0, 0, (claCount * 2) + 2));
                sheet.addMergedRegion(new CellRangeAddress(1, 1, 0, (claCount * 2) + 2));
                sheet.addMergedRegion(new CellRangeAddress(2, 3, 0, 0));
                sheet.addMergedRegion(new CellRangeAddress(2, 3, 1, 1));
                sheet.addMergedRegion(new CellRangeAddress(2, 3, 2, 2));
                sheet.addMergedRegion(new CellRangeAddress(2, 3, 3, 3));
                for (int i = 0; i < claCount; i++) {
                    Cell className_title = createRow2.createCell(4 + (i * 2));
                    className_title.setCellValue(((Object[]) dataList.get(i * knoCount))[2] + "");
                    className_title.setCellStyle(cFormat1);
                    Cell className_title2 = createRow2.createCell(5 + (i * 2));
                    className_title2.setCellStyle(cFormat1);
                    sheet.addMergedRegion(new CellRangeAddress(2, 2, 4 + (i * 2), 5 + (i * 2)));
                    Cell frequency = createRow3.createCell(4 + (i * 2));
                    frequency.setCellValue("平均分");
                    frequency.setCellStyle(cFormat1);
                    Cell totalFrequency = createRow3.createCell(5 + (i * 2));
                    totalFrequency.setCellValue("变异系数");
                    totalFrequency.setCellStyle(cFormat1);
                }
                for (int i2 = 0; i2 < knoCount; i2++) {
                    SXSSFRow createRow4 = sheet.createRow(4 + i2);
                    if (i2 % 2 != 0) {
                        Cell knowNum = createRow4.createCell(0);
                        knowNum.setCellValue(knoList.get(i2).get("ext3") + "");
                        knowNum.setCellStyle(cFormat2_left);
                        Cell knowName = createRow4.createCell(1);
                        knowName.setCellValue(knoList.get(i2).get("knoName") + "");
                        knowName.setCellStyle(cFormat2_left);
                        Cell questionName2 = createRow4.createCell(2);
                        questionName2.setCellValue(knoList.get(i2).get("questionName") + "");
                        questionName2.setCellStyle(cFormat2_left);
                        String scorevalue = "";
                        for (int j = 0; j < claCount; j++) {
                            Object totalFrequencys_value = ((Object[]) dataList.get((j * knoCount) + (i2 * 1)))[7];
                            Double totalFrequencys_value_D = Double.valueOf(df02.format(totalFrequencys_value));
                            String frequencys_value = ((Object[]) dataList.get((j * knoCount) + (i2 * 1)))[6] + "";
                            Double frequencys_D = Double.valueOf(frequencys_value);
                            String frequencys_total = ((Object[]) dataList.get((j * knoCount) + (i2 * 1)))[5] + "";
                            Double frequencys_t = Double.valueOf(frequencys_total);
                            if (scorevalue == "-" || scorevalue == "") {
                                if (frequencys_t.doubleValue() == -1.0d) {
                                    scorevalue = "-";
                                } else {
                                    scorevalue = Convert.toBigDecimal(frequencys_total).stripTrailingZeros().toPlainString();
                                }
                            }
                            if (totalFrequencys_value_D.doubleValue() == 9.0d || totalFrequencys_value_D.doubleValue() == -1.0d) {
                                Cell frequencys = createRow4.createCell(4 + (j * 2));
                                frequencys.setCellValue("-");
                                frequencys.setCellStyle(cFormat2);
                                Cell totalFrequencys = createRow4.createCell(5 + (j * 2));
                                totalFrequencys.setCellValue("-");
                                totalFrequencys.setCellStyle(cFormat2);
                            } else {
                                Double frequencys_D2 = Double.valueOf(frequencys_D.doubleValue() * frequencys_t.doubleValue());
                                Cell frequencys2 = createRow4.createCell(4 + (j * 2));
                                frequencys2.setCellValue(Double.valueOf(df02.format(frequencys_D2)).doubleValue());
                                frequencys2.setCellStyle(cFormat2_2);
                                Cell totalFrequencys2 = createRow4.createCell(5 + (j * 2));
                                totalFrequencys2.setCellValue(totalFrequencys_value_D.doubleValue());
                                totalFrequencys2.setCellStyle(cFormat2_2);
                            }
                        }
                        Cell scores = createRow4.createCell(3);
                        scores.setCellValue(scorevalue);
                        scores.setCellStyle(cFormat2);
                    } else {
                        Cell knowNum2 = createRow4.createCell(0);
                        knowNum2.setCellValue(knoList.get(i2).get("ext3") + "");
                        knowNum2.setCellStyle(cFormat3_left);
                        Cell knowName2 = createRow4.createCell(1);
                        knowName2.setCellValue(knoList.get(i2).get("knoName") + "");
                        knowName2.setCellStyle(cFormat3_left);
                        Cell questionName22 = createRow4.createCell(2);
                        questionName22.setCellValue(knoList.get(i2).get("questionName") + "");
                        questionName22.setCellStyle(cFormat3_left);
                        String scorevalue2 = "";
                        for (int j2 = 0; j2 < claCount; j2++) {
                            Object totalFrequencys_value2 = ((Object[]) dataList.get((j2 * knoCount) + (i2 * 1)))[7];
                            Double totalFrequencys_value_D2 = Double.valueOf(df02.format(totalFrequencys_value2));
                            String frequencys_value2 = ((Object[]) dataList.get((j2 * knoCount) + (i2 * 1)))[6] + "";
                            Double frequencys_D3 = Double.valueOf(frequencys_value2);
                            String frequencys_total2 = ((Object[]) dataList.get((j2 * knoCount) + (i2 * 1)))[5] + "";
                            Double frequencys_t2 = Double.valueOf(frequencys_total2);
                            if (scorevalue2 == "-" || scorevalue2 == "") {
                                if (frequencys_t2.doubleValue() == -1.0d) {
                                    scorevalue2 = "-";
                                } else {
                                    scorevalue2 = Convert.toBigDecimal(frequencys_total2).stripTrailingZeros().toPlainString();
                                }
                            }
                            if (totalFrequencys_value_D2.doubleValue() == 9.0d || totalFrequencys_value_D2.doubleValue() == -1.0d) {
                                Cell frequencys3 = createRow4.createCell(4 + (j2 * 2));
                                frequencys3.setCellValue("-");
                                frequencys3.setCellStyle(cFormat3);
                                Cell totalFrequencys3 = createRow4.createCell(5 + (j2 * 2));
                                totalFrequencys3.setCellValue("-");
                                totalFrequencys3.setCellStyle(cFormat3);
                            } else {
                                Double frequencys_D4 = Double.valueOf(frequencys_D3.doubleValue() * frequencys_t2.doubleValue());
                                Cell frequencys4 = createRow4.createCell(4 + (j2 * 2));
                                frequencys4.setCellValue(Double.valueOf(df02.format(frequencys_D4)).doubleValue());
                                frequencys4.setCellStyle(cFormat3_2);
                                Cell totalFrequencys4 = createRow4.createCell(5 + (j2 * 2));
                                totalFrequencys4.setCellValue(totalFrequencys_value_D2.doubleValue());
                                totalFrequencys4.setCellStyle(cFormat3_2);
                            }
                        }
                        Cell scores2 = createRow4.createCell(3);
                        scores2.setCellValue(scorevalue2);
                        scores2.setCellStyle(cFormat3);
                    }
                }
            } else {
                Cell dataNull = createRow3.createCell(0);
                dataNull.setCellValue("数据为空");
                dataNull.setCellStyle(cFormat3);
                sheet.addMergedRegion(new CellRangeAddress(3, 3, 0, 1));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        FileOutputStream fileout = new FileOutputStream(excelFile);
        wb.write(fileout);
        fileout.flush();
        if (wb != null) {
            wb.close();
            if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                HttpServletResponse response = ServletActionContext.getResponse();
                response.reset();
                ServletOutputStream outputStream = response.getOutputStream();
                if (agent.indexOf("firefox") == -1) {
                    loadFileName = URLEncoder.encode(excelName, "UTF-8");
                } else {
                    loadFileName = new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                }
                String loadFileName2 = loadFileName.replace("+", " ");
                response.setContentType("Content-type: applicationnd.ms-excel");
                response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xlsx");
                response.setHeader("Content-length", String.valueOf(excelFile.length()));
                byte[] tempByte = new byte[1024];
                FileInputStream in = new FileInputStream(excelFile);
                while (true) {
                    int n = in.read(tempByte);
                    if (n == -1) {
                        break;
                    }
                    try {
                        outputStream.write(tempByte, 0, n);
                    } catch (Exception e2) {
                        this.log.error("保存未成功", e2);
                    }
                }
                outputStream.flush();
                outputStream.close();
                in.close();
            }
        }
        return null;
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String abilityScore_exportMethod2(String examNum, String gradeNum, String schoolNum, String subjectNum, String classNum, String studentId, String studentType, String type, String source, String step, String sNum, String c_exam, String rpt_name, String isMoreSchool, String rptTitle, String isHistory, String isSaveWrite, String dirPath, String uri, String userNum, String schName, String gradeName, String className, String subjectName, String imgRoot, String agent, String subCompose, String teachUnit, String teachUnit_s, String contrastObject, String contrast_s) {
        String rptTitle2 = this.sp.getHeaderStr(examNum, subjectNum, gradeNum, schoolNum, classNum, studentId, studentType, true, true, true, true, false, true, true, true, false, true, true, true, true, true, false, subCompose, "0");
        List list = this.reportService.getAblityScore(examNum, gradeNum, schoolNum, subjectNum, classNum, studentType, type, source, "0", subCompose, teachUnit, teachUnit_s, contrastObject, contrast_s);
        String folderPath = "ExportFolder/reportExcel" + userNum;
        String str = "reportExcel" + userNum;
        String str2 = "reportExcel" + userNum;
        String excelName = (null == gradeName || "".equals(gradeName)) ? rpt_name + "_" + gradeNum : rpt_name + "_" + gradeName;
        if (null != classNum && !"".equals(classNum) && !classNum.contains(Const.STRING_SEPERATOR)) {
            excelName = (null == className || "".equals(className)) ? excelName + "_" + classNum : excelName + "_" + className;
        }
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        try {
            if (!excelFile.exists()) {
                excelFile.createNewFile();
            }
            WritableWorkbook wwBook = Workbook.createWorkbook(excelFile);
            WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
            biaotis1.setAlignment(Alignment.LEFT);
            biaotis1.setVerticalAlignment(VerticalAlignment.CENTRE);
            WritableFont titles = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat title = new WritableCellFormat(titles);
            title.setAlignment(Alignment.LEFT);
            title.setVerticalAlignment(VerticalAlignment.CENTRE);
            title.setWrap(true);
            WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            WritableCellFormat cFormat1 = new WritableCellFormat(font1);
            cFormat1.setAlignment(Alignment.CENTRE);
            cFormat1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1.setBackground(Const.titleBackground_color);
            cFormat1.setWrap(true);
            WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat2 = new WritableCellFormat(font2);
            cFormat2.setAlignment(Alignment.CENTRE);
            cFormat2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2.setBackground(Const.textOuBackGround_color);
            cFormat2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2.setWrap(true);
            NumberFormat nf1 = new NumberFormat("0.0");
            WritableCellFormat cFormat2_1 = new WritableCellFormat(font2, nf1);
            cFormat2_1.setAlignment(Alignment.CENTRE);
            cFormat2_1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_1.setBackground(Const.textOuBackGround_color);
            cFormat2_1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_1.setWrap(true);
            WritableCellFormat cFormat2_3 = new WritableCellFormat(font2);
            cFormat2_3.setAlignment(Alignment.CENTRE);
            cFormat2_3.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_3.setBackground(Const.textOuBackGround_color);
            cFormat2_3.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_3.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_3.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_3.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_3.setWrap(true);
            NumberFormat nf2 = new NumberFormat("0.00");
            WritableCellFormat cFormat2_2 = new WritableCellFormat(font2, nf2);
            cFormat2_2.setAlignment(Alignment.CENTRE);
            cFormat2_2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_2.setBackground(Const.textOuBackGround_color);
            cFormat2_2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_2.setWrap(true);
            WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat3 = new WritableCellFormat(font3);
            cFormat3.setAlignment(Alignment.CENTRE);
            cFormat3.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3.setBackground(Const.textJiBackGround_color);
            cFormat3.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3.setWrap(true);
            WritableCellFormat cFormat3_1 = new WritableCellFormat(font3, nf1);
            cFormat3_1.setAlignment(Alignment.CENTRE);
            cFormat3_1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_1.setBackground(Const.textJiBackGround_color);
            cFormat3_1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_1.setWrap(true);
            WritableCellFormat cFormat3_3 = new WritableCellFormat(font3);
            cFormat3_3.setAlignment(Alignment.CENTRE);
            cFormat3_3.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_3.setBackground(Const.textJiBackGround_color);
            cFormat3_3.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_3.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_3.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_3.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_3.setWrap(true);
            WritableCellFormat cFormat3_2 = new WritableCellFormat(font3, nf2);
            cFormat3_2.setAlignment(Alignment.CENTRE);
            cFormat3_2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_2.setBackground(Const.textJiBackGround_color);
            cFormat3_2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_2.setWrap(true);
            WritableFont font2_left = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat2_left = new WritableCellFormat(font2_left);
            cFormat2_left.setAlignment(Alignment.LEFT);
            cFormat2_left.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_left.setBackground(Const.textOuBackGround_color);
            cFormat2_left.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_left.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_left.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_left.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_left.setWrap(true);
            WritableFont font3_left = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat3_left = new WritableCellFormat(font3_left);
            cFormat3_left.setAlignment(Alignment.LEFT);
            cFormat3_left.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_left.setBackground(Const.textJiBackGround_color);
            cFormat3_left.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_left.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_left.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_left.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_left.setWrap(true);
            try {
                try {
                    WritableSheet sheet = wwBook.createSheet(rpt_name, 0);
                    sheet.getSettings().setShowGridLines(false);
                    try {
                        new ArrayList();
                        new ArrayList();
                        DecimalFormat df01 = new DecimalFormat("0.0");
                        DecimalFormat df02 = new DecimalFormat("0.00");
                        df01.setRoundingMode(RoundingMode.HALF_UP);
                        df02.setRoundingMode(RoundingMode.HALF_UP);
                        Label biaotou = new Label(0, 0, rpt_name, biaotis1);
                        sheet.addCell(biaotou);
                        Label xinxi = new Label(0, 1, rptTitle2, title);
                        sheet.addCell(xinxi);
                        sheet.setRowView(1, Const.height_500);
                        Label abilityNum = new Label(0, 2, "编号", cFormat1);
                        sheet.addCell(abilityNum);
                        Label ability = new Label(1, 2, "能力点", cFormat1);
                        sheet.addCell(ability);
                        Label questionName = new Label(2, 2, "题号", cFormat1);
                        sheet.addCell(questionName);
                        Label fullScore = new Label(3, 2, "满分", cFormat1);
                        sheet.addCell(fullScore);
                        sheet.setColumnView(1, 40);
                        if (list.size() > 0) {
                            List<Map<String, Object>> knoList = (List) list.get(0);
                            List dataList = (List) list.get(1);
                            if (knoList.size() <= 0 || dataList.size() <= 0) {
                                Label dataNull = new Label(0, 3, "数据为空", cFormat3);
                                sheet.addCell(dataNull);
                                sheet.mergeCells(0, 3, 1, 3);
                            } else {
                                int claCount = dataList.size() / knoList.size();
                                int knoCount = knoList.size();
                                sheet.mergeCells(0, 0, (claCount * 2) + 2, 0);
                                sheet.mergeCells(0, 1, (claCount * 2) + 2, 1);
                                sheet.mergeCells(0, 2, 0, 3);
                                sheet.mergeCells(1, 2, 1, 3);
                                sheet.mergeCells(2, 2, 2, 3);
                                sheet.mergeCells(3, 2, 3, 3);
                                for (int i = 0; i < claCount; i++) {
                                    Label className_title = new Label(4 + (i * 2), 2, ((Object[]) dataList.get(i * knoCount))[2] + "", cFormat1);
                                    sheet.addCell(className_title);
                                    sheet.mergeCells(4 + (i * 2), 2, 5 + (i * 2), 2);
                                    Label frequency = new Label(4 + (i * 2), 3, "平均分", cFormat1);
                                    sheet.addCell(frequency);
                                    Label totalFrequency = new Label(5 + (i * 2), 3, "变异系数", cFormat1);
                                    sheet.addCell(totalFrequency);
                                    sheet.setColumnView(4 + (i * 2), 10);
                                }
                                for (int i2 = 0; i2 < knoCount; i2++) {
                                    if (i2 % 2 != 0) {
                                        Label knowNum = new Label(0, 4 + i2, knoList.get(i2).get("ext3") + "", cFormat2_left);
                                        sheet.addCell(knowNum);
                                        Label knowName = new Label(1, 4 + i2, knoList.get(i2).get("knoName") + "", cFormat2_left);
                                        sheet.addCell(knowName);
                                        Label questionName2 = new Label(2, 4 + i2, knoList.get(i2).get("questionName") + "", cFormat2_left);
                                        sheet.addCell(questionName2);
                                        String scorevalue = "";
                                        for (int j = 0; j < claCount; j++) {
                                            String frequencys_value = ((Object[]) dataList.get((j * knoCount) + (i2 * 1)))[6] + "";
                                            Double frequencys_D = Double.valueOf(frequencys_value);
                                            String frequencys_total = ((Object[]) dataList.get((j * knoCount) + (i2 * 1)))[5] + "";
                                            Double frequencys_t = Double.valueOf(frequencys_total);
                                            if (scorevalue == "-" || scorevalue == "") {
                                                scorevalue = frequencys_t.doubleValue() == -1.0d ? "-" : Convert.toBigDecimal(frequencys_total).stripTrailingZeros().toPlainString();
                                            }
                                            Double frequencys_D2 = Double.valueOf(frequencys_D.doubleValue() * frequencys_t.doubleValue());
                                            Object totalFrequencys_value = ((Object[]) dataList.get((j * knoCount) + (i2 * 1)))[7];
                                            Double totalFrequencys_value_D = Double.valueOf(df02.format(totalFrequencys_value));
                                            if (9.0d == totalFrequencys_value_D.doubleValue() || totalFrequencys_value_D.doubleValue() == -1.0d) {
                                                Label frequencys = new Label(4 + (j * 2), 4 + i2, "-", cFormat2);
                                                sheet.addCell(frequencys);
                                                Label totalFrequencys = new Label(5 + (j * 2), 4 + i2, "-", cFormat2);
                                                sheet.addCell(totalFrequencys);
                                            } else {
                                                Number frequencys2 = new Number(4 + (j * 2), 4 + i2, Double.valueOf(df02.format(frequencys_D2)).doubleValue(), cFormat2_2);
                                                sheet.addCell(frequencys2);
                                                Number totalFrequencys2 = new Number(5 + (j * 2), 4 + i2, totalFrequencys_value_D.doubleValue(), cFormat2_2);
                                                sheet.addCell(totalFrequencys2);
                                            }
                                        }
                                        Label scores = new Label(3, 4 + i2, scorevalue, cFormat2_3);
                                        sheet.addCell(scores);
                                    } else {
                                        Label knowNum2 = new Label(0, 4 + i2, knoList.get(i2).get("ext3") + "", cFormat3_left);
                                        sheet.addCell(knowNum2);
                                        Label knowName2 = new Label(1, 4 + i2, knoList.get(i2).get("knoName") + "", cFormat3_left);
                                        sheet.addCell(knowName2);
                                        Label questionName22 = new Label(2, 4 + i2, knoList.get(i2).get("questionName") + "", cFormat3_left);
                                        sheet.addCell(questionName22);
                                        String scorevalue2 = "";
                                        for (int j2 = 0; j2 < claCount; j2++) {
                                            String frequencys_value2 = ((Object[]) dataList.get((j2 * knoCount) + (i2 * 1)))[6] + "";
                                            Double frequencys_D3 = Double.valueOf(frequencys_value2);
                                            String frequencys_total2 = ((Object[]) dataList.get((j2 * knoCount) + (i2 * 1)))[5] + "";
                                            Double frequencys_t2 = Double.valueOf(frequencys_total2);
                                            if (scorevalue2 == "-" || scorevalue2 == "") {
                                                scorevalue2 = frequencys_t2.doubleValue() == -1.0d ? "-" : Convert.toBigDecimal(frequencys_total2).stripTrailingZeros().toPlainString();
                                            }
                                            Double frequencys_D4 = Double.valueOf(frequencys_D3.doubleValue() * frequencys_t2.doubleValue());
                                            Object totalFrequencys_value2 = ((Object[]) dataList.get((j2 * knoCount) + (i2 * 1)))[7];
                                            Double totalFrequencys_value_D2 = Double.valueOf(df02.format(totalFrequencys_value2));
                                            if (9.0d == totalFrequencys_value_D2.doubleValue() || totalFrequencys_value_D2.doubleValue() == -1.0d) {
                                                Label frequencys3 = new Label(4 + (j2 * 2), 4 + i2, "-", cFormat3);
                                                sheet.addCell(frequencys3);
                                                Label totalFrequencys3 = new Label(5 + (j2 * 2), 4 + i2, "-", cFormat3);
                                                sheet.addCell(totalFrequencys3);
                                            } else {
                                                Number frequencys4 = new Number(4 + (j2 * 2), 4 + i2, Double.valueOf(df02.format(frequencys_D4)).doubleValue(), cFormat3_2);
                                                sheet.addCell(frequencys4);
                                                Number totalFrequencys4 = new Number(5 + (j2 * 2), 4 + i2, totalFrequencys_value_D2.doubleValue(), cFormat3_2);
                                                sheet.addCell(totalFrequencys4);
                                            }
                                        }
                                        Label scores2 = new Label(3, 4 + i2, scorevalue2, cFormat3_3);
                                        sheet.addCell(scores2);
                                    }
                                }
                            }
                        } else {
                            Label dataNull2 = new Label(0, 3, "数据为空", cFormat3);
                            sheet.addCell(dataNull2);
                            sheet.mergeCells(0, 3, 1, 3);
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    wwBook.write();
                    if (wwBook != null) {
                        try {
                            wwBook.close();
                            if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                                HttpServletResponse response = ServletActionContext.getResponse();
                                response.reset();
                                ServletOutputStream outputStream = response.getOutputStream();
                                String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                String loadFileName2 = loadFileName.replace("+", " ");
                                response.setContentType("Content-type: applicationnd.ms-excel");
                                response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xls");
                                response.setHeader("Content-length", String.valueOf(excelFile.length()));
                                byte[] tempByte = new byte[1024];
                                FileInputStream in = new FileInputStream(excelFile);
                                while (true) {
                                    int n = in.read(tempByte);
                                    if (n == -1) {
                                        break;
                                    }
                                    try {
                                        outputStream.write(tempByte, 0, n);
                                    } catch (Exception e2) {
                                        this.log.error("保存未成功", e2);
                                    }
                                }
                                outputStream.flush();
                                outputStream.close();
                                in.close();
                            }
                        } catch (WriteException e3) {
                            e3.printStackTrace();
                        }
                    }
                } catch (Throwable th) {
                    if (wwBook != null) {
                        try {
                            wwBook.close();
                            if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                                HttpServletResponse response2 = ServletActionContext.getResponse();
                                response2.reset();
                                ServletOutputStream outputStream2 = response2.getOutputStream();
                                String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                String loadFileName4 = loadFileName3.replace("+", " ");
                                response2.setContentType("Content-type: applicationnd.ms-excel");
                                response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xls");
                                response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                                byte[] tempByte2 = new byte[1024];
                                FileInputStream in2 = new FileInputStream(excelFile);
                                while (true) {
                                    int n2 = in2.read(tempByte2);
                                    if (n2 == -1) {
                                        break;
                                    }
                                    try {
                                        outputStream2.write(tempByte2, 0, n2);
                                    } catch (Exception e4) {
                                        this.log.error("保存未成功", e4);
                                    }
                                }
                                outputStream2.flush();
                                outputStream2.close();
                                in2.close();
                            }
                        } catch (WriteException e5) {
                            e5.printStackTrace();
                            throw th;
                        }
                    }
                    throw th;
                }
            } catch (Exception e6) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response3 = ServletActionContext.getResponse();
                            response3.reset();
                            ServletOutputStream outputStream3 = response3.getOutputStream();
                            String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName6 = loadFileName5.replace("+", " ");
                            response3.setContentType("Content-type: applicationnd.ms-excel");
                            response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xls");
                            response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte3 = new byte[1024];
                            FileInputStream in3 = new FileInputStream(excelFile);
                            while (true) {
                                int n3 = in3.read(tempByte3);
                                if (n3 == -1) {
                                    break;
                                }
                                try {
                                    outputStream3.write(tempByte3, 0, n3);
                                } catch (Exception e7) {
                                    this.log.error("保存未成功", e7);
                                }
                            }
                            outputStream3.flush();
                            outputStream3.close();
                            in3.close();
                        }
                    } catch (WriteException e8) {
                        e8.printStackTrace();
                    }
                }
            }
        } catch (Exception e9) {
            e9.printStackTrace();
        }
        return null;
    }

    public File getSubChartImgFile_abil(String userId, String[] tuName, String dirPath, List list, String tname, boolean flg) {
        if (flg) {
            subjectLineImage_abil(userId, list, tuName);
            return null;
        }
        File file = new File(dirPath + File.separator + "tmpLinePng" + File.separator + tname + userId + ".png");
        return file;
    }

    public void subjectLineImage_abil(String userId, List list, String[] tuName) {
        String ext3;
        DecimalFormat df1 = new DecimalFormat("0.0");
        new ArrayList();
        new ArrayList();
        List knoList = (List) list.get(0);
        List dataList = (List) list.get(1);
        int claCount = dataList.size() / knoList.size();
        int knoCount = knoList.size();
        String[] rowKeys = new String[claCount];
        for (int i = 0; i < claCount; i++) {
            rowKeys[i] = ((Object[]) dataList.get(i * knoList.size()))[2] + "";
        }
        String[] columnKeys = new String[knoList.size()];
        double[][] data = new double[rowKeys.length][knoList.size()];
        double[][] data2 = new double[rowKeys.length][knoList.size()];
        for (int i2 = 0; i2 < knoCount; i2++) {
            if (knoList.get(i2) instanceof Map) {
                ext3 = (String) ((Map) knoList.get(i2)).get("ext3");
            } else {
                ext3 = ((Knowledge) knoList.get(i2)).getExt3();
            }
            String objArr = ext3;
            columnKeys[i2] = String.valueOf(objArr);
        }
        Double.valueOf(0.0d);
        Double.valueOf(0.0d);
        List list_data = new ArrayList();
        Double.valueOf(0.0d);
        Double.valueOf(0.0d);
        List list_data2 = new ArrayList();
        for (int i3 = 0; i3 < knoCount; i3++) {
            for (int x = 0; x < claCount; x++) {
                String score = ((Object[]) dataList.get((x * knoList.size()) + i3))[6] + "";
                Double score_D = Double.valueOf(df1.format(Double.valueOf(score).doubleValue() * 100.0d));
                if (score_D.doubleValue() != -100.0d) {
                    data[x][i3] = Double.parseDouble(String.valueOf(score_D));
                    list_data.add(Double.valueOf(Double.parseDouble(String.valueOf(score_D))));
                }
                Double cv = Double.valueOf(Double.parseDouble(((Object[]) dataList.get((x * knoList.size()) + i3))[7] + ""));
                if (9.0d != cv.doubleValue() && cv.doubleValue() != -1.0d) {
                    data2[x][i3] = cv.doubleValue();
                    list_data2.add(cv);
                }
            }
        }
        Double maxDesc = (Double) Collections.max(list_data);
        Double minDesc = (Double) Collections.min(list_data);
        Double count_unit = Double.valueOf((maxDesc.doubleValue() - minDesc.doubleValue()) / 5.0d);
        Double maxDesc2 = (Double) Collections.max(list_data2);
        Double minDesc2 = (Double) Collections.min(list_data2);
        Double count_unit2 = Double.valueOf((maxDesc2.doubleValue() - minDesc2.doubleValue()) / 5.0d);
        try {
            HttpServletResponse response = ServletActionContext.getResponse();
            response.reset();
            response.setContentType("image/jpeg");
            JFreeChart chart = this.lc.getLineChar(data, rowKeys, columnKeys, "能力点编号", "", "能力点得分率(%)对比图", "#0.0", count_unit, Integer.valueOf(rowKeys.length), "Y", "##.##");
            getChartImageFolder(chart, "tmpLinePng", Const.width_1100, Const.height_500, tuName[0] + userId);
            JFreeChart chart2 = this.lc.getLineChar(data2, rowKeys, columnKeys, "能力点编号", "", "变异系数对比图", "#0.0", count_unit2, Integer.valueOf(rowKeys.length), "Y", "##.##");
            getChartImageFolder(chart2, "tmpLinePng", Const.width_1100, Const.height_500, tuName[1] + userId);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String qtypeScore_exportgetData(String examNum, String gradeNum, String schoolNum, String subjectNum, String classNum, String studentId, String studentType, String type, String source, String step, String sNum, String c_exam, String rpt_name, String isMoreSchool, String rptTitle, String isHistory, String isSaveWrite, String dirPath, String uri, String userNum, String schName, String gradeName, String claName, String subjectName, String imgRoot, String agent, String subCompose, String teachUnit, String teachUnit_s, String contrastObject, String contrast_s) {
        String rptTitle2 = this.sp.getHeaderStr(examNum, subjectNum, gradeNum, schoolNum, classNum, studentId, studentType, true, true, true, true, false, true, true, true, false, true, true, true, true, true, false, subCompose, "0");
        List list = this.reportService.getQtypeScore(examNum, gradeNum, schoolNum, subjectNum, classNum, studentType, type, source, "0", subCompose, teachUnit, teachUnit_s, contrastObject, contrast_s);
        String folderPath = "ExportFolder/reportExcel" + userNum;
        String str = "reportExcel" + userNum;
        String str2 = "reportExcel" + userNum;
        String excelName = (null == gradeName || "".equals(gradeName)) ? rpt_name + "_" + gradeNum : rpt_name + "_" + gradeName;
        if (null != classNum && !"".equals(classNum) && !classNum.contains(Const.STRING_SEPERATOR)) {
            excelName = (null == claName || "".equals(claName)) ? excelName + "_" + classNum : excelName + "_" + claName;
        }
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFileXLSX(excelName, dirPath, folderPath);
        try {
            XSSFWorkbook wwBook = new XSSFWorkbook();
            XSSFDataFormat createDataFormat = wwBook.createDataFormat();
            XSSFFont font_bold = wwBook.createFont();
            font_bold.setFontHeightInPoints((short) 15);
            font_bold.setFontName("Arial");
            font_bold.setBold(true);
            XSSFCellStyle biaotis1 = wwBook.createCellStyle();
            biaotis1.setAlignment(HorizontalAlignment.LEFT);
            biaotis1.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            biaotis1.setFont(font_bold);
            XSSFFont font = wwBook.createFont();
            font.setFontHeightInPoints((short) 10);
            font.setFontName("Arial");
            XSSFCellStyle title = wwBook.createCellStyle();
            title.setAlignment(HorizontalAlignment.LEFT);
            title.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            title.setFont(font);
            title.setWrapText(true);
            XSSFCellStyle cFormat1 = wwBook.createCellStyle();
            cFormat1.setAlignment(HorizontalAlignment.CENTER);
            cFormat1.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cFormat1.setFont(font);
            cFormat1.setWrapText(true);
            cFormat1.setFillForegroundColor(Const.fillForeground_color);
            cFormat1.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cFormat1.setBorderTop(BorderStyle.THIN);
            cFormat1.setBorderRight(BorderStyle.THIN);
            cFormat1.setBorderBottom(BorderStyle.THIN);
            cFormat1.setBorderLeft(BorderStyle.THIN);
            XSSFCellStyle cFormat2 = wwBook.createCellStyle();
            cFormat2.setAlignment(HorizontalAlignment.CENTER);
            cFormat2.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cFormat2.setFont(font);
            cFormat2.setWrapText(true);
            cFormat2.setFillForegroundColor(Const.fillForeground_color2);
            cFormat2.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cFormat2.setBorderTop(BorderStyle.THIN);
            cFormat2.setBorderRight(BorderStyle.THIN);
            cFormat2.setBorderBottom(BorderStyle.THIN);
            cFormat2.setBorderLeft(BorderStyle.THIN);
            XSSFCellStyle cFormat2_1 = wwBook.createCellStyle();
            cFormat2_1.setAlignment(HorizontalAlignment.CENTER);
            cFormat2_1.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cFormat2_1.setFont(font);
            cFormat2_1.setWrapText(true);
            cFormat2_1.setFillForegroundColor(Const.fillForeground_color2);
            cFormat2_1.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cFormat2_1.setBorderTop(BorderStyle.THIN);
            cFormat2_1.setBorderRight(BorderStyle.THIN);
            cFormat2_1.setBorderBottom(BorderStyle.THIN);
            cFormat2_1.setBorderLeft(BorderStyle.THIN);
            cFormat2_1.setDataFormat(createDataFormat.getFormat("0.0"));
            XSSFCellStyle cFormat2_2 = wwBook.createCellStyle();
            cFormat2_2.setAlignment(HorizontalAlignment.CENTER);
            cFormat2_2.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cFormat2_2.setFont(font);
            cFormat2_2.setWrapText(true);
            cFormat2_2.setFillForegroundColor(Const.fillForeground_color2);
            cFormat2_2.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cFormat2_2.setBorderTop(BorderStyle.THIN);
            cFormat2_2.setBorderRight(BorderStyle.THIN);
            cFormat2_2.setBorderBottom(BorderStyle.THIN);
            cFormat2_2.setBorderLeft(BorderStyle.THIN);
            cFormat2_2.setDataFormat(createDataFormat.getFormat("0.00"));
            XSSFCellStyle cFormat3 = wwBook.createCellStyle();
            cFormat3.setAlignment(HorizontalAlignment.CENTER);
            cFormat3.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cFormat3.setFont(font);
            cFormat3.setWrapText(true);
            cFormat3.setFillForegroundColor(Const.fillForeground_color3);
            cFormat3.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cFormat3.setBorderTop(BorderStyle.THIN);
            cFormat3.setBorderRight(BorderStyle.THIN);
            cFormat3.setBorderBottom(BorderStyle.THIN);
            cFormat3.setBorderLeft(BorderStyle.THIN);
            XSSFCellStyle cFormat3_1 = wwBook.createCellStyle();
            cFormat3_1.setAlignment(HorizontalAlignment.CENTER);
            cFormat3_1.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cFormat3_1.setFont(font);
            cFormat3_1.setWrapText(true);
            cFormat3_1.setFillForegroundColor(Const.fillForeground_color3);
            cFormat3_1.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cFormat3_1.setBorderTop(BorderStyle.THIN);
            cFormat3_1.setBorderRight(BorderStyle.THIN);
            cFormat3_1.setBorderBottom(BorderStyle.THIN);
            cFormat3_1.setBorderLeft(BorderStyle.THIN);
            cFormat3_1.setDataFormat(createDataFormat.getFormat("0.0"));
            XSSFCellStyle cFormat3_2 = wwBook.createCellStyle();
            cFormat3_2.setAlignment(HorizontalAlignment.CENTER);
            cFormat3_2.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cFormat3_2.setFont(font);
            cFormat3_2.setWrapText(true);
            cFormat3_2.setFillForegroundColor(Const.fillForeground_color3);
            cFormat3_2.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cFormat3_2.setBorderTop(BorderStyle.THIN);
            cFormat3_2.setBorderRight(BorderStyle.THIN);
            cFormat3_2.setBorderBottom(BorderStyle.THIN);
            cFormat3_2.setBorderLeft(BorderStyle.THIN);
            cFormat3_2.setDataFormat(createDataFormat.getFormat("0.00"));
            XSSFCellStyle cFormat2_left = wwBook.createCellStyle();
            cFormat2_left.setAlignment(HorizontalAlignment.LEFT);
            cFormat2_left.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cFormat2_left.setFont(font);
            cFormat2_left.setWrapText(true);
            cFormat2_left.setFillForegroundColor(Const.fillForeground_color2);
            cFormat2_left.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cFormat2_left.setBorderTop(BorderStyle.THIN);
            cFormat2_left.setBorderRight(BorderStyle.THIN);
            cFormat2_left.setBorderBottom(BorderStyle.THIN);
            cFormat2_left.setBorderLeft(BorderStyle.THIN);
            XSSFCellStyle cFormat3_left = wwBook.createCellStyle();
            cFormat3_left.setAlignment(HorizontalAlignment.LEFT);
            cFormat3_left.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cFormat3_left.setFont(font);
            cFormat3_left.setWrapText(true);
            cFormat3_left.setFillForegroundColor(Const.fillForeground_color3);
            cFormat3_left.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cFormat3_left.setBorderTop(BorderStyle.THIN);
            cFormat3_left.setBorderRight(BorderStyle.THIN);
            cFormat3_left.setBorderBottom(BorderStyle.THIN);
            cFormat3_left.setBorderLeft(BorderStyle.THIN);
            try {
                XSSFSheet sheet = wwBook.createSheet();
                wwBook.setSheetName(0, rpt_name);
                sheet.setDisplayGridlines(false);
                try {
                    List dataList = (List) list.get(1);
                    List<Map<String, Object>> qtypeobjList = (List) list.get(0);
                    DecimalFormat df01 = new DecimalFormat("0.0");
                    DecimalFormat df02 = new DecimalFormat("0.00");
                    df01.setRoundingMode(RoundingMode.HALF_UP);
                    df02.setRoundingMode(RoundingMode.HALF_UP);
                    XSSFRow row0_3 = sheet.createRow(3);
                    if (list.size() <= 0) {
                        XSSFCell dataNull = row0_3.createCell(0);
                        dataNull.setCellValue("数据为空");
                        dataNull.setCellStyle(cFormat3);
                        sheet.addMergedRegion(new CellRangeAddress(3, 3, 0, 1));
                    } else if (qtypeobjList.size() <= 0 || dataList.size() <= 0) {
                        XSSFCell dataNull2 = row0_3.createCell(0);
                        dataNull2.setCellValue("数据为空");
                        dataNull2.setCellStyle(cFormat3);
                        sheet.addMergedRegion(new CellRangeAddress(3, 3, 0, 1));
                    } else {
                        int qtypeCount = qtypeobjList.size();
                        int dlistcout = dataList.size();
                        int claCount = dlistcout / qtypeCount;
                        XSSFRow row0_0 = sheet.createRow(0);
                        XSSFCell biaotou = row0_0.createCell(0);
                        biaotou.setCellValue(rpt_name);
                        biaotou.setCellStyle(biaotis1);
                        XSSFRow row0_1 = sheet.createRow(1);
                        row0_1.setHeight((short) 500);
                        XSSFCell xinxi = row0_1.createCell(0);
                        xinxi.setCellValue(rptTitle2);
                        xinxi.setCellStyle(title);
                        sheet.addMergedRegion(new CellRangeAddress(0, 0, 0, (claCount * 2) + 2));
                        sheet.addMergedRegion(new CellRangeAddress(1, 1, 0, (claCount * 2) + 2));
                        XSSFRow row0_2 = sheet.createRow(2);
                        XSSFCell abilityNum = row0_2.createCell(0);
                        abilityNum.setCellValue("编号");
                        abilityNum.setCellStyle(cFormat1);
                        XSSFCell ability = row0_2.createCell(1);
                        ability.setCellValue("题型名称");
                        ability.setCellStyle(cFormat1);
                        XSSFCell quetionName = row0_2.createCell(2);
                        quetionName.setCellValue("题号");
                        quetionName.setCellStyle(cFormat1);
                        XSSFCell fullScore = row0_2.createCell(3);
                        fullScore.setCellValue("满分");
                        fullScore.setCellStyle(cFormat1);
                        sheet.setColumnWidth(1, 10400);
                        CellRangeAddress cellRangeAddress2_0 = new CellRangeAddress(2, 3, 0, 0);
                        sheet.addMergedRegion(cellRangeAddress2_0);
                        RegionUtil.setBorderBottom(BorderStyle.THIN, cellRangeAddress2_0, sheet);
                        RegionUtil.setBorderLeft(BorderStyle.THIN, cellRangeAddress2_0, sheet);
                        RegionUtil.setBorderRight(BorderStyle.THIN, cellRangeAddress2_0, sheet);
                        RegionUtil.setBorderTop(BorderStyle.THIN, cellRangeAddress2_0, sheet);
                        CellRangeAddress cellRangeAddress2_1 = new CellRangeAddress(2, 3, 1, 1);
                        sheet.addMergedRegion(cellRangeAddress2_1);
                        RegionUtil.setBorderBottom(BorderStyle.THIN, cellRangeAddress2_1, sheet);
                        RegionUtil.setBorderLeft(BorderStyle.THIN, cellRangeAddress2_1, sheet);
                        RegionUtil.setBorderRight(BorderStyle.THIN, cellRangeAddress2_1, sheet);
                        RegionUtil.setBorderTop(BorderStyle.THIN, cellRangeAddress2_1, sheet);
                        CellRangeAddress cellRangeAddress2_2 = new CellRangeAddress(2, 3, 2, 2);
                        sheet.addMergedRegion(cellRangeAddress2_2);
                        RegionUtil.setBorderBottom(BorderStyle.THIN, cellRangeAddress2_2, sheet);
                        RegionUtil.setBorderLeft(BorderStyle.THIN, cellRangeAddress2_2, sheet);
                        RegionUtil.setBorderRight(BorderStyle.THIN, cellRangeAddress2_2, sheet);
                        RegionUtil.setBorderTop(BorderStyle.THIN, cellRangeAddress2_2, sheet);
                        CellRangeAddress cellRangeAddress2_3 = new CellRangeAddress(2, 3, 3, 3);
                        sheet.addMergedRegion(cellRangeAddress2_3);
                        RegionUtil.setBorderBottom(BorderStyle.THIN, cellRangeAddress2_3, sheet);
                        RegionUtil.setBorderLeft(BorderStyle.THIN, cellRangeAddress2_3, sheet);
                        RegionUtil.setBorderRight(BorderStyle.THIN, cellRangeAddress2_3, sheet);
                        RegionUtil.setBorderTop(BorderStyle.THIN, cellRangeAddress2_3, sheet);
                        for (int i = 0; i < claCount; i++) {
                            Object[] objArr = (Object[]) dataList.get(i * qtypeCount);
                            XSSFCell className_title = row0_2.createCell(4 + (i * 2));
                            className_title.setCellValue(((Object[]) dataList.get(i * qtypeCount))[2] + "");
                            className_title.setCellStyle(cFormat1);
                            CellRangeAddress cellRangeAddress2 = new CellRangeAddress(2, 2, 4 + (i * 2), 5 + (i * 2));
                            sheet.addMergedRegion(cellRangeAddress2);
                            RegionUtil.setBorderBottom(BorderStyle.THIN, cellRangeAddress2, sheet);
                            RegionUtil.setBorderLeft(BorderStyle.THIN, cellRangeAddress2, sheet);
                            RegionUtil.setBorderRight(BorderStyle.THIN, cellRangeAddress2, sheet);
                            RegionUtil.setBorderTop(BorderStyle.THIN, cellRangeAddress2, sheet);
                            XSSFCell frequency = row0_3.createCell(4 + (i * 2));
                            frequency.setCellValue("平均分");
                            frequency.setCellStyle(cFormat1);
                            XSSFCell totalFrequency = row0_3.createCell(5 + (i * 2));
                            totalFrequency.setCellValue("变异系数");
                            totalFrequency.setCellStyle(cFormat1);
                            sheet.setColumnWidth(4 + (i * 2), 2600);
                        }
                        for (int i2 = 0; i2 < qtypeCount; i2++) {
                            XSSFRow row0_4i = sheet.createRow(4 + i2);
                            if (i2 % 2 != 0) {
                                XSSFCell knowNum = row0_4i.createCell(0);
                                knowNum.setCellValue(qtypeobjList.get(i2).get("ext1") + "");
                                knowNum.setCellStyle(cFormat2_left);
                                XSSFCell knowName = row0_4i.createCell(1);
                                knowName.setCellValue(qtypeobjList.get(i2).get("ext2") + "");
                                knowName.setCellStyle(cFormat2_left);
                                XSSFCell questionName = row0_4i.createCell(2);
                                questionName.setCellValue(qtypeobjList.get(i2).get("questionName") + "");
                                questionName.setCellStyle(cFormat2_left);
                                String scorevalue = "";
                                for (int j = 0; j < claCount; j++) {
                                    String frequencys_value = ((Object[]) dataList.get((j * qtypeCount) + (i2 * 1)))[6] + "";
                                    Double frequencys_D = Double.valueOf(frequencys_value);
                                    String frequencys_total = ((Object[]) dataList.get((j * qtypeCount) + (i2 * 1)))[5] + "";
                                    Double frequencys_t = Double.valueOf(frequencys_total);
                                    if (scorevalue == "-" || scorevalue == "") {
                                        scorevalue = frequencys_t.doubleValue() == -1.0d ? "-" : Convert.toBigDecimal(frequencys_total).stripTrailingZeros().toPlainString();
                                    }
                                    Double frequencys_D2 = Double.valueOf(frequencys_D.doubleValue() * frequencys_t.doubleValue());
                                    Object totalFrequencys_value = ((Object[]) dataList.get((j * qtypeCount) + (i2 * 1)))[7];
                                    Double totalFrequencys_value_D = Double.valueOf(df02.format(totalFrequencys_value));
                                    if (totalFrequencys_value_D.doubleValue() == 9.0d || totalFrequencys_value_D.doubleValue() == -1.0d) {
                                        XSSFCell frequencys = row0_4i.createCell(4 + (j * 2));
                                        frequencys.setCellValue("-");
                                        frequencys.setCellStyle(cFormat2);
                                        XSSFCell totalFrequencys = row0_4i.createCell(5 + (j * 2));
                                        totalFrequencys.setCellValue("-");
                                        totalFrequencys.setCellStyle(cFormat2);
                                    } else {
                                        XSSFCell frequencys2 = row0_4i.createCell(4 + (j * 2));
                                        frequencys2.setCellValue(Double.valueOf(df02.format(frequencys_D2)).doubleValue());
                                        frequencys2.setCellStyle(cFormat2_2);
                                        XSSFCell totalFrequencys2 = row0_4i.createCell(5 + (j * 2));
                                        totalFrequencys2.setCellValue(totalFrequencys_value_D.doubleValue());
                                        totalFrequencys2.setCellStyle(cFormat2_2);
                                    }
                                }
                                XSSFCell scores = row0_4i.createCell(3);
                                scores.setCellValue(scorevalue);
                                scores.setCellStyle(cFormat2);
                            } else {
                                XSSFCell knowNum2 = row0_4i.createCell(0);
                                knowNum2.setCellValue(qtypeobjList.get(i2).get("ext1") + "");
                                knowNum2.setCellStyle(cFormat3_left);
                                XSSFCell knowName2 = row0_4i.createCell(1);
                                knowName2.setCellValue(qtypeobjList.get(i2).get("ext2") + "");
                                knowName2.setCellStyle(cFormat3_left);
                                XSSFCell questionName2 = row0_4i.createCell(2);
                                questionName2.setCellValue(qtypeobjList.get(i2).get("questionName") + "");
                                questionName2.setCellStyle(cFormat3_left);
                                String scorevalue2 = "";
                                for (int j2 = 0; j2 < claCount; j2++) {
                                    String frequencys_value2 = ((Object[]) dataList.get((j2 * qtypeCount) + (i2 * 1)))[6] + "";
                                    Double frequencys_D3 = Double.valueOf(frequencys_value2);
                                    String frequencys_total2 = ((Object[]) dataList.get((j2 * qtypeCount) + (i2 * 1)))[5] + "";
                                    Double frequencys_t2 = Double.valueOf(frequencys_total2);
                                    if (scorevalue2 == "-" || scorevalue2 == "") {
                                        scorevalue2 = frequencys_t2.doubleValue() == -1.0d ? "-" : Convert.toBigDecimal(frequencys_total2).stripTrailingZeros().toPlainString();
                                    }
                                    Double frequencys_D4 = Double.valueOf(frequencys_D3.doubleValue() * frequencys_t2.doubleValue());
                                    Object totalFrequencys_value2 = ((Object[]) dataList.get((j2 * qtypeCount) + (i2 * 1)))[7];
                                    Double totalFrequencys_value_D2 = Double.valueOf(df02.format(totalFrequencys_value2));
                                    if (totalFrequencys_value_D2.doubleValue() == 9.0d || totalFrequencys_value_D2.doubleValue() == -1.0d) {
                                        XSSFCell frequencys3 = row0_4i.createCell(4 + (j2 * 2));
                                        frequencys3.setCellValue("-");
                                        frequencys3.setCellStyle(cFormat3);
                                        XSSFCell totalFrequencys3 = row0_4i.createCell(5 + (j2 * 2));
                                        totalFrequencys3.setCellValue("-");
                                        totalFrequencys3.setCellStyle(cFormat3);
                                    } else {
                                        XSSFCell frequencys4 = row0_4i.createCell(4 + (j2 * 2));
                                        frequencys4.setCellValue(Double.valueOf(df02.format(frequencys_D4)).doubleValue());
                                        frequencys4.setCellStyle(cFormat3_2);
                                        XSSFCell totalFrequencys4 = row0_4i.createCell(5 + (j2 * 2));
                                        totalFrequencys4.setCellValue(totalFrequencys_value_D2.doubleValue());
                                        totalFrequencys4.setCellStyle(cFormat3_2);
                                    }
                                }
                                XSSFCell scores2 = row0_4i.createCell(3);
                                scores2.setCellValue(scorevalue2);
                                scores2.setCellStyle(cFormat3);
                            }
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                FileOutputStream fileOut = new FileOutputStream(excelFile);
                wwBook.write(fileOut);
                fileOut.close();
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response = ServletActionContext.getResponse();
                            response.reset();
                            ServletOutputStream outputStream = response.getOutputStream();
                            String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName2 = loadFileName.replace("+", " ");
                            response.setContentType("Content-type: applicationnd.ms-excel");
                            response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xlsx");
                            response.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte = new byte[1024];
                            FileInputStream in = new FileInputStream(excelFile);
                            while (true) {
                                int n = in.read(tempByte);
                                if (n == -1) {
                                    break;
                                }
                                try {
                                    outputStream.write(tempByte, 0, n);
                                } catch (Exception e2) {
                                    this.log.error("保存未成功", e2);
                                }
                            }
                            outputStream.flush();
                            outputStream.close();
                            in.close();
                        }
                    } catch (Exception e3) {
                        e3.printStackTrace();
                    }
                }
            } catch (Exception e4) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response2 = ServletActionContext.getResponse();
                            response2.reset();
                            ServletOutputStream outputStream2 = response2.getOutputStream();
                            String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName4 = loadFileName3.replace("+", " ");
                            response2.setContentType("Content-type: applicationnd.ms-excel");
                            response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xlsx");
                            response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte2 = new byte[1024];
                            FileInputStream in2 = new FileInputStream(excelFile);
                            while (true) {
                                int n2 = in2.read(tempByte2);
                                if (n2 == -1) {
                                    break;
                                }
                                try {
                                    outputStream2.write(tempByte2, 0, n2);
                                } catch (Exception e5) {
                                    this.log.error("保存未成功", e5);
                                }
                            }
                            outputStream2.flush();
                            outputStream2.close();
                            in2.close();
                        }
                    } catch (Exception e6) {
                        e6.printStackTrace();
                    }
                }
            } catch (Throwable th) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response3 = ServletActionContext.getResponse();
                            response3.reset();
                            ServletOutputStream outputStream3 = response3.getOutputStream();
                            String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName6 = loadFileName5.replace("+", " ");
                            response3.setContentType("Content-type: applicationnd.ms-excel");
                            response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xlsx");
                            response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte3 = new byte[1024];
                            FileInputStream in3 = new FileInputStream(excelFile);
                            while (true) {
                                int n3 = in3.read(tempByte3);
                                if (n3 == -1) {
                                    break;
                                }
                                try {
                                    outputStream3.write(tempByte3, 0, n3);
                                } catch (Exception e7) {
                                    this.log.error("保存未成功", e7);
                                }
                            }
                            outputStream3.flush();
                            outputStream3.close();
                            in3.close();
                        }
                    } catch (Exception e8) {
                        e8.printStackTrace();
                        throw th;
                    }
                }
                throw th;
            }
        } catch (Exception e9) {
            e9.printStackTrace();
        }
        return null;
    }

    public File getSubChartImgFile_qtypes(String[] tuName, String insertUser, List list, String dirPath, String tname, boolean flg) {
        try {
            if (flg) {
                subjectLineImageknowledge(tuName, insertUser, list);
                return null;
            }
            File file = new File(dirPath + File.separator + "tmpLinePng" + File.separator + insertUser + tname + ".png");
            return file;
        } catch (SQLException e) {
            e.printStackTrace();
            return null;
        }
    }

    public void subjectLineImageknowledge(String[] tuName, String insertUser, List<RptHeader> list) throws SQLException {
        List dataList = list.get(1);
        List<QuestionType> qtypeobjList = list.get(0);
        int qtypeCount = qtypeobjList.size();
        int dlistcout = dataList.size();
        int claCount = dlistcout / qtypeCount;
        String[] rowKeys1 = new String[claCount];
        String[] columnKeys1 = new String[qtypeCount];
        double[][] data = new double[rowKeys1.length][qtypeCount];
        double[][] data2 = new double[rowKeys1.length][qtypeCount];
        Double.valueOf(0.0d);
        Double.valueOf(0.0d);
        List list_data = new ArrayList();
        Double.valueOf(0.0d);
        Double.valueOf(0.0d);
        List list_data2 = new ArrayList();
        for (int a = 0; a < qtypeobjList.size(); a++) {
            for (int c = 0; c < claCount; c++) {
                Object[] objdataArr = (Object[]) dataList.get((c * qtypeCount) + a);
                if (a == 0) {
                    Object[] objArr = (Object[]) dataList.get((c * qtypeCount) + a);
                    rowKeys1[c] = (String) objArr[2];
                }
                if (qtypeobjList.get(a) instanceof Map) {
                    columnKeys1[a] = (String) ((Map) qtypeobjList.get(a)).get("ext1");
                } else {
                    columnKeys1[a] = qtypeobjList.get(a).getExt1();
                }
                Double objdataArr_D = Double.valueOf(String.format("%.1f", Double.valueOf(Double.valueOf(objdataArr[6] + "").doubleValue() * 100.0d)));
                if (objdataArr_D.doubleValue() != -100.0d) {
                    data[c][a] = Double.parseDouble(String.valueOf(objdataArr_D));
                    list_data.add(Double.valueOf(Double.parseDouble(String.valueOf(objdataArr_D))));
                }
                Double cv = Double.valueOf(Double.parseDouble(objdataArr[7] + ""));
                if (cv.doubleValue() != 9.0d && cv.doubleValue() != -1.0d) {
                    data2[c][a] = cv.doubleValue();
                    list_data2.add(cv);
                }
            }
        }
        Double maxDesc = (Double) Collections.max(list_data);
        Double minDesc = (Double) Collections.min(list_data);
        Double count_unit = Double.valueOf((maxDesc.doubleValue() - minDesc.doubleValue()) / 5.0d);
        Double maxDesc2 = (Double) Collections.max(list_data2);
        Double minDesc2 = (Double) Collections.min(list_data2);
        Double count_unit2 = Double.valueOf((maxDesc2.doubleValue() - minDesc2.doubleValue()) / 5.0d);
        HttpServletResponse response = ServletActionContext.getResponse();
        response.reset();
        response.setContentType("image/jpeg");
        JFreeChart chart = this.lc.getLineChar(data, rowKeys1, columnKeys1, "题型编号", "", "题型得分率(%)对比图", "#0.0", count_unit, Integer.valueOf(rowKeys1.length), "Y", "##.##");
        getChartImageFolder(chart, "tmpLinePng", Const.width_1100, Const.height_500, insertUser + tuName[0]);
        JFreeChart chart2 = this.lc.getLineChar(data2, rowKeys1, columnKeys1, "题型编号", "", "题型变异系数对比图", "#0.0", count_unit2, Integer.valueOf(rowKeys1.length), "Y", "##.##");
        getChartImageFolder(chart2, "tmpLinePng", Const.width_1100, Const.height_500, insertUser + tuName[1]);
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String totsubAction_exportMethod(String examNum, String gradeNum, String schoolNum, String subjectNum, String classNum, String studentId, String studentType, String type, String source, String step, String sNum, String c_exam, String rpt_name, String isMoreSchool, String rptTitle, String isHistory, String isSaveWrite, String dirPath, String uri, String userNum, String schName, String gradeName, String className, String subjectName, String imgRoot, String agent, String show) {
        int countCount;
        String folderPath = "ExportFolder/reportExcel" + userNum;
        String str = "reportExcel" + userNum;
        String str2 = "reportExcel" + userNum;
        String excelName = rpt_name + "_" + gradeNum;
        if (null != classNum && !"".equals(classNum) && !classNum.contains(Const.STRING_SEPERATOR)) {
            excelName = excelName + "_" + classNum;
        }
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFileXLSX(excelName, dirPath, folderPath);
        try {
            XSSFWorkbook wwBook = new XSSFWorkbook();
            XSSFDataFormat createDataFormat = wwBook.createDataFormat();
            XSSFFont font_bold = wwBook.createFont();
            font_bold.setFontHeightInPoints((short) 15);
            font_bold.setFontName("Arial");
            font_bold.setBold(true);
            XSSFCellStyle biaotis1 = wwBook.createCellStyle();
            biaotis1.setAlignment(HorizontalAlignment.LEFT);
            biaotis1.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            biaotis1.setFont(font_bold);
            XSSFFont font = wwBook.createFont();
            font.setFontHeightInPoints((short) 10);
            font.setFontName("Arial");
            XSSFCellStyle title = wwBook.createCellStyle();
            title.setAlignment(HorizontalAlignment.LEFT);
            title.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            title.setFont(font);
            title.setWrapText(true);
            XSSFCellStyle cFormat1 = wwBook.createCellStyle();
            cFormat1.setAlignment(HorizontalAlignment.CENTER);
            cFormat1.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cFormat1.setFont(font);
            cFormat1.setWrapText(true);
            cFormat1.setFillForegroundColor(Const.fillForeground_color);
            cFormat1.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cFormat1.setBorderTop(BorderStyle.THIN);
            cFormat1.setBorderRight(BorderStyle.THIN);
            cFormat1.setBorderBottom(BorderStyle.THIN);
            cFormat1.setBorderLeft(BorderStyle.THIN);
            XSSFCellStyle cFormat2 = wwBook.createCellStyle();
            cFormat2.setAlignment(HorizontalAlignment.CENTER);
            cFormat2.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cFormat2.setFont(font);
            cFormat2.setWrapText(true);
            cFormat2.setFillForegroundColor(Const.fillForeground_color2);
            cFormat2.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cFormat2.setBorderTop(BorderStyle.THIN);
            cFormat2.setBorderRight(BorderStyle.THIN);
            cFormat2.setBorderBottom(BorderStyle.THIN);
            cFormat2.setBorderLeft(BorderStyle.THIN);
            XSSFCellStyle cFormat2_2 = wwBook.createCellStyle();
            cFormat2_2.setAlignment(HorizontalAlignment.CENTER);
            cFormat2_2.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cFormat2_2.setFont(font);
            cFormat2_2.setWrapText(true);
            cFormat2_2.setFillForegroundColor(Const.fillForeground_color2);
            cFormat2_2.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cFormat2_2.setBorderTop(BorderStyle.THIN);
            cFormat2_2.setBorderRight(BorderStyle.THIN);
            cFormat2_2.setBorderBottom(BorderStyle.THIN);
            cFormat2_2.setBorderLeft(BorderStyle.THIN);
            cFormat2_2.setDataFormat(createDataFormat.getFormat("0.0000"));
            XSSFCellStyle cFormat3 = wwBook.createCellStyle();
            cFormat3.setAlignment(HorizontalAlignment.CENTER);
            cFormat3.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cFormat3.setFont(font);
            cFormat3.setWrapText(true);
            cFormat3.setFillForegroundColor(Const.fillForeground_color3);
            cFormat3.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cFormat3.setBorderTop(BorderStyle.THIN);
            cFormat3.setBorderRight(BorderStyle.THIN);
            cFormat3.setBorderBottom(BorderStyle.THIN);
            cFormat3.setBorderLeft(BorderStyle.THIN);
            XSSFCellStyle cFormat3_2 = wwBook.createCellStyle();
            cFormat3_2.setAlignment(HorizontalAlignment.CENTER);
            cFormat3_2.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cFormat3_2.setFont(font);
            cFormat3_2.setWrapText(true);
            cFormat3_2.setFillForegroundColor(Const.fillForeground_color3);
            cFormat3_2.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cFormat3_2.setBorderTop(BorderStyle.THIN);
            cFormat3_2.setBorderRight(BorderStyle.THIN);
            cFormat3_2.setBorderBottom(BorderStyle.THIN);
            cFormat3_2.setBorderLeft(BorderStyle.THIN);
            cFormat3_2.setDataFormat(createDataFormat.getFormat("0.0000"));
            XSSFCellStyle cFormat2_left = wwBook.createCellStyle();
            cFormat2_left.setAlignment(HorizontalAlignment.LEFT);
            cFormat2_left.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cFormat2_left.setFont(font);
            cFormat2_left.setWrapText(true);
            cFormat2_left.setFillForegroundColor(Const.fillForeground_color2);
            cFormat2_left.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cFormat2_left.setBorderTop(BorderStyle.THIN);
            cFormat2_left.setBorderRight(BorderStyle.THIN);
            cFormat2_left.setBorderBottom(BorderStyle.THIN);
            cFormat2_left.setBorderLeft(BorderStyle.THIN);
            XSSFCellStyle cFormat3_left = wwBook.createCellStyle();
            cFormat3_left.setAlignment(HorizontalAlignment.LEFT);
            cFormat3_left.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cFormat3_left.setFont(font);
            cFormat3_left.setWrapText(true);
            cFormat3_left.setFillForegroundColor(Const.fillForeground_color3);
            cFormat3_left.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cFormat3_left.setBorderTop(BorderStyle.THIN);
            cFormat3_left.setBorderRight(BorderStyle.THIN);
            cFormat3_left.setBorderBottom(BorderStyle.THIN);
            cFormat3_left.setBorderLeft(BorderStyle.THIN);
            String isYufabu = this.reportService.isYufabu(examNum, gradeNum, subjectNum);
            List list = new ArrayList();
            if (!"2".equals(isYufabu)) {
                list = this.tt.getsubjectiveQuestionScoreList(examNum, subjectNum, gradeNum, schoolNum, classNum, step, type, studentType, source, isHistory);
            }
            try {
                try {
                    XSSFSheet sheet = wwBook.createSheet();
                    wwBook.setSheetName(0, rpt_name);
                    sheet.setDisplayGridlines(false);
                    try {
                        new ArrayList();
                        new ArrayList();
                        List list0 = (List) list.get(0);
                        List list1 = (List) list.get(1);
                        XSSFRow row0_0 = sheet.createRow(0);
                        XSSFCell biaotou = row0_0.createCell(0);
                        biaotou.setCellValue(rpt_name);
                        biaotou.setCellStyle(biaotis1);
                        DecimalFormat df02 = new DecimalFormat("0.0000");
                        df02.setRoundingMode(RoundingMode.HALF_UP);
                        String schNum = schoolNum.indexOf(Const.STRING_SEPERATOR) != -1 ? "学校" : "班级";
                        XSSFRow row0_1 = sheet.createRow(1);
                        row0_1.setHeight((short) 500);
                        XSSFCell xinxi = row0_1.createCell(0);
                        xinxi.setCellValue(rptTitle);
                        xinxi.setCellStyle(title);
                        XSSFRow row0_2 = sheet.createRow(2);
                        XSSFCell questionNum = row0_2.createCell(0);
                        questionNum.setCellValue("小题");
                        questionNum.setCellStyle(cFormat1);
                        CellRangeAddress cellRangeAddress2_0 = new CellRangeAddress(2, 5, 0, 0);
                        sheet.addMergedRegion(cellRangeAddress2_0);
                        RegionUtil.setBorderBottom(BorderStyle.THIN, cellRangeAddress2_0, sheet);
                        RegionUtil.setBorderLeft(BorderStyle.THIN, cellRangeAddress2_0, sheet);
                        RegionUtil.setBorderRight(BorderStyle.THIN, cellRangeAddress2_0, sheet);
                        RegionUtil.setBorderTop(BorderStyle.THIN, cellRangeAddress2_0, sheet);
                        XSSFCell classNameTitle = row0_2.createCell(1);
                        classNameTitle.setCellValue(schNum);
                        classNameTitle.setCellStyle(cFormat1);
                        XSSFRow row0_3 = sheet.createRow(3);
                        XSSFCell teacherTitle = row0_3.createCell(1);
                        teacherTitle.setCellValue("班主任");
                        teacherTitle.setCellStyle(cFormat1);
                        XSSFRow row0_4 = sheet.createRow(4);
                        XSSFCell subjectTeacherTitle = row0_4.createCell(1);
                        subjectTeacherTitle.setCellValue("学科教师");
                        subjectTeacherTitle.setCellStyle(cFormat1);
                        XSSFRow row0_5 = sheet.createRow(5);
                        XSSFCell scoreSection = row0_5.createCell(1);
                        scoreSection.setCellValue("分数段");
                        scoreSection.setCellStyle(cFormat1);
                        sheet.setColumnWidth(1, 3900);
                        String qtr = "";
                        String classNameStr = "";
                        String classNameStrAnd = "";
                        int countCount2 = 0;
                        int classNumCount = 0;
                        for (int i = 0; i < list0.size(); i++) {
                            if (qtr.indexOf(((RptHeader) list0.get(i)).getQuestionNum()) == -1) {
                                qtr = qtr + ((RptHeader) list0.get(i)).getQuestionNum() + Const.STRING_SEPERATOR;
                            }
                            if (classNameStrAnd.indexOf("&" + ((RptHeader) list0.get(i)).getClassName() + "&") == -1) {
                                classNameStr = classNameStr + ((RptHeader) list0.get(i)).getClassName() + Const.STRING_SEPERATOR;
                                classNameStrAnd = classNameStrAnd + "&" + ((RptHeader) list0.get(i)).getClassName() + "&,";
                                classNumCount++;
                            }
                            countCount2++;
                        }
                        int countCount3 = classNumCount > 1 ? countCount2 / classNumCount : countCount2;
                        String cStrs = "";
                        int count_className = 0;
                        for (int i2 = 0; i2 < list1.size(); i2++) {
                            if (cStrs.indexOf(((RptHeader) list1.get(i2)).getClassName() + ((RptHeader) list1.get(i2)).getExt1()) == -1) {
                                XSSFCell className_title = row0_2.createCell((3 + (2 * count_className)) - 1);
                                className_title.setCellValue(((RptHeader) list1.get(i2)).getClassName());
                                className_title.setCellStyle(cFormat1);
                                CellRangeAddress cellRangeAddress2 = new CellRangeAddress(2, 2, (3 + (2 * count_className)) - 1, (4 + (2 * count_className)) - 1);
                                sheet.addMergedRegion(cellRangeAddress2);
                                RegionUtil.setBorderBottom(BorderStyle.THIN, cellRangeAddress2, sheet);
                                RegionUtil.setBorderLeft(BorderStyle.THIN, cellRangeAddress2, sheet);
                                RegionUtil.setBorderRight(BorderStyle.THIN, cellRangeAddress2, sheet);
                                RegionUtil.setBorderTop(BorderStyle.THIN, cellRangeAddress2, sheet);
                                XSSFCell teacher = row0_3.createCell((3 + (2 * count_className)) - 1);
                                teacher.setCellValue(((RptHeader) list1.get(i2)).getClassDirector());
                                teacher.setCellStyle(cFormat1);
                                CellRangeAddress cellRangeAddress3 = new CellRangeAddress(3, 3, (3 + (2 * count_className)) - 1, (4 + (2 * count_className)) - 1);
                                sheet.addMergedRegion(cellRangeAddress3);
                                RegionUtil.setBorderBottom(BorderStyle.THIN, cellRangeAddress3, sheet);
                                RegionUtil.setBorderLeft(BorderStyle.THIN, cellRangeAddress3, sheet);
                                RegionUtil.setBorderRight(BorderStyle.THIN, cellRangeAddress3, sheet);
                                RegionUtil.setBorderTop(BorderStyle.THIN, cellRangeAddress3, sheet);
                                XSSFCell courseTeacher = row0_4.createCell((3 + (2 * count_className)) - 1);
                                courseTeacher.setCellValue(((RptHeader) list1.get(i2)).getTeacher());
                                courseTeacher.setCellStyle(cFormat1);
                                CellRangeAddress cellRangeAddress4 = new CellRangeAddress(4, 4, (3 + (2 * count_className)) - 1, (4 + (2 * count_className)) - 1);
                                sheet.addMergedRegion(cellRangeAddress4);
                                RegionUtil.setBorderBottom(BorderStyle.THIN, cellRangeAddress4, sheet);
                                RegionUtil.setBorderLeft(BorderStyle.THIN, cellRangeAddress4, sheet);
                                RegionUtil.setBorderRight(BorderStyle.THIN, cellRangeAddress4, sheet);
                                RegionUtil.setBorderTop(BorderStyle.THIN, cellRangeAddress4, sheet);
                                XSSFCell frequency = row0_5.createCell((3 + (2 * count_className)) - 1);
                                frequency.setCellValue("频率");
                                frequency.setCellStyle(cFormat1);
                                XSSFCell totalFrequency = row0_5.createCell((4 + (2 * count_className)) - 1);
                                totalFrequency.setCellValue("累计频率");
                                totalFrequency.setCellStyle(cFormat1);
                                sheet.setColumnWidth((3 + (2 * count_className)) - 1, 3120);
                                sheet.setColumnWidth((4 + (2 * count_className)) - 1, 3120);
                                cStrs = cStrs + ((RptHeader) list1.get(i2)).getClassName() + ((RptHeader) list1.get(i2)).getExt1() + Const.STRING_SEPERATOR;
                                count_className++;
                            }
                        }
                        String[] qtrs = qtr.split(Const.STRING_SEPERATOR);
                        String[] cNameStrs = classNameStr.split(Const.STRING_SEPERATOR);
                        int length = qtrs.length;
                        int length2 = cNameStrs.length;
                        sheet.addMergedRegion(new CellRangeAddress(0, 0, 0, (cNameStrs.length * 2) + 2));
                        sheet.addMergedRegion(new CellRangeAddress(1, 1, 0, (cNameStrs.length * 2) + 2));
                        int zonghang = 0;
                        String paragraph = "";
                        String data_dian = "";
                        boolean flag = true;
                        String qStrs = "";
                        int ind = 0;
                        int[] fenN = new int[qtrs.length];
                        for (int ii = 0; ii < qtrs.length; ii++) {
                            String FenduanStr = "";
                            for (int i3 = 0; i3 < list0.size(); i3++) {
                                if (qtrs[ii].equals(((RptHeader) list0.get(i3)).getQuestionNum()) && FenduanStr.indexOf(((RptHeader) list0.get(i3)).getName()) == -1) {
                                    FenduanStr = FenduanStr + ((RptHeader) list0.get(i3)).getName() + Const.STRING_SEPERATOR;
                                }
                            }
                            String[] fenduanZ = FenduanStr.split(Const.STRING_SEPERATOR);
                            fenN[ii] = fenduanZ.length / 2;
                        }
                        if (classNumCount > 1) {
                            countCount = 0;
                            for (int ii2 = 0; ii2 < qtrs.length; ii2++) {
                                countCount += fenN[ii2];
                            }
                        } else {
                            countCount = countCount3;
                        }
                        for (int ii3 = 0; ii3 < qtrs.length; ii3++) {
                            if (ii3 % 2 == 0) {
                                int m = 0;
                                for (int i4 = 0; i4 < list0.size(); i4++) {
                                    if (qtrs[ii3].equals(((RptHeader) list0.get(i4)).getQuestionNum())) {
                                        int count = 1;
                                        String classNames = ((RptHeader) list0.get(i4)).getClassName();
                                        if (m != fenN[ii3]) {
                                            zonghang++;
                                            for (int j = i4 + 1; j < list0.size() && ((RptHeader) list0.get(i4)).getQuestionNum().equals(((RptHeader) list0.get(j)).getQuestionNum()) && classNames.equals(((RptHeader) list0.get(j)).getClassName()); j++) {
                                                count++;
                                            }
                                            XSSFRow row0_5zonghang = sheet.createRow(5 + zonghang);
                                            if (flag) {
                                                if (i4 > 0) {
                                                    String[] columnKeys = paragraph.split(Const.WHITE_CHAR);
                                                    if (show.equals("1")) {
                                                        XSSFRow row0_countCount9ind18 = sheet.createRow(countCount + 9 + (ind * 18));
                                                        XSSFCell questionNums = row0_countCount9ind18.createCell(0);
                                                        questionNums.setCellValue("T" + ((RptHeader) list0.get(i4 - 1)).getQuestionNum());
                                                        questionNums.setCellStyle(cFormat1);
                                                        String[] rowKeys = {"T7zhu", "T7duiji"};
                                                        for (int xx = 0; xx < rowKeys.length; xx++) {
                                                            File imgFile = getSubChartImgFile_toteacher(userNum, ((RptHeader) list0.get(i4 - 1)).getQuestionNum(), cNameStrs, qtrs, rowKeys[xx], columnKeys, data_dian, imgRoot);
                                                            int size = countCount + 10;
                                                            int a = size + (18 * ind);
                                                            new WritableImage(0 + (xx * 11), a, 10.0d, 15.0d, imgFile);
                                                        }
                                                    }
                                                    ind++;
                                                }
                                                paragraph = "";
                                                data_dian = "";
                                                if (count > 1) {
                                                    XSSFCell questionNums2 = row0_5zonghang.createCell(0);
                                                    questionNums2.setCellValue("T" + ((RptHeader) list0.get(i4)).getQuestionNum());
                                                    questionNums2.setCellStyle(cFormat2);
                                                    CellRangeAddress cellRangeAddress0 = new CellRangeAddress(5 + zonghang, 4 + zonghang + count, 0, 0);
                                                    sheet.addMergedRegion(cellRangeAddress0);
                                                    RegionUtil.setBorderBottom(BorderStyle.THIN, cellRangeAddress0, sheet);
                                                    RegionUtil.setBorderLeft(BorderStyle.THIN, cellRangeAddress0, sheet);
                                                    RegionUtil.setBorderRight(BorderStyle.THIN, cellRangeAddress0, sheet);
                                                    RegionUtil.setBorderTop(BorderStyle.THIN, cellRangeAddress0, sheet);
                                                    count--;
                                                    flag = false;
                                                } else {
                                                    XSSFCell questionNums3 = row0_5zonghang.createCell(0);
                                                    questionNums3.setCellValue("T" + ((RptHeader) list0.get(i4)).getQuestionNum());
                                                    questionNums3.setCellStyle(cFormat2);
                                                    row0_5zonghang.setHeight((short) 2700);
                                                    flag = true;
                                                }
                                            } else if (count > 0) {
                                                count--;
                                            }
                                            if (count == 0) {
                                                flag = true;
                                            }
                                            XSSFCell scoreSections = row0_5zonghang.createCell(1);
                                            scoreSections.setCellValue(((RptHeader) list0.get(i4)).getName());
                                            scoreSections.setCellStyle(cFormat2);
                                            paragraph = paragraph + ((RptHeader) list0.get(i4)).getName() + Const.WHITE_CHAR;
                                        }
                                        int w = 0;
                                        if (qStrs.indexOf(((RptHeader) list0.get(i4)).getQuestionNum() + "-" + ((RptHeader) list0.get(i4)).getName()) == -1) {
                                            int xl = 0;
                                            int n = 0;
                                            int h = 0;
                                            int l = cNameStrs.length;
                                            XSSFRow row0_5zonghang2 = sheet.getRow(5 + zonghang);
                                            if (row0_5zonghang2 == null) {
                                                row0_5zonghang2 = sheet.createRow(5 + zonghang);
                                            }
                                            for (int x = 0; x < list0.size(); x++) {
                                                if (((RptHeader) list0.get(i4)).getQuestionNum().equals(((RptHeader) list0.get(x)).getQuestionNum()) && ((RptHeader) list0.get(i4)).getName().equals(((RptHeader) list0.get(x)).getName())) {
                                                    h++;
                                                    if (!cNameStrs[n].equals(((RptHeader) list0.get(x)).getClassName())) {
                                                        int p = 0;
                                                        while (!cNameStrs[n].equals(((RptHeader) list0.get(x)).getClassName())) {
                                                            n++;
                                                            w++;
                                                            XSSFCell frequency2 = row0_5zonghang2.createCell((3 + (xl * 2)) - 1);
                                                            frequency2.setCellValue("");
                                                            frequency2.setCellStyle(cFormat2);
                                                            XSSFCell totalFrequency2 = row0_5zonghang2.createCell((4 + (xl * 2)) - 1);
                                                            totalFrequency2.setCellValue("");
                                                            totalFrequency2.setCellStyle(cFormat2);
                                                            xl++;
                                                            data_dian = data_dian + "0,";
                                                            p++;
                                                        }
                                                    }
                                                    n++;
                                                    w++;
                                                    if (n == l) {
                                                        n = 0;
                                                    }
                                                    double frequencya = ((RptHeader) list0.get(x)).getNum();
                                                    Double frequency_D = Double.valueOf(df02.format(frequencya));
                                                    double totalFrequencya = ((RptHeader) list0.get(x)).getTnum();
                                                    Double totalFrequency_D = Double.valueOf(df02.format(totalFrequencya));
                                                    XSSFCell frequencys = row0_5zonghang2.createCell((3 + (xl * 2)) - 1);
                                                    frequencys.setCellValue(frequency_D.doubleValue());
                                                    frequencys.setCellStyle(cFormat2_2);
                                                    XSSFCell totalFrequencys = row0_5zonghang2.createCell((4 + (xl * 2)) - 1);
                                                    totalFrequencys.setCellValue(totalFrequency_D.doubleValue());
                                                    totalFrequencys.setCellStyle(cFormat2_2);
                                                    xl++;
                                                    data_dian = data_dian + frequency_D + Const.STRING_SEPERATOR;
                                                }
                                            }
                                            if (h < l && w < l + 1) {
                                                for (int c = w; c < l; c++) {
                                                    XSSFCell frequencys2 = row0_5zonghang2.createCell((3 + (xl * 2)) - 1);
                                                    frequencys2.setCellValue("");
                                                    frequencys2.setCellStyle(cFormat2);
                                                    XSSFCell totalFrequencys2 = row0_5zonghang2.createCell((4 + (xl * 2)) - 1);
                                                    totalFrequencys2.setCellValue("");
                                                    totalFrequencys2.setCellStyle(cFormat2);
                                                    xl++;
                                                    data_dian = data_dian + "0,";
                                                }
                                            }
                                            qStrs = qStrs + ((RptHeader) list0.get(i4)).getQuestionNum() + "-" + ((RptHeader) list0.get(i4)).getName() + Const.STRING_SEPERATOR;
                                            m++;
                                        }
                                    }
                                }
                            } else {
                                int m2 = 0;
                                for (int i5 = 0; i5 < list0.size(); i5++) {
                                    if (qtrs[ii3].equals(((RptHeader) list0.get(i5)).getQuestionNum())) {
                                        int count2 = 1;
                                        String classNames2 = ((RptHeader) list0.get(i5)).getClassName();
                                        if (m2 != fenN[ii3]) {
                                            zonghang++;
                                            for (int j2 = i5 + 1; j2 < list0.size() && ((RptHeader) list0.get(i5)).getQuestionNum().equals(((RptHeader) list0.get(j2)).getQuestionNum()) && classNames2.equals(((RptHeader) list0.get(j2)).getClassName()); j2++) {
                                                count2++;
                                            }
                                            XSSFRow row0_5zonghang3 = sheet.createRow(5 + zonghang);
                                            if (flag) {
                                                if (i5 > 0) {
                                                    String[] columnKeys2 = paragraph.split(Const.WHITE_CHAR);
                                                    if (show.equals("1")) {
                                                        XSSFRow row0_countCount9ind182 = sheet.createRow(countCount + 9 + (ind * 18));
                                                        XSSFCell questionNums4 = row0_countCount9ind182.createCell(0);
                                                        questionNums4.setCellValue("T" + ((RptHeader) list0.get(i5 - 1)).getQuestionNum());
                                                        questionNums4.setCellStyle(cFormat1);
                                                        String[] rowKeys2 = {"T7zhu", "T7duiji"};
                                                        for (int xx2 = 0; xx2 < rowKeys2.length; xx2++) {
                                                            File imgFile2 = getSubChartImgFile_toteacher(userNum, ((RptHeader) list0.get(i5 - 1)).getQuestionNum(), cNameStrs, qtrs, rowKeys2[xx2], columnKeys2, data_dian, imgRoot);
                                                            int size2 = countCount + 10;
                                                            int a2 = size2 + (18 * ind);
                                                            new WritableImage(0 + (xx2 * 11), a2, 10.0d, 15.0d, imgFile2);
                                                        }
                                                    }
                                                    ind++;
                                                }
                                                paragraph = "";
                                                data_dian = "";
                                                if (count2 > 1) {
                                                    XSSFCell questionNums5 = row0_5zonghang3.createCell(0);
                                                    questionNums5.setCellValue("T" + ((RptHeader) list0.get(i5)).getQuestionNum());
                                                    questionNums5.setCellStyle(cFormat3);
                                                    CellRangeAddress cellRangeAddress02 = new CellRangeAddress(5 + zonghang, 4 + zonghang + count2, 0, 0);
                                                    sheet.addMergedRegion(cellRangeAddress02);
                                                    RegionUtil.setBorderBottom(BorderStyle.THIN, cellRangeAddress02, sheet);
                                                    RegionUtil.setBorderLeft(BorderStyle.THIN, cellRangeAddress02, sheet);
                                                    RegionUtil.setBorderRight(BorderStyle.THIN, cellRangeAddress02, sheet);
                                                    RegionUtil.setBorderTop(BorderStyle.THIN, cellRangeAddress02, sheet);
                                                    count2--;
                                                    flag = false;
                                                } else {
                                                    XSSFCell questionNums6 = row0_5zonghang3.createCell(0);
                                                    questionNums6.setCellValue("T" + ((RptHeader) list0.get(i5)).getQuestionNum());
                                                    questionNums6.setCellStyle(cFormat3);
                                                    row0_5zonghang3.setHeight((short) 2700);
                                                    flag = true;
                                                }
                                            } else if (count2 > 0) {
                                                count2--;
                                            }
                                            if (count2 == 0) {
                                                flag = true;
                                            }
                                            XSSFCell scoreSections2 = row0_5zonghang3.createCell(1);
                                            scoreSections2.setCellValue(((RptHeader) list0.get(i5)).getName());
                                            scoreSections2.setCellStyle(cFormat3);
                                            paragraph = paragraph + ((RptHeader) list0.get(i5)).getName() + Const.WHITE_CHAR;
                                        }
                                        int w2 = 0;
                                        if (qStrs.indexOf(((RptHeader) list0.get(i5)).getQuestionNum() + "-" + ((RptHeader) list0.get(i5)).getName()) == -1) {
                                            int xl2 = 0;
                                            int n2 = 0;
                                            int h2 = 0;
                                            int l2 = cNameStrs.length;
                                            XSSFRow row0_5zonghang4 = sheet.getRow(5 + zonghang);
                                            if (row0_5zonghang4 == null) {
                                                row0_5zonghang4 = sheet.createRow(5 + zonghang);
                                            }
                                            for (int x2 = 0; x2 < list0.size(); x2++) {
                                                if (((RptHeader) list0.get(i5)).getQuestionNum().equals(((RptHeader) list0.get(x2)).getQuestionNum()) && ((RptHeader) list0.get(i5)).getName().equals(((RptHeader) list0.get(x2)).getName())) {
                                                    h2++;
                                                    if (!cNameStrs[n2].equals(((RptHeader) list0.get(x2)).getClassName())) {
                                                        int p2 = 0;
                                                        while (!cNameStrs[n2].equals(((RptHeader) list0.get(x2)).getClassName())) {
                                                            n2++;
                                                            w2++;
                                                            XSSFCell frequency3 = row0_5zonghang4.createCell((3 + (xl2 * 2)) - 1);
                                                            frequency3.setCellValue("");
                                                            frequency3.setCellStyle(cFormat3);
                                                            XSSFCell totalFrequency3 = row0_5zonghang4.createCell((4 + (xl2 * 2)) - 1);
                                                            totalFrequency3.setCellValue("");
                                                            totalFrequency3.setCellStyle(cFormat3);
                                                            xl2++;
                                                            data_dian = data_dian + "0,";
                                                            p2++;
                                                        }
                                                    }
                                                    n2++;
                                                    w2++;
                                                    if (n2 == l2) {
                                                        n2 = 0;
                                                    }
                                                    double frequencya2 = ((RptHeader) list0.get(x2)).getNum();
                                                    Double frequency_D2 = Double.valueOf(df02.format(frequencya2));
                                                    double totalFrequencya2 = ((RptHeader) list0.get(x2)).getTnum();
                                                    Double totalFrequency_D2 = Double.valueOf(df02.format(totalFrequencya2));
                                                    XSSFCell frequencys3 = row0_5zonghang4.createCell((3 + (xl2 * 2)) - 1);
                                                    frequencys3.setCellValue(frequency_D2.doubleValue());
                                                    frequencys3.setCellStyle(cFormat3_2);
                                                    XSSFCell totalFrequencys3 = row0_5zonghang4.createCell((4 + (xl2 * 2)) - 1);
                                                    totalFrequencys3.setCellValue(totalFrequency_D2.doubleValue());
                                                    totalFrequencys3.setCellStyle(cFormat3_2);
                                                    xl2++;
                                                    data_dian = data_dian + frequency_D2 + Const.STRING_SEPERATOR;
                                                }
                                            }
                                            if (h2 < l2 && w2 < l2 + 1) {
                                                for (int c2 = w2; c2 < l2; c2++) {
                                                    XSSFCell frequencys4 = row0_5zonghang4.createCell((3 + (xl2 * 2)) - 1);
                                                    frequencys4.setCellValue("");
                                                    frequencys4.setCellStyle(cFormat3);
                                                    XSSFCell totalFrequencys4 = row0_5zonghang4.createCell((4 + (xl2 * 2)) - 1);
                                                    totalFrequencys4.setCellValue("");
                                                    totalFrequencys4.setCellStyle(cFormat3);
                                                    xl2++;
                                                    data_dian = data_dian + "0,";
                                                }
                                            }
                                            qStrs = qStrs + ((RptHeader) list0.get(i5)).getQuestionNum() + "-" + ((RptHeader) list0.get(i5)).getName() + Const.STRING_SEPERATOR;
                                            m2++;
                                        }
                                    }
                                }
                            }
                        }
                        String[] columnKeys3 = paragraph.split(Const.WHITE_CHAR);
                        if (show.equals("1")) {
                            XSSFRow row0_countCount9ind183 = sheet.createRow(countCount + 9 + (ind * 18));
                            XSSFCell questionNums7 = row0_countCount9ind183.createCell(0);
                            questionNums7.setCellValue("T" + ((RptHeader) list0.get(list0.size() - 1)).getQuestionNum());
                            questionNums7.setCellStyle(cFormat1);
                            String[] rowKeys3 = {"T7zhu", "T7duiji"};
                            for (int xx3 = 0; xx3 < rowKeys3.length; xx3++) {
                                File imgFile3 = getSubChartImgFile_toteacher(userNum, ((RptHeader) list0.get(list0.size() - 1)).getQuestionNum(), cNameStrs, qtrs, rowKeys3[xx3], columnKeys3, data_dian, imgRoot);
                                int size3 = countCount + 10;
                                int a3 = size3 + (18 * ind);
                                new WritableImage(0 + (xx3 * 11), a3, 10.0d, 15.0d, imgFile3);
                            }
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    FileOutputStream fileOut = new FileOutputStream(excelFile);
                    wwBook.write(fileOut);
                    fileOut.close();
                    if (wwBook != null) {
                        try {
                            wwBook.close();
                            if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                                HttpServletResponse response = ServletActionContext.getResponse();
                                response.reset();
                                ServletOutputStream outputStream = response.getOutputStream();
                                String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                String loadFileName2 = loadFileName.replace("+", " ");
                                response.setContentType("Content-type: applicationnd.ms-excel");
                                response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xlsx");
                                response.setHeader("Content-length", String.valueOf(excelFile.length()));
                                byte[] tempByte = new byte[1024];
                                FileInputStream in = new FileInputStream(excelFile);
                                while (true) {
                                    int n3 = in.read(tempByte);
                                    if (n3 == -1) {
                                        break;
                                    }
                                    try {
                                        outputStream.write(tempByte, 0, n3);
                                    } catch (Exception e2) {
                                        this.log.error("保存未成功", e2);
                                    }
                                }
                                outputStream.flush();
                                outputStream.close();
                                in.close();
                            }
                        } catch (Exception e3) {
                            e3.printStackTrace();
                        }
                    }
                } catch (Exception e4) {
                    if (wwBook != null) {
                        try {
                            wwBook.close();
                            if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                                HttpServletResponse response2 = ServletActionContext.getResponse();
                                response2.reset();
                                ServletOutputStream outputStream2 = response2.getOutputStream();
                                String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                String loadFileName4 = loadFileName3.replace("+", " ");
                                response2.setContentType("Content-type: applicationnd.ms-excel");
                                response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xlsx");
                                response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                                byte[] tempByte2 = new byte[1024];
                                FileInputStream in2 = new FileInputStream(excelFile);
                                while (true) {
                                    int n4 = in2.read(tempByte2);
                                    if (n4 == -1) {
                                        break;
                                    }
                                    try {
                                        outputStream2.write(tempByte2, 0, n4);
                                    } catch (Exception e5) {
                                        this.log.error("保存未成功", e5);
                                    }
                                }
                                outputStream2.flush();
                                outputStream2.close();
                                in2.close();
                            }
                        } catch (Exception e6) {
                            e6.printStackTrace();
                        }
                    }
                }
            } catch (Throwable th) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response3 = ServletActionContext.getResponse();
                            response3.reset();
                            ServletOutputStream outputStream3 = response3.getOutputStream();
                            String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName6 = loadFileName5.replace("+", " ");
                            response3.setContentType("Content-type: applicationnd.ms-excel");
                            response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xlsx");
                            response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte3 = new byte[1024];
                            FileInputStream in3 = new FileInputStream(excelFile);
                            while (true) {
                                int n5 = in3.read(tempByte3);
                                if (n5 == -1) {
                                    break;
                                }
                                try {
                                    outputStream3.write(tempByte3, 0, n5);
                                } catch (Exception e7) {
                                    this.log.error("保存未成功", e7);
                                }
                            }
                            outputStream3.flush();
                            outputStream3.close();
                            in3.close();
                        }
                    } catch (Exception e8) {
                        e8.printStackTrace();
                        throw th;
                    }
                }
                throw th;
            }
        } catch (Exception e9) {
            e9.printStackTrace();
        }
        return null;
    }

    public File getSubChartImgFile_toteacher(String userId, String questionNum, String[] cNameStrs, String[] qtrs, String tuName, String[] paragraph, String data_dian, String dirPath) {
        subjectLineImage(userId, questionNum, cNameStrs, qtrs, paragraph, data_dian);
        File file = new File(dirPath + File.separator + "tmpLinePng" + File.separator + tuName + userId + questionNum + ".png");
        return file;
    }

    public void subjectLineImage(String userId, String questionNum, String[] rowKeys, String[] qtrs, String[] paragraph, String data_dian) {
        for (int i = 0; i < rowKeys.length; i++) {
            rowKeys[i] = rowKeys[i];
        }
        String[] tupianName = {"T7duiji"};
        String[] sp_lit = data_dian.split(Const.STRING_SEPERATOR);
        double[][] data = new double[paragraph.length][rowKeys.length];
        Double.valueOf(0.0d);
        Double.valueOf(0.0d);
        List list_data = new ArrayList();
        int cun = 0;
        for (int i2 = 0; i2 < paragraph.length; i2++) {
            for (int x = 0; x < rowKeys.length; x++) {
                data[i2][x] = Double.parseDouble(sp_lit[cun]);
                list_data.add(Double.valueOf(Double.parseDouble(sp_lit[cun])));
                cun++;
            }
        }
        Double maxDesc = (Double) Collections.max(list_data);
        Double minDesc = (Double) Collections.min(list_data);
        Double.valueOf((maxDesc.doubleValue() - minDesc.doubleValue()) / 5.0d);
        try {
            HttpServletResponse response = ServletActionContext.getResponse();
            response.reset();
            response.setContentType("image/jpeg");
            JFreeChart chart = this.lc.makeBarCharT7(data, paragraph, rowKeys);
            getChartImageFolder(chart, "tmpLinePng", Const.width_1100, 300, "T7zhu" + userId + questionNum);
            JFreeChart chart1 = this.st.makeStackedBarChart(data, paragraph, rowKeys, "", "", "", Double.valueOf(0.2d), Double.valueOf(1.0d));
            getChartImageFolder(chart1, "tmpLinePng", Const.width_1100, 300, tupianName[0] + userId + questionNum);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String knowScoreRank_exportMethod(String examNum, String gradeNum, String schoolNum, String subjectNum, String classNum, String studentId, String studentType, String type, String source, String step, String sNum, String c_exam, String rpt_name, String isMoreSchool, String rptTitle, String isHistory, String isSaveWrite, String dirPath, String uri, String userNum, String schName, String gradeName, String className, String subjectName, String imgRoot, String agent) {
        String tt1;
        String tt2;
        String schNum;
        int cs;
        Float cc;
        int cs2;
        Float cc2;
        String rptTitle2 = this.sp.getHeaderStr(examNum, subjectNum, gradeNum, schoolNum, classNum, studentId, studentType, true, true, true, true, false, true, true, true, false, true, true, true, true, true, false, "0", "0");
        List list = this.reportService.getKnowScoreRank(examNum, gradeNum, schoolNum, subjectNum, classNum, studentType, type, source, step, "0");
        String folderPath = "ExportFolder/reportExcel" + userNum;
        String str = "reportExcel" + userNum;
        String str2 = "reportExcel" + userNum;
        String excelName = (null == gradeName || "".equals(gradeName)) ? rpt_name + "_" + gradeNum : rpt_name + "_" + gradeName;
        if (null != classNum && !"".equals(classNum) && !classNum.contains(Const.STRING_SEPERATOR)) {
            excelName = (null == className || "".equals(className)) ? excelName + "_" + classNum : excelName + "_" + className;
        }
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFileXLSX(excelName, dirPath, folderPath);
        try {
            XSSFWorkbook wwBook = new XSSFWorkbook();
            XSSFDataFormat createDataFormat = wwBook.createDataFormat();
            XSSFFont font_bold = wwBook.createFont();
            font_bold.setFontHeightInPoints((short) 15);
            font_bold.setFontName("Arial");
            font_bold.setBold(true);
            XSSFCellStyle biaotis1 = wwBook.createCellStyle();
            biaotis1.setAlignment(HorizontalAlignment.LEFT);
            biaotis1.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            biaotis1.setFont(font_bold);
            XSSFFont font = wwBook.createFont();
            font.setFontHeightInPoints((short) 10);
            font.setFontName("Arial");
            XSSFCellStyle title = wwBook.createCellStyle();
            title.setAlignment(HorizontalAlignment.LEFT);
            title.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            title.setFont(font);
            title.setWrapText(true);
            XSSFCellStyle cFormat1 = wwBook.createCellStyle();
            cFormat1.setAlignment(HorizontalAlignment.CENTER);
            cFormat1.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cFormat1.setFont(font);
            cFormat1.setWrapText(true);
            cFormat1.setFillForegroundColor(Const.fillForeground_color);
            cFormat1.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cFormat1.setBorderTop(BorderStyle.THIN);
            cFormat1.setBorderRight(BorderStyle.THIN);
            cFormat1.setBorderBottom(BorderStyle.THIN);
            cFormat1.setBorderLeft(BorderStyle.THIN);
            XSSFCellStyle cFormat2 = wwBook.createCellStyle();
            cFormat2.setAlignment(HorizontalAlignment.CENTER);
            cFormat2.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cFormat2.setFont(font);
            cFormat2.setWrapText(true);
            cFormat2.setFillForegroundColor(Const.fillForeground_color2);
            cFormat2.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cFormat2.setBorderTop(BorderStyle.THIN);
            cFormat2.setBorderRight(BorderStyle.THIN);
            cFormat2.setBorderBottom(BorderStyle.THIN);
            cFormat2.setBorderLeft(BorderStyle.THIN);
            XSSFCellStyle cFormat2_2 = wwBook.createCellStyle();
            cFormat2_2.setAlignment(HorizontalAlignment.CENTER);
            cFormat2_2.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cFormat2_2.setFont(font);
            cFormat2_2.setWrapText(true);
            cFormat2_2.setFillForegroundColor(Const.fillForeground_color2);
            cFormat2_2.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cFormat2_2.setBorderTop(BorderStyle.THIN);
            cFormat2_2.setBorderRight(BorderStyle.THIN);
            cFormat2_2.setBorderBottom(BorderStyle.THIN);
            cFormat2_2.setBorderLeft(BorderStyle.THIN);
            cFormat2_2.setDataFormat(createDataFormat.getFormat("0.00"));
            XSSFCellStyle cFormat3 = wwBook.createCellStyle();
            cFormat3.setAlignment(HorizontalAlignment.CENTER);
            cFormat3.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cFormat3.setFont(font);
            cFormat3.setWrapText(true);
            cFormat3.setFillForegroundColor(Const.fillForeground_color3);
            cFormat3.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cFormat3.setBorderTop(BorderStyle.THIN);
            cFormat3.setBorderRight(BorderStyle.THIN);
            cFormat3.setBorderBottom(BorderStyle.THIN);
            cFormat3.setBorderLeft(BorderStyle.THIN);
            XSSFCellStyle cFormat3_2 = wwBook.createCellStyle();
            cFormat3_2.setAlignment(HorizontalAlignment.CENTER);
            cFormat3_2.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cFormat3_2.setFont(font);
            cFormat3_2.setWrapText(true);
            cFormat3_2.setFillForegroundColor(Const.fillForeground_color3);
            cFormat3_2.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cFormat3_2.setBorderTop(BorderStyle.THIN);
            cFormat3_2.setBorderRight(BorderStyle.THIN);
            cFormat3_2.setBorderBottom(BorderStyle.THIN);
            cFormat3_2.setBorderLeft(BorderStyle.THIN);
            cFormat3_2.setDataFormat(createDataFormat.getFormat("0.00"));
            try {
                try {
                    new ArrayList();
                    new ArrayList();
                    XSSFSheet sheet = wwBook.createSheet();
                    wwBook.setSheetName(0, rpt_name);
                    XSSFDrawing patriarch = sheet.createDrawingPatriarch();
                    sheet.setDisplayGridlines(false);
                    try {
                        XSSFRow row0_0 = sheet.createRow(0);
                        XSSFCell biaotou = row0_0.createCell(0);
                        biaotou.setCellValue(rpt_name);
                        biaotou.setCellStyle(biaotis1);
                        DecimalFormat df3 = new DecimalFormat("0.00");
                        df3.setRoundingMode(RoundingMode.HALF_UP);
                        XSSFRow row0_1 = sheet.createRow(1);
                        row0_1.setHeight((short) 500);
                        XSSFCell xinxi = row0_1.createCell(0);
                        xinxi.setCellValue(rptTitle2);
                        xinxi.setCellStyle(title);
                        XSSFRow row0_2 = sheet.createRow(2);
                        XSSFRow row0_3 = sheet.createRow(3);
                        XSSFRow row0_4 = sheet.createRow(4);
                        XSSFRow row0_5 = sheet.createRow(5);
                        XSSFCell knowledge = row0_2.createCell(0);
                        knowledge.setCellValue("知识点得分频率分布图");
                        knowledge.setCellStyle(cFormat1);
                        CellRangeAddress cellRangeAddress2_0 = new CellRangeAddress(2, 5, 0, 0);
                        sheet.addMergedRegion(cellRangeAddress2_0);
                        RegionUtil.setBorderBottom(BorderStyle.THIN, cellRangeAddress2_0, sheet);
                        RegionUtil.setBorderLeft(BorderStyle.THIN, cellRangeAddress2_0, sheet);
                        RegionUtil.setBorderRight(BorderStyle.THIN, cellRangeAddress2_0, sheet);
                        RegionUtil.setBorderTop(BorderStyle.THIN, cellRangeAddress2_0, sheet);
                        sheet.setColumnWidth(0, 13000);
                        XSSFCell knoName = row0_2.createCell(1);
                        knoName.setCellValue("知识点名称");
                        knoName.setCellStyle(cFormat1);
                        CellRangeAddress cellRangeAddress2_1 = new CellRangeAddress(2, 5, 1, 1);
                        sheet.addMergedRegion(cellRangeAddress2_1);
                        RegionUtil.setBorderBottom(BorderStyle.THIN, cellRangeAddress2_1, sheet);
                        RegionUtil.setBorderLeft(BorderStyle.THIN, cellRangeAddress2_1, sheet);
                        RegionUtil.setBorderRight(BorderStyle.THIN, cellRangeAddress2_1, sheet);
                        RegionUtil.setBorderTop(BorderStyle.THIN, cellRangeAddress2_1, sheet);
                        sheet.setColumnWidth(1, 5200);
                        if (schoolNum.indexOf(Const.STRING_SEPERATOR) != -1) {
                            tt1 = "年级主任";
                            tt2 = "教研组长";
                            schNum = "学校";
                        } else {
                            tt1 = "班主任";
                            tt2 = "学科教师";
                            schNum = "班级";
                        }
                        XSSFCell classNameTitle = row0_2.createCell(2);
                        classNameTitle.setCellValue(schNum);
                        classNameTitle.setCellStyle(cFormat1);
                        XSSFCell teacherTitle = row0_3.createCell(2);
                        teacherTitle.setCellValue(tt1);
                        teacherTitle.setCellStyle(cFormat1);
                        XSSFCell subjectTeacherTitle = row0_4.createCell(2);
                        subjectTeacherTitle.setCellValue(tt2);
                        subjectTeacherTitle.setCellStyle(cFormat1);
                        XSSFCell scoreSection = row0_5.createCell(2);
                        scoreSection.setCellValue("分数段");
                        scoreSection.setCellStyle(cFormat1);
                        sheet.setColumnWidth(2, 3900);
                        int count = 0;
                        String[] cNameStrs = null;
                        String TotalClassStr = "";
                        for (int i = 0; i < list.size(); i++) {
                            new ArrayList();
                            new ArrayList();
                            List knoData = (List) list.get(i);
                            int claCount = knoData.size();
                            List duanData = (List) knoData.get(0);
                            int duanCount = duanData.size();
                            for (int j = 0; j < duanCount; j++) {
                                for (int c = 0; c < claCount; c++) {
                                    Object[] obj = (Object[]) ((List) knoData.get(c)).get(0);
                                    String classNameStr = obj[5] + Const.STRING_SEPERATOR;
                                    if (TotalClassStr.indexOf(classNameStr) == -1) {
                                        TotalClassStr = TotalClassStr + classNameStr;
                                    }
                                }
                            }
                        }
                        String[] TotalClassStr1 = TotalClassStr.split(Const.STRING_SEPERATOR);
                        for (int i2 = 0; i2 < list.size(); i2++) {
                            new ArrayList();
                            new ArrayList();
                            List knoData2 = (List) list.get(i2);
                            int claCount2 = knoData2.size();
                            List duanData2 = (List) knoData2.get(0);
                            int duanCount2 = duanData2.size();
                            String data_dian = "";
                            String paragraph = "";
                            if (i2 % 2 == 0) {
                                for (int j2 = 0; j2 < duanCount2; j2++) {
                                    String classNameStr2 = "";
                                    count++;
                                    Object[] obj2 = null;
                                    int c2 = 0;
                                    XSSFRow row0_5count = sheet.getRow(5 + count);
                                    if (row0_5count == null) {
                                        row0_5count = sheet.createRow(5 + count);
                                    }
                                    for (int d = 0; d < claCount2; d++) {
                                        obj2 = (Object[]) ((List) knoData2.get(d)).get(0);
                                        classNameStr2 = classNameStr2 + obj2[5] + Const.STRING_SEPERATOR;
                                        if (i2 == 0 && j2 == 0) {
                                            XSSFCell className_title = row0_2.createCell(3 + (c2 * 2));
                                            className_title.setCellValue(obj2[5] + "");
                                            className_title.setCellStyle(cFormat1);
                                            CellRangeAddress cellRangeAddress2 = new CellRangeAddress(2, 2, 3 + (c2 * 2), 4 + (c2 * 2));
                                            sheet.addMergedRegion(cellRangeAddress2);
                                            RegionUtil.setBorderBottom(BorderStyle.THIN, cellRangeAddress2, sheet);
                                            RegionUtil.setBorderLeft(BorderStyle.THIN, cellRangeAddress2, sheet);
                                            RegionUtil.setBorderRight(BorderStyle.THIN, cellRangeAddress2, sheet);
                                            RegionUtil.setBorderTop(BorderStyle.THIN, cellRangeAddress2, sheet);
                                            XSSFCell teacher = row0_3.createCell(3 + (c2 * 2));
                                            teacher.setCellValue(obj2[12] + "");
                                            teacher.setCellStyle(cFormat1);
                                            CellRangeAddress cellRangeAddress3 = new CellRangeAddress(3, 3, 3 + (c2 * 2), 4 + (c2 * 2));
                                            sheet.addMergedRegion(cellRangeAddress3);
                                            RegionUtil.setBorderBottom(BorderStyle.THIN, cellRangeAddress3, sheet);
                                            RegionUtil.setBorderLeft(BorderStyle.THIN, cellRangeAddress3, sheet);
                                            RegionUtil.setBorderRight(BorderStyle.THIN, cellRangeAddress3, sheet);
                                            RegionUtil.setBorderTop(BorderStyle.THIN, cellRangeAddress3, sheet);
                                            XSSFCell courseTeacher = row0_4.createCell(3 + (c2 * 2));
                                            courseTeacher.setCellValue(obj2[11] + "");
                                            courseTeacher.setCellStyle(cFormat1);
                                            CellRangeAddress cellRangeAddress4 = new CellRangeAddress(4, 4, 3 + (c2 * 2), 4 + (c2 * 2));
                                            sheet.addMergedRegion(cellRangeAddress4);
                                            RegionUtil.setBorderBottom(BorderStyle.THIN, cellRangeAddress4, sheet);
                                            RegionUtil.setBorderLeft(BorderStyle.THIN, cellRangeAddress4, sheet);
                                            RegionUtil.setBorderRight(BorderStyle.THIN, cellRangeAddress4, sheet);
                                            RegionUtil.setBorderTop(BorderStyle.THIN, cellRangeAddress4, sheet);
                                            XSSFCell frequency = row0_5.createCell(3 + (c2 * 2));
                                            frequency.setCellValue("频率");
                                            frequency.setCellStyle(cFormat1);
                                            XSSFCell totalFrequency = row0_5.createCell(4 + (c2 * 2));
                                            totalFrequency.setCellValue("累计频率");
                                            totalFrequency.setCellStyle(cFormat1);
                                            sheet.setColumnWidth(3 + (c2 * 2), 3120);
                                            sheet.setColumnWidth(4 + (c2 * 2), 3120);
                                        }
                                        String fenduan = ((Object[]) ((List) knoData2.get(0)).get(j2))[7] + "";
                                        String newStr = fenduan.replaceAll(Const.WHITE_CHAR, "]");
                                        if (d == 0) {
                                            paragraph = paragraph + newStr + Const.WHITE_CHAR;
                                            XSSFCell scoreSections = row0_5count.createCell(2);
                                            scoreSections.setCellValue(newStr);
                                            scoreSections.setCellStyle(cFormat2);
                                            paragraph.split(Const.WHITE_CHAR);
                                        }
                                        if (d == 0 && j2 == 0) {
                                            XSSFCell knoNames = row0_5count.createCell(1);
                                            knoNames.setCellValue(obj2[1] + "");
                                            knoNames.setCellStyle(cFormat2);
                                            CellRangeAddress cellRangeAddress5_0 = new CellRangeAddress(5 + count, 4 + count + duanCount2, 0, 0);
                                            sheet.addMergedRegion(cellRangeAddress5_0);
                                            RegionUtil.setBorderBottom(BorderStyle.THIN, cellRangeAddress5_0, sheet);
                                            RegionUtil.setBorderLeft(BorderStyle.THIN, cellRangeAddress5_0, sheet);
                                            RegionUtil.setBorderRight(BorderStyle.THIN, cellRangeAddress5_0, sheet);
                                            RegionUtil.setBorderTop(BorderStyle.THIN, cellRangeAddress5_0, sheet);
                                            CellRangeAddress cellRangeAddress5_1 = new CellRangeAddress(5 + count, 4 + count + duanCount2, 1, 1);
                                            sheet.addMergedRegion(cellRangeAddress5_1);
                                            RegionUtil.setBorderBottom(BorderStyle.THIN, cellRangeAddress5_1, sheet);
                                            RegionUtil.setBorderLeft(BorderStyle.THIN, cellRangeAddress5_1, sheet);
                                            RegionUtil.setBorderRight(BorderStyle.THIN, cellRangeAddress5_1, sheet);
                                            RegionUtil.setBorderTop(BorderStyle.THIN, cellRangeAddress5_1, sheet);
                                            if (duanCount2 < 3) {
                                                for (int cs3 = 1; cs3 < duanCount2 + 1; cs3++) {
                                                    XSSFRow row0_4countCs = sheet.getRow(4 + count + cs3);
                                                    if (row0_4countCs == null) {
                                                        row0_4countCs = sheet.createRow(4 + count + cs3);
                                                    }
                                                    row0_4countCs.setHeight((short) 1350);
                                                }
                                            } else {
                                                for (int cs4 = 1; cs4 < duanCount2 + 1; cs4++) {
                                                    XSSFRow row0_4countCs2 = sheet.getRow(4 + count + cs4);
                                                    if (row0_4countCs2 == null) {
                                                        row0_4countCs2 = sheet.createRow(4 + count + cs4);
                                                    }
                                                    row0_4countCs2.setHeight((short) 900);
                                                }
                                            }
                                        }
                                        if (TotalClassStr1[c2].equals(obj2[5])) {
                                            String frequencys_value = ((Object[]) ((List) knoData2.get(d)).get(j2))[10] + "";
                                            Double frequencys_value_D = Double.valueOf(Double.parseDouble(df3.format(Double.valueOf(frequencys_value))));
                                            String totalFrequencys_value = ((Object[]) ((List) knoData2.get(d)).get(j2))[9] + "";
                                            Double totalFrequencys_value_D = Double.valueOf(totalFrequencys_value);
                                            Double totalFrequencys_value_D2 = Double.valueOf(Double.parseDouble(df3.format(totalFrequencys_value_D)));
                                            XSSFCell frequencys = row0_5count.createCell(3 + (c2 * 2));
                                            frequencys.setCellValue(frequencys_value_D.doubleValue());
                                            frequencys.setCellStyle(cFormat2_2);
                                            XSSFCell totalFrequencys = row0_5count.createCell(4 + (c2 * 2));
                                            totalFrequencys.setCellValue(totalFrequencys_value_D2.doubleValue());
                                            totalFrequencys.setCellStyle(cFormat2_2);
                                            data_dian = data_dian + frequencys_value_D + Const.STRING_SEPERATOR;
                                            c2++;
                                        } else {
                                            while (!TotalClassStr1[c2].equals(obj2[5])) {
                                                XSSFCell frequencys2 = row0_5count.createCell(3 + (c2 * 2));
                                                frequencys2.setCellValue("");
                                                frequencys2.setCellStyle(cFormat2_2);
                                                XSSFCell totalFrequencys2 = row0_5count.createCell(4 + (c2 * 2));
                                                totalFrequencys2.setCellValue("");
                                                totalFrequencys2.setCellStyle(cFormat2_2);
                                                c2++;
                                                if (c2 == TotalClassStr1.length - 1) {
                                                    break;
                                                }
                                            }
                                            if (TotalClassStr1[c2].equals(obj2[5])) {
                                                String frequencys_value2 = ((Object[]) ((List) knoData2.get(d)).get(j2))[10] + "";
                                                Double frequencys_value_D2 = Double.valueOf(Double.parseDouble(df3.format(Double.valueOf(frequencys_value2))));
                                                String totalFrequencys_value2 = ((Object[]) ((List) knoData2.get(d)).get(j2))[9] + "";
                                                Double totalFrequencys_value_D3 = Double.valueOf(totalFrequencys_value2);
                                                Double totalFrequencys_value_D4 = Double.valueOf(Double.parseDouble(df3.format(totalFrequencys_value_D3)));
                                                XSSFCell frequencys3 = row0_5count.createCell(3 + (c2 * 2));
                                                frequencys3.setCellValue(frequencys_value_D2.doubleValue());
                                                frequencys3.setCellStyle(cFormat2_2);
                                                XSSFCell totalFrequencys3 = row0_5count.createCell(4 + (c2 * 2));
                                                totalFrequencys3.setCellValue(totalFrequencys_value_D4.doubleValue());
                                                totalFrequencys3.setCellStyle(cFormat2_2);
                                                data_dian = data_dian + frequencys_value_D2 + Const.STRING_SEPERATOR;
                                                c2++;
                                            }
                                        }
                                        if (c2 == TotalClassStr1.length - 1) {
                                            XSSFCell frequencys4 = row0_5count.createCell(3 + (c2 * 2));
                                            frequencys4.setCellValue("");
                                            frequencys4.setCellStyle(cFormat2_2);
                                            XSSFCell totalFrequencys4 = row0_5count.createCell(4 + (c2 * 2));
                                            totalFrequencys4.setCellValue("");
                                            totalFrequencys4.setCellStyle(cFormat2_2);
                                        }
                                    }
                                    cNameStrs = classNameStr2.split(Const.STRING_SEPERATOR);
                                    if (j2 == duanCount2 - 1) {
                                        String[] columnKeys = paragraph.split(Const.WHITE_CHAR);
                                        Float.valueOf(0.0f);
                                        if (columnKeys.length <= 1) {
                                            cs2 = columnKeys.length;
                                            cc2 = Float.valueOf(columnKeys.length);
                                        } else if (columnKeys.length < 3) {
                                            cs2 = columnKeys.length;
                                            cc2 = Float.valueOf(columnKeys.length - 1.0f);
                                        } else {
                                            cs2 = columnKeys.length;
                                            cc2 = Float.valueOf(Float.valueOf(columnKeys.length).floatValue() / Float.valueOf(3.0f).floatValue());
                                        }
                                        int startRowIndex = Convert.toInt(Float.valueOf(5 + (count - columnKeys.length) + cc2.floatValue())).intValue();
                                        int endRowIndex = startRowIndex + cs2;
                                        if (null == this.showAnalyiseImage || !this.showAnalyiseImage.equals("1")) {
                                            XSSFRow row0_5countCc = sheet.getRow(startRowIndex);
                                            if (row0_5countCc == null) {
                                                row0_5countCc = sheet.createRow(startRowIndex);
                                            }
                                            XSSFCell image = row0_5countCc.createCell(0);
                                            image.setCellValue("");
                                            image.setCellStyle(cFormat2);
                                        } else {
                                            String[] rowKeys = {"T7line"};
                                            File imgFile = getSubChartImgFile_knowScoreR(userNum, String.valueOf(obj2[0]), rowKeys[0], cNameStrs, columnKeys, data_dian, imgRoot);
                                            byte[] imageBytes = convertToByteArray(imgFile);
                                            XSSFClientAnchor anchor = new XSSFClientAnchor(0, 0, 0, 0, 0, startRowIndex, 1, endRowIndex);
                                            anchor.setAnchorType(ClientAnchor.AnchorType.MOVE_AND_RESIZE);
                                            patriarch.createPicture(anchor, wwBook.addPicture(imageBytes, 6));
                                        }
                                    }
                                }
                            } else {
                                for (int j3 = 0; j3 < duanCount2; j3++) {
                                    String classNameStr3 = "";
                                    count++;
                                    Object[] obj3 = null;
                                    int c3 = 0;
                                    XSSFRow row0_5count2 = sheet.getRow(5 + count);
                                    if (row0_5count2 == null) {
                                        row0_5count2 = sheet.createRow(5 + count);
                                    }
                                    for (int d2 = 0; d2 < claCount2; d2++) {
                                        obj3 = (Object[]) ((List) knoData2.get(d2)).get(0);
                                        classNameStr3 = classNameStr3 + obj3[5] + Const.STRING_SEPERATOR;
                                        if (i2 == 0 && j3 == 0) {
                                            XSSFCell className_title2 = row0_2.createCell(3 + (c3 * 2));
                                            className_title2.setCellValue(obj3[5] + "");
                                            className_title2.setCellStyle(cFormat1);
                                            CellRangeAddress cellRangeAddress22 = new CellRangeAddress(2, 2, 3 + (c3 * 2), 4 + (c3 * 2));
                                            sheet.addMergedRegion(cellRangeAddress22);
                                            RegionUtil.setBorderBottom(BorderStyle.THIN, cellRangeAddress22, sheet);
                                            RegionUtil.setBorderLeft(BorderStyle.THIN, cellRangeAddress22, sheet);
                                            RegionUtil.setBorderRight(BorderStyle.THIN, cellRangeAddress22, sheet);
                                            RegionUtil.setBorderTop(BorderStyle.THIN, cellRangeAddress22, sheet);
                                            XSSFCell teacher2 = row0_3.createCell(3 + (c3 * 2));
                                            teacher2.setCellValue(obj3[12] + "");
                                            teacher2.setCellStyle(cFormat1);
                                            CellRangeAddress cellRangeAddress32 = new CellRangeAddress(3, 3, 3 + (c3 * 2), 4 + (c3 * 2));
                                            sheet.addMergedRegion(cellRangeAddress32);
                                            RegionUtil.setBorderBottom(BorderStyle.THIN, cellRangeAddress32, sheet);
                                            RegionUtil.setBorderLeft(BorderStyle.THIN, cellRangeAddress32, sheet);
                                            RegionUtil.setBorderRight(BorderStyle.THIN, cellRangeAddress32, sheet);
                                            RegionUtil.setBorderTop(BorderStyle.THIN, cellRangeAddress32, sheet);
                                            XSSFCell courseTeacher2 = row0_4.createCell(3 + (c3 * 2));
                                            courseTeacher2.setCellValue(obj3[11] + "");
                                            courseTeacher2.setCellStyle(cFormat1);
                                            CellRangeAddress cellRangeAddress42 = new CellRangeAddress(4, 4, 3 + (c3 * 2), 4 + (c3 * 2));
                                            sheet.addMergedRegion(cellRangeAddress42);
                                            RegionUtil.setBorderBottom(BorderStyle.THIN, cellRangeAddress42, sheet);
                                            RegionUtil.setBorderLeft(BorderStyle.THIN, cellRangeAddress42, sheet);
                                            RegionUtil.setBorderRight(BorderStyle.THIN, cellRangeAddress42, sheet);
                                            RegionUtil.setBorderTop(BorderStyle.THIN, cellRangeAddress42, sheet);
                                            XSSFCell frequency2 = row0_5.createCell(3 + (c3 * 2));
                                            frequency2.setCellValue("频率");
                                            frequency2.setCellStyle(cFormat1);
                                            XSSFCell totalFrequency2 = row0_5.createCell(4 + (c3 * 2));
                                            totalFrequency2.setCellValue("累计频率");
                                            totalFrequency2.setCellStyle(cFormat1);
                                            sheet.setColumnWidth(3 + (c3 * 2), 3120);
                                            sheet.setColumnWidth(4 + (c3 * 2), 3120);
                                        }
                                        String fenduan2 = ((Object[]) ((List) knoData2.get(0)).get(j3))[7] + "";
                                        String newStr2 = fenduan2.replaceAll(Const.WHITE_CHAR, "]");
                                        if (d2 == 0) {
                                            paragraph = paragraph + newStr2 + Const.WHITE_CHAR;
                                            XSSFCell scoreSections2 = row0_5count2.createCell(2);
                                            scoreSections2.setCellValue(newStr2);
                                            scoreSections2.setCellStyle(cFormat3);
                                            paragraph.split(Const.WHITE_CHAR);
                                        }
                                        if (d2 == 0 && j3 == 0) {
                                            XSSFCell knoNames2 = row0_5count2.createCell(1);
                                            knoNames2.setCellValue(obj3[1] + "");
                                            knoNames2.setCellStyle(cFormat3);
                                            CellRangeAddress cellRangeAddress5_02 = new CellRangeAddress(5 + count, 4 + count + duanCount2, 0, 0);
                                            sheet.addMergedRegion(cellRangeAddress5_02);
                                            RegionUtil.setBorderBottom(BorderStyle.THIN, cellRangeAddress5_02, sheet);
                                            RegionUtil.setBorderLeft(BorderStyle.THIN, cellRangeAddress5_02, sheet);
                                            RegionUtil.setBorderRight(BorderStyle.THIN, cellRangeAddress5_02, sheet);
                                            RegionUtil.setBorderTop(BorderStyle.THIN, cellRangeAddress5_02, sheet);
                                            CellRangeAddress cellRangeAddress5_12 = new CellRangeAddress(5 + count, 4 + count + duanCount2, 1, 1);
                                            sheet.addMergedRegion(cellRangeAddress5_12);
                                            RegionUtil.setBorderBottom(BorderStyle.THIN, cellRangeAddress5_12, sheet);
                                            RegionUtil.setBorderLeft(BorderStyle.THIN, cellRangeAddress5_12, sheet);
                                            RegionUtil.setBorderRight(BorderStyle.THIN, cellRangeAddress5_12, sheet);
                                            RegionUtil.setBorderTop(BorderStyle.THIN, cellRangeAddress5_12, sheet);
                                            if (duanCount2 < 3) {
                                                for (int cs5 = 1; cs5 < duanCount2 + 1; cs5++) {
                                                    XSSFRow row0_4countCs3 = sheet.getRow(4 + count + cs5);
                                                    if (row0_4countCs3 == null) {
                                                        row0_4countCs3 = sheet.createRow(4 + count + cs5);
                                                    }
                                                    row0_4countCs3.setHeight((short) 1350);
                                                }
                                            } else {
                                                for (int cs6 = 1; cs6 < duanCount2 + 1; cs6++) {
                                                    XSSFRow row0_4countCs4 = sheet.getRow(4 + count + cs6);
                                                    if (row0_4countCs4 == null) {
                                                        row0_4countCs4 = sheet.createRow(4 + count + cs6);
                                                    }
                                                    row0_4countCs4.setHeight((short) 900);
                                                }
                                            }
                                        }
                                        if (TotalClassStr1[c3].equals(obj3[5])) {
                                            String frequencys_value3 = ((Object[]) ((List) knoData2.get(d2)).get(j3))[10] + "";
                                            Double frequencys_value_D3 = Double.valueOf(Double.parseDouble(df3.format(Double.valueOf(frequencys_value3))));
                                            String totalFrequencys_value3 = ((Object[]) ((List) knoData2.get(d2)).get(j3))[9] + "";
                                            Double totalFrequencys_value_D5 = Double.valueOf(totalFrequencys_value3);
                                            Double totalFrequencys_value_D6 = Double.valueOf(Double.parseDouble(df3.format(totalFrequencys_value_D5)));
                                            XSSFCell frequencys5 = row0_5count2.createCell(3 + (c3 * 2));
                                            frequencys5.setCellValue(frequencys_value_D3.doubleValue());
                                            frequencys5.setCellStyle(cFormat3_2);
                                            XSSFCell totalFrequencys5 = row0_5count2.createCell(4 + (c3 * 2));
                                            totalFrequencys5.setCellValue(totalFrequencys_value_D6.doubleValue());
                                            totalFrequencys5.setCellStyle(cFormat3_2);
                                            data_dian = data_dian + frequencys_value_D3 + Const.STRING_SEPERATOR;
                                            c3++;
                                        } else {
                                            while (!TotalClassStr1[c3].equals(obj3[5])) {
                                                XSSFCell frequencys6 = row0_5count2.createCell(3 + (c3 * 2));
                                                frequencys6.setCellValue("");
                                                frequencys6.setCellStyle(cFormat3_2);
                                                XSSFCell totalFrequencys6 = row0_5count2.createCell(4 + (c3 * 2));
                                                totalFrequencys6.setCellValue("");
                                                totalFrequencys6.setCellStyle(cFormat3_2);
                                                c3++;
                                                if (c3 == TotalClassStr1.length - 1) {
                                                    break;
                                                }
                                            }
                                            if (TotalClassStr1[c3].equals(obj3[5])) {
                                                String frequencys_value4 = ((Object[]) ((List) knoData2.get(d2)).get(j3))[10] + "";
                                                Double frequencys_value_D4 = Double.valueOf(Double.parseDouble(df3.format(Double.valueOf(frequencys_value4))));
                                                String totalFrequencys_value4 = ((Object[]) ((List) knoData2.get(d2)).get(j3))[9] + "";
                                                Double totalFrequencys_value_D7 = Double.valueOf(totalFrequencys_value4);
                                                Double totalFrequencys_value_D8 = Double.valueOf(Double.parseDouble(df3.format(totalFrequencys_value_D7)));
                                                XSSFCell frequencys7 = row0_5count2.createCell(3 + (c3 * 2));
                                                frequencys7.setCellValue(frequencys_value_D4.doubleValue());
                                                frequencys7.setCellStyle(cFormat3_2);
                                                XSSFCell totalFrequencys7 = row0_5count2.createCell(4 + (c3 * 2));
                                                totalFrequencys7.setCellValue(totalFrequencys_value_D8.doubleValue());
                                                totalFrequencys7.setCellStyle(cFormat3_2);
                                                data_dian = data_dian + frequencys_value_D4 + Const.STRING_SEPERATOR;
                                                c3++;
                                            }
                                        }
                                        if (c3 == TotalClassStr1.length - 1) {
                                            XSSFCell frequencys8 = row0_5count2.createCell(3 + (c3 * 2));
                                            frequencys8.setCellValue("");
                                            frequencys8.setCellStyle(cFormat3_2);
                                            XSSFCell totalFrequencys8 = row0_5count2.createCell(4 + (c3 * 2));
                                            totalFrequencys8.setCellValue("");
                                            totalFrequencys8.setCellStyle(cFormat3_2);
                                        }
                                    }
                                    cNameStrs = classNameStr3.split(Const.STRING_SEPERATOR);
                                    if (j3 == duanCount2 - 1) {
                                        String[] columnKeys2 = paragraph.split(Const.WHITE_CHAR);
                                        Float.valueOf(0.0f);
                                        if (columnKeys2.length <= 1) {
                                            cs = columnKeys2.length;
                                            cc = Float.valueOf(columnKeys2.length);
                                        } else if (columnKeys2.length < 3) {
                                            cs = columnKeys2.length;
                                            cc = Float.valueOf(columnKeys2.length - 1.0f);
                                        } else {
                                            cs = columnKeys2.length;
                                            cc = Float.valueOf(Float.valueOf(columnKeys2.length).floatValue() / Float.valueOf(3.0f).floatValue());
                                        }
                                        int startRowIndex2 = Convert.toInt(Float.valueOf(5 + (count - columnKeys2.length) + cc.floatValue())).intValue();
                                        int endRowIndex2 = startRowIndex2 + cs;
                                        if (null == this.showAnalyiseImage || !this.showAnalyiseImage.equals("1")) {
                                            XSSFRow row0_5countCc2 = sheet.getRow(startRowIndex2);
                                            if (row0_5countCc2 == null) {
                                                row0_5countCc2 = sheet.createRow(startRowIndex2);
                                            }
                                            XSSFCell image2 = row0_5countCc2.createCell(0);
                                            image2.setCellValue("");
                                            image2.setCellStyle(cFormat3);
                                        } else {
                                            String[] rowKeys2 = {"T7line"};
                                            File imgFile2 = getSubChartImgFile_knowScoreR(userNum, String.valueOf(obj3[0]), rowKeys2[0], cNameStrs, columnKeys2, data_dian, imgRoot);
                                            byte[] imageBytes2 = convertToByteArray(imgFile2);
                                            XSSFClientAnchor anchor2 = new XSSFClientAnchor(0, 0, 0, 0, 0, startRowIndex2, 1, endRowIndex2);
                                            anchor2.setAnchorType(ClientAnchor.AnchorType.MOVE_AND_RESIZE);
                                            patriarch.createPicture(anchor2, wwBook.addPicture(imageBytes2, 6));
                                        }
                                    }
                                }
                            }
                        }
                        sheet.addMergedRegion(new CellRangeAddress(0, 0, 0, (cNameStrs.length * 2) + 2));
                        sheet.addMergedRegion(new CellRangeAddress(1, 1, 0, (cNameStrs.length * 2) + 2));
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    FileOutputStream fileOut = new FileOutputStream(excelFile);
                    wwBook.write(fileOut);
                    fileOut.close();
                    if (wwBook != null) {
                        try {
                            wwBook.close();
                            if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                                HttpServletResponse response = ServletActionContext.getResponse();
                                response.reset();
                                ServletOutputStream outputStream = response.getOutputStream();
                                String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                String loadFileName2 = loadFileName.replace("+", " ");
                                response.setContentType("Content-type: applicationnd.ms-excel");
                                response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xlsx");
                                response.setHeader("Content-length", String.valueOf(excelFile.length()));
                                byte[] tempByte = new byte[1024];
                                FileInputStream in = new FileInputStream(excelFile);
                                while (true) {
                                    int n = in.read(tempByte);
                                    if (n == -1) {
                                        break;
                                    }
                                    try {
                                        outputStream.write(tempByte, 0, n);
                                    } catch (Exception e2) {
                                        this.log.error("保存未成功", e2);
                                    }
                                }
                                outputStream.flush();
                                outputStream.close();
                                in.close();
                            }
                        } catch (Exception e3) {
                            e3.printStackTrace();
                        }
                    }
                } catch (Throwable th) {
                    if (wwBook != null) {
                        try {
                            wwBook.close();
                            if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                                HttpServletResponse response2 = ServletActionContext.getResponse();
                                response2.reset();
                                ServletOutputStream outputStream2 = response2.getOutputStream();
                                String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                String loadFileName4 = loadFileName3.replace("+", " ");
                                response2.setContentType("Content-type: applicationnd.ms-excel");
                                response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xlsx");
                                response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                                byte[] tempByte2 = new byte[1024];
                                FileInputStream in2 = new FileInputStream(excelFile);
                                while (true) {
                                    int n2 = in2.read(tempByte2);
                                    if (n2 == -1) {
                                        break;
                                    }
                                    try {
                                        outputStream2.write(tempByte2, 0, n2);
                                    } catch (Exception e4) {
                                        this.log.error("保存未成功", e4);
                                    }
                                }
                                outputStream2.flush();
                                outputStream2.close();
                                in2.close();
                            }
                        } catch (Exception e5) {
                            e5.printStackTrace();
                            throw th;
                        }
                    }
                    throw th;
                }
            } catch (Exception e6) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response3 = ServletActionContext.getResponse();
                            response3.reset();
                            ServletOutputStream outputStream3 = response3.getOutputStream();
                            String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName6 = loadFileName5.replace("+", " ");
                            response3.setContentType("Content-type: applicationnd.ms-excel");
                            response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xlsx");
                            response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte3 = new byte[1024];
                            FileInputStream in3 = new FileInputStream(excelFile);
                            while (true) {
                                int n3 = in3.read(tempByte3);
                                if (n3 == -1) {
                                    break;
                                }
                                try {
                                    outputStream3.write(tempByte3, 0, n3);
                                } catch (Exception e7) {
                                    this.log.error("保存未成功", e7);
                                }
                            }
                            outputStream3.flush();
                            outputStream3.close();
                            in3.close();
                        }
                    } catch (Exception e8) {
                        e8.printStackTrace();
                    }
                }
            }
        } catch (Exception e9) {
            e9.printStackTrace();
        }
        return null;
    }

    public File getSubChartImgFile_knowScoreR(String userId, String knowNum, String tuName, String[] cNameStrs, String[] paragraph, String data_dian, String dirPath) {
        subjectLineImage_knowScoreR(userId, knowNum, cNameStrs, paragraph, data_dian);
        File file = new File(dirPath + File.separator + "tmpLinePng" + File.separator + tuName + userId + knowNum + ".png");
        return file;
    }

    public void subjectLineImage_knowScoreR(String userId, String knowNum, String[] rowKeys, String[] paragraph, String data_dian) {
        for (int i = 0; i < rowKeys.length; i++) {
            rowKeys[i] = rowKeys[i];
        }
        String[] tupianName = {"T7line"};
        String[] sp_lit = data_dian.split(Const.STRING_SEPERATOR);
        double[][] data = new double[rowKeys.length][paragraph.length];
        Double.valueOf(0.0d);
        Double.valueOf(0.0d);
        List list_data = new ArrayList();
        for (int i2 = 0; i2 < rowKeys.length; i2++) {
            for (int x = 0; x < paragraph.length; x++) {
                data[i2][x] = Double.parseDouble(sp_lit[i2 + (x * rowKeys.length)]);
                list_data.add(Double.valueOf(Double.parseDouble(sp_lit[i2 + (x * rowKeys.length)])));
            }
        }
        Double maxDesc = (Double) Collections.max(list_data);
        Double minDesc = (Double) Collections.min(list_data);
        Double count_unit = Double.valueOf((maxDesc.doubleValue() - minDesc.doubleValue()) / 5.0d);
        try {
            HttpServletResponse response = ServletActionContext.getResponse();
            response.reset();
            response.setContentType("image/jpeg");
            JFreeChart chart = this.lc.getLineChar(data, rowKeys, paragraph, "", "", "", "#0.0", count_unit, Integer.valueOf(rowKeys.length), "N", "##.#");
            getChartImageFolder(chart, "tmpLinePng", Const.height_400, 300, tupianName[0] + userId + knowNum);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String abltyScoreRank_exportMethod(String examNum, String gradeNum, String schoolNum, String subjectNum, String classNum, String studentId, String studentType, String type, String source, String step, String sNum, String c_exam, String rpt_name, String isMoreSchool, String rptTitle, String isHistory, String isSaveWrite, String dirPath, String uri, String userNum, String schName, String gradeName, String className, String subjectName, String imgRoot, String agent) {
        String tt1;
        String tt2;
        String schNum;
        int cs;
        Float cc;
        int cs2;
        Float cc2;
        String rptTitle2 = this.sp.getHeaderStr(examNum, subjectNum, gradeNum, schoolNum, classNum, studentId, studentType, true, true, true, true, false, true, true, true, false, true, true, true, true, true, false, "0", "0");
        List list = this.reportService.getAblityScoreRank(examNum, gradeNum, schoolNum, subjectNum, classNum, studentType, type, source, step, "0");
        String folderPath = "ExportFolder/reportExcel" + userNum;
        String str = "reportExcel" + userNum;
        String str2 = "reportExcel" + userNum;
        String excelName = (null == gradeName || "".equals(gradeName)) ? rpt_name + "_" + gradeNum : rpt_name + "_" + gradeName;
        if (null != classNum && !"".equals(classNum) && !classNum.contains(Const.STRING_SEPERATOR)) {
            excelName = (null == className || "".equals(className)) ? excelName + "_" + classNum : excelName + "_" + className;
        }
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFileXLSX(excelName, dirPath, folderPath);
        try {
            XSSFWorkbook wwBook = new XSSFWorkbook();
            XSSFDataFormat createDataFormat = wwBook.createDataFormat();
            XSSFFont font_bold = wwBook.createFont();
            font_bold.setFontHeightInPoints((short) 15);
            font_bold.setFontName("Arial");
            font_bold.setBold(true);
            XSSFCellStyle biaotis1 = wwBook.createCellStyle();
            biaotis1.setAlignment(HorizontalAlignment.LEFT);
            biaotis1.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            biaotis1.setFont(font_bold);
            XSSFFont font = wwBook.createFont();
            font.setFontHeightInPoints((short) 10);
            font.setFontName("Arial");
            XSSFCellStyle title = wwBook.createCellStyle();
            title.setAlignment(HorizontalAlignment.LEFT);
            title.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            title.setFont(font);
            title.setWrapText(true);
            XSSFCellStyle cFormat1 = wwBook.createCellStyle();
            cFormat1.setAlignment(HorizontalAlignment.CENTER);
            cFormat1.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cFormat1.setFont(font);
            cFormat1.setWrapText(true);
            cFormat1.setFillForegroundColor(Const.fillForeground_color);
            cFormat1.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cFormat1.setBorderTop(BorderStyle.THIN);
            cFormat1.setBorderRight(BorderStyle.THIN);
            cFormat1.setBorderBottom(BorderStyle.THIN);
            cFormat1.setBorderLeft(BorderStyle.THIN);
            XSSFCellStyle cFormat2 = wwBook.createCellStyle();
            cFormat2.setAlignment(HorizontalAlignment.CENTER);
            cFormat2.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cFormat2.setFont(font);
            cFormat2.setWrapText(true);
            cFormat2.setFillForegroundColor(Const.fillForeground_color2);
            cFormat2.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cFormat2.setBorderTop(BorderStyle.THIN);
            cFormat2.setBorderRight(BorderStyle.THIN);
            cFormat2.setBorderBottom(BorderStyle.THIN);
            cFormat2.setBorderLeft(BorderStyle.THIN);
            XSSFCellStyle cFormat2_2 = wwBook.createCellStyle();
            cFormat2_2.setAlignment(HorizontalAlignment.CENTER);
            cFormat2_2.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cFormat2_2.setFont(font);
            cFormat2_2.setWrapText(true);
            cFormat2_2.setFillForegroundColor(Const.fillForeground_color2);
            cFormat2_2.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cFormat2_2.setBorderTop(BorderStyle.THIN);
            cFormat2_2.setBorderRight(BorderStyle.THIN);
            cFormat2_2.setBorderBottom(BorderStyle.THIN);
            cFormat2_2.setBorderLeft(BorderStyle.THIN);
            cFormat2_2.setDataFormat(createDataFormat.getFormat("0.00"));
            XSSFCellStyle cFormat3 = wwBook.createCellStyle();
            cFormat3.setAlignment(HorizontalAlignment.CENTER);
            cFormat3.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cFormat3.setFont(font);
            cFormat3.setWrapText(true);
            cFormat3.setFillForegroundColor(Const.fillForeground_color3);
            cFormat3.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cFormat3.setBorderTop(BorderStyle.THIN);
            cFormat3.setBorderRight(BorderStyle.THIN);
            cFormat3.setBorderBottom(BorderStyle.THIN);
            cFormat3.setBorderLeft(BorderStyle.THIN);
            XSSFCellStyle cFormat3_2 = wwBook.createCellStyle();
            cFormat3_2.setAlignment(HorizontalAlignment.CENTER);
            cFormat3_2.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cFormat3_2.setFont(font);
            cFormat3_2.setWrapText(true);
            cFormat3_2.setFillForegroundColor(Const.fillForeground_color3);
            cFormat3_2.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cFormat3_2.setBorderTop(BorderStyle.THIN);
            cFormat3_2.setBorderRight(BorderStyle.THIN);
            cFormat3_2.setBorderBottom(BorderStyle.THIN);
            cFormat3_2.setBorderLeft(BorderStyle.THIN);
            cFormat3_2.setDataFormat(createDataFormat.getFormat("0.00"));
            try {
                XSSFSheet sheet = wwBook.createSheet();
                wwBook.setSheetName(0, rpt_name);
                XSSFDrawing patriarch = sheet.createDrawingPatriarch();
                sheet.setDisplayGridlines(false);
                try {
                    XSSFRow row0_0 = sheet.createRow(0);
                    XSSFCell biaotou = row0_0.createCell(0);
                    biaotou.setCellValue(rpt_name);
                    biaotou.setCellStyle(biaotis1);
                    DecimalFormat df3 = new DecimalFormat("0.00");
                    df3.setRoundingMode(RoundingMode.HALF_UP);
                    XSSFRow row0_1 = sheet.createRow(1);
                    row0_1.setHeight((short) 500);
                    XSSFCell xinxi = row0_1.createCell(0);
                    xinxi.setCellValue(rptTitle2);
                    xinxi.setCellStyle(title);
                    XSSFRow row0_2 = sheet.createRow(2);
                    XSSFRow row0_3 = sheet.createRow(3);
                    XSSFRow row0_4 = sheet.createRow(4);
                    XSSFRow row0_5 = sheet.createRow(5);
                    XSSFCell knowledge = row0_2.createCell(0);
                    knowledge.setCellValue("能力点得分频率分布图");
                    knowledge.setCellStyle(cFormat1);
                    CellRangeAddress cellRangeAddress2_0 = new CellRangeAddress(2, 5, 0, 0);
                    sheet.addMergedRegion(cellRangeAddress2_0);
                    RegionUtil.setBorderBottom(BorderStyle.THIN, cellRangeAddress2_0, sheet);
                    RegionUtil.setBorderLeft(BorderStyle.THIN, cellRangeAddress2_0, sheet);
                    RegionUtil.setBorderRight(BorderStyle.THIN, cellRangeAddress2_0, sheet);
                    RegionUtil.setBorderTop(BorderStyle.THIN, cellRangeAddress2_0, sheet);
                    sheet.setColumnWidth(0, 13000);
                    XSSFCell knoName = row0_2.createCell(1);
                    knoName.setCellValue("能力点名称");
                    knoName.setCellStyle(cFormat1);
                    CellRangeAddress cellRangeAddress2_1 = new CellRangeAddress(2, 5, 1, 1);
                    sheet.addMergedRegion(cellRangeAddress2_1);
                    RegionUtil.setBorderBottom(BorderStyle.THIN, cellRangeAddress2_1, sheet);
                    RegionUtil.setBorderLeft(BorderStyle.THIN, cellRangeAddress2_1, sheet);
                    RegionUtil.setBorderRight(BorderStyle.THIN, cellRangeAddress2_1, sheet);
                    RegionUtil.setBorderTop(BorderStyle.THIN, cellRangeAddress2_1, sheet);
                    sheet.setColumnWidth(1, 5200);
                    if (schoolNum.indexOf(Const.STRING_SEPERATOR) != -1) {
                        tt1 = "年级主任";
                        tt2 = "教研组长";
                        schNum = "学校";
                    } else {
                        tt1 = "班主任";
                        tt2 = "学科教师";
                        schNum = "班级";
                    }
                    XSSFCell classNameTitle = row0_2.createCell(2);
                    classNameTitle.setCellValue(schNum);
                    classNameTitle.setCellStyle(cFormat1);
                    XSSFCell teacherTitle = row0_3.createCell(2);
                    teacherTitle.setCellValue(tt1);
                    teacherTitle.setCellStyle(cFormat1);
                    XSSFCell subjectTeacherTitle = row0_4.createCell(2);
                    subjectTeacherTitle.setCellValue(tt2);
                    subjectTeacherTitle.setCellStyle(cFormat1);
                    XSSFCell scoreSection = row0_5.createCell(2);
                    scoreSection.setCellValue("分数段");
                    scoreSection.setCellStyle(cFormat1);
                    sheet.setColumnWidth(2, 3900);
                    int count = 0;
                    String[] cNameStrs = null;
                    String TotalClassStr = "";
                    for (int i = 0; i < list.size(); i++) {
                        new ArrayList();
                        new ArrayList();
                        List knoData = (List) list.get(i);
                        int claCount = knoData.size();
                        List duanData = (List) knoData.get(0);
                        int duanCount = duanData.size();
                        for (int j = 0; j < duanCount; j++) {
                            for (int c = 0; c < claCount; c++) {
                                Object[] obj = (Object[]) ((List) knoData.get(c)).get(0);
                                String classNameStr = obj[5] + Const.STRING_SEPERATOR;
                                if (TotalClassStr.indexOf(classNameStr) == -1) {
                                    TotalClassStr = TotalClassStr + classNameStr;
                                }
                            }
                        }
                    }
                    String[] TotalClassStr1 = TotalClassStr.split(Const.STRING_SEPERATOR);
                    for (int i2 = 0; i2 < list.size(); i2++) {
                        new ArrayList();
                        new ArrayList();
                        List knoData2 = (List) list.get(i2);
                        int claCount2 = knoData2.size();
                        List duanData2 = (List) knoData2.get(0);
                        int duanCount2 = duanData2.size();
                        String data_dian = "";
                        String paragraph = "";
                        if (i2 % 2 == 0) {
                            for (int j2 = 0; j2 < duanCount2; j2++) {
                                String classNameStr2 = "";
                                count++;
                                Object[] obj2 = null;
                                int c2 = 0;
                                XSSFRow row0_5count = sheet.getRow(5 + count);
                                if (row0_5count == null) {
                                    row0_5count = sheet.createRow(5 + count);
                                }
                                for (int d = 0; d < claCount2; d++) {
                                    obj2 = (Object[]) ((List) knoData2.get(d)).get(0);
                                    classNameStr2 = classNameStr2 + obj2[5] + Const.STRING_SEPERATOR;
                                    if (i2 == 0 && j2 == 0) {
                                        XSSFCell className_title = row0_2.createCell(3 + (c2 * 2));
                                        className_title.setCellValue(obj2[5] + "");
                                        className_title.setCellStyle(cFormat1);
                                        CellRangeAddress cellRangeAddress2 = new CellRangeAddress(2, 2, 3 + (c2 * 2), 4 + (c2 * 2));
                                        sheet.addMergedRegion(cellRangeAddress2);
                                        RegionUtil.setBorderBottom(BorderStyle.THIN, cellRangeAddress2, sheet);
                                        RegionUtil.setBorderLeft(BorderStyle.THIN, cellRangeAddress2, sheet);
                                        RegionUtil.setBorderRight(BorderStyle.THIN, cellRangeAddress2, sheet);
                                        RegionUtil.setBorderTop(BorderStyle.THIN, cellRangeAddress2, sheet);
                                        XSSFCell teacher = row0_3.createCell(3 + (c2 * 2));
                                        teacher.setCellValue(obj2[12] + "");
                                        teacher.setCellStyle(cFormat1);
                                        CellRangeAddress cellRangeAddress3 = new CellRangeAddress(3, 3, 3 + (c2 * 2), 4 + (c2 * 2));
                                        sheet.addMergedRegion(cellRangeAddress3);
                                        RegionUtil.setBorderBottom(BorderStyle.THIN, cellRangeAddress3, sheet);
                                        RegionUtil.setBorderLeft(BorderStyle.THIN, cellRangeAddress3, sheet);
                                        RegionUtil.setBorderRight(BorderStyle.THIN, cellRangeAddress3, sheet);
                                        RegionUtil.setBorderTop(BorderStyle.THIN, cellRangeAddress3, sheet);
                                        XSSFCell courseTeacher = row0_4.createCell(3 + (c2 * 2));
                                        courseTeacher.setCellValue(obj2[11] + "");
                                        courseTeacher.setCellStyle(cFormat1);
                                        CellRangeAddress cellRangeAddress4 = new CellRangeAddress(4, 4, 3 + (c2 * 2), 4 + (c2 * 2));
                                        sheet.addMergedRegion(cellRangeAddress4);
                                        RegionUtil.setBorderBottom(BorderStyle.THIN, cellRangeAddress4, sheet);
                                        RegionUtil.setBorderLeft(BorderStyle.THIN, cellRangeAddress4, sheet);
                                        RegionUtil.setBorderRight(BorderStyle.THIN, cellRangeAddress4, sheet);
                                        RegionUtil.setBorderTop(BorderStyle.THIN, cellRangeAddress4, sheet);
                                        XSSFCell frequency = row0_5.createCell(3 + (c2 * 2));
                                        frequency.setCellValue("频率");
                                        frequency.setCellStyle(cFormat1);
                                        XSSFCell totalFrequency = row0_5.createCell(4 + (c2 * 2));
                                        totalFrequency.setCellValue("累计频率");
                                        totalFrequency.setCellStyle(cFormat1);
                                        sheet.setColumnWidth(3 + (c2 * 2), 3120);
                                        sheet.setColumnWidth(4 + (c2 * 2), 3120);
                                    }
                                    String fenduan = ((Object[]) ((List) knoData2.get(0)).get(j2))[7] + "";
                                    String newStr = fenduan.replaceAll(Const.WHITE_CHAR, "]");
                                    if (d == 0) {
                                        paragraph = paragraph + newStr + Const.WHITE_CHAR;
                                        XSSFCell scoreSections = row0_5count.createCell(2);
                                        scoreSections.setCellValue(newStr);
                                        scoreSections.setCellStyle(cFormat2);
                                        paragraph.split(Const.WHITE_CHAR);
                                    }
                                    if (d == 0 && j2 == 0) {
                                        XSSFCell knoNames = row0_5count.createCell(1);
                                        knoNames.setCellValue(obj2[1] + "");
                                        knoNames.setCellStyle(cFormat2);
                                        CellRangeAddress cellRangeAddress5_0 = new CellRangeAddress(5 + count, 4 + count + duanCount2, 0, 0);
                                        sheet.addMergedRegion(cellRangeAddress5_0);
                                        RegionUtil.setBorderBottom(BorderStyle.THIN, cellRangeAddress5_0, sheet);
                                        RegionUtil.setBorderLeft(BorderStyle.THIN, cellRangeAddress5_0, sheet);
                                        RegionUtil.setBorderRight(BorderStyle.THIN, cellRangeAddress5_0, sheet);
                                        RegionUtil.setBorderTop(BorderStyle.THIN, cellRangeAddress5_0, sheet);
                                        CellRangeAddress cellRangeAddress5_1 = new CellRangeAddress(5 + count, 4 + count + duanCount2, 1, 1);
                                        sheet.addMergedRegion(cellRangeAddress5_1);
                                        RegionUtil.setBorderBottom(BorderStyle.THIN, cellRangeAddress5_1, sheet);
                                        RegionUtil.setBorderLeft(BorderStyle.THIN, cellRangeAddress5_1, sheet);
                                        RegionUtil.setBorderRight(BorderStyle.THIN, cellRangeAddress5_1, sheet);
                                        RegionUtil.setBorderTop(BorderStyle.THIN, cellRangeAddress5_1, sheet);
                                        if (duanCount2 < 3) {
                                            for (int cs3 = 1; cs3 < duanCount2 + 1; cs3++) {
                                                XSSFRow row0_4countCs = sheet.getRow(4 + count + cs3);
                                                if (row0_4countCs == null) {
                                                    row0_4countCs = sheet.createRow(4 + count + cs3);
                                                }
                                                row0_4countCs.setHeight((short) 1350);
                                            }
                                        } else {
                                            for (int cs4 = 1; cs4 < duanCount2 + 1; cs4++) {
                                                XSSFRow row0_4countCs2 = sheet.getRow(4 + count + cs4);
                                                if (row0_4countCs2 == null) {
                                                    row0_4countCs2 = sheet.createRow(4 + count + cs4);
                                                }
                                                row0_4countCs2.setHeight((short) 900);
                                            }
                                        }
                                    }
                                    if (TotalClassStr1[c2].equals(obj2[5])) {
                                        String frequencys_value = ((Object[]) ((List) knoData2.get(d)).get(j2))[10] + "";
                                        Double frequencys_value_D = Double.valueOf(Double.parseDouble(df3.format(Double.valueOf(frequencys_value))));
                                        String totalFrequencys_value = ((Object[]) ((List) knoData2.get(d)).get(j2))[9] + "";
                                        Double totalFrequencys_value_D = Double.valueOf(totalFrequencys_value);
                                        Double totalFrequencys_value_D2 = Double.valueOf(Double.parseDouble(df3.format(totalFrequencys_value_D)));
                                        XSSFCell frequencys = row0_5count.createCell(3 + (c2 * 2));
                                        frequencys.setCellValue(frequencys_value_D.doubleValue());
                                        frequencys.setCellStyle(cFormat2_2);
                                        XSSFCell totalFrequencys = row0_5count.createCell(4 + (c2 * 2));
                                        totalFrequencys.setCellValue(totalFrequencys_value_D2.doubleValue());
                                        totalFrequencys.setCellStyle(cFormat2_2);
                                        data_dian = data_dian + frequencys_value_D + Const.STRING_SEPERATOR;
                                        c2++;
                                    } else {
                                        while (!TotalClassStr1[c2].equals(obj2[5])) {
                                            XSSFCell frequencys2 = row0_5count.createCell(3 + (c2 * 2));
                                            frequencys2.setCellValue("");
                                            frequencys2.setCellStyle(cFormat2_2);
                                            XSSFCell totalFrequencys2 = row0_5count.createCell(4 + (c2 * 2));
                                            totalFrequencys2.setCellValue("");
                                            totalFrequencys2.setCellStyle(cFormat2_2);
                                            c2++;
                                            if (c2 == TotalClassStr1.length - 1) {
                                                break;
                                            }
                                        }
                                        if (TotalClassStr1[c2].equals(obj2[5])) {
                                            String frequencys_value2 = ((Object[]) ((List) knoData2.get(d)).get(j2))[10] + "";
                                            Double frequencys_value_D2 = Double.valueOf(Double.parseDouble(df3.format(Double.valueOf(frequencys_value2))));
                                            String totalFrequencys_value2 = ((Object[]) ((List) knoData2.get(d)).get(j2))[9] + "";
                                            Double totalFrequencys_value_D3 = Double.valueOf(totalFrequencys_value2);
                                            Double totalFrequencys_value_D4 = Double.valueOf(Double.parseDouble(df3.format(totalFrequencys_value_D3)));
                                            XSSFCell frequencys3 = row0_5count.createCell(3 + (c2 * 2));
                                            frequencys3.setCellValue(frequencys_value_D2.doubleValue());
                                            frequencys3.setCellStyle(cFormat2_2);
                                            XSSFCell totalFrequencys3 = row0_5count.createCell(4 + (c2 * 2));
                                            totalFrequencys3.setCellValue(totalFrequencys_value_D4.doubleValue());
                                            totalFrequencys3.setCellStyle(cFormat2_2);
                                            data_dian = data_dian + frequencys_value_D2 + Const.STRING_SEPERATOR;
                                            c2++;
                                        }
                                    }
                                    if (c2 == TotalClassStr1.length - 1) {
                                        XSSFCell frequencys4 = row0_5count.createCell(3 + (c2 * 2));
                                        frequencys4.setCellValue("");
                                        frequencys4.setCellStyle(cFormat2_2);
                                        XSSFCell totalFrequencys4 = row0_5count.createCell(4 + (c2 * 2));
                                        totalFrequencys4.setCellValue("");
                                        totalFrequencys4.setCellStyle(cFormat2_2);
                                    }
                                }
                                cNameStrs = classNameStr2.split(Const.STRING_SEPERATOR);
                                if (j2 == duanCount2 - 1) {
                                    String[] columnKeys = paragraph.split(Const.WHITE_CHAR);
                                    Float.valueOf(0.0f);
                                    if (columnKeys.length <= 1) {
                                        cs2 = columnKeys.length;
                                        cc2 = Float.valueOf(columnKeys.length);
                                    } else if (columnKeys.length < 3) {
                                        cs2 = columnKeys.length;
                                        cc2 = Float.valueOf(columnKeys.length - 1.0f);
                                    } else {
                                        cs2 = columnKeys.length;
                                        cc2 = Float.valueOf(Float.valueOf(columnKeys.length).floatValue() / Float.valueOf(3.0f).floatValue());
                                    }
                                    int startRowIndex = Convert.toInt(Float.valueOf(5 + (count - columnKeys.length) + cc2.floatValue())).intValue();
                                    int endRowIndex = startRowIndex + cs2;
                                    if (null == this.showAnalyiseImage || !this.showAnalyiseImage.equals("1")) {
                                        XSSFRow row0_5countCc = sheet.getRow(startRowIndex);
                                        if (row0_5countCc == null) {
                                            row0_5countCc = sheet.createRow(startRowIndex);
                                        }
                                        XSSFCell image = row0_5countCc.createCell(0);
                                        image.setCellValue("");
                                        image.setCellStyle(cFormat2);
                                    } else {
                                        String[] rowKeys = {"T9line"};
                                        File imgFile = getSubChartImgFile_abltyScoreR(userNum, String.valueOf(obj2[0]), rowKeys[0], claCount2, duanCount2, cNameStrs, columnKeys, data_dian, imgRoot);
                                        byte[] imageBytes = convertToByteArray(imgFile);
                                        XSSFClientAnchor anchor = new XSSFClientAnchor(0, 0, 0, 0, 0, startRowIndex, 1, endRowIndex);
                                        anchor.setAnchorType(ClientAnchor.AnchorType.MOVE_AND_RESIZE);
                                        patriarch.createPicture(anchor, wwBook.addPicture(imageBytes, 6));
                                    }
                                }
                            }
                        } else {
                            for (int j3 = 0; j3 < duanCount2; j3++) {
                                String classNameStr3 = "";
                                count++;
                                Object[] obj3 = null;
                                int c3 = 0;
                                XSSFRow row0_5count2 = sheet.getRow(5 + count);
                                if (row0_5count2 == null) {
                                    row0_5count2 = sheet.createRow(5 + count);
                                }
                                for (int d2 = 0; d2 < claCount2; d2++) {
                                    obj3 = (Object[]) ((List) knoData2.get(d2)).get(0);
                                    classNameStr3 = classNameStr3 + obj3[5] + Const.STRING_SEPERATOR;
                                    if (i2 == 0 && j3 == 0) {
                                        XSSFCell className_title2 = row0_2.createCell(3 + (c3 * 2));
                                        className_title2.setCellValue(obj3[5] + "");
                                        className_title2.setCellStyle(cFormat1);
                                        CellRangeAddress cellRangeAddress22 = new CellRangeAddress(2, 2, 3 + (c3 * 2), 4 + (c3 * 2));
                                        sheet.addMergedRegion(cellRangeAddress22);
                                        RegionUtil.setBorderBottom(BorderStyle.THIN, cellRangeAddress22, sheet);
                                        RegionUtil.setBorderLeft(BorderStyle.THIN, cellRangeAddress22, sheet);
                                        RegionUtil.setBorderRight(BorderStyle.THIN, cellRangeAddress22, sheet);
                                        RegionUtil.setBorderTop(BorderStyle.THIN, cellRangeAddress22, sheet);
                                        XSSFCell teacher2 = row0_3.createCell(3 + (c3 * 2));
                                        teacher2.setCellValue(obj3[12] + "");
                                        teacher2.setCellStyle(cFormat1);
                                        CellRangeAddress cellRangeAddress32 = new CellRangeAddress(3, 3, 3 + (c3 * 2), 4 + (c3 * 2));
                                        sheet.addMergedRegion(cellRangeAddress32);
                                        RegionUtil.setBorderBottom(BorderStyle.THIN, cellRangeAddress32, sheet);
                                        RegionUtil.setBorderLeft(BorderStyle.THIN, cellRangeAddress32, sheet);
                                        RegionUtil.setBorderRight(BorderStyle.THIN, cellRangeAddress32, sheet);
                                        RegionUtil.setBorderTop(BorderStyle.THIN, cellRangeAddress32, sheet);
                                        XSSFCell courseTeacher2 = row0_4.createCell(3 + (c3 * 2));
                                        courseTeacher2.setCellValue(obj3[11] + "");
                                        courseTeacher2.setCellStyle(cFormat1);
                                        CellRangeAddress cellRangeAddress42 = new CellRangeAddress(4, 4, 3 + (c3 * 2), 4 + (c3 * 2));
                                        sheet.addMergedRegion(cellRangeAddress42);
                                        RegionUtil.setBorderBottom(BorderStyle.THIN, cellRangeAddress42, sheet);
                                        RegionUtil.setBorderLeft(BorderStyle.THIN, cellRangeAddress42, sheet);
                                        RegionUtil.setBorderRight(BorderStyle.THIN, cellRangeAddress42, sheet);
                                        RegionUtil.setBorderTop(BorderStyle.THIN, cellRangeAddress42, sheet);
                                        XSSFCell frequency2 = row0_5.createCell(3 + (c3 * 2));
                                        frequency2.setCellValue("频率");
                                        frequency2.setCellStyle(cFormat1);
                                        XSSFCell totalFrequency2 = row0_5.createCell(4 + (c3 * 2));
                                        totalFrequency2.setCellValue("累计频率");
                                        totalFrequency2.setCellStyle(cFormat1);
                                        sheet.setColumnWidth(3 + (c3 * 2), 3120);
                                        sheet.setColumnWidth(4 + (c3 * 2), 3120);
                                    }
                                    String fenduan2 = ((Object[]) ((List) knoData2.get(0)).get(j3))[7] + "";
                                    String newStr2 = fenduan2.replaceAll(Const.WHITE_CHAR, "]");
                                    if (d2 == 0) {
                                        paragraph = paragraph + newStr2 + Const.WHITE_CHAR;
                                        XSSFCell scoreSections2 = row0_5count2.createCell(2);
                                        scoreSections2.setCellValue(newStr2);
                                        scoreSections2.setCellStyle(cFormat3);
                                        paragraph.split(Const.WHITE_CHAR);
                                    }
                                    if (d2 == 0 && j3 == 0) {
                                        XSSFCell knoNames2 = row0_5count2.createCell(1);
                                        knoNames2.setCellValue(obj3[1] + "");
                                        knoNames2.setCellStyle(cFormat3);
                                        CellRangeAddress cellRangeAddress5_02 = new CellRangeAddress(5 + count, 4 + count + duanCount2, 0, 0);
                                        sheet.addMergedRegion(cellRangeAddress5_02);
                                        RegionUtil.setBorderBottom(BorderStyle.THIN, cellRangeAddress5_02, sheet);
                                        RegionUtil.setBorderLeft(BorderStyle.THIN, cellRangeAddress5_02, sheet);
                                        RegionUtil.setBorderRight(BorderStyle.THIN, cellRangeAddress5_02, sheet);
                                        RegionUtil.setBorderTop(BorderStyle.THIN, cellRangeAddress5_02, sheet);
                                        CellRangeAddress cellRangeAddress5_12 = new CellRangeAddress(5 + count, 4 + count + duanCount2, 1, 1);
                                        sheet.addMergedRegion(cellRangeAddress5_12);
                                        RegionUtil.setBorderBottom(BorderStyle.THIN, cellRangeAddress5_12, sheet);
                                        RegionUtil.setBorderLeft(BorderStyle.THIN, cellRangeAddress5_12, sheet);
                                        RegionUtil.setBorderRight(BorderStyle.THIN, cellRangeAddress5_12, sheet);
                                        RegionUtil.setBorderTop(BorderStyle.THIN, cellRangeAddress5_12, sheet);
                                        if (duanCount2 < 3) {
                                            for (int cs5 = 1; cs5 < duanCount2 + 1; cs5++) {
                                                XSSFRow row0_4countCs3 = sheet.getRow(4 + count + cs5);
                                                if (row0_4countCs3 == null) {
                                                    row0_4countCs3 = sheet.createRow(4 + count + cs5);
                                                }
                                                row0_4countCs3.setHeight((short) 1350);
                                            }
                                        } else {
                                            for (int cs6 = 1; cs6 < duanCount2 + 1; cs6++) {
                                                XSSFRow row0_4countCs4 = sheet.getRow(4 + count + cs6);
                                                if (row0_4countCs4 == null) {
                                                    row0_4countCs4 = sheet.createRow(4 + count + cs6);
                                                }
                                                row0_4countCs4.setHeight((short) 900);
                                            }
                                        }
                                    }
                                    if (TotalClassStr1[c3].equals(obj3[5])) {
                                        String frequencys_value3 = ((Object[]) ((List) knoData2.get(d2)).get(j3))[10] + "";
                                        Double frequencys_value_D3 = Double.valueOf(Double.parseDouble(df3.format(Double.valueOf(frequencys_value3))));
                                        String totalFrequencys_value3 = ((Object[]) ((List) knoData2.get(d2)).get(j3))[9] + "";
                                        Double totalFrequencys_value_D5 = Double.valueOf(totalFrequencys_value3);
                                        Double totalFrequencys_value_D6 = Double.valueOf(Double.parseDouble(df3.format(totalFrequencys_value_D5)));
                                        XSSFCell frequencys5 = row0_5count2.createCell(3 + (c3 * 2));
                                        frequencys5.setCellValue(frequencys_value_D3.doubleValue());
                                        frequencys5.setCellStyle(cFormat3_2);
                                        XSSFCell totalFrequencys5 = row0_5count2.createCell(4 + (c3 * 2));
                                        totalFrequencys5.setCellValue(totalFrequencys_value_D6.doubleValue());
                                        totalFrequencys5.setCellStyle(cFormat3_2);
                                        data_dian = data_dian + frequencys_value_D3 + Const.STRING_SEPERATOR;
                                        c3++;
                                    } else {
                                        while (!TotalClassStr1[c3].equals(obj3[5])) {
                                            XSSFCell frequencys6 = row0_5count2.createCell(3 + (c3 * 2));
                                            frequencys6.setCellValue("");
                                            frequencys6.setCellStyle(cFormat3_2);
                                            XSSFCell totalFrequencys6 = row0_5count2.createCell(4 + (c3 * 2));
                                            totalFrequencys6.setCellValue("");
                                            totalFrequencys6.setCellStyle(cFormat3_2);
                                            c3++;
                                            if (c3 == TotalClassStr1.length - 1) {
                                                break;
                                            }
                                        }
                                        if (TotalClassStr1[c3].equals(obj3[5])) {
                                            String frequencys_value4 = ((Object[]) ((List) knoData2.get(d2)).get(j3))[10] + "";
                                            Double frequencys_value_D4 = Double.valueOf(Double.parseDouble(df3.format(Double.valueOf(frequencys_value4))));
                                            String totalFrequencys_value4 = ((Object[]) ((List) knoData2.get(d2)).get(j3))[9] + "";
                                            Double totalFrequencys_value_D7 = Double.valueOf(totalFrequencys_value4);
                                            Double totalFrequencys_value_D8 = Double.valueOf(Double.parseDouble(df3.format(totalFrequencys_value_D7)));
                                            XSSFCell frequencys7 = row0_5count2.createCell(3 + (c3 * 2));
                                            frequencys7.setCellValue(frequencys_value_D4.doubleValue());
                                            frequencys7.setCellStyle(cFormat3_2);
                                            XSSFCell totalFrequencys7 = row0_5count2.createCell(4 + (c3 * 2));
                                            totalFrequencys7.setCellValue(totalFrequencys_value_D8.doubleValue());
                                            totalFrequencys7.setCellStyle(cFormat3_2);
                                            data_dian = data_dian + frequencys_value_D4 + Const.STRING_SEPERATOR;
                                            c3++;
                                        }
                                    }
                                    if (c3 == TotalClassStr1.length - 1) {
                                        XSSFCell frequencys8 = row0_5count2.createCell(3 + (c3 * 2));
                                        frequencys8.setCellValue("");
                                        frequencys8.setCellStyle(cFormat3_2);
                                        XSSFCell totalFrequencys8 = row0_5count2.createCell(4 + (c3 * 2));
                                        totalFrequencys8.setCellValue("");
                                        totalFrequencys8.setCellStyle(cFormat3_2);
                                    }
                                }
                                cNameStrs = classNameStr3.split(Const.STRING_SEPERATOR);
                                if (j3 == duanCount2 - 1) {
                                    String[] columnKeys2 = paragraph.split(Const.WHITE_CHAR);
                                    Float.valueOf(0.0f);
                                    if (columnKeys2.length <= 1) {
                                        cs = columnKeys2.length;
                                        cc = Float.valueOf(columnKeys2.length);
                                    } else if (columnKeys2.length < 3) {
                                        cs = columnKeys2.length;
                                        cc = Float.valueOf(columnKeys2.length - 1.0f);
                                    } else {
                                        cs = columnKeys2.length;
                                        cc = Float.valueOf(Float.valueOf(columnKeys2.length).floatValue() / Float.valueOf(3.0f).floatValue());
                                    }
                                    int startRowIndex2 = Convert.toInt(Float.valueOf(5 + (count - columnKeys2.length) + cc.floatValue())).intValue();
                                    int endRowIndex2 = startRowIndex2 + cs;
                                    if (null == this.showAnalyiseImage || !this.showAnalyiseImage.equals("1")) {
                                        XSSFRow row0_5countCc2 = sheet.getRow(startRowIndex2);
                                        if (row0_5countCc2 == null) {
                                            row0_5countCc2 = sheet.createRow(startRowIndex2);
                                        }
                                        XSSFCell image2 = row0_5countCc2.createCell(0);
                                        image2.setCellValue("");
                                        image2.setCellStyle(cFormat3);
                                    } else {
                                        String[] rowKeys2 = {"T9line"};
                                        File imgFile2 = getSubChartImgFile_abltyScoreR(userNum, String.valueOf(obj3[0]), rowKeys2[0], claCount2, duanCount2, cNameStrs, columnKeys2, data_dian, imgRoot);
                                        byte[] imageBytes2 = convertToByteArray(imgFile2);
                                        XSSFClientAnchor anchor2 = new XSSFClientAnchor(0, 0, 0, 0, 0, startRowIndex2, 1, endRowIndex2);
                                        anchor2.setAnchorType(ClientAnchor.AnchorType.MOVE_AND_RESIZE);
                                        patriarch.createPicture(anchor2, wwBook.addPicture(imageBytes2, 6));
                                    }
                                }
                            }
                        }
                    }
                    sheet.addMergedRegion(new CellRangeAddress(0, 0, 0, (cNameStrs.length * 2) + 2));
                    sheet.addMergedRegion(new CellRangeAddress(1, 1, 0, (cNameStrs.length * 2) + 2));
                } catch (Exception e) {
                    e.printStackTrace();
                }
                FileOutputStream fileOut = new FileOutputStream(excelFile);
                wwBook.write(fileOut);
                fileOut.close();
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response = ServletActionContext.getResponse();
                            response.reset();
                            ServletOutputStream outputStream = response.getOutputStream();
                            String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName2 = loadFileName.replace("+", " ");
                            response.setContentType("Content-type: applicationnd.ms-excel");
                            response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xlsx");
                            response.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte = new byte[1024];
                            FileInputStream in = new FileInputStream(excelFile);
                            while (true) {
                                int n = in.read(tempByte);
                                if (n == -1) {
                                    break;
                                }
                                try {
                                    outputStream.write(tempByte, 0, n);
                                } catch (Exception e2) {
                                    this.log.error("保存未成功", e2);
                                }
                            }
                            outputStream.flush();
                            outputStream.close();
                            in.close();
                        }
                    } catch (Exception e3) {
                        e3.printStackTrace();
                    }
                }
            } catch (Exception e4) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response2 = ServletActionContext.getResponse();
                            response2.reset();
                            ServletOutputStream outputStream2 = response2.getOutputStream();
                            String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName4 = loadFileName3.replace("+", " ");
                            response2.setContentType("Content-type: applicationnd.ms-excel");
                            response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xlsx");
                            response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte2 = new byte[1024];
                            FileInputStream in2 = new FileInputStream(excelFile);
                            while (true) {
                                int n2 = in2.read(tempByte2);
                                if (n2 == -1) {
                                    break;
                                }
                                try {
                                    outputStream2.write(tempByte2, 0, n2);
                                } catch (Exception e5) {
                                    this.log.error("保存未成功", e5);
                                }
                            }
                            outputStream2.flush();
                            outputStream2.close();
                            in2.close();
                        }
                    } catch (Exception e6) {
                        e6.printStackTrace();
                    }
                }
            } catch (Throwable th) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response3 = ServletActionContext.getResponse();
                            response3.reset();
                            ServletOutputStream outputStream3 = response3.getOutputStream();
                            String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName6 = loadFileName5.replace("+", " ");
                            response3.setContentType("Content-type: applicationnd.ms-excel");
                            response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xlsx");
                            response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte3 = new byte[1024];
                            FileInputStream in3 = new FileInputStream(excelFile);
                            while (true) {
                                int n3 = in3.read(tempByte3);
                                if (n3 == -1) {
                                    break;
                                }
                                try {
                                    outputStream3.write(tempByte3, 0, n3);
                                } catch (Exception e7) {
                                    this.log.error("保存未成功", e7);
                                }
                            }
                            outputStream3.flush();
                            outputStream3.close();
                            in3.close();
                        }
                    } catch (Exception e8) {
                        e8.printStackTrace();
                        throw th;
                    }
                }
                throw th;
            }
        } catch (Exception e9) {
            e9.printStackTrace();
        }
        return null;
    }

    public File getSubChartImgFile_abltyScoreR(String userId, String knowNum, String tuName, int claCount, int duanCount, String[] cNameStrs, String[] paragraph, String data_dian, String dirPath) {
        subjectLineImage_abltyScoreR(userId, knowNum, claCount, duanCount, cNameStrs, paragraph, data_dian);
        File file = new File(dirPath + File.separator + "tmpLinePng" + File.separator + tuName + userId + knowNum + ".png");
        return file;
    }

    public void subjectLineImage_abltyScoreR(String userId, String knowNum, int claCount, int duanCount, String[] rowKeys, String[] paragraph, String data_dian) {
        for (int i = 0; i < rowKeys.length; i++) {
            rowKeys[i] = rowKeys[i];
        }
        String[] tupianName = {"T9line"};
        String[] sp_lit = data_dian.split(Const.STRING_SEPERATOR);
        double[][] data = new double[rowKeys.length][paragraph.length];
        Double.valueOf(0.0d);
        Double.valueOf(0.0d);
        List list_data = new ArrayList();
        for (int i2 = 0; i2 < rowKeys.length; i2++) {
            for (int x = 0; x < paragraph.length; x++) {
                data[i2][x] = Double.parseDouble(sp_lit[i2 + (x * rowKeys.length)]);
                list_data.add(Double.valueOf(Double.parseDouble(sp_lit[i2 + (x * rowKeys.length)])));
            }
        }
        Double maxDesc = (Double) Collections.max(list_data);
        Double minDesc = (Double) Collections.min(list_data);
        Double count_unit = Double.valueOf((maxDesc.doubleValue() - minDesc.doubleValue()) / 5.0d);
        try {
            HttpServletResponse response = ServletActionContext.getResponse();
            response.reset();
            response.setContentType("image/jpeg");
            JFreeChart chart = this.lc.getLineChar(data, rowKeys, paragraph, "", "", "", "#0.0", count_unit, Integer.valueOf(rowKeys.length), "N", "##.#");
            getChartImageFolder(chart, "tmpLinePng", Const.height_400, 300, tupianName[0] + userId + knowNum);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String qtypeScoreRank_exportMethod(String examNum, String gradeNum, String schoolNum, String subjectNum, String classNum, String studentId, String studentType, String type, String source, String step, String sNum, String c_exam, String rpt_name, String isMoreSchool, String rptTitle, String isHistory, String isSaveWrite, String dirPath, String uri, String userNum, String schName, String gradeName, String className, String subjectName, String imgRoot, String agent) {
        String tt1;
        String tt2;
        String schNum;
        int cs;
        Float cc;
        int cs2;
        Float cc2;
        String rptTitle2 = this.sp.getHeaderStr(examNum, subjectNum, gradeNum, schoolNum, classNum, studentId, studentType, true, true, true, true, false, true, true, true, false, true, true, true, true, true, false, "0", "0");
        List list = this.reportService.getQtypeScoreRank(examNum, gradeNum, schoolNum, subjectNum, classNum, studentType, type, source, step, "0");
        String folderPath = "ExportFolder/reportExcel" + userNum;
        String str = "reportExcel" + userNum;
        String str2 = "reportExcel" + userNum;
        String excelName = (null == gradeName || "".equals(gradeName)) ? rpt_name + "_" + gradeNum : rpt_name + "_" + gradeName;
        if (null != classNum && !"".equals(classNum) && !classNum.contains(Const.STRING_SEPERATOR)) {
            excelName = (null == className || "".equals(className)) ? excelName + "_" + classNum : excelName + "_" + className;
        }
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFileXLSX(excelName, dirPath, folderPath);
        try {
            XSSFWorkbook wwBook = new XSSFWorkbook();
            XSSFDataFormat createDataFormat = wwBook.createDataFormat();
            XSSFFont font_bold = wwBook.createFont();
            font_bold.setFontHeightInPoints((short) 15);
            font_bold.setFontName("Arial");
            font_bold.setBold(true);
            XSSFCellStyle biaotis1 = wwBook.createCellStyle();
            biaotis1.setAlignment(HorizontalAlignment.LEFT);
            biaotis1.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            biaotis1.setFont(font_bold);
            XSSFFont font = wwBook.createFont();
            font.setFontHeightInPoints((short) 10);
            font.setFontName("Arial");
            XSSFCellStyle title = wwBook.createCellStyle();
            title.setAlignment(HorizontalAlignment.LEFT);
            title.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            title.setFont(font);
            title.setWrapText(true);
            XSSFCellStyle cFormat1 = wwBook.createCellStyle();
            cFormat1.setAlignment(HorizontalAlignment.CENTER);
            cFormat1.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cFormat1.setFont(font);
            cFormat1.setWrapText(true);
            cFormat1.setFillForegroundColor(Const.fillForeground_color);
            cFormat1.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cFormat1.setBorderTop(BorderStyle.THIN);
            cFormat1.setBorderRight(BorderStyle.THIN);
            cFormat1.setBorderBottom(BorderStyle.THIN);
            cFormat1.setBorderLeft(BorderStyle.THIN);
            XSSFCellStyle cFormat2 = wwBook.createCellStyle();
            cFormat2.setAlignment(HorizontalAlignment.CENTER);
            cFormat2.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cFormat2.setFont(font);
            cFormat2.setWrapText(true);
            cFormat2.setFillForegroundColor(Const.fillForeground_color2);
            cFormat2.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cFormat2.setBorderTop(BorderStyle.THIN);
            cFormat2.setBorderRight(BorderStyle.THIN);
            cFormat2.setBorderBottom(BorderStyle.THIN);
            cFormat2.setBorderLeft(BorderStyle.THIN);
            XSSFCellStyle cFormat2_2 = wwBook.createCellStyle();
            cFormat2_2.setAlignment(HorizontalAlignment.CENTER);
            cFormat2_2.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cFormat2_2.setFont(font);
            cFormat2_2.setWrapText(true);
            cFormat2_2.setFillForegroundColor(Const.fillForeground_color2);
            cFormat2_2.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cFormat2_2.setBorderTop(BorderStyle.THIN);
            cFormat2_2.setBorderRight(BorderStyle.THIN);
            cFormat2_2.setBorderBottom(BorderStyle.THIN);
            cFormat2_2.setBorderLeft(BorderStyle.THIN);
            cFormat2_2.setDataFormat(createDataFormat.getFormat("0.00"));
            XSSFCellStyle cFormat3 = wwBook.createCellStyle();
            cFormat3.setAlignment(HorizontalAlignment.CENTER);
            cFormat3.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cFormat3.setFont(font);
            cFormat3.setWrapText(true);
            cFormat3.setFillForegroundColor(Const.fillForeground_color3);
            cFormat3.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cFormat3.setBorderTop(BorderStyle.THIN);
            cFormat3.setBorderRight(BorderStyle.THIN);
            cFormat3.setBorderBottom(BorderStyle.THIN);
            cFormat3.setBorderLeft(BorderStyle.THIN);
            XSSFCellStyle cFormat3_2 = wwBook.createCellStyle();
            cFormat3_2.setAlignment(HorizontalAlignment.CENTER);
            cFormat3_2.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cFormat3_2.setFont(font);
            cFormat3_2.setWrapText(true);
            cFormat3_2.setFillForegroundColor(Const.fillForeground_color3);
            cFormat3_2.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cFormat3_2.setBorderTop(BorderStyle.THIN);
            cFormat3_2.setBorderRight(BorderStyle.THIN);
            cFormat3_2.setBorderBottom(BorderStyle.THIN);
            cFormat3_2.setBorderLeft(BorderStyle.THIN);
            cFormat3_2.setDataFormat(createDataFormat.getFormat("0.00"));
            try {
                XSSFSheet sheet = wwBook.createSheet();
                wwBook.setSheetName(0, rpt_name);
                XSSFDrawing patriarch = sheet.createDrawingPatriarch();
                sheet.setDisplayGridlines(false);
                try {
                    XSSFRow row0_0 = sheet.createRow(0);
                    XSSFCell biaotou = row0_0.createCell(0);
                    biaotou.setCellValue(rpt_name);
                    biaotou.setCellStyle(biaotis1);
                    DecimalFormat df3 = new DecimalFormat("0.00");
                    df3.setRoundingMode(RoundingMode.HALF_UP);
                    XSSFRow row0_1 = sheet.createRow(1);
                    row0_1.setHeight((short) 500);
                    XSSFCell xinxi = row0_1.createCell(0);
                    xinxi.setCellValue(rptTitle2);
                    xinxi.setCellStyle(title);
                    XSSFRow row0_2 = sheet.createRow(2);
                    XSSFRow row0_3 = sheet.createRow(3);
                    XSSFRow row0_4 = sheet.createRow(4);
                    XSSFRow row0_5 = sheet.createRow(5);
                    XSSFCell knowledge = row0_2.createCell(0);
                    knowledge.setCellValue("题型得分频率分布图");
                    knowledge.setCellStyle(cFormat1);
                    CellRangeAddress cellRangeAddress2_0 = new CellRangeAddress(2, 5, 0, 0);
                    sheet.addMergedRegion(cellRangeAddress2_0);
                    RegionUtil.setBorderBottom(BorderStyle.THIN, cellRangeAddress2_0, sheet);
                    RegionUtil.setBorderLeft(BorderStyle.THIN, cellRangeAddress2_0, sheet);
                    RegionUtil.setBorderRight(BorderStyle.THIN, cellRangeAddress2_0, sheet);
                    RegionUtil.setBorderTop(BorderStyle.THIN, cellRangeAddress2_0, sheet);
                    sheet.setColumnWidth(0, 13000);
                    XSSFCell knoName = row0_2.createCell(1);
                    knoName.setCellValue("题型");
                    knoName.setCellStyle(cFormat1);
                    CellRangeAddress cellRangeAddress2_1 = new CellRangeAddress(2, 5, 1, 1);
                    sheet.addMergedRegion(cellRangeAddress2_1);
                    RegionUtil.setBorderBottom(BorderStyle.THIN, cellRangeAddress2_1, sheet);
                    RegionUtil.setBorderLeft(BorderStyle.THIN, cellRangeAddress2_1, sheet);
                    RegionUtil.setBorderRight(BorderStyle.THIN, cellRangeAddress2_1, sheet);
                    RegionUtil.setBorderTop(BorderStyle.THIN, cellRangeAddress2_1, sheet);
                    sheet.setColumnWidth(1, 5200);
                    if (schoolNum.indexOf(Const.STRING_SEPERATOR) != -1) {
                        tt1 = "年级主任";
                        tt2 = "教研组长";
                        schNum = "学校";
                    } else {
                        tt1 = "班主任";
                        tt2 = "学科教师";
                        schNum = "班级";
                    }
                    XSSFCell classNameTitle = row0_2.createCell(2);
                    classNameTitle.setCellValue(schNum);
                    classNameTitle.setCellStyle(cFormat1);
                    XSSFCell teacherTitle = row0_3.createCell(2);
                    teacherTitle.setCellValue(tt1);
                    teacherTitle.setCellStyle(cFormat1);
                    XSSFCell subjectTeacherTitle = row0_4.createCell(2);
                    subjectTeacherTitle.setCellValue(tt2);
                    subjectTeacherTitle.setCellStyle(cFormat1);
                    XSSFCell scoreSection = row0_5.createCell(2);
                    scoreSection.setCellValue("分数段");
                    scoreSection.setCellStyle(cFormat1);
                    sheet.setColumnWidth(2, 3900);
                    int count = 0;
                    String[] cNameStrs = null;
                    String TotalClassStr = "";
                    for (int i = 0; i < list.size(); i++) {
                        new ArrayList();
                        new ArrayList();
                        List knoData = (List) list.get(i);
                        int claCount = knoData.size();
                        List duanData = (List) knoData.get(0);
                        int duanCount = duanData.size();
                        for (int j = 0; j < duanCount; j++) {
                            for (int c = 0; c < claCount; c++) {
                                Object[] obj = (Object[]) ((List) knoData.get(c)).get(0);
                                String classNameStr = obj[5] + Const.STRING_SEPERATOR;
                                if (TotalClassStr.indexOf(classNameStr) == -1) {
                                    TotalClassStr = TotalClassStr + classNameStr;
                                }
                            }
                        }
                    }
                    String[] TotalClassStr1 = TotalClassStr.split(Const.STRING_SEPERATOR);
                    for (int i2 = 0; i2 < list.size(); i2++) {
                        new ArrayList();
                        new ArrayList();
                        List knoData2 = (List) list.get(i2);
                        int claCount2 = knoData2.size();
                        List duanData2 = (List) knoData2.get(0);
                        int duanCount2 = duanData2.size();
                        String data_dian = "";
                        String paragraph = "";
                        if (i2 % 2 == 0) {
                            for (int j2 = 0; j2 < duanCount2; j2++) {
                                String classNameStr2 = "";
                                count++;
                                Object[] obj2 = null;
                                int c2 = 0;
                                XSSFRow row0_5count = sheet.getRow(5 + count);
                                if (row0_5count == null) {
                                    row0_5count = sheet.createRow(5 + count);
                                }
                                for (int d = 0; d < claCount2; d++) {
                                    obj2 = (Object[]) ((List) knoData2.get(d)).get(0);
                                    classNameStr2 = classNameStr2 + obj2[5] + Const.STRING_SEPERATOR;
                                    if (i2 == 0 && j2 == 0) {
                                        XSSFCell className_title = row0_2.createCell(3 + (c2 * 2));
                                        className_title.setCellValue(obj2[5] + "");
                                        className_title.setCellStyle(cFormat1);
                                        CellRangeAddress cellRangeAddress2 = new CellRangeAddress(2, 2, 3 + (c2 * 2), 4 + (c2 * 2));
                                        sheet.addMergedRegion(cellRangeAddress2);
                                        RegionUtil.setBorderBottom(BorderStyle.THIN, cellRangeAddress2, sheet);
                                        RegionUtil.setBorderLeft(BorderStyle.THIN, cellRangeAddress2, sheet);
                                        RegionUtil.setBorderRight(BorderStyle.THIN, cellRangeAddress2, sheet);
                                        RegionUtil.setBorderTop(BorderStyle.THIN, cellRangeAddress2, sheet);
                                        XSSFCell teacher = row0_3.createCell(3 + (c2 * 2));
                                        teacher.setCellValue(obj2[12] + "");
                                        teacher.setCellStyle(cFormat1);
                                        CellRangeAddress cellRangeAddress3 = new CellRangeAddress(3, 3, 3 + (c2 * 2), 4 + (c2 * 2));
                                        sheet.addMergedRegion(cellRangeAddress3);
                                        RegionUtil.setBorderBottom(BorderStyle.THIN, cellRangeAddress3, sheet);
                                        RegionUtil.setBorderLeft(BorderStyle.THIN, cellRangeAddress3, sheet);
                                        RegionUtil.setBorderRight(BorderStyle.THIN, cellRangeAddress3, sheet);
                                        RegionUtil.setBorderTop(BorderStyle.THIN, cellRangeAddress3, sheet);
                                        XSSFCell courseTeacher = row0_4.createCell(3 + (c2 * 2));
                                        courseTeacher.setCellValue(obj2[11] + "");
                                        courseTeacher.setCellStyle(cFormat1);
                                        CellRangeAddress cellRangeAddress4 = new CellRangeAddress(4, 4, 3 + (c2 * 2), 4 + (c2 * 2));
                                        sheet.addMergedRegion(cellRangeAddress4);
                                        RegionUtil.setBorderBottom(BorderStyle.THIN, cellRangeAddress4, sheet);
                                        RegionUtil.setBorderLeft(BorderStyle.THIN, cellRangeAddress4, sheet);
                                        RegionUtil.setBorderRight(BorderStyle.THIN, cellRangeAddress4, sheet);
                                        RegionUtil.setBorderTop(BorderStyle.THIN, cellRangeAddress4, sheet);
                                        XSSFCell frequency = row0_5.createCell(3 + (c2 * 2));
                                        frequency.setCellValue("频率");
                                        frequency.setCellStyle(cFormat1);
                                        XSSFCell totalFrequency = row0_5.createCell(4 + (c2 * 2));
                                        totalFrequency.setCellValue("累计频率");
                                        totalFrequency.setCellStyle(cFormat1);
                                        sheet.setColumnWidth(3 + (c2 * 2), 3120);
                                        sheet.setColumnWidth(4 + (c2 * 2), 3120);
                                    }
                                    String fenduan = ((Object[]) ((List) knoData2.get(0)).get(j2))[7] + "";
                                    String newStr = fenduan.replaceAll(Const.WHITE_CHAR, "]");
                                    if (d == 0) {
                                        paragraph = paragraph + newStr + Const.WHITE_CHAR;
                                        XSSFCell scoreSections = row0_5count.createCell(2);
                                        scoreSections.setCellValue(newStr);
                                        scoreSections.setCellStyle(cFormat2);
                                        paragraph.split(Const.WHITE_CHAR);
                                    }
                                    if (d == 0 && j2 == 0) {
                                        XSSFCell knoNames = row0_5count.createCell(1);
                                        knoNames.setCellValue(obj2[1] + "");
                                        knoNames.setCellStyle(cFormat2);
                                        CellRangeAddress cellRangeAddress5_0 = new CellRangeAddress(5 + count, 4 + count + duanCount2, 0, 0);
                                        sheet.addMergedRegion(cellRangeAddress5_0);
                                        RegionUtil.setBorderBottom(BorderStyle.THIN, cellRangeAddress5_0, sheet);
                                        RegionUtil.setBorderLeft(BorderStyle.THIN, cellRangeAddress5_0, sheet);
                                        RegionUtil.setBorderRight(BorderStyle.THIN, cellRangeAddress5_0, sheet);
                                        RegionUtil.setBorderTop(BorderStyle.THIN, cellRangeAddress5_0, sheet);
                                        CellRangeAddress cellRangeAddress5_1 = new CellRangeAddress(5 + count, 4 + count + duanCount2, 1, 1);
                                        sheet.addMergedRegion(cellRangeAddress5_1);
                                        RegionUtil.setBorderBottom(BorderStyle.THIN, cellRangeAddress5_1, sheet);
                                        RegionUtil.setBorderLeft(BorderStyle.THIN, cellRangeAddress5_1, sheet);
                                        RegionUtil.setBorderRight(BorderStyle.THIN, cellRangeAddress5_1, sheet);
                                        RegionUtil.setBorderTop(BorderStyle.THIN, cellRangeAddress5_1, sheet);
                                        if (duanCount2 < 3) {
                                            for (int cs3 = 1; cs3 < duanCount2 + 1; cs3++) {
                                                XSSFRow row0_4countCs = sheet.getRow(4 + count + cs3);
                                                if (row0_4countCs == null) {
                                                    row0_4countCs = sheet.createRow(4 + count + cs3);
                                                }
                                                row0_4countCs.setHeight((short) 1350);
                                            }
                                        } else {
                                            for (int cs4 = 1; cs4 < duanCount2 + 1; cs4++) {
                                                XSSFRow row0_4countCs2 = sheet.getRow(4 + count + cs4);
                                                if (row0_4countCs2 == null) {
                                                    row0_4countCs2 = sheet.createRow(4 + count + cs4);
                                                }
                                                row0_4countCs2.setHeight((short) 900);
                                            }
                                        }
                                    }
                                    if (TotalClassStr1[c2].equals(obj2[5])) {
                                        String frequencys_value = ((Object[]) ((List) knoData2.get(d)).get(j2))[10] + "";
                                        Double frequencys_value_D = Double.valueOf(Double.parseDouble(df3.format(Double.valueOf(frequencys_value))));
                                        String totalFrequencys_value = ((Object[]) ((List) knoData2.get(d)).get(j2))[9] + "";
                                        Double totalFrequencys_value_D = Double.valueOf(totalFrequencys_value);
                                        Double totalFrequencys_value_D2 = Double.valueOf(Double.parseDouble(df3.format(totalFrequencys_value_D)));
                                        XSSFCell frequencys = row0_5count.createCell(3 + (c2 * 2));
                                        frequencys.setCellValue(frequencys_value_D.doubleValue());
                                        frequencys.setCellStyle(cFormat2_2);
                                        XSSFCell totalFrequencys = row0_5count.createCell(4 + (c2 * 2));
                                        totalFrequencys.setCellValue(totalFrequencys_value_D2.doubleValue());
                                        totalFrequencys.setCellStyle(cFormat2_2);
                                        data_dian = data_dian + frequencys_value_D + Const.STRING_SEPERATOR;
                                        c2++;
                                    } else {
                                        while (!TotalClassStr1[c2].equals(obj2[5])) {
                                            XSSFCell frequencys2 = row0_5count.createCell(3 + (c2 * 2));
                                            frequencys2.setCellValue("");
                                            frequencys2.setCellStyle(cFormat2_2);
                                            XSSFCell totalFrequencys2 = row0_5count.createCell(4 + (c2 * 2));
                                            totalFrequencys2.setCellValue("");
                                            totalFrequencys2.setCellStyle(cFormat2_2);
                                            c2++;
                                            if (c2 == TotalClassStr1.length - 1) {
                                                break;
                                            }
                                        }
                                        if (TotalClassStr1[c2].equals(obj2[5])) {
                                            String frequencys_value2 = ((Object[]) ((List) knoData2.get(d)).get(j2))[10] + "";
                                            Double frequencys_value_D2 = Double.valueOf(Double.parseDouble(df3.format(Double.valueOf(frequencys_value2))));
                                            String totalFrequencys_value2 = ((Object[]) ((List) knoData2.get(d)).get(j2))[9] + "";
                                            Double totalFrequencys_value_D3 = Double.valueOf(totalFrequencys_value2);
                                            Double totalFrequencys_value_D4 = Double.valueOf(Double.parseDouble(df3.format(totalFrequencys_value_D3)));
                                            XSSFCell frequencys3 = row0_5count.createCell(3 + (c2 * 2));
                                            frequencys3.setCellValue(frequencys_value_D2.doubleValue());
                                            frequencys3.setCellStyle(cFormat2_2);
                                            XSSFCell totalFrequencys3 = row0_5count.createCell(4 + (c2 * 2));
                                            totalFrequencys3.setCellValue(totalFrequencys_value_D4.doubleValue());
                                            totalFrequencys3.setCellStyle(cFormat2_2);
                                            data_dian = data_dian + frequencys_value_D2 + Const.STRING_SEPERATOR;
                                            c2++;
                                        }
                                    }
                                    if (c2 == TotalClassStr1.length - 1) {
                                        XSSFCell frequencys4 = row0_5count.createCell(3 + (c2 * 2));
                                        frequencys4.setCellValue("");
                                        frequencys4.setCellStyle(cFormat2_2);
                                        XSSFCell totalFrequencys4 = row0_5count.createCell(4 + (c2 * 2));
                                        totalFrequencys4.setCellValue("");
                                        totalFrequencys4.setCellStyle(cFormat2_2);
                                    }
                                }
                                cNameStrs = classNameStr2.split(Const.STRING_SEPERATOR);
                                if (j2 == duanCount2 - 1) {
                                    String[] columnKeys = paragraph.split(Const.WHITE_CHAR);
                                    Float.valueOf(0.0f);
                                    if (columnKeys.length <= 1) {
                                        cs2 = columnKeys.length;
                                        cc2 = Float.valueOf(columnKeys.length);
                                    } else if (columnKeys.length < 3) {
                                        cs2 = columnKeys.length;
                                        cc2 = Float.valueOf(columnKeys.length - 1.0f);
                                    } else {
                                        cs2 = columnKeys.length;
                                        cc2 = Float.valueOf(Float.valueOf(columnKeys.length).floatValue() / Float.valueOf(3.0f).floatValue());
                                    }
                                    int startRowIndex = Convert.toInt(Float.valueOf(5 + (count - columnKeys.length) + cc2.floatValue())).intValue();
                                    int endRowIndex = startRowIndex + cs2;
                                    if (null == this.showAnalyiseImage || !this.showAnalyiseImage.equals("1")) {
                                        XSSFRow row0_5countCc = sheet.getRow(startRowIndex);
                                        if (row0_5countCc == null) {
                                            row0_5countCc = sheet.createRow(startRowIndex);
                                        }
                                        XSSFCell image = row0_5countCc.createCell(0);
                                        image.setCellValue("");
                                        image.setCellStyle(cFormat2);
                                    } else {
                                        String[] rowKeys = {"T11line"};
                                        File imgFile = getSubChartImgFile_qtypeScoreRank(userNum, String.valueOf(obj2[0]), rowKeys[0], claCount2, duanCount2, cNameStrs, columnKeys, data_dian, imgRoot);
                                        byte[] imageBytes = convertToByteArray(imgFile);
                                        XSSFClientAnchor anchor = new XSSFClientAnchor(0, 0, 0, 0, 0, startRowIndex, 1, endRowIndex);
                                        anchor.setAnchorType(ClientAnchor.AnchorType.MOVE_AND_RESIZE);
                                        patriarch.createPicture(anchor, wwBook.addPicture(imageBytes, 6));
                                    }
                                }
                            }
                        } else {
                            for (int j3 = 0; j3 < duanCount2; j3++) {
                                String classNameStr3 = "";
                                count++;
                                Object[] obj3 = null;
                                int c3 = 0;
                                XSSFRow row0_5count2 = sheet.getRow(5 + count);
                                if (row0_5count2 == null) {
                                    row0_5count2 = sheet.createRow(5 + count);
                                }
                                for (int d2 = 0; d2 < claCount2; d2++) {
                                    obj3 = (Object[]) ((List) knoData2.get(d2)).get(0);
                                    classNameStr3 = classNameStr3 + obj3[5] + Const.STRING_SEPERATOR;
                                    if (i2 == 0 && j3 == 0) {
                                        XSSFCell className_title2 = row0_2.createCell(3 + (c3 * 2));
                                        className_title2.setCellValue(obj3[5] + "");
                                        className_title2.setCellStyle(cFormat1);
                                        CellRangeAddress cellRangeAddress22 = new CellRangeAddress(2, 2, 3 + (c3 * 2), 4 + (c3 * 2));
                                        sheet.addMergedRegion(cellRangeAddress22);
                                        RegionUtil.setBorderBottom(BorderStyle.THIN, cellRangeAddress22, sheet);
                                        RegionUtil.setBorderLeft(BorderStyle.THIN, cellRangeAddress22, sheet);
                                        RegionUtil.setBorderRight(BorderStyle.THIN, cellRangeAddress22, sheet);
                                        RegionUtil.setBorderTop(BorderStyle.THIN, cellRangeAddress22, sheet);
                                        XSSFCell teacher2 = row0_3.createCell(3 + (c3 * 2));
                                        teacher2.setCellValue(obj3[12] + "");
                                        teacher2.setCellStyle(cFormat1);
                                        CellRangeAddress cellRangeAddress32 = new CellRangeAddress(3, 3, 3 + (c3 * 2), 4 + (c3 * 2));
                                        sheet.addMergedRegion(cellRangeAddress32);
                                        RegionUtil.setBorderBottom(BorderStyle.THIN, cellRangeAddress32, sheet);
                                        RegionUtil.setBorderLeft(BorderStyle.THIN, cellRangeAddress32, sheet);
                                        RegionUtil.setBorderRight(BorderStyle.THIN, cellRangeAddress32, sheet);
                                        RegionUtil.setBorderTop(BorderStyle.THIN, cellRangeAddress32, sheet);
                                        XSSFCell courseTeacher2 = row0_4.createCell(3 + (c3 * 2));
                                        courseTeacher2.setCellValue(obj3[11] + "");
                                        courseTeacher2.setCellStyle(cFormat1);
                                        CellRangeAddress cellRangeAddress42 = new CellRangeAddress(4, 4, 3 + (c3 * 2), 4 + (c3 * 2));
                                        sheet.addMergedRegion(cellRangeAddress42);
                                        RegionUtil.setBorderBottom(BorderStyle.THIN, cellRangeAddress42, sheet);
                                        RegionUtil.setBorderLeft(BorderStyle.THIN, cellRangeAddress42, sheet);
                                        RegionUtil.setBorderRight(BorderStyle.THIN, cellRangeAddress42, sheet);
                                        RegionUtil.setBorderTop(BorderStyle.THIN, cellRangeAddress42, sheet);
                                        XSSFCell frequency2 = row0_5.createCell(3 + (c3 * 2));
                                        frequency2.setCellValue("频率");
                                        frequency2.setCellStyle(cFormat1);
                                        XSSFCell totalFrequency2 = row0_5.createCell(4 + (c3 * 2));
                                        totalFrequency2.setCellValue("累计频率");
                                        totalFrequency2.setCellStyle(cFormat1);
                                        sheet.setColumnWidth(3 + (c3 * 2), 3120);
                                        sheet.setColumnWidth(4 + (c3 * 2), 3120);
                                    }
                                    String fenduan2 = ((Object[]) ((List) knoData2.get(0)).get(j3))[7] + "";
                                    String newStr2 = fenduan2.replaceAll(Const.WHITE_CHAR, "]");
                                    if (d2 == 0) {
                                        paragraph = paragraph + newStr2 + Const.WHITE_CHAR;
                                        XSSFCell scoreSections2 = row0_5count2.createCell(2);
                                        scoreSections2.setCellValue(newStr2);
                                        scoreSections2.setCellStyle(cFormat3);
                                        paragraph.split(Const.WHITE_CHAR);
                                    }
                                    if (d2 == 0 && j3 == 0) {
                                        XSSFCell knoNames2 = row0_5count2.createCell(1);
                                        knoNames2.setCellValue(obj3[1] + "");
                                        knoNames2.setCellStyle(cFormat3);
                                        CellRangeAddress cellRangeAddress5_02 = new CellRangeAddress(5 + count, 4 + count + duanCount2, 0, 0);
                                        sheet.addMergedRegion(cellRangeAddress5_02);
                                        RegionUtil.setBorderBottom(BorderStyle.THIN, cellRangeAddress5_02, sheet);
                                        RegionUtil.setBorderLeft(BorderStyle.THIN, cellRangeAddress5_02, sheet);
                                        RegionUtil.setBorderRight(BorderStyle.THIN, cellRangeAddress5_02, sheet);
                                        RegionUtil.setBorderTop(BorderStyle.THIN, cellRangeAddress5_02, sheet);
                                        CellRangeAddress cellRangeAddress5_12 = new CellRangeAddress(5 + count, 4 + count + duanCount2, 1, 1);
                                        sheet.addMergedRegion(cellRangeAddress5_12);
                                        RegionUtil.setBorderBottom(BorderStyle.THIN, cellRangeAddress5_12, sheet);
                                        RegionUtil.setBorderLeft(BorderStyle.THIN, cellRangeAddress5_12, sheet);
                                        RegionUtil.setBorderRight(BorderStyle.THIN, cellRangeAddress5_12, sheet);
                                        RegionUtil.setBorderTop(BorderStyle.THIN, cellRangeAddress5_12, sheet);
                                        if (duanCount2 < 3) {
                                            for (int cs5 = 1; cs5 < duanCount2 + 1; cs5++) {
                                                XSSFRow row0_4countCs3 = sheet.getRow(4 + count + cs5);
                                                if (row0_4countCs3 == null) {
                                                    row0_4countCs3 = sheet.createRow(4 + count + cs5);
                                                }
                                                row0_4countCs3.setHeight((short) 1350);
                                            }
                                        } else {
                                            for (int cs6 = 1; cs6 < duanCount2 + 1; cs6++) {
                                                XSSFRow row0_4countCs4 = sheet.getRow(4 + count + cs6);
                                                if (row0_4countCs4 == null) {
                                                    row0_4countCs4 = sheet.createRow(4 + count + cs6);
                                                }
                                                row0_4countCs4.setHeight((short) 900);
                                            }
                                        }
                                    }
                                    if (TotalClassStr1[c3].equals(obj3[5])) {
                                        String frequencys_value3 = ((Object[]) ((List) knoData2.get(d2)).get(j3))[10] + "";
                                        Double frequencys_value_D3 = Double.valueOf(Double.parseDouble(df3.format(Double.valueOf(frequencys_value3))));
                                        String totalFrequencys_value3 = ((Object[]) ((List) knoData2.get(d2)).get(j3))[9] + "";
                                        Double totalFrequencys_value_D5 = Double.valueOf(totalFrequencys_value3);
                                        Double totalFrequencys_value_D6 = Double.valueOf(Double.parseDouble(df3.format(totalFrequencys_value_D5)));
                                        XSSFCell frequencys5 = row0_5count2.createCell(3 + (c3 * 2));
                                        frequencys5.setCellValue(frequencys_value_D3.doubleValue());
                                        frequencys5.setCellStyle(cFormat3_2);
                                        XSSFCell totalFrequencys5 = row0_5count2.createCell(4 + (c3 * 2));
                                        totalFrequencys5.setCellValue(totalFrequencys_value_D6.doubleValue());
                                        totalFrequencys5.setCellStyle(cFormat3_2);
                                        data_dian = data_dian + frequencys_value_D3 + Const.STRING_SEPERATOR;
                                        c3++;
                                    } else {
                                        while (!TotalClassStr1[c3].equals(obj3[5])) {
                                            XSSFCell frequencys6 = row0_5count2.createCell(3 + (c3 * 2));
                                            frequencys6.setCellValue("");
                                            frequencys6.setCellStyle(cFormat3_2);
                                            XSSFCell totalFrequencys6 = row0_5count2.createCell(4 + (c3 * 2));
                                            totalFrequencys6.setCellValue("");
                                            totalFrequencys6.setCellStyle(cFormat3_2);
                                            c3++;
                                            if (c3 == TotalClassStr1.length - 1) {
                                                break;
                                            }
                                        }
                                        if (TotalClassStr1[c3].equals(obj3[5])) {
                                            String frequencys_value4 = ((Object[]) ((List) knoData2.get(d2)).get(j3))[10] + "";
                                            Double frequencys_value_D4 = Double.valueOf(Double.parseDouble(df3.format(Double.valueOf(frequencys_value4))));
                                            String totalFrequencys_value4 = ((Object[]) ((List) knoData2.get(d2)).get(j3))[9] + "";
                                            Double totalFrequencys_value_D7 = Double.valueOf(totalFrequencys_value4);
                                            Double totalFrequencys_value_D8 = Double.valueOf(Double.parseDouble(df3.format(totalFrequencys_value_D7)));
                                            XSSFCell frequencys7 = row0_5count2.createCell(3 + (c3 * 2));
                                            frequencys7.setCellValue(frequencys_value_D4.doubleValue());
                                            frequencys7.setCellStyle(cFormat3_2);
                                            XSSFCell totalFrequencys7 = row0_5count2.createCell(4 + (c3 * 2));
                                            totalFrequencys7.setCellValue(totalFrequencys_value_D8.doubleValue());
                                            totalFrequencys7.setCellStyle(cFormat3_2);
                                            data_dian = data_dian + frequencys_value_D4 + Const.STRING_SEPERATOR;
                                            c3++;
                                        }
                                    }
                                    if (c3 == TotalClassStr1.length - 1) {
                                        XSSFCell frequencys8 = row0_5count2.createCell(3 + (c3 * 2));
                                        frequencys8.setCellValue("");
                                        frequencys8.setCellStyle(cFormat3_2);
                                        XSSFCell totalFrequencys8 = row0_5count2.createCell(4 + (c3 * 2));
                                        totalFrequencys8.setCellValue("");
                                        totalFrequencys8.setCellStyle(cFormat3_2);
                                    }
                                }
                                cNameStrs = classNameStr3.split(Const.STRING_SEPERATOR);
                                if (j3 == duanCount2 - 1) {
                                    String[] columnKeys2 = paragraph.split(Const.WHITE_CHAR);
                                    Float.valueOf(0.0f);
                                    if (columnKeys2.length <= 1) {
                                        cs = columnKeys2.length;
                                        cc = Float.valueOf(columnKeys2.length);
                                    } else if (columnKeys2.length < 3) {
                                        cs = columnKeys2.length;
                                        cc = Float.valueOf(columnKeys2.length - 1.0f);
                                    } else {
                                        cs = columnKeys2.length;
                                        cc = Float.valueOf(Float.valueOf(columnKeys2.length).floatValue() / Float.valueOf(3.0f).floatValue());
                                    }
                                    int startRowIndex2 = Convert.toInt(Float.valueOf(5 + (count - columnKeys2.length) + cc.floatValue())).intValue();
                                    int endRowIndex2 = startRowIndex2 + cs;
                                    if (null == this.showAnalyiseImage || !this.showAnalyiseImage.equals("1")) {
                                        XSSFRow row0_5countCc2 = sheet.getRow(startRowIndex2);
                                        if (row0_5countCc2 == null) {
                                            row0_5countCc2 = sheet.createRow(startRowIndex2);
                                        }
                                        XSSFCell image2 = row0_5countCc2.createCell(0);
                                        image2.setCellValue("");
                                        image2.setCellStyle(cFormat3);
                                    } else {
                                        String[] rowKeys2 = {"T11line"};
                                        File imgFile2 = getSubChartImgFile_qtypeScoreRank(userNum, String.valueOf(obj3[0]), rowKeys2[0], claCount2, duanCount2, cNameStrs, columnKeys2, data_dian, imgRoot);
                                        byte[] imageBytes2 = convertToByteArray(imgFile2);
                                        XSSFClientAnchor anchor2 = new XSSFClientAnchor(0, 0, 0, 0, 0, startRowIndex2, 1, endRowIndex2);
                                        anchor2.setAnchorType(ClientAnchor.AnchorType.MOVE_AND_RESIZE);
                                        patriarch.createPicture(anchor2, wwBook.addPicture(imageBytes2, 6));
                                    }
                                }
                            }
                        }
                    }
                    sheet.addMergedRegion(new CellRangeAddress(0, 0, 0, (cNameStrs.length * 2) + 2));
                    sheet.addMergedRegion(new CellRangeAddress(1, 1, 0, (cNameStrs.length * 2) + 2));
                } catch (Exception e) {
                    e.printStackTrace();
                }
                FileOutputStream fileOut = new FileOutputStream(excelFile);
                wwBook.write(fileOut);
                fileOut.close();
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response = ServletActionContext.getResponse();
                            response.reset();
                            ServletOutputStream outputStream = response.getOutputStream();
                            String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName2 = loadFileName.replace("+", " ");
                            response.setContentType("Content-type: applicationnd.ms-excel");
                            response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xlsx");
                            response.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte = new byte[1024];
                            FileInputStream in = new FileInputStream(excelFile);
                            while (true) {
                                int n = in.read(tempByte);
                                if (n == -1) {
                                    break;
                                }
                                try {
                                    outputStream.write(tempByte, 0, n);
                                } catch (Exception e2) {
                                    this.log.error("保存未成功", e2);
                                }
                            }
                            outputStream.flush();
                            outputStream.close();
                            in.close();
                        }
                    } catch (Exception e3) {
                        e3.printStackTrace();
                    }
                }
            } catch (Exception e4) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response2 = ServletActionContext.getResponse();
                            response2.reset();
                            ServletOutputStream outputStream2 = response2.getOutputStream();
                            String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName4 = loadFileName3.replace("+", " ");
                            response2.setContentType("Content-type: applicationnd.ms-excel");
                            response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xlsx");
                            response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte2 = new byte[1024];
                            FileInputStream in2 = new FileInputStream(excelFile);
                            while (true) {
                                int n2 = in2.read(tempByte2);
                                if (n2 == -1) {
                                    break;
                                }
                                try {
                                    outputStream2.write(tempByte2, 0, n2);
                                } catch (Exception e5) {
                                    this.log.error("保存未成功", e5);
                                }
                            }
                            outputStream2.flush();
                            outputStream2.close();
                            in2.close();
                        }
                    } catch (Exception e6) {
                        e6.printStackTrace();
                    }
                }
            } catch (Throwable th) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response3 = ServletActionContext.getResponse();
                            response3.reset();
                            ServletOutputStream outputStream3 = response3.getOutputStream();
                            String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName6 = loadFileName5.replace("+", " ");
                            response3.setContentType("Content-type: applicationnd.ms-excel");
                            response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xlsx");
                            response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte3 = new byte[1024];
                            FileInputStream in3 = new FileInputStream(excelFile);
                            while (true) {
                                int n3 = in3.read(tempByte3);
                                if (n3 == -1) {
                                    break;
                                }
                                try {
                                    outputStream3.write(tempByte3, 0, n3);
                                } catch (Exception e7) {
                                    this.log.error("保存未成功", e7);
                                }
                            }
                            outputStream3.flush();
                            outputStream3.close();
                            in3.close();
                        }
                    } catch (Exception e8) {
                        e8.printStackTrace();
                        throw th;
                    }
                }
                throw th;
            }
        } catch (Exception e9) {
            e9.printStackTrace();
        }
        return null;
    }

    public File getSubChartImgFile_qtypeScoreRank(String userId, String knowNum, String tuName, int claCount, int duanCount, String[] cNameStrs, String[] paragraph, String data_dian, String dirPath) {
        subjectLineImage_qtypeScoreRank(userId, knowNum, claCount, duanCount, cNameStrs, paragraph, data_dian);
        File file = new File(dirPath + File.separator + "tmpLinePng" + File.separator + tuName + userId + knowNum + ".png");
        return file;
    }

    public void subjectLineImage_qtypeScoreRank(String userId, String knowNum, int claCount, int duanCount, String[] rowKeys, String[] paragraph, String data_dian) {
        for (int i = 0; i < rowKeys.length; i++) {
            rowKeys[i] = rowKeys[i];
        }
        String[] tupianName = {"T11line"};
        String[] sp_lit = data_dian.split(Const.STRING_SEPERATOR);
        double[][] data = new double[rowKeys.length][paragraph.length];
        Double.valueOf(0.0d);
        Double.valueOf(0.0d);
        List list_data = new ArrayList();
        for (int i2 = 0; i2 < rowKeys.length; i2++) {
            for (int x = 0; x < paragraph.length; x++) {
                data[i2][x] = Double.parseDouble(sp_lit[i2 + (x * rowKeys.length)]);
                list_data.add(Double.valueOf(Double.parseDouble(sp_lit[i2 + (x * rowKeys.length)])));
            }
        }
        Double maxDesc = (Double) Collections.max(list_data);
        Double minDesc = (Double) Collections.min(list_data);
        Double count_unit = Double.valueOf((maxDesc.doubleValue() - minDesc.doubleValue()) / 5.0d);
        try {
            HttpServletResponse response = ServletActionContext.getResponse();
            response.reset();
            response.setContentType("image/jpeg");
            JFreeChart chart = this.lc.getLineChar(data, rowKeys, paragraph, "", "", "", "#0.0", count_unit, Integer.valueOf(rowKeys.length), "N", "##.#");
            getChartImageFolder(chart, "tmpLinePng", Const.height_400, 300, tupianName[0] + userId + knowNum);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String spTableAction_exportSp(String examNum, String gradeNum, String schoolNum, String subjectNum, String classNum, String studentId, String studentType, String type, String source, String step, String sNum, String c_exam, String rpt_name, String isMoreSchool, String rptTitle, String isHistory, String isSaveWrite, String dirPath, String uri, String userNum, String schName, String gradeName, String className, String subjectName, String imgRoot, String all_class, String agent, String islevel, String subCompose) {
        String rptTitle2 = this.sp.getHeaderStr(examNum, subjectNum, gradeNum, schoolNum, classNum, studentId, studentType, true, true, true, true, false, true, true, true, false, true, true, true, true, true, false, subCompose, "0");
        String folderPath = "reportExcel" + userNum;
        String folderName = "reportExcel" + userNum;
        String zipName = "reportExcel" + userNum;
        String excelName = (null == gradeName || "".equals(gradeName)) ? rpt_name + "_" + gradeNum : rpt_name + "_" + gradeName;
        if (null != classNum && !"".equals(classNum) && !classNum.contains(Const.STRING_SEPERATOR)) {
            excelName = (null == className || "".equals(className)) ? excelName + "_" + classNum : excelName + "_" + className;
        }
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        String filePath = null;
        try {
            WritableWorkbook wwBook = Workbook.createWorkbook(excelFile);
            try {
                List ls = this.examService.gets_pques(examNum, subjectNum, gradeNum, schoolNum, classNum, type, studentType, source, 0.6f, islevel, subCompose);
                List st = (List) ls.get(0);
                List qu = (List) ls.get(1);
                String[][] sp = new String[st.size() + 2][qu.size() + 2];
                int hangshu = 0;
                int lieshu = 0;
                int questionNumCount = 0;
                int zhengdashu = 0;
                double zhengdashu_question = 0.0d;
                double student_zhengdasLv = 0.0d;
                WritableFont.FontName font = WritableFont.createFont("新宋体");
                WritableFont wf1 = new WritableFont(font, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.special_color, ScriptStyle.NORMAL_SCRIPT);
                new WritableCellFormat(wf1);
                WritableFont wf2 = new WritableFont(font, 12, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color, ScriptStyle.NORMAL_SCRIPT);
                new WritableCellFormat(wf2);
                WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
                WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
                biaotis1.setAlignment(Alignment.LEFT);
                biaotis1.setWrap(true);
                WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
                WritableCellFormat cFormat1 = new WritableCellFormat(font1);
                WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
                WritableCellFormat cFormat2 = new WritableCellFormat(font2);
                cFormat2.setAlignment(Alignment.CENTRE);
                cFormat2.setWrap(true);
                WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
                WritableCellFormat cFormat3 = new WritableCellFormat(font3);
                cFormat3.setAlignment(Alignment.CENTRE);
                cFormat3.setBackground(Const.tixingBackground_color);
                cFormat3.setWrap(true);
                WritableFont font4 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
                WritableCellFormat cFormat4 = new WritableCellFormat(font4);
                cFormat4.setAlignment(Alignment.CENTRE);
                cFormat4.setBackground(Const.tebiezhuyiBackground_color);
                cFormat4.setWrap(true);
                WritableCellFormat normalFormat_right = new WritableCellFormat();
                normalFormat_right.setBorder(Border.RIGHT, BorderLineStyle.THICK, Const.SBorder_color);
                normalFormat_right.setAlignment(Alignment.CENTRE);
                WritableCellFormat normalFormat_left = new WritableCellFormat();
                normalFormat_left.setBorder(Border.LEFT, BorderLineStyle.THICK, Const.SBorder_color);
                normalFormat_left.setAlignment(Alignment.CENTRE);
                WritableCellFormat bottomFormat_bottom = new WritableCellFormat();
                bottomFormat_bottom.setBorder(Border.BOTTOM, BorderLineStyle.THICK, Const.SBorder_color);
                bottomFormat_bottom.setAlignment(Alignment.CENTRE);
                WritableCellFormat bottomFormat_top = new WritableCellFormat();
                bottomFormat_top.setBorder(Border.TOP, BorderLineStyle.THICK, Const.SBorder_color);
                bottomFormat_top.setAlignment(Alignment.CENTRE);
                WritableCellFormat bottomFormat_Top_p = new WritableCellFormat();
                bottomFormat_Top_p.setBorder(Border.TOP, BorderLineStyle.THICK, Const.PBorder_color);
                bottomFormat_Top_p.setAlignment(Alignment.CENTRE);
                WritableCellFormat normalFormat_left_p = new WritableCellFormat();
                normalFormat_left_p.setBorder(Border.RIGHT, BorderLineStyle.THICK, Const.PBorder_color);
                normalFormat_left_p.setAlignment(Alignment.CENTRE);
                WritableCellFormat normalFormat_right_left_p = new WritableCellFormat();
                normalFormat_right_left_p.setBorder(Border.RIGHT, BorderLineStyle.THICK, Const.PBorder_color);
                normalFormat_right_left_p.setBorder(Border.LEFT, BorderLineStyle.THICK, Const.SBorder_color);
                normalFormat_right_left_p.setAlignment(Alignment.CENTRE);
                WritableCellFormat bottomFormat_left_p = new WritableCellFormat();
                bottomFormat_left_p.setBorder(Border.TOP, BorderLineStyle.THICK, Const.PBorder_color);
                bottomFormat_left_p.setBorder(Border.LEFT, BorderLineStyle.THICK, Const.SBorder_color);
                bottomFormat_left_p.setAlignment(Alignment.CENTRE);
                WritableCellFormat bottomFormat_left_p_r = new WritableCellFormat();
                bottomFormat_left_p_r.setBorder(Border.RIGHT, BorderLineStyle.THICK, Const.SBorder_color);
                bottomFormat_left_p_r.setBorder(Border.BOTTOM, BorderLineStyle.THICK, Const.SBorder_color);
                bottomFormat_left_p_r.setAlignment(Alignment.CENTRE);
                WritableCellFormat bottomFormat_left_t = new WritableCellFormat();
                bottomFormat_left_t.setBorder(Border.TOP, BorderLineStyle.THICK, Const.PBorder_color);
                bottomFormat_left_t.setBorder(Border.RIGHT, BorderLineStyle.THICK, Const.SBorder_color);
                bottomFormat_left_t.setAlignment(Alignment.CENTRE);
                new WritableCellFormat();
                bottomFormat_left_t.setBorder(Border.RIGHT, BorderLineStyle.THICK, Const.PBorder_color);
                bottomFormat_left_t.setBorder(Border.BOTTOM, BorderLineStyle.THICK, Const.SBorder_color);
                bottomFormat_left_t.setAlignment(Alignment.CENTRE);
                WritableSheet sheet = wwBook.createSheet("S-P表诊断分析", 0);
                try {
                    List sName = new ArrayList();
                    if (0 == 0) {
                        for (int i = 0; i < sp.length; i++) {
                            for (int j = 0; j < sp[i].length; j++) {
                                sp[i][j] = "0";
                            }
                        }
                        for (int i2 = 0; i2 < qu.size(); i2++) {
                            List qq = (List) qu.get(i2);
                            sp[0][i2 + 1] = qq.get(0).toString();
                            sp[sp.length - 1][i2 + 1] = qq.get(1).toString();
                        }
                        for (int i3 = 0; i3 < st.size(); i3++) {
                            List ss = (List) st.get(i3);
                            for (int j2 = 0; j2 < ss.size(); j2++) {
                                if (j2 == 0) {
                                    List<Student> a1 = this.examService.getStudent(ss.get(0).toString(), schoolNum, gradeNum, classNum);
                                    if (a1.size() > 0) {
                                        Student s = a1.get(0);
                                        sp[i3 + 1][0] = s.getStudentName();
                                    }
                                } else {
                                    String str = (null == ss.get(j2) || "".equals(ss.get(j2))) ? "0" : ss.get(j2).toString();
                                    sp[i3 + 1][j2] = str;
                                }
                            }
                        }
                        for (int i4 = 1; i4 < sp.length - 1; i4++) {
                            for (int j3 = 1; j3 < sp.length - 1; j3++) {
                                if (Integer.parseInt(sp[i4][sp[i4].length - 1]) == Integer.parseInt(sp[j3][sp[j3].length - 1])) {
                                    int datai = 0;
                                    int dataj = 0;
                                    for (int k = 1; k < sp[i4].length - 1; k++) {
                                        if (Integer.parseInt(sp[i4][k]) == 0) {
                                            datai += Integer.parseInt(sp[sp.length - 1][k]);
                                        }
                                        if (Integer.parseInt(sp[j3][k]) == 0) {
                                            dataj += Integer.parseInt(sp[sp.length - 1][k]);
                                        }
                                    }
                                    if (datai < dataj) {
                                        String[] a = sp[i4];
                                        sp[i4] = sp[j3];
                                        sp[j3] = a;
                                    }
                                }
                            }
                        }
                        for (int i5 = 1; i5 < sp[0].length - 1; i5++) {
                            for (int j4 = i5 + 1; j4 < sp[0].length - 1; j4++) {
                                if (Integer.parseInt(sp[sp.length - 1][i5]) == Integer.parseInt(sp[sp.length - 1][j4])) {
                                    int datai2 = 0;
                                    int dataj2 = 0;
                                    for (int k1 = 1; k1 < sp.length - 1; k1++) {
                                        if (Integer.parseInt(sp[k1][i5]) == 0) {
                                            datai2 += Integer.parseInt(sp[k1][sp[k1].length - 1]);
                                        }
                                        if (Integer.parseInt(sp[k1][j4]) == 0) {
                                            dataj2 += Integer.parseInt(sp[k1][sp[k1].length - 1]);
                                        }
                                    }
                                    if (datai2 > dataj2) {
                                        for (int k2 = 0; k2 < sp.length; k2++) {
                                            String a2 = sp[k2][i5];
                                            sp[k2][i5] = sp[k2][j4];
                                            sp[k2][j4] = a2;
                                        }
                                    }
                                }
                            }
                        }
                        Label biaoti = new Label(0, 0, rpt_name, biaotis1);
                        sheet.addCell(biaoti);
                        File file_sp = new File(imgRoot + "/common/image/s_p.png");
                        WritableImage image = new WritableImage(0.0d, 2.0d, 3.0d, 1.0d, file_sp);
                        sheet.addImage(image);
                        List<Subject> l = this.examService.getSubjectNameByNum(subjectNum);
                        new Subject();
                        if (l.size() > 0) {
                            Subject su = l.get(0);
                            if (!"1".equals(su.getType()) && "2".equals(su.getType())) {
                            }
                        }
                        Label xin_xi = new Label(0, 1, rptTitle2, cFormat1);
                        sheet.addCell(xin_xi);
                        Label biaotiName = new Label(0, 3, "姓名", cFormat2);
                        sheet.addCell(biaotiName);
                        sheet.mergeCells(0, 3, 0, 4);
                        Label questionNum = new Label(1, 3, "题号", cFormat2);
                        sheet.addCell(questionNum);
                        Label numericalOrder = new Label(1, 4, "序号", cFormat2);
                        sheet.addCell(numericalOrder);
                        int quesnum = 0;
                        int quesj = 0;
                        for (int i6 = 1; i6 < sp[0].length - 1; i6++) {
                            if (Integer.valueOf(sp[sp.length - 1][i6]).intValue() - Integer.valueOf(sp[sp.length - 1][i6 + 1]).intValue() > quesnum && i6 + 1 < sp[0].length - 1) {
                                quesnum = Integer.valueOf(sp[sp.length - 1][i6]).intValue() - Integer.valueOf(sp[sp.length - 1][i6 + 1]).intValue();
                                quesj = i6;
                            }
                        }
                        int ques = 0;
                        int qi = 0;
                        for (int i7 = 1; i7 < sp.length - 1; i7++) {
                            for (int j5 = 0; j5 < sp[i7].length; j5++) {
                                if (j5 == sp[i7].length - 1 && i7 < sp.length - 2 && Integer.valueOf(sp[i7][j5]).intValue() - Integer.valueOf(sp[i7 + 1][j5]).intValue() > ques) {
                                    ques = Integer.valueOf(sp[i7][j5]).intValue() - Integer.valueOf(sp[i7 + 1][j5]).intValue();
                                    qi = i7;
                                }
                            }
                        }
                        for (int zd = 1; zd < sp.length - 1; zd++) {
                            zhengdashu_question += Double.valueOf(sp[zd][sp[0].length - 1]).doubleValue();
                        }
                        for (int x = 1; x < sp[0].length - 1; x++) {
                            Label questionNum_vlaue = new Label(x + 1, 3, "T" + sp[0][x], cFormat2);
                            sheet.addCell(questionNum_vlaue);
                            Number numericalOrder_vlaue = new Number(x + 1, 4, x, cFormat2);
                            sheet.addCell(numericalOrder_vlaue);
                            if (x <= quesj) {
                                File file_sp_tu = new File(imgRoot + "/common/image/right.png");
                                WritableImage image_s = new WritableImage(x + 1, 3.0d, 0.2d, 0.3d, file_sp_tu);
                                sheet.addImage(image_s);
                            } else {
                                File file_sp_tu2 = new File(imgRoot + "/common/image/error.png");
                                WritableImage image_s2 = new WritableImage(x + 1, 3.0d, 0.2d, 0.3d, file_sp_tu2);
                                sheet.addImage(image_s2);
                            }
                            questionNumCount = x;
                            int p_xian_0 = Integer.valueOf(sp[sp.length - 1][x]).intValue();
                            int p_xian_1 = Integer.valueOf(sp[sp.length - 1][x]).intValue();
                            double p_xian_0_lv = Integer.valueOf(sp[sp.length - 1][x]).intValue();
                            int jinggaoxishu_0_p = 0;
                            int jinggaoxishu_1_p = 0;
                            int jinggaoxishu_p_all = 0;
                            for (int xishu_p = p_xian_0; xishu_p > 0; xishu_p--) {
                                String sp_p = sp[xishu_p][x];
                                if (sp_p.equals("0")) {
                                    int sp_p_value = Integer.valueOf(sp[xishu_p][sp[0].length - 1]).intValue();
                                    jinggaoxishu_0_p += sp_p_value;
                                }
                                int s_p_value_all = Integer.valueOf(sp[xishu_p][sp[0].length - 1]).intValue();
                                jinggaoxishu_p_all += s_p_value_all;
                            }
                            for (int xishu_right = p_xian_1 + 1; xishu_right < sp.length - 1; xishu_right++) {
                                String sp_p_1 = sp[xishu_right][x];
                                if (sp_p_1.equals("1")) {
                                    int s_p_value_1 = Integer.valueOf(sp[xishu_right][sp[0].length - 1]).intValue();
                                    jinggaoxishu_1_p += s_p_value_1;
                                }
                            }
                            double ac = p_xian_0_lv / (sp.length - 2);
                            DecimalFormat df = new DecimalFormat("0.00");
                            df.setRoundingMode(RoundingMode.HALF_UP);
                            Double co_val = Double.valueOf(Double.parseDouble(df.format(ac)));
                            double jinggaoxishu_difference_p = jinggaoxishu_0_p - jinggaoxishu_1_p;
                            double xishu_p2 = jinggaoxishu_p_all - (ac * zhengdashu_question) != 0.0d ? jinggaoxishu_difference_p / (jinggaoxishu_p_all - (ac * zhengdashu_question)) : 0.0d;
                            DecimalFormat dfs_p = new DecimalFormat("0.00");
                            dfs_p.setRoundingMode(RoundingMode.HALF_UP);
                            Double xishu_p_all = Double.valueOf(Double.parseDouble(dfs_p.format(xishu_p2)));
                            if (xishu_p_all.doubleValue() > 1.0d) {
                                xishu_p_all = Double.valueOf(1.0d);
                            }
                            Number questionWarningCoefficient_value = new Number(x + 1, sp.length + 5, xishu_p_all.doubleValue(), cFormat2);
                            sheet.addCell(questionWarningCoefficient_value);
                            student_zhengdasLv += co_val.doubleValue();
                            if (xishu_p_all.doubleValue() < 0.5d || xishu_p_all.doubleValue() == 0.5d) {
                                Label explain_ss = new Label(x + 1, sp.length + 6, "---", cFormat2);
                                sheet.addCell(explain_ss);
                            } else if (xishu_p_all.doubleValue() <= 0.5d || xishu_p_all.doubleValue() >= 0.75d) {
                                Label explain_ss2 = new Label(x + 1, sp.length + 6, "详尽分析", cFormat2);
                                sheet.addCell(explain_ss2);
                            } else {
                                Label explain_ss3 = new Label(x + 1, sp.length + 6, "提醒注意", cFormat2);
                                sheet.addCell(explain_ss3);
                            }
                            if (co_val.doubleValue() > 0.5d && xishu_p_all.doubleValue() <= 0.5d) {
                                Label area_an = new Label(x + 1, sp.length + 7, "A", cFormat2);
                                sheet.addCell(area_an);
                            } else if (co_val.doubleValue() > 0.5d && xishu_p_all.doubleValue() > 0.5d) {
                                Label area_an2 = new Label(x + 1, sp.length + 7, "A＇", cFormat2);
                                sheet.addCell(area_an2);
                            } else if (co_val.doubleValue() <= 0.5d && xishu_p_all.doubleValue() <= 0.5d) {
                                Label area_an3 = new Label(x + 1, sp.length + 7, "B", cFormat2);
                                sheet.addCell(area_an3);
                            } else if (co_val.doubleValue() <= 0.5d && xishu_p_all.doubleValue() > 0.5d) {
                                Label area_an4 = new Label(x + 1, sp.length + 7, "B＇", cFormat2);
                                sheet.addCell(area_an4);
                            }
                            Number questionCorrectRate_value = new Number(x + 1, sp.length + 4, co_val.doubleValue(), cFormat2);
                            sheet.addCell(questionCorrectRate_value);
                        }
                        for (int js = sp.length - 1; js < sp.length + 4; js++) {
                            Label explain_lie = new Label(questionNumCount + 2, js + 4, "---", cFormat2);
                            sheet.addCell(explain_lie);
                            Label correctRate_lie = new Label(questionNumCount + 3, js + 4, "---", cFormat2);
                            sheet.addCell(correctRate_lie);
                            Label jinggaoxishu_value = new Label(questionNumCount + 4, 4 + js, "---", cFormat2);
                            sheet.addCell(jinggaoxishu_value);
                            Label stuName_value = new Label(questionNumCount + 5, 4 + js, "---", cFormat2);
                            sheet.addCell(stuName_value);
                            Label explain_value = new Label(questionNumCount + 6, 4 + js, "---", cFormat2);
                            sheet.addCell(explain_value);
                            Label area_value = new Label(questionNumCount + 7, 4 + js, "---", cFormat2);
                            sheet.addCell(area_value);
                            Label studyType_value = new Label(questionNumCount + 8, 4 + js, "---", cFormat2);
                            sheet.addCell(studyType_value);
                        }
                        Map map = new HashMap();
                        for (int s2 = 1; s2 < sp.length; s2++) {
                            int s_xian_0 = Integer.valueOf(sp[s2][sp[s2].length - 1]).intValue();
                            for (int w = 0; w < sp[s2].length; w++) {
                                int p_xian_02 = Integer.valueOf(sp[sp.length - 1][w]).intValue();
                                if (s2 == p_xian_02 + 1 && p_xian_02 != 0) {
                                    if (w != s_xian_0 + 1 || s_xian_0 == 0) {
                                        WritableCellFormat bottomFormat_now = new WritableCellFormat();
                                        bottomFormat_now.setAlignment(Alignment.CENTRE);
                                        bottomFormat_now.setBorder(Border.TOP, BorderLineStyle.THICK, Colour.BLUE);
                                        if (w <= Integer.valueOf(sp[s2][sp[s2].length - 1]).intValue() && w > Integer.valueOf(sp[s2 + 1][sp[s2 + 1].length - 1]).intValue() && s2 + 1 != sp.length - 1 && Integer.valueOf(sp[s2][sp[s2].length - 1]) != Integer.valueOf(sp[s2 + 1][sp[s2 + 1].length - 1])) {
                                            bottomFormat_now.setBorder(Border.BOTTOM, BorderLineStyle.THICK, Colour.RED);
                                        }
                                        Number studentName_vlaue = new Number(w + 1, 4 + s2, Integer.valueOf(sp[s2][w]).intValue(), bottomFormat_now);
                                        sheet.addCell(studentName_vlaue);
                                    } else {
                                        Number studentName_vlaue2 = new Number(w + 1, 4 + s2, Integer.valueOf(sp[s2][w]).intValue(), bottomFormat_left_p);
                                        sheet.addCell(studentName_vlaue2);
                                    }
                                    if (sp.length - 1 == s2) {
                                        Label xuhao_vlaue = new Label(1, 4 + s2, "", cFormat2);
                                        sheet.addCell(xuhao_vlaue);
                                        zhengdashu += Integer.parseInt(String.valueOf(sp[s2][w]));
                                        Number zhengdashuSum = new Number(questionNumCount + 2, 4 + s2, zhengdashu, cFormat2);
                                        sheet.addCell(zhengdashuSum);
                                    }
                                } else if (s2 == p_xian_02) {
                                    int p_xia = Integer.valueOf(sp[sp.length - 1][w + 1]).intValue();
                                    if (p_xian_02 != p_xia) {
                                        for (int px = p_xian_02; px > p_xia; px--) {
                                            WritableCellFormat bottomFormat_now2 = new WritableCellFormat();
                                            bottomFormat_now2.setAlignment(Alignment.CENTRE);
                                            if (w <= Integer.valueOf(sp[px - 1][sp[px - 1].length - 1]).intValue() && w > Integer.valueOf(sp[px][sp[px].length - 1]).intValue()) {
                                                bottomFormat_now2.setBorder(Border.TOP, BorderLineStyle.THICK, Colour.RED);
                                            }
                                            int ss2 = s2 - (p_xian_02 - px);
                                            if (w == Integer.valueOf(sp[ss2][sp[ss2].length - 1]).intValue() && Integer.valueOf(sp[ss2][sp[ss2].length - 1]) != Integer.valueOf(sp[ss2 + 1][sp[ss2 + 1].length - 1])) {
                                                bottomFormat_now2.setBorder(Border.BOTTOM, BorderLineStyle.THICK, Colour.RED);
                                            }
                                            if (w < sp[s2].length - 2) {
                                                bottomFormat_now2.setBorder(Border.RIGHT, BorderLineStyle.THICK, Colour.BLUE);
                                                map.put(w + "", px + "");
                                            } else if (w == Integer.valueOf(sp[ss2][sp[ss2].length - 1]).intValue()) {
                                                bottomFormat_now2.setBorder(Border.RIGHT, BorderLineStyle.THICK, Colour.RED);
                                            }
                                            if (p_xian_02 != p_xia && p_xian_02 == px) {
                                                bottomFormat_now2.setBorder(Border.BOTTOM, BorderLineStyle.THICK, Colour.BLUE);
                                            }
                                            Number studentName_vlaue3 = new Number(w + 1, 4 + px, Integer.valueOf(sp[px][w]).intValue(), bottomFormat_now2);
                                            sheet.addCell(studentName_vlaue3);
                                        }
                                    } else {
                                        Number studentName_vlaue4 = new Number(w + 1, 4 + s2, Integer.valueOf(sp[s2][w]).intValue(), cFormat2);
                                        sheet.addCell(studentName_vlaue4);
                                        if (w == s_xian_0) {
                                            Number studentName_vlaue5 = new Number(w + 1, 4 + s2, Integer.valueOf(sp[s2][w]).intValue(), normalFormat_right);
                                            sheet.addCell(studentName_vlaue5);
                                        }
                                    }
                                    if (sp.length - 1 == s2) {
                                        Label xuhao_vlaue2 = new Label(1, 4 + s2, "", cFormat2);
                                        sheet.addCell(xuhao_vlaue2);
                                        zhengdashu += Integer.parseInt(String.valueOf(sp[s2][w]));
                                        Number zhengdashuSum2 = new Number(questionNumCount + 2, 4 + s2, zhengdashu, cFormat2);
                                        sheet.addCell(zhengdashuSum2);
                                    }
                                } else if (w == 0) {
                                    Label studentName_vlaue6 = new Label(w, 4 + s2, sp[s2][w], cFormat2);
                                    sheet.addCell(studentName_vlaue6);
                                    if (s2 < sp.length - 1 && w == 0 && ques > 1) {
                                        if (s2 <= qi) {
                                            File file_sp_tu3 = new File(imgRoot + "/common/image/right.png");
                                            WritableImage image_s3 = new WritableImage(w, 4 + s2, 0.2d, 0.3d, file_sp_tu3);
                                            sheet.addImage(image_s3);
                                        } else {
                                            File file_sp_tu4 = new File(imgRoot + "/common/image/error.png");
                                            WritableImage image_s4 = new WritableImage(w, 4 + s2, 0.2d, 0.3d, file_sp_tu4);
                                            sheet.addImage(image_s4);
                                        }
                                    }
                                    Number xuhao_vlaue3 = new Number(w + 1, 4 + s2, s2, cFormat2);
                                    sheet.addCell(xuhao_vlaue3);
                                } else if (w == s_xian_0) {
                                    int s_xia = Integer.valueOf(sp[s2 + 1][sp[s2].length - 1]).intValue();
                                    if (s_xian_0 == s_xia || s_xia == 0) {
                                        Number studentName_vlaue7 = new Number(w + 1, 4 + s2, Integer.valueOf(sp[s2][w]).intValue(), normalFormat_right);
                                        sheet.addCell(studentName_vlaue7);
                                    } else {
                                        for (int sx = s_xian_0; sx > s_xia; sx--) {
                                            WritableCellFormat bottomFormat_now3 = new WritableCellFormat();
                                            bottomFormat_now3.setAlignment(Alignment.CENTRE);
                                            if (s2 + 1 != sp.length - 1) {
                                                bottomFormat_now3.setBorder(Border.BOTTOM, BorderLineStyle.THICK, Colour.RED);
                                            }
                                            if (Integer.valueOf(sp[sp.length - 1][sx]).intValue() < s2 && s2 <= Integer.valueOf(sp[sp.length - 1][sx - 1]).intValue()) {
                                                bottomFormat_now3.setBorder(Border.LEFT, BorderLineStyle.THICK, Colour.BLUE);
                                            }
                                            if (Integer.valueOf(sp[sp.length - 1][sx + 1]).intValue() < s2 && s2 <= Integer.valueOf(sp[sp.length - 1][sx]).intValue()) {
                                                bottomFormat_now3.setBorder(Border.RIGHT, BorderLineStyle.THICK, Colour.BLUE);
                                            }
                                            if (Integer.valueOf(sp[sp.length - 1][sx]).intValue() + 1 == s2) {
                                                bottomFormat_now3.setBorder(Border.TOP, BorderLineStyle.THICK, Colour.BLUE);
                                            }
                                            if (sx == s_xian_0) {
                                                bottomFormat_now3.setBorder(Border.RIGHT, BorderLineStyle.THICK, Colour.RED);
                                            }
                                            Number studentName_vlaue8 = new Number(sx + 1, 4 + s2, Integer.valueOf(sp[s2][sx]).intValue(), bottomFormat_now3);
                                            sheet.addCell(studentName_vlaue8);
                                        }
                                    }
                                } else if (w != s_xian_0 + 1 || s_xian_0 == 0) {
                                    Number studentName_vlaue9 = new Number(w + 1, 4 + s2, Integer.valueOf(sp[s2][w]).intValue(), cFormat2);
                                    sheet.addCell(studentName_vlaue9);
                                    if (sp.length - 1 == s2) {
                                        Label xuhao_vlaue4 = new Label(1, 4 + s2, "", cFormat2);
                                        sheet.addCell(xuhao_vlaue4);
                                        zhengdashu += Integer.parseInt(String.valueOf(sp[s2][w]));
                                        Number zhengdashuSum3 = new Number(questionNumCount + 2, 4 + s2, zhengdashu, cFormat2);
                                        sheet.addCell(zhengdashuSum3);
                                    }
                                } else {
                                    WritableCellFormat bottomFormat_now4 = new WritableCellFormat();
                                    WritableCellFormat bottomFormat_now22 = new WritableCellFormat();
                                    bottomFormat_now22.setAlignment(Alignment.CENTRE);
                                    if (s2 > Integer.valueOf(sp[sp.length - 1][w - 1]).intValue() || s2 <= Integer.valueOf(sp[sp.length - 1][w]).intValue() || w > sp[s2].length - 2) {
                                        bottomFormat_now4.setBorder(Border.RIGHT, BorderLineStyle.THICK, Colour.RED);
                                    } else {
                                        bottomFormat_now4.setBorder(Border.RIGHT, BorderLineStyle.THICK, Colour.BLUE);
                                    }
                                    bottomFormat_now4.setAlignment(Alignment.CENTRE);
                                    int p_xian_2 = Integer.valueOf(sp[sp.length - 1][s_xian_0]).intValue();
                                    int p_xian_3 = Integer.valueOf(sp[sp.length - 1][s_xian_0 + 1]).intValue();
                                    int p_xian_4 = s_xian_0 + 2 > sp[sp.length - 1].length - 1 ? Integer.valueOf(sp[sp.length - 1][s_xian_0]).intValue() : Integer.valueOf(sp[sp.length - 1][s_xian_0 + 2]).intValue();
                                    if (p_xian_2 == s2) {
                                        bottomFormat_now4.setBorder(Border.BOTTOM, BorderLineStyle.THICK, Colour.BLUE);
                                    }
                                    if (s2 + 1 != sp.length - 1 && Integer.valueOf(sp[s2][sp[s2].length - 1]) != Integer.valueOf(sp[s2 + 1][sp[s2 + 1].length - 1])) {
                                        bottomFormat_now4.setBorder(Border.BOTTOM, BorderLineStyle.THICK, Colour.RED);
                                    }
                                    if (s2 - 1 != 0 && Integer.valueOf(sp[s2][sp[s2].length - 1]) != Integer.valueOf(sp[s2 - 1][sp[s2 - 1].length - 1])) {
                                        bottomFormat_now22.setBorder(Border.TOP, BorderLineStyle.THICK, Colour.RED);
                                    }
                                    if (w < sp[s2].length - 2 && p_xian_3 > s2 && p_xian_4 < s2) {
                                        bottomFormat_now22.setBorder(Border.RIGHT, BorderLineStyle.THICK, Colour.BLUE);
                                    }
                                    Number studentName_vlaue1 = new Number(w + 1, 4 + s2, Integer.valueOf(sp[s2][w]).intValue(), bottomFormat_now22);
                                    sheet.addCell(studentName_vlaue1);
                                    Number studentName_vlaue10 = new Number(w, 4 + s2, Integer.valueOf(sp[s2][w - 1]).intValue(), bottomFormat_now4);
                                    sheet.addCell(studentName_vlaue10);
                                    if (sp.length - 1 == s2) {
                                        Label xuhao_vlaue5 = new Label(1, 4 + s2, "", cFormat2);
                                        sheet.addCell(xuhao_vlaue5);
                                        zhengdashu += Integer.parseInt(String.valueOf(sp[s2][w]));
                                        Number zhengdashuSum4 = new Number(questionNumCount + 2, 4 + s2, zhengdashu, cFormat2);
                                        sheet.addCell(zhengdashuSum4);
                                    }
                                }
                                hangshu = w;
                                sheet.setColumnView(w, 7);
                            }
                            lieshu = s2;
                            if (s2 < sp.length - 1) {
                                sName.add(sp[s2][0] + "");
                            }
                        }
                        for (int s3 = 1; s3 < sp.length - 1; s3++) {
                            int s_xian_02 = Integer.valueOf(sp[s3][sp[s3].length - 1]).intValue();
                            int s_xian_1 = Integer.valueOf(sp[s3][sp[s3].length - 1]).intValue();
                            double zhengdaLv = Double.valueOf(String.valueOf(sp[s3][questionNumCount + 1])).doubleValue();
                            double ac2 = zhengdaLv / questionNumCount;
                            DecimalFormat df2 = new DecimalFormat("0.00");
                            df2.setRoundingMode(RoundingMode.HALF_UP);
                            double co_val2 = Double.parseDouble(df2.format(ac2));
                            double jinggaoxishu_0 = 0.0d;
                            double jinggaoxishu_1 = 0.0d;
                            double jinggaoxishu_all = 0.0d;
                            for (int xishu = s_xian_02; xishu > 0; xishu--) {
                                String sp_s = sp[s3][xishu];
                                if (sp_s.equals("0")) {
                                    double s_p_value = Double.valueOf(sp[sp.length - 1][xishu]).doubleValue();
                                    jinggaoxishu_0 += s_p_value;
                                }
                                double s_p_value_all2 = Double.valueOf(sp[sp.length - 1][xishu]).doubleValue();
                                jinggaoxishu_all += s_p_value_all2;
                            }
                            for (int xishu_right2 = s_xian_1 + 1; xishu_right2 < sp[0].length - 1; xishu_right2++) {
                                String sp_s_1 = sp[s3][xishu_right2];
                                if (sp_s_1.equals("1")) {
                                    double s_p_value_12 = Double.valueOf(sp[sp.length - 1][xishu_right2]).doubleValue();
                                    jinggaoxishu_1 += s_p_value_12;
                                }
                            }
                            double jinggaoxishu_difference = jinggaoxishu_0 - jinggaoxishu_1;
                            double xishu2 = jinggaoxishu_all - (ac2 * zhengdashu_question) != 0.0d ? jinggaoxishu_difference / (jinggaoxishu_all - (ac2 * zhengdashu_question)) : 0.0d;
                            DecimalFormat dfs = new DecimalFormat("0.00");
                            dfs.setRoundingMode(RoundingMode.HALF_UP);
                            Double xishu_all = Double.valueOf(Double.parseDouble(dfs.format(xishu2)));
                            if (xishu_all.doubleValue() > 1.0d) {
                                xishu_all = Double.valueOf(1.0d);
                            }
                            Number correctRate_value = new Number(questionNumCount + 3, 4 + s3, co_val2, cFormat2);
                            sheet.addCell(correctRate_value);
                            if (ques > 1) {
                                if (s3 <= qi) {
                                    File file_sp_tu5 = new File(imgRoot + "/common/image/right.png");
                                    WritableImage image_s5 = new WritableImage(questionNumCount + 5, 4 + s3, 0.2d, 0.3d, file_sp_tu5);
                                    sheet.addImage(image_s5);
                                } else {
                                    File file_sp_tu6 = new File(imgRoot + "/common/image/error.png");
                                    WritableImage image_s6 = new WritableImage(questionNumCount + 5, 4 + s3, 0.2d, 0.3d, file_sp_tu6);
                                    sheet.addImage(image_s6);
                                }
                            }
                            Label stuNameValue = new Label(questionNumCount + 5, 4 + s3, sName.get(s3 - 1).toString(), cFormat2);
                            sheet.addCell(stuNameValue);
                            if (xishu_all.doubleValue() < 0.5d || xishu_all.doubleValue() == 0.5d) {
                                Number warning_value = new Number(questionNumCount + 4, 4 + s3, xishu_all.doubleValue(), cFormat2);
                                sheet.addCell(warning_value);
                                Label explain_value2 = new Label(questionNumCount + 6, 4 + s3, "---", cFormat2);
                                sheet.addCell(explain_value2);
                            } else if (xishu_all.doubleValue() <= 0.5d || xishu_all.doubleValue() >= 0.75d) {
                                Number warning_value2 = new Number(questionNumCount + 4, 4 + s3, xishu_all.doubleValue(), cFormat4);
                                sheet.addCell(warning_value2);
                                Label explain_value3 = new Label(questionNumCount + 6, 4 + s3, "特别注意", cFormat4);
                                sheet.addCell(explain_value3);
                            } else {
                                Number warning_value3 = new Number(questionNumCount + 4, 4 + s3, xishu_all.doubleValue(), cFormat3);
                                sheet.addCell(warning_value3);
                                Label explain_value4 = new Label(questionNumCount + 6, 4 + s3, "提醒注意", cFormat3);
                                sheet.addCell(explain_value4);
                            }
                            if (co_val2 > 0.75d && xishu_all.doubleValue() <= 0.5d) {
                                Label student_area = new Label(questionNumCount + 7, 4 + s3, "A", cFormat2);
                                sheet.addCell(student_area);
                                Label learning_type = new Label(questionNumCount + 8, 4 + s3, "学习良好，稳定性高", cFormat2);
                                sheet.addCell(learning_type);
                            } else if (co_val2 > 0.75d && xishu_all.doubleValue() > 0.5d) {
                                Label student_area2 = new Label(questionNumCount + 7, 4 + s3, "A＇", cFormat2);
                                sheet.addCell(student_area2);
                                Label learning_type2 = new Label(questionNumCount + 8, 4 + s3, "粗心大意", cFormat2);
                                sheet.addCell(learning_type2);
                            } else if (co_val2 >= 0.5d && co_val2 <= 0.75d && xishu_all.doubleValue() <= 0.5d) {
                                Label student_area3 = new Label(questionNumCount + 7, 4 + s3, "B", cFormat2);
                                sheet.addCell(student_area3);
                                Label learning_type3 = new Label(questionNumCount + 8, 4 + s3, "学习尚且稳定，需要用功", cFormat2);
                                sheet.addCell(learning_type3);
                            } else if (co_val2 >= 0.5d && co_val2 <= 0.75d && xishu_all.doubleValue() > 0.5d) {
                                Label student_area4 = new Label(questionNumCount + 7, 4 + s3, "B＇", cFormat2);
                                sheet.addCell(student_area4);
                                Label learning_type4 = new Label(questionNumCount + 8, 4 + s3, "偶尔粗心，需要努力", cFormat2);
                                sheet.addCell(learning_type4);
                            } else if (co_val2 > 0.5d || xishu_all.doubleValue() > 0.5d) {
                                Label student_area5 = new Label(questionNumCount + 7, 4 + s3, "C＇", cFormat2);
                                sheet.addCell(student_area5);
                                Label learning_type5 = new Label(questionNumCount + 8, 4 + s3, "学习不努力，没有准备", cFormat2);
                                sheet.addCell(learning_type5);
                            } else {
                                Label student_area6 = new Label(questionNumCount + 7, 4 + s3, "C", cFormat2);
                                sheet.addCell(student_area6);
                                Label learning_type6 = new Label(questionNumCount + 8, 4 + s3, "努力不足，需要努力", cFormat2);
                                sheet.addCell(learning_type6);
                            }
                            sheet.setColumnView(questionNumCount + 8, 28);
                        }
                        Label correctRate_values = new Label(questionNumCount + 2, 5 + lieshu, "---", cFormat2);
                        sheet.addCell(correctRate_values);
                        Label studentName_vlaue11 = new Label(0, lieshu + 4, "题目正答数", cFormat2);
                        sheet.addCell(studentName_vlaue11);
                        sheet.mergeCells(0, lieshu + 4, 1, lieshu + 4);
                        Label questionCorrectRate = new Label(0, lieshu + 5, "题目正答率", cFormat2);
                        sheet.addCell(questionCorrectRate);
                        sheet.mergeCells(0, lieshu + 5, 1, lieshu + 5);
                        Label questionWarningCoefficient = new Label(0, lieshu + 6, "题目警告系数", cFormat2);
                        sheet.addCell(questionWarningCoefficient);
                        sheet.mergeCells(0, lieshu + 6, 1, lieshu + 6);
                        Label explain = new Label(0, lieshu + 7, "解释说明", cFormat2);
                        sheet.addCell(explain);
                        sheet.mergeCells(0, lieshu + 7, 1, lieshu + 7);
                        Label area_an5 = new Label(0, lieshu + 8, "区域", cFormat2);
                        sheet.addCell(area_an5);
                        sheet.mergeCells(0, lieshu + 8, 1, lieshu + 8);
                        File file_sp_tu7 = new File(imgRoot + "/common/image/sp.png");
                        WritableImage image_s7 = new WritableImage(0.0d, lieshu + 10, 15.0d, 17.0d, file_sp_tu7);
                        sheet.addImage(image_s7);
                        Label correctCount = new Label(hangshu + 1, 3, "正答数", cFormat2);
                        sheet.addCell(correctCount);
                        sheet.mergeCells(hangshu + 1, 3, hangshu + 1, 4);
                        Label correctRate = new Label(hangshu + 2, 3, "正答率", cFormat2);
                        sheet.addCell(correctRate);
                        sheet.mergeCells(hangshu + 2, 3, hangshu + 2, 4);
                        DecimalFormat df3 = new DecimalFormat("0.00");
                        df3.setRoundingMode(RoundingMode.HALF_UP);
                        double zhengdalv_sun = Double.valueOf(df3.format(student_zhengdasLv)).doubleValue() / questionNumCount;
                        Double co_val_sum = Double.valueOf(Double.parseDouble(df3.format(zhengdalv_sun)));
                        Number correctRate_value_s = new Number(questionNumCount + 3, lieshu + 5, co_val_sum.doubleValue(), cFormat2);
                        sheet.addCell(correctRate_value_s);
                        Label warning = new Label(hangshu + 3, 3, "警告系数", cFormat2);
                        sheet.addCell(warning);
                        sheet.mergeCells(hangshu + 3, 3, hangshu + 3, 4);
                        Label stuName = new Label(hangshu + 4, 3, "姓名", cFormat2);
                        sheet.addCell(stuName);
                        sheet.mergeCells(hangshu + 4, 3, hangshu + 4, 4);
                        Label explain_hang = new Label(hangshu + 5, 3, "解释说明", cFormat2);
                        sheet.addCell(explain_hang);
                        sheet.mergeCells(hangshu + 5, 3, hangshu + 5, 4);
                        Label area = new Label(hangshu + 6, 3, " 区域", cFormat2);
                        sheet.addCell(area);
                        sheet.mergeCells(hangshu + 6, 3, hangshu + 6, 4);
                        Label studyType = new Label(hangshu + 7, 3, "学习类型 ", cFormat2);
                        sheet.addCell(studyType);
                        sheet.mergeCells(hangshu + 7, 3, hangshu + 7, 4);
                        sheet.mergeCells(0, 0, hangshu + 6, 0);
                        sheet.mergeCells(0, 1, hangshu + 6, 1);
                        sheet.setColumnView(0, 8);
                        sheet.setColumnView(1, 7);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                wwBook.write();
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            if (Integer.valueOf(all_class).intValue() == 1) {
                                HttpServletResponse response = ServletActionContext.getResponse();
                                response.reset();
                                ServletOutputStream outputStream = response.getOutputStream();
                                String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                String loadFileName2 = loadFileName.replace("+", " ");
                                response.setContentType("Content-type: applicationnd.ms-excel");
                                response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xls");
                                response.setHeader("Content-length", String.valueOf(excelFile.length()));
                                byte[] tempByte = new byte[1024];
                                FileInputStream in = new FileInputStream(excelFile);
                                while (true) {
                                    int n = in.read(tempByte);
                                    if (n == -1) {
                                        break;
                                    }
                                    try {
                                        outputStream.write(tempByte, 0, n);
                                    } catch (Exception e2) {
                                        this.log.error("保存未成功", e2);
                                    }
                                }
                                outputStream.flush();
                                outputStream.close();
                                in.close();
                            } else {
                                filePath = methodZipAll(uri, dirPath, folderName, zipName);
                            }
                        }
                    } catch (Exception e3) {
                        e3.printStackTrace();
                    }
                }
            } catch (Exception e4) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            if (Integer.valueOf(all_class).intValue() == 1) {
                                HttpServletResponse response2 = ServletActionContext.getResponse();
                                response2.reset();
                                ServletOutputStream outputStream2 = response2.getOutputStream();
                                String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                String loadFileName4 = loadFileName3.replace("+", " ");
                                response2.setContentType("Content-type: applicationnd.ms-excel");
                                response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xls");
                                response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                                byte[] tempByte2 = new byte[1024];
                                FileInputStream in2 = new FileInputStream(excelFile);
                                while (true) {
                                    int n2 = in2.read(tempByte2);
                                    if (n2 == -1) {
                                        break;
                                    }
                                    try {
                                        outputStream2.write(tempByte2, 0, n2);
                                    } catch (Exception e5) {
                                        this.log.error("保存未成功", e5);
                                    }
                                }
                                outputStream2.flush();
                                outputStream2.close();
                                in2.close();
                            } else {
                                filePath = methodZipAll(uri, dirPath, folderName, zipName);
                            }
                        }
                    } catch (Exception e6) {
                        e6.printStackTrace();
                    }
                }
            } catch (Throwable th) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            if (Integer.valueOf(all_class).intValue() == 1) {
                                HttpServletResponse response3 = ServletActionContext.getResponse();
                                response3.reset();
                                ServletOutputStream outputStream3 = response3.getOutputStream();
                                String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                String loadFileName6 = loadFileName5.replace("+", " ");
                                response3.setContentType("Content-type: applicationnd.ms-excel");
                                response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xls");
                                response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                                byte[] tempByte3 = new byte[1024];
                                FileInputStream in3 = new FileInputStream(excelFile);
                                while (true) {
                                    int n3 = in3.read(tempByte3);
                                    if (n3 == -1) {
                                        break;
                                    }
                                    try {
                                        outputStream3.write(tempByte3, 0, n3);
                                    } catch (Exception e7) {
                                        this.log.error("保存未成功", e7);
                                    }
                                }
                                outputStream3.flush();
                                outputStream3.close();
                                in3.close();
                            } else {
                                methodZipAll(uri, dirPath, folderName, zipName);
                            }
                        }
                    } catch (Exception e8) {
                        e8.printStackTrace();
                        throw th;
                    }
                }
                throw th;
            }
        } catch (Exception e9) {
            e9.printStackTrace();
        }
        return filePath;
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String c9_exportgetData(String examNum, String gradeNum, String schoolNum, String subjectNum, String classNum, String studentId, String studentType, String type, String source, String step, String sNum, String c_exam, String rpt_name, String isMoreSchool, String rptTitle, String isHistory, String isSaveWrite, String dirPath, String uri, String userNum, String schName, String gradeName, String className, String subjectName, String imgRoot, String all_class, String agent, String subCompose) {
        new ArrayList();
        List list = this.reportService.getQtypeScoreDetail(examNum, gradeNum, schoolNum, subjectNum, classNum, studentType, type, source, "0", subCompose);
        String rptTitle2 = this.sp.getHeaderStr(examNum, subjectNum, gradeNum, schoolNum, classNum, studentId, studentType, true, true, true, true, false, true, true, true, false, true, true, true, true, true, false, subCompose, "0");
        String viewRankOfScoreInfo = Configuration.getInstance().getViewRankOfScoreInfo();
        String folderPath = "reportExcel" + userNum;
        String folderName = "reportExcel" + userNum;
        String zipName = "reportExcel" + userNum;
        String excelName = (null == gradeName || "".equals(gradeName)) ? rpt_name + "_" + gradeNum : rpt_name + "_" + gradeName;
        if (null != classNum && !"".equals(classNum) && !classNum.contains(Const.STRING_SEPERATOR)) {
            excelName = (null == className || "".equals(className)) ? excelName + "_" + classNum : excelName + "_" + className;
        }
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        String filePath = null;
        try {
            WritableWorkbook wwBook = Workbook.createWorkbook(excelFile);
            WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
            biaotis1.setAlignment(Alignment.LEFT);
            biaotis1.setVerticalAlignment(VerticalAlignment.CENTRE);
            WritableFont titles = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat title = new WritableCellFormat(titles);
            title.setAlignment(Alignment.LEFT);
            title.setVerticalAlignment(VerticalAlignment.CENTRE);
            title.setWrap(true);
            WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            WritableCellFormat cFormat1 = new WritableCellFormat(font1);
            cFormat1.setAlignment(Alignment.CENTRE);
            cFormat1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1.setBackground(Const.titleBackground_color);
            cFormat1.setWrap(true);
            new NumberFormat("0.0");
            WritableCellFormat cFormat1_1 = new WritableCellFormat(font1);
            cFormat1_1.setAlignment(Alignment.CENTRE);
            cFormat1_1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1_1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1_1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1_1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1_1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1_1.setBackground(Const.titleBackground_color);
            cFormat1_1.setWrap(true);
            WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            CellFormat writableCellFormat = new WritableCellFormat(font2);
            writableCellFormat.setAlignment(Alignment.CENTRE);
            writableCellFormat.setVerticalAlignment(VerticalAlignment.CENTRE);
            writableCellFormat.setBackground(Const.textOuBackGround_color);
            writableCellFormat.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            writableCellFormat.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            writableCellFormat.setBorder(Border.LEFT, BorderLineStyle.THIN);
            writableCellFormat.setBorder(Border.TOP, BorderLineStyle.THIN);
            writableCellFormat.setWrap(true);
            WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            CellFormat writableCellFormat2 = new WritableCellFormat(font3);
            writableCellFormat2.setAlignment(Alignment.CENTRE);
            writableCellFormat2.setVerticalAlignment(VerticalAlignment.CENTRE);
            writableCellFormat2.setBackground(Const.textJiBackGround_color);
            writableCellFormat2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            writableCellFormat2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            writableCellFormat2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            writableCellFormat2.setBorder(Border.TOP, BorderLineStyle.THIN);
            writableCellFormat2.setWrap(true);
            try {
                try {
                    WritableSheet sheet = wwBook.createSheet(rpt_name, 0);
                    sheet.getSettings().setShowGridLines(false);
                    try {
                        Label biaotou = new Label(0, 0, rpt_name, biaotis1);
                        sheet.addCell(biaotou);
                        List qtypeData = (List) list.get(0);
                        List allStuData = (List) list.get(1);
                        String isMoreSchoolFlag = String.valueOf(list.get(2));
                        DecimalFormat df1 = new DecimalFormat("0.0");
                        df1.setRoundingMode(RoundingMode.HALF_UP);
                        Label xinxi = new Label(0, 1, rptTitle2, title);
                        sheet.addCell(xinxi);
                        sheet.setRowView(1, Const.height_500);
                        String[] titleArr = {"姓名", "学号", "科目成绩"};
                        if ("1".equals(viewRankOfScoreInfo)) {
                            titleArr = new String[]{"姓名", "学号", "科目成绩", "班排名", "校排名"};
                            if ("T".equals(isMoreSchoolFlag)) {
                                titleArr = new String[]{"姓名", "学号", "科目成绩", "班排名", "校排名", "区排名"};
                            }
                        }
                        int titleLen = titleArr.length;
                        for (int i = 0; i < titleLen; i++) {
                            Label _title = new Label(i, 2, titleArr[i], cFormat1);
                            sheet.addCell(_title);
                            sheet.mergeCells(i, 2, i, 3);
                        }
                        sheet.mergeCells(0, 0, qtypeData.size() + titleLen, 0);
                        sheet.mergeCells(0, 1, qtypeData.size() + titleLen, 1);
                        Label manes_title = new Label(titleLen, 2, "名称", cFormat1);
                        sheet.addCell(manes_title);
                        Label full_title = new Label(titleLen, 3, "满分", cFormat1);
                        sheet.addCell(full_title);
                        for (int j = 0; j < qtypeData.size(); j++) {
                            Label manes = new Label(titleLen + 1 + j, 2, ((QuestionType) qtypeData.get(j)).getName(), cFormat1);
                            sheet.addCell(manes);
                            BigDecimal score0 = Convert.toBigDecimal(df1.format(Double.valueOf(((QuestionType) qtypeData.get(j)).getExt2()))).stripTrailingZeros();
                            String scoreStr = score0.toPlainString();
                            Number fulls = new Number(titleLen + 1 + j, 3, Double.valueOf(scoreStr).doubleValue(), cFormat1_1);
                            sheet.addCell(fulls);
                        }
                        int[] titleDataIndex = {13, 15, 16, 17, 18, 19};
                        for (int i2 = 0; i2 < allStuData.size(); i2++) {
                            List all = (List) allStuData.get(i2);
                            CellFormat cellFormat = i2 % 2 != 0 ? writableCellFormat : writableCellFormat2;
                            for (int si = 0; si < all.size(); si++) {
                                if (si == 0) {
                                    for (int d = 0; d < titleLen; d++) {
                                        if (d < 2) {
                                            Label _value = new Label(d, 4 + i2, String.valueOf(((Object[]) all.get(si))[titleDataIndex[d]]), cellFormat);
                                            sheet.addCell(_value);
                                        } else if (d == 2) {
                                            Number _value2 = new Number(d, 4 + i2, Double.valueOf(((Object[]) all.get(si))[titleDataIndex[d]].toString()).doubleValue(), cellFormat);
                                            sheet.addCell(_value2);
                                        } else {
                                            Number _value3 = new Number(d, 4 + i2, Integer.valueOf(((Object[]) all.get(si))[titleDataIndex[d]].toString()).intValue(), cellFormat);
                                            sheet.addCell(_value3);
                                        }
                                    }
                                    Label claName = new Label(titleLen, 4 + i2, String.valueOf(((Object[]) all.get(si))[4]), cellFormat);
                                    sheet.addCell(claName);
                                }
                                Number a9 = new Number(titleLen + 1 + si, 4 + i2, Double.valueOf(((Object[]) all.get(si))[9].toString()).doubleValue(), cellFormat);
                                sheet.addCell(a9);
                            }
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    wwBook.write();
                    if (wwBook != null) {
                        try {
                            wwBook.close();
                            if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                                if (Integer.valueOf(all_class).intValue() == 1) {
                                    HttpServletResponse response = ServletActionContext.getResponse();
                                    response.reset();
                                    ServletOutputStream outputStream = response.getOutputStream();
                                    String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                    String loadFileName2 = loadFileName.replace("+", " ");
                                    response.setContentType("Content-type: applicationnd.ms-excel");
                                    response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xls");
                                    response.setHeader("Content-length", String.valueOf(excelFile.length()));
                                    byte[] tempByte = new byte[1024];
                                    FileInputStream in = new FileInputStream(excelFile);
                                    while (true) {
                                        int n = in.read(tempByte);
                                        if (n == -1) {
                                            break;
                                        }
                                        try {
                                            outputStream.write(tempByte, 0, n);
                                        } catch (Exception e2) {
                                            this.log.error("保存未成功", e2);
                                        }
                                    }
                                    outputStream.flush();
                                    outputStream.close();
                                    in.close();
                                } else {
                                    filePath = methodZipAll(uri, dirPath, folderName, zipName);
                                }
                            }
                        } catch (WriteException e3) {
                            e3.printStackTrace();
                        }
                    }
                } catch (Exception e4) {
                    if (wwBook != null) {
                        try {
                            wwBook.close();
                            if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                                if (Integer.valueOf(all_class).intValue() == 1) {
                                    HttpServletResponse response2 = ServletActionContext.getResponse();
                                    response2.reset();
                                    ServletOutputStream outputStream2 = response2.getOutputStream();
                                    String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                    String loadFileName4 = loadFileName3.replace("+", " ");
                                    response2.setContentType("Content-type: applicationnd.ms-excel");
                                    response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xls");
                                    response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                                    byte[] tempByte2 = new byte[1024];
                                    FileInputStream in2 = new FileInputStream(excelFile);
                                    while (true) {
                                        int n2 = in2.read(tempByte2);
                                        if (n2 == -1) {
                                            break;
                                        }
                                        try {
                                            outputStream2.write(tempByte2, 0, n2);
                                        } catch (Exception e5) {
                                            this.log.error("保存未成功", e5);
                                        }
                                    }
                                    outputStream2.flush();
                                    outputStream2.close();
                                    in2.close();
                                } else {
                                    filePath = methodZipAll(uri, dirPath, folderName, zipName);
                                }
                            }
                        } catch (WriteException e6) {
                            e6.printStackTrace();
                        }
                    }
                }
            } catch (Throwable th) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            if (Integer.valueOf(all_class).intValue() == 1) {
                                HttpServletResponse response3 = ServletActionContext.getResponse();
                                response3.reset();
                                ServletOutputStream outputStream3 = response3.getOutputStream();
                                String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                String loadFileName6 = loadFileName5.replace("+", " ");
                                response3.setContentType("Content-type: applicationnd.ms-excel");
                                response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xls");
                                response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                                byte[] tempByte3 = new byte[1024];
                                FileInputStream in3 = new FileInputStream(excelFile);
                                while (true) {
                                    int n3 = in3.read(tempByte3);
                                    if (n3 == -1) {
                                        break;
                                    }
                                    try {
                                        outputStream3.write(tempByte3, 0, n3);
                                    } catch (Exception e7) {
                                        this.log.error("保存未成功", e7);
                                    }
                                }
                                outputStream3.flush();
                                outputStream3.close();
                                in3.close();
                            } else {
                                methodZipAll(uri, dirPath, folderName, zipName);
                            }
                        }
                    } catch (WriteException e8) {
                        e8.printStackTrace();
                        throw th;
                    }
                }
                throw th;
            }
        } catch (Exception e9) {
            e9.printStackTrace();
        }
        return filePath;
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String G1_exportg1(String teachUnit_s, String examNum, String gradeNum, String teachUnit, String subjectNum, String classNum, String studentId, String studentType, String type, String source, String step, String sNum, String c_exam, String rpt_name, String isMoreSchool, String rptTitle, String isHistory, String isSaveWrite, String dirPath, String uri, String userNum, String schName, String gradeName, String className, String subjectName, String imgRoot, String agent, String show, String fufen, String radio, String viewRankInfo, String subCompose, String islevel, String ordertype, String orderval) {
        String folderPath = "ExportFolder/reportExcel" + userNum;
        String str = "reportExcel" + userNum;
        String str2 = "reportExcel" + userNum;
        String excelName = (null == gradeName || "".equals(gradeName)) ? rpt_name + "_" + gradeNum : rpt_name + "_" + gradeName;
        if (null != classNum && !"".equals(classNum) && !classNum.contains(Const.STRING_SEPERATOR)) {
            excelName = (null == className || "".equals(className)) ? excelName + "_" + classNum : excelName + "_" + className;
        }
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        try {
            List<Gradelevel> quest = this.g.getallIndex(teachUnit_s, examNum, subjectNum, gradeNum, teachUnit, classNum, type, studentType, source, sNum, fufen, radio, subCompose, islevel, ordertype, orderval);
            WritableWorkbook wwBook = Workbook.createWorkbook(excelFile);
            WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
            biaotis1.setAlignment(Alignment.LEFT);
            WritableFont titles = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat title = new WritableCellFormat(titles);
            title.setAlignment(Alignment.LEFT);
            title.setVerticalAlignment(VerticalAlignment.CENTRE);
            title.setWrap(true);
            WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            WritableCellFormat cFormat1 = new WritableCellFormat(font1);
            cFormat1.setAlignment(Alignment.CENTRE);
            cFormat1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1.setBackground(Const.titleBackground_color);
            cFormat1.setWrap(true);
            WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat2 = new WritableCellFormat(font2);
            cFormat2.setAlignment(Alignment.CENTRE);
            cFormat2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2.setBackground(Const.textOuBackGround_color);
            cFormat2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2.setWrap(true);
            DateFormat df1 = new DateFormat("0.0%");
            WritableCellFormat cFormat2_0 = new WritableCellFormat(font2, df1);
            cFormat2_0.setAlignment(Alignment.CENTRE);
            cFormat2_0.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_0.setBackground(Const.textOuBackGround_color);
            cFormat2_0.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_0.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_0.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_0.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_0.setWrap(true);
            NumberFormat nf1 = new NumberFormat("0.0");
            WritableCellFormat cFormat2_1 = new WritableCellFormat(font2, nf1);
            cFormat2_1.setAlignment(Alignment.CENTRE);
            cFormat2_1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_1.setBackground(Const.textOuBackGround_color);
            cFormat2_1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_1.setWrap(true);
            NumberFormat nf2 = new NumberFormat("0.00");
            WritableCellFormat cFormat2_2 = new WritableCellFormat(font2, nf2);
            cFormat2_2.setAlignment(Alignment.CENTRE);
            cFormat2_2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_2.setBackground(Const.textOuBackGround_color);
            cFormat2_2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_2.setWrap(true);
            WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat3 = new WritableCellFormat(font3);
            cFormat3.setAlignment(Alignment.CENTRE);
            cFormat3.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3.setBackground(Const.textJiBackGround_color);
            cFormat3.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3.setWrap(true);
            WritableCellFormat cFormat3_0 = new WritableCellFormat(font3, df1);
            cFormat3_0.setAlignment(Alignment.CENTRE);
            cFormat3_0.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_0.setBackground(Const.textJiBackGround_color);
            cFormat3_0.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_0.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_0.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_0.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_0.setWrap(true);
            WritableCellFormat cFormat3_1 = new WritableCellFormat(font3, nf1);
            cFormat3_1.setAlignment(Alignment.CENTRE);
            cFormat3_1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_1.setBackground(Const.textJiBackGround_color);
            cFormat3_1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_1.setWrap(true);
            WritableCellFormat cFormat3_2 = new WritableCellFormat(font3, nf2);
            cFormat3_2.setAlignment(Alignment.CENTRE);
            cFormat3_2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_2.setBackground(Const.textJiBackGround_color);
            cFormat3_2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_2.setWrap(true);
            String viewRankOfScoreInfo = Configuration.getInstance().getViewRankOfScoreInfo();
            try {
                WritableSheet sheet = wwBook.createSheet(rpt_name, 0);
                sheet.getSettings().setShowGridLines(false);
                try {
                    Label biaotou = new Label(0, 0, rpt_name, biaotis1);
                    sheet.addCell(biaotou);
                    DecimalFormat df01 = new DecimalFormat("0.0");
                    DecimalFormat df02 = new DecimalFormat("0.00");
                    DecimalFormat df03 = new DecimalFormat("0.000");
                    df01.setRoundingMode(RoundingMode.HALF_UP);
                    df02.setRoundingMode(RoundingMode.HALF_UP);
                    df03.setRoundingMode(RoundingMode.HALF_UP);
                    Label xinxi = new Label(0, 1, rptTitle, title);
                    sheet.addCell(xinxi);
                    sheet.setRowView(1, Const.height_500);
                    int xx = 0;
                    if ("01".equals(teachUnit_s)) {
                        sheet.mergeCells(0, 0, 17, 0);
                        sheet.mergeCells(0, 1, 17, 1);
                        Label classNames = new Label(0, 2, "教学单位", cFormat1);
                        sheet.addCell(classNames);
                        sheet.mergeCells(0, 2, 0, 3);
                    } else {
                        sheet.mergeCells(0, 0, 18, 0);
                        sheet.mergeCells(0, 1, 18, 1);
                        if ("00".equals(teachUnit_s) && radio.equals("2")) {
                            xx = 1;
                            Label schoolNames = new Label(0, 2, "教学单位", cFormat1);
                            sheet.addCell(schoolNames);
                            sheet.mergeCells(0, 2, 0, 3);
                            Label classNames2 = new Label(1, 2, "班级", cFormat1);
                            sheet.addCell(classNames2);
                            sheet.mergeCells(1, 2, 1, 3);
                        } else {
                            Label classNames3 = new Label(0, 2, "教学单位", cFormat1);
                            sheet.addCell(classNames3);
                            sheet.mergeCells(0, 2, 0, 3);
                        }
                    }
                    Label numOfStudent = new Label(1 + xx, 2, "参考人数", cFormat1);
                    sheet.addCell(numOfStudent);
                    sheet.mergeCells(1 + xx, 2, 1 + xx, 3);
                    Label average = new Label(2 + xx, 2, "平均分 ", cFormat1);
                    sheet.addCell(average);
                    sheet.mergeCells(2 + xx, 2, 2 + xx, 3);
                    int ii = 0;
                    if (!viewRankOfScoreInfo.equals("3")) {
                        Label rank = new Label(3 + xx, 2, "均分排名 ", cFormat1);
                        sheet.addCell(rank);
                        sheet.mergeCells(3 + xx, 2, 3 + xx, 3);
                        ii = 0 + 1;
                    }
                    Label max = new Label(3 + xx + ii, 2, "最高分", cFormat1);
                    sheet.addCell(max);
                    sheet.mergeCells(3 + xx + ii, 2, 3 + xx + ii, 3);
                    Label min = new Label(4 + xx + ii, 2, "最低分", cFormat1);
                    sheet.addCell(min);
                    sheet.mergeCells(4 + xx + ii, 2, 4 + xx + ii, 3);
                    Label sd = new Label(5 + xx + ii, 2, "难度", cFormat1);
                    sheet.addCell(sd);
                    sheet.mergeCells(5 + xx + ii, 2, 5 + xx + ii, 3);
                    Label cv = new Label(6 + xx + ii, 2, "区分度", cFormat1);
                    sheet.addCell(cv);
                    sheet.mergeCells(6 + xx + ii, 2, 6 + xx + ii, 3);
                    Label difficult = new Label(7 + xx + ii, 2, "标准差", cFormat1);
                    sheet.addCell(difficult);
                    sheet.mergeCells(7 + xx + ii, 2, 7 + xx + ii, 3);
                    Label desci = new Label(8 + xx + ii, 2, "变异系数", cFormat1);
                    sheet.addCell(desci);
                    sheet.mergeCells(8 + xx + ii, 2, 8 + xx + ii, 3);
                    Label highscoreNum = new Label(9 + xx + ii, 2, "高分人数 ", cFormat1);
                    sheet.addCell(highscoreNum);
                    sheet.mergeCells(9 + xx + ii, 2, 9 + xx + ii, 3);
                    Label highrate = new Label(10 + xx + ii, 2, "高分率", cFormat1);
                    sheet.addCell(highrate);
                    sheet.mergeCells(10 + xx + ii, 2, 10 + xx + ii, 3);
                    Label excellence = new Label(11 + xx + ii, 2, "优秀人数", cFormat1);
                    sheet.addCell(excellence);
                    sheet.mergeCells(11 + xx + ii, 2, 11 + xx + ii, 3);
                    Label excellencerate = new Label(12 + xx + ii, 2, "优秀率", cFormat1);
                    sheet.addCell(excellencerate);
                    sheet.mergeCells(12 + xx + ii, 2, 12 + xx + ii, 3);
                    Label pass = new Label(13 + xx + ii, 2, "及格人数", cFormat1);
                    sheet.addCell(pass);
                    sheet.mergeCells(13 + xx + ii, 2, 13 + xx + ii, 3);
                    Label passrate = new Label(14 + xx + ii, 2, "及格率", cFormat1);
                    sheet.addCell(passrate);
                    sheet.mergeCells(14 + xx + ii, 2, 14 + xx + ii, 3);
                    Label a1 = new Label(15 + xx + ii, 2, "低分人数", cFormat1);
                    sheet.addCell(a1);
                    sheet.mergeCells(15 + xx + ii, 2, 15 + xx + ii, 3);
                    Label a2 = new Label(16 + xx + ii, 2, "低分率", cFormat1);
                    sheet.addCell(a2);
                    sheet.mergeCells(16 + xx + ii, 2, 16 + xx + ii, 3);
                    String aa = "前" + sNum + "名";
                    Label num = new Label(17 + xx + ii, 2, aa, cFormat1);
                    sheet.addCell(num);
                    Label numzi = new Label(17 + xx + ii, 3, "贡献数", cFormat1);
                    sheet.addCell(numzi);
                    Label devote = new Label(18 + xx + ii, 2, "贡献率", cFormat1);
                    sheet.addCell(devote);
                    sheet.mergeCells(18 + xx + ii, 2, 18 + xx + ii, 3);
                    int iii = 0;
                    if (!viewRankOfScoreInfo.equals("3")) {
                        Label t_order = new Label(19 + xx + ii, 2, "贡献排名", cFormat1);
                        sheet.addCell(t_order);
                        sheet.mergeCells(19 + xx + ii, 2, 19 + xx + ii, 3);
                        iii = 0 + 1;
                    }
                    String teacherTitle = subjectNum.length() < 3 ? "班主任" : "学科教师";
                    Label teacherName = new Label(19 + xx + ii + iii, 2, teacherTitle, cFormat1);
                    sheet.addCell(teacherName);
                    sheet.mergeCells(19 + xx + ii + iii, 2, 19 + xx + ii + iii, 3);
                    sheet.setColumnView(19 + xx + ii + iii, 50);
                    for (int i = 0; i < quest.size(); i++) {
                        if (i % 2 != 0) {
                            if ("00".equals(teachUnit_s) && radio.equals("2")) {
                                Label schoolNames2 = new Label(0, 4 + i, quest.get(i).getExt1(), cFormat2);
                                sheet.addCell(schoolNames2);
                            }
                            Label classNames4 = new Label(0 + xx, 4 + i, quest.get(i).getClassName(), cFormat2);
                            sheet.addCell(classNames4);
                            Number numOfStudent1 = new Number(1 + xx, 4 + i, Integer.valueOf(quest.get(i).getNumOfStudent()).intValue(), cFormat2);
                            sheet.addCell(numOfStudent1);
                            double av = Double.parseDouble(quest.get(i).getAverage().toString());
                            Number average1 = new Number(2 + xx, 4 + i, Double.valueOf(df02.format(av)).doubleValue(), cFormat2_2);
                            sheet.addCell(average1);
                            if (!viewRankOfScoreInfo.equals("3")) {
                                if (quest.get(i).getRank() == null || quest.get(i).getRank().equals("")) {
                                    Label rank1 = new Label(3 + xx, 4 + i, "", cFormat2);
                                    sheet.addCell(rank1);
                                } else {
                                    Number rank12 = new Number(3 + xx, 4 + i, Integer.valueOf(quest.get(i).getRank()).intValue(), cFormat2);
                                    sheet.addCell(rank12);
                                }
                            }
                            BigDecimal max0 = Convert.toBigDecimal(quest.get(i).getMax()).stripTrailingZeros();
                            String maxstr = max0.toPlainString();
                            BigDecimal min0 = Convert.toBigDecimal(quest.get(i).getMin()).stripTrailingZeros();
                            String minstr = min0.toPlainString();
                            Label max1 = new Label(3 + xx + ii, 4 + i, maxstr, cFormat2_1);
                            sheet.addCell(max1);
                            Label min1 = new Label(4 + xx + ii, 4 + i, minstr, cFormat2_1);
                            sheet.addCell(min1);
                            Number difficult1 = new Number(5 + xx + ii, 4 + i, Double.parseDouble(df02.format(quest.get(i).getDifficult())), cFormat2_2);
                            sheet.addCell(difficult1);
                            Number desci1 = new Number(6 + xx + ii, 4 + i, Double.valueOf(df02.format(quest.get(i).getDesci())).doubleValue(), cFormat2);
                            sheet.addCell(desci1);
                            Number sd1 = new Number(7 + xx + ii, 4 + i, Double.valueOf(df02.format(quest.get(i).getSd())).doubleValue(), cFormat2_2);
                            sheet.addCell(sd1);
                            Number cv1 = new Number(8 + xx + ii, 4 + i, Double.valueOf(df02.format(quest.get(i).getCv())).doubleValue(), cFormat2_2);
                            sheet.addCell(cv1);
                            Number highscoreNum1 = new Number(9 + xx + ii, 4 + i, Integer.valueOf(quest.get(i).getHighscoreNum()).intValue(), cFormat2);
                            sheet.addCell(highscoreNum1);
                            Number highrate1 = new Number(10 + xx + ii, 4 + i, Double.valueOf(df03.format(quest.get(i).getHighrate())).doubleValue(), cFormat2_0);
                            sheet.addCell(highrate1);
                            Number excellence1 = new Number(11 + xx + ii, 4 + i, Integer.valueOf(quest.get(i).getExcellence()).intValue(), cFormat2);
                            sheet.addCell(excellence1);
                            Number excellencerate1 = new Number(12 + xx + ii, 4 + i, Double.valueOf(df03.format(quest.get(i).getExcellencerate())).doubleValue(), cFormat2_0);
                            sheet.addCell(excellencerate1);
                            Number pass1 = new Number(13 + xx + ii, 4 + i, Integer.valueOf(quest.get(i).getPass()).intValue(), cFormat2);
                            sheet.addCell(pass1);
                            Number passrate1 = new Number(14 + xx + ii, 4 + i, Double.valueOf(df03.format(quest.get(i).getPassrate())).doubleValue(), cFormat2_0);
                            sheet.addCell(passrate1);
                            Number a11 = new Number(15 + xx + ii, 4 + i, Integer.valueOf(quest.get(i).getLowscoreNum() == null ? "" : quest.get(i).getLowscoreNum()).intValue(), cFormat2);
                            sheet.addCell(a11);
                            Number a22 = new Number(16 + xx + ii, 4 + i, Double.valueOf(df03.format(quest.get(i).getLowrate())).doubleValue(), cFormat2_0);
                            sheet.addCell(a22);
                            if (quest.get(i).getNum() == null || quest.get(i).getNum().equals("")) {
                                Label num1 = new Label(17 + xx + ii, 4 + i, "", cFormat2);
                                sheet.addCell(num1);
                            } else if (i != quest.size() - 1) {
                                Number num12 = new Number(17 + xx + ii, 4 + i, Integer.valueOf(quest.get(i).getNum()).intValue(), cFormat2);
                                sheet.addCell(num12);
                            } else {
                                Label num13 = new Label(17 + xx + ii, 4 + i, "", cFormat2);
                                sheet.addCell(num13);
                            }
                            if (quest.get(i).getDevote() == null || quest.get(i).getDevote().equals("")) {
                                Label devote1 = new Label(18 + xx + ii, 4 + i, "", cFormat2);
                                sheet.addCell(devote1);
                            } else if (i != quest.size() - 1) {
                                Number devote12 = new Number(18 + xx + ii, 4 + i, Double.valueOf(df03.format(quest.get(i).getDevote())).doubleValue(), cFormat2_0);
                                sheet.addCell(devote12);
                            } else {
                                Label devote13 = new Label(18 + xx + ii, 4 + i, "", cFormat2);
                                sheet.addCell(devote13);
                            }
                            if (!viewRankOfScoreInfo.equals("3")) {
                                if (quest.get(i).getT_order() == null || quest.get(i).getT_order().equals("")) {
                                    Label t_order1 = new Label(19 + xx + ii, 4 + i, "", cFormat2);
                                    sheet.addCell(t_order1);
                                } else {
                                    Number t_order12 = new Number(19 + xx + ii, 4 + i, Integer.valueOf(quest.get(i).getT_order()).intValue(), cFormat2);
                                    sheet.addCell(t_order12);
                                }
                            }
                            Label teacherName1 = new Label(19 + xx + ii + iii, 4 + i, quest.get(i).getTeacherName(), cFormat2);
                            sheet.addCell(teacherName1);
                        } else {
                            if ("00".equals(teachUnit_s) && radio.equals("2")) {
                                Label schoolNames3 = new Label(0, 4 + i, quest.get(i).getExt1(), cFormat3);
                                sheet.addCell(schoolNames3);
                            }
                            Label classNames5 = new Label(0 + xx, 4 + i, quest.get(i).getClassName(), cFormat3);
                            sheet.addCell(classNames5);
                            Number numOfStudent12 = new Number(1 + xx, 4 + i, Integer.valueOf(quest.get(i).getNumOfStudent()).intValue(), cFormat3);
                            sheet.addCell(numOfStudent12);
                            double av2 = Double.parseDouble(quest.get(i).getAverage().toString());
                            Number average12 = new Number(2 + xx, 4 + i, Double.valueOf(df02.format(av2)).doubleValue(), cFormat3_2);
                            sheet.addCell(average12);
                            if (!viewRankOfScoreInfo.equals("3")) {
                                if (quest.get(i).getRank() == null || quest.get(i).getRank().equals("")) {
                                    Label rank13 = new Label(3 + xx, 4 + i, "", cFormat3);
                                    sheet.addCell(rank13);
                                } else {
                                    Number rank14 = new Number(3 + xx, 4 + i, Integer.valueOf(quest.get(i).getRank()).intValue(), cFormat3);
                                    sheet.addCell(rank14);
                                }
                            }
                            BigDecimal max02 = Convert.toBigDecimal(quest.get(i).getMax()).stripTrailingZeros();
                            String maxstr2 = max02.toPlainString();
                            BigDecimal min02 = Convert.toBigDecimal(quest.get(i).getMin()).stripTrailingZeros();
                            String minstr2 = min02.toPlainString();
                            Label max12 = new Label(3 + xx + ii, 4 + i, maxstr2, cFormat3_1);
                            sheet.addCell(max12);
                            Label min12 = new Label(4 + xx + ii, 4 + i, minstr2, cFormat3_1);
                            sheet.addCell(min12);
                            Number difficult12 = new Number(5 + xx + ii, 4 + i, Double.parseDouble(df02.format(quest.get(i).getDifficult())), cFormat3_2);
                            sheet.addCell(difficult12);
                            Number desci12 = new Number(6 + xx + ii, 4 + i, Double.valueOf(df02.format(quest.get(i).getDesci())).doubleValue(), cFormat3);
                            sheet.addCell(desci12);
                            Number sd12 = new Number(7 + xx + ii, 4 + i, Double.valueOf(df02.format(quest.get(i).getSd())).doubleValue(), cFormat3_2);
                            sheet.addCell(sd12);
                            Number cv12 = new Number(8 + xx + ii, 4 + i, Double.valueOf(df02.format(quest.get(i).getCv())).doubleValue(), cFormat3_2);
                            sheet.addCell(cv12);
                            Number highscoreNum12 = new Number(9 + xx + ii, 4 + i, Integer.valueOf(quest.get(i).getHighscoreNum()).intValue(), cFormat3);
                            sheet.addCell(highscoreNum12);
                            Number highrate12 = new Number(10 + xx + ii, 4 + i, Double.valueOf(df03.format(quest.get(i).getHighrate())).doubleValue(), cFormat3_0);
                            sheet.addCell(highrate12);
                            Number excellence12 = new Number(11 + xx + ii, 4 + i, Integer.valueOf(quest.get(i).getExcellence()).intValue(), cFormat3);
                            sheet.addCell(excellence12);
                            Number excellencerate12 = new Number(12 + xx + ii, 4 + i, Double.valueOf(df03.format(quest.get(i).getExcellencerate())).doubleValue(), cFormat3_0);
                            sheet.addCell(excellencerate12);
                            Number pass12 = new Number(13 + xx + ii, 4 + i, Integer.valueOf(quest.get(i).getPass()).intValue(), cFormat3);
                            sheet.addCell(pass12);
                            Number passrate12 = new Number(14 + xx + ii, 4 + i, Double.valueOf(df03.format(quest.get(i).getPassrate())).doubleValue(), cFormat3_0);
                            sheet.addCell(passrate12);
                            Number a112 = new Number(15 + xx + ii, 4 + i, Integer.valueOf(quest.get(i).getLowscoreNum() == null ? "" : quest.get(i).getLowscoreNum()).intValue(), cFormat3);
                            sheet.addCell(a112);
                            Number a222 = new Number(16 + xx + ii, 4 + i, Double.valueOf(df03.format(quest.get(i).getLowrate())).doubleValue(), cFormat3_0);
                            sheet.addCell(a222);
                            if (quest.get(i).getNum() == null || quest.get(i).getNum().equals("")) {
                                Label num14 = new Label(17 + xx + ii, 4 + i, "", cFormat3);
                                sheet.addCell(num14);
                            } else if (i != quest.size() - 1) {
                                Number num15 = new Number(17 + xx + ii, 4 + i, Integer.valueOf(quest.get(i).getNum()).intValue(), cFormat3);
                                sheet.addCell(num15);
                            } else {
                                Label num16 = new Label(17 + xx + ii, 4 + i, "", cFormat3);
                                sheet.addCell(num16);
                            }
                            if (quest.get(i).getDevote() == null || quest.get(i).getDevote().equals("")) {
                                Label devote14 = new Label(18 + xx + ii, 4 + i, "", cFormat3);
                                sheet.addCell(devote14);
                            } else if (i != quest.size() - 1) {
                                Number devote15 = new Number(18 + xx + ii, 4 + i, Double.valueOf(df03.format(quest.get(i).getDevote())).doubleValue(), cFormat3_0);
                                sheet.addCell(devote15);
                            } else {
                                Label devote16 = new Label(18 + xx + ii, 4 + i, "", cFormat3);
                                sheet.addCell(devote16);
                            }
                            if (!viewRankOfScoreInfo.equals("3")) {
                                if (quest.get(i).getT_order() == null || quest.get(i).getT_order().equals("")) {
                                    Label t_order13 = new Label(19 + xx + ii, 4 + i, "", cFormat3);
                                    sheet.addCell(t_order13);
                                } else {
                                    Number t_order14 = new Number(19 + xx + ii, 4 + i, Integer.valueOf(quest.get(i).getT_order()).intValue(), cFormat3);
                                    sheet.addCell(t_order14);
                                }
                            }
                            Label teacherName12 = new Label(19 + xx + ii + iii, 4 + i, quest.get(i).getTeacherName(), cFormat3);
                            sheet.addCell(teacherName12);
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                wwBook.write();
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response = ServletActionContext.getResponse();
                            response.reset();
                            ServletOutputStream outputStream = response.getOutputStream();
                            String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName2 = loadFileName.replace("+", " ");
                            response.setContentType("Content-type: applicationnd.ms-excel");
                            response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xls");
                            response.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte = new byte[1024];
                            FileInputStream in = new FileInputStream(excelFile);
                            while (true) {
                                int n = in.read(tempByte);
                                if (n == -1) {
                                    break;
                                }
                                try {
                                    outputStream.write(tempByte, 0, n);
                                } catch (Exception e2) {
                                    this.log.error("保存未成功", e2);
                                }
                            }
                            outputStream.flush();
                            outputStream.close();
                            in.close();
                        }
                    } catch (WriteException e3) {
                        e3.printStackTrace();
                    }
                }
            } catch (Exception e4) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response2 = ServletActionContext.getResponse();
                            response2.reset();
                            ServletOutputStream outputStream2 = response2.getOutputStream();
                            String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName4 = loadFileName3.replace("+", " ");
                            response2.setContentType("Content-type: applicationnd.ms-excel");
                            response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xls");
                            response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte2 = new byte[1024];
                            FileInputStream in2 = new FileInputStream(excelFile);
                            while (true) {
                                int n2 = in2.read(tempByte2);
                                if (n2 == -1) {
                                    break;
                                }
                                try {
                                    outputStream2.write(tempByte2, 0, n2);
                                } catch (Exception e5) {
                                    this.log.error("保存未成功", e5);
                                }
                            }
                            outputStream2.flush();
                            outputStream2.close();
                            in2.close();
                        }
                    } catch (WriteException e6) {
                        e6.printStackTrace();
                    }
                }
            } catch (Throwable th) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response3 = ServletActionContext.getResponse();
                            response3.reset();
                            ServletOutputStream outputStream3 = response3.getOutputStream();
                            String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName6 = loadFileName5.replace("+", " ");
                            response3.setContentType("Content-type: applicationnd.ms-excel");
                            response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xls");
                            response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte3 = new byte[1024];
                            FileInputStream in3 = new FileInputStream(excelFile);
                            while (true) {
                                int n3 = in3.read(tempByte3);
                                if (n3 == -1) {
                                    break;
                                }
                                try {
                                    outputStream3.write(tempByte3, 0, n3);
                                } catch (Exception e7) {
                                    this.log.error("保存未成功", e7);
                                }
                            }
                            outputStream3.flush();
                            outputStream3.close();
                            in3.close();
                        }
                    } catch (WriteException e8) {
                        e8.printStackTrace();
                        throw th;
                    }
                }
                throw th;
            }
        } catch (Exception e9) {
            e9.printStackTrace();
        }
        return null;
    }

    public File getSubChartImgFile_G1(String insertUser, List list, String lType, String num, String dirPath, String radio, String teachUnit_s) {
        subjectLineImage_G1(list, lType, insertUser, num, radio, teachUnit_s);
        File file = new File(dirPath + File.separator + "tmpLinePng" + File.separator + insertUser + lType + ".png");
        return file;
    }

    public void subjectLineImage_G1(List<Gradelevel> list, String lType, String insertUser, String num, String radio, String teachUnit_s) {
        String xName1 = "前" + num + "名分布对比图";
        int className_count = 0;
        String isArea = "1";
        String graphName = "班级名称";
        for (int x = 0; x < list.size(); x++) {
            className_count++;
            if (list.get(x).getClassName().equals("全年级")) {
                isArea = "0";
            }
        }
        int index = list.size();
        if (null != teachUnit_s && null != radio && (!"00".equals(teachUnit_s) || !radio.equals("2"))) {
            className_count--;
            index--;
        }
        if (isArea.equals("1")) {
            graphName = "区域**名称";
        }
        String[] columnKeys1 = new String[className_count];
        new ArrayList();
        new ArrayList();
        DecimalFormat df = new DecimalFormat("0.00");
        DecimalFormat df1 = new DecimalFormat("0.0");
        df.setRoundingMode(RoundingMode.HALF_UP);
        df1.setRoundingMode(RoundingMode.HALF_UP);
        if (lType.equals("highScoreNum")) {
            double[][] data = new double[1][className_count];
            Double.valueOf(0.0d);
            Double.valueOf(0.0d);
            List list_data = new ArrayList();
            for (int i = 0; i < index; i++) {
                if (null != teachUnit_s && null != radio && "00".equals(teachUnit_s) && radio.equals("2")) {
                    columnKeys1[i] = list.get(i).getExt1() + list.get(i).getClassName();
                } else {
                    columnKeys1[i] = list.get(i).getClassName();
                }
                data[0][i] = Double.parseDouble(list.get(i).getNum());
                list_data.add(Double.valueOf(Double.parseDouble(list.get(i).getNum())));
            }
            Double maxDesc = (Double) Collections.max(list_data);
            Double minDesc = (Double) Collections.min(list_data);
            Double count_unit = Double.valueOf((maxDesc.doubleValue() - minDesc.doubleValue()) / 5.0d);
            if (count_unit.doubleValue() < 1.0d) {
                count_unit = Double.valueOf(maxDesc.doubleValue() / 5.0d);
            }
            String[] rowKeys1 = {"贡献数"};
            HttpServletResponse response = ServletActionContext.getResponse();
            response.reset();
            response.setContentType("image/jpeg");
            JFreeChart chart = this.lc.getLineChar(data, rowKeys1, columnKeys1, graphName, "人数", xName1, "#0.0", count_unit, Integer.valueOf(rowKeys1.length), "Y", "##.#");
            getChartImageFolder(chart, "tmpLinePng", Const.width_1100, Const.height_500, insertUser + lType);
        }
        if (lType.equals("rates")) {
            String[] rowKeys12 = {"高分率(%)", "优秀率(%)", "及格率(%)", "低分率(%)"};
            String xName12 = String.valueOf("四率分布对比图");
            double[][] data2 = new double[4][className_count];
            Double.valueOf(0.0d);
            Double.valueOf(0.0d);
            List list_data2 = new ArrayList();
            for (int i2 = 0; i2 < index; i2++) {
                if (null != teachUnit_s && null != radio && "00".equals(teachUnit_s) && radio.equals("2")) {
                    columnKeys1[i2] = list.get(i2).getExt1() + list.get(i2).getClassName();
                } else {
                    columnKeys1[i2] = list.get(i2).getClassName();
                }
                data2[0][i2] = Double.parseDouble(df1.format(list.get(i2).getHighrate().doubleValue() * 100.0d));
                data2[1][i2] = Double.parseDouble(df1.format(list.get(i2).getExcellencerate().doubleValue() * 100.0d));
                data2[2][i2] = Double.parseDouble(df1.format(list.get(i2).getPassrate().doubleValue() * 100.0d));
                data2[3][i2] = Double.parseDouble(df1.format(list.get(i2).getLowrate().doubleValue() * 100.0d));
                list_data2.add(Double.valueOf(Double.parseDouble(df1.format(list.get(i2).getHighrate().doubleValue() * 100.0d))));
                list_data2.add(Double.valueOf(Double.parseDouble(df1.format(list.get(i2).getExcellencerate().doubleValue() * 100.0d))));
                list_data2.add(Double.valueOf(Double.parseDouble(df1.format(list.get(i2).getPassrate().doubleValue() * 100.0d))));
                list_data2.add(Double.valueOf(Double.parseDouble(df1.format(list.get(i2).getLowrate().doubleValue() * 100.0d))));
            }
            Double maxDesc2 = (Double) Collections.max(list_data2);
            Double minDesc2 = (Double) Collections.min(list_data2);
            Double count_unit2 = Double.valueOf((maxDesc2.doubleValue() - minDesc2.doubleValue()) / 5.0d);
            if (count_unit2.doubleValue() < 1.0d) {
                count_unit2 = Double.valueOf(maxDesc2.doubleValue() / 5.0d);
            }
            HttpServletResponse response2 = ServletActionContext.getResponse();
            response2.reset();
            response2.setContentType("image/jpeg");
            JFreeChart chart2 = this.lc.getLineChar(data2, rowKeys12, columnKeys1, "", "", xName12, "#0.0", count_unit2, 0, "Y", "##.#");
            getChartImageFolder(chart2, "tmpLinePng", Const.width_1100, Const.height_500, insertUser + lType);
        }
        if (lType.equals("avg")) {
            String[] rowKeys13 = {"平均分"};
            String xName13 = String.valueOf("平均分");
            double[][] data3 = new double[1][className_count];
            Double.valueOf(0.0d);
            Double.valueOf(0.0d);
            List list_data3 = new ArrayList();
            for (int i3 = 0; i3 < index; i3++) {
                if (null != teachUnit_s && null != radio && "00".equals(teachUnit_s) && radio.equals("2")) {
                    columnKeys1[i3] = list.get(i3).getExt1() + list.get(i3).getClassName();
                } else {
                    columnKeys1[i3] = list.get(i3).getClassName();
                }
                data3[0][i3] = list.get(i3).getAverage().doubleValue();
                list_data3.add(list.get(i3).getAverage());
            }
            Double maxDesc3 = (Double) Collections.max(list_data3);
            Double minDesc3 = (Double) Collections.min(list_data3);
            Double count_unit3 = Double.valueOf((maxDesc3.doubleValue() - minDesc3.doubleValue()) / 5.0d);
            if (count_unit3.doubleValue() < 1.0d) {
                count_unit3 = Double.valueOf(maxDesc3.doubleValue() / 5.0d);
            }
            HttpServletResponse response3 = ServletActionContext.getResponse();
            response3.reset();
            response3.setContentType("image/jpeg");
            JFreeChart chart3 = this.lc.getLineChar(data3, rowKeys13, columnKeys1, "", "", xName13, "#0.0", count_unit3, Integer.valueOf(rowKeys13.length), "Y", "##.##");
            getChartImageFolder(chart3, "tmpLinePng", Const.width_1100, Const.height_500, insertUser + lType);
        }
        if (lType.equals("sd-cv")) {
            String[] rowKeys14 = {"变异系数"};
            String xName14 = String.valueOf("变异系数对比图");
            double[][] data4 = new double[1][className_count];
            Double.valueOf(0.0d);
            Double.valueOf(0.0d);
            List list_data4 = new ArrayList();
            for (int i4 = 0; i4 < index; i4++) {
                if (null != teachUnit_s && null != radio && "00".equals(teachUnit_s) && radio.equals("2")) {
                    columnKeys1[i4] = list.get(i4).getExt1() + list.get(i4).getClassName();
                } else {
                    columnKeys1[i4] = list.get(i4).getClassName();
                }
                data4[0][i4] = Double.parseDouble(df.format(list.get(i4).getCv()));
                list_data4.add(Double.valueOf(Double.parseDouble(df.format(list.get(i4).getCv()))));
            }
            Double maxDesc4 = (Double) Collections.max(list_data4);
            Double minDesc4 = (Double) Collections.min(list_data4);
            Double count_unit4 = Double.valueOf((maxDesc4.doubleValue() - minDesc4.doubleValue()) / 5.0d);
            if (count_unit4.doubleValue() < 1.0d) {
                count_unit4 = Double.valueOf(maxDesc4.doubleValue() / 5.0d);
            }
            HttpServletResponse response4 = ServletActionContext.getResponse();
            response4.reset();
            response4.setContentType("image/jpeg");
            JFreeChart chart4 = this.lc.getLineChar(data4, rowKeys14, columnKeys1, "", "", xName14, "#0.00", count_unit4, Integer.valueOf(rowKeys14.length), "Y", "##.##");
            getChartImageFolder(chart4, "tmpLinePng", Const.width_1100, Const.height_500, insertUser + lType);
        }
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String G2_exportg2(String examNum, String gradeNum, String schoolNum, String subjectNum, String classNum, String studentId, String studentType, String type, String source, String step, String sNum, String c_exam, String rpt_name, String isMoreSchool, String rptTitle, String isHistory, String isSaveWrite, String dirPath, String uri, String userNum, String schName, String gradeName, String className, String subjectName, String imgRoot, String agent, String show, String fufen, String subCompose, String islevel, String tNum) {
        String folderPath = "ExportFolder/reportExcel" + userNum;
        String str = "reportExcel" + userNum;
        String str2 = "reportExcel" + userNum;
        String excelName = (null == gradeName || "".equals(gradeName)) ? rpt_name + "_" + gradeNum : rpt_name + "_" + gradeName;
        if (null != classNum && !"".equals(classNum) && !classNum.contains(Const.STRING_SEPERATOR)) {
            excelName = (null == className || "".equals(className)) ? excelName + "_" + classNum : excelName + "_" + className;
        }
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFileXLSX(excelName, dirPath, folderPath);
        try {
            XSSFWorkbook wwBook = new XSSFWorkbook();
            XSSFFont font_bold = wwBook.createFont();
            font_bold.setFontHeightInPoints((short) 15);
            font_bold.setFontName("Arial");
            font_bold.setBold(true);
            XSSFCellStyle biaotis1 = wwBook.createCellStyle();
            biaotis1.setAlignment(HorizontalAlignment.LEFT);
            biaotis1.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            biaotis1.setFont(font_bold);
            XSSFFont font = wwBook.createFont();
            font.setFontHeightInPoints((short) 10);
            font.setFontName("Arial");
            XSSFCellStyle title = wwBook.createCellStyle();
            title.setAlignment(HorizontalAlignment.LEFT);
            title.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            title.setFont(font);
            title.setWrapText(true);
            XSSFCellStyle cFormat1 = wwBook.createCellStyle();
            cFormat1.setAlignment(HorizontalAlignment.CENTER);
            cFormat1.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cFormat1.setFont(font);
            cFormat1.setWrapText(true);
            cFormat1.setFillForegroundColor(Const.fillForeground_color);
            cFormat1.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cFormat1.setBorderTop(BorderStyle.THIN);
            cFormat1.setBorderRight(BorderStyle.THIN);
            cFormat1.setBorderBottom(BorderStyle.THIN);
            cFormat1.setBorderLeft(BorderStyle.THIN);
            CellStyle createCellStyle = wwBook.createCellStyle();
            createCellStyle.setAlignment(HorizontalAlignment.CENTER);
            createCellStyle.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            createCellStyle.setFont(font);
            createCellStyle.setWrapText(true);
            createCellStyle.setFillForegroundColor(Const.fillForeground_color2);
            createCellStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            createCellStyle.setBorderTop(BorderStyle.THIN);
            createCellStyle.setBorderRight(BorderStyle.THIN);
            createCellStyle.setBorderBottom(BorderStyle.THIN);
            createCellStyle.setBorderLeft(BorderStyle.THIN);
            CellStyle createCellStyle2 = wwBook.createCellStyle();
            createCellStyle2.setAlignment(HorizontalAlignment.CENTER);
            createCellStyle2.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            createCellStyle2.setFont(font);
            createCellStyle2.setWrapText(true);
            createCellStyle2.setFillForegroundColor(Const.fillForeground_color3);
            createCellStyle2.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            createCellStyle2.setBorderTop(BorderStyle.THIN);
            createCellStyle2.setBorderRight(BorderStyle.THIN);
            createCellStyle2.setBorderBottom(BorderStyle.THIN);
            createCellStyle2.setBorderLeft(BorderStyle.THIN);
            List quest = this.g2.getschoolRankCompare(examNum, subjectNum, gradeNum, schoolNum, classNum, type, studentType, source, step, fufen, subCompose, islevel);
            List<List<String>> list1 = (List) quest.get(0);
            List<List<RptHeader>> list2 = (List) quest.get(1);
            try {
                try {
                    XSSFSheet sheet = wwBook.createSheet();
                    wwBook.setSheetName(0, rpt_name);
                    sheet.setDisplayGridlines(false);
                    try {
                        XSSFRow row0_0 = sheet.createRow(0);
                        XSSFCell biaotou = row0_0.createCell(0);
                        biaotou.setCellValue(rpt_name);
                        biaotou.setCellStyle(biaotis1);
                        XSSFRow row0_1 = sheet.createRow(1);
                        row0_1.setHeight((short) 500);
                        XSSFCell xinxi = row0_1.createCell(0);
                        xinxi.setCellValue(rptTitle);
                        xinxi.setCellStyle(title);
                        int size = 4;
                        int t = 0;
                        if (islevel.equals("1") && schoolNum.indexOf(Const.STRING_SEPERATOR) == -1 && !schoolNum.equals("allschool")) {
                            size = 1;
                            if (tNum.equals("0")) {
                                size = 2;
                            }
                        } else if (tNum.equals("0")) {
                            size = 6;
                        }
                        int b = tNum.equals("0") ? 1 : 0;
                        XSSFRow row0_2 = sheet.createRow(2);
                        XSSFCell tUnit = row0_2.createCell(0);
                        tUnit.setCellValue("教学单位");
                        tUnit.setCellStyle(cFormat1);
                        XSSFRow row0_3 = sheet.createRow(3);
                        if (schoolNum.indexOf(Const.STRING_SEPERATOR) == -1 && !schoolNum.equals("allschool")) {
                            XSSFCell teacher = row0_3.createCell(0);
                            teacher.setCellValue("任课教师");
                            teacher.setCellStyle(cFormat1);
                            t = 1;
                        }
                        XSSFRow row0_3t = sheet.createRow(3 + t);
                        XSSFCell ckrs = row0_3t.createCell(0);
                        ckrs.setCellValue("参考人数");
                        ckrs.setCellStyle(cFormat1);
                        XSSFRow row0_4t = sheet.createRow(4 + t);
                        XSSFCell mingci = row0_4t.createCell(0);
                        mingci.setCellValue("名次段");
                        mingci.setCellStyle(cFormat1);
                        CellRangeAddress cellRangeAddress_mingci = new CellRangeAddress(4 + t, 5 + t, 0, 0);
                        sheet.addMergedRegion(cellRangeAddress_mingci);
                        setBorderStyle(BorderStyle.THIN, cellRangeAddress_mingci, sheet);
                        XSSFRow row0_5t = sheet.createRow(5 + t);
                        for (int i = 0; i < list1.size(); i++) {
                            XSSFCell tUnit1 = row0_2.createCell((size * i) + 1);
                            tUnit1.setCellValue(list1.get(i).get(0));
                            tUnit1.setCellStyle(cFormat1);
                            CellRangeAddress cellRangeAddress_tUnit1 = new CellRangeAddress(2, 2, (size * i) + 1, (size * i) + size);
                            sheet.addMergedRegion(cellRangeAddress_tUnit1);
                            setBorderStyle(BorderStyle.THIN, cellRangeAddress_tUnit1, sheet);
                            if (schoolNum.indexOf(Const.STRING_SEPERATOR) == -1 && !schoolNum.equals("allschool")) {
                                XSSFCell teacher1 = row0_3.createCell((size * i) + 1);
                                teacher1.setCellValue(list1.get(i).get(1));
                                teacher1.setCellStyle(cFormat1);
                                CellRangeAddress cellRangeAddress_teacher1 = new CellRangeAddress(3, 3, (size * i) + 1, (size * i) + size);
                                sheet.addMergedRegion(cellRangeAddress_teacher1);
                                setBorderStyle(BorderStyle.THIN, cellRangeAddress_teacher1, sheet);
                            }
                            XSSFCell ckrs1 = row0_3t.createCell((size * i) + 1);
                            ckrs1.setCellValue(list1.get(i).get(2));
                            ckrs1.setCellStyle(cFormat1);
                            CellRangeAddress cellRangeAddress_ckrs1 = new CellRangeAddress(3 + t, 3 + t, (size * i) + 1, (size * i) + size);
                            sheet.addMergedRegion(cellRangeAddress_ckrs1);
                            setBorderStyle(BorderStyle.THIN, cellRangeAddress_ckrs1, sheet);
                            XSSFCell zongfen1 = row0_4t.createCell((size * i) + 1);
                            zongfen1.setCellValue("总分");
                            zongfen1.setCellStyle(cFormat1);
                            if (tNum.equals("0")) {
                                CellRangeAddress cellRangeAddress_zongfen1 = new CellRangeAddress(4 + t, 4 + t, (size * i) + 1, (size * i) + 2);
                                sheet.addMergedRegion(cellRangeAddress_zongfen1);
                                setBorderStyle(BorderStyle.THIN, cellRangeAddress_zongfen1, sheet);
                            }
                            XSSFCell xueke1 = row0_4t.createCell((size * i) + 2 + b);
                            xueke1.setCellValue("学科");
                            xueke1.setCellStyle(cFormat1);
                            if (tNum.equals("0")) {
                                CellRangeAddress cellRangeAddress_xueke1 = new CellRangeAddress(4 + t, 4 + t, (size * i) + 2 + b, (size * i) + 3 + b);
                                sheet.addMergedRegion(cellRangeAddress_xueke1);
                                setBorderStyle(BorderStyle.THIN, cellRangeAddress_xueke1, sheet);
                            }
                            XSSFCell yxleiji1 = row0_4t.createCell((size * i) + 3 + b + b);
                            yxleiji1.setCellValue("累计有效数");
                            yxleiji1.setCellStyle(cFormat1);
                            CellRangeAddress cellRangeAddress_yxleiji1 = new CellRangeAddress(4 + t, 5 + t, (size * i) + 3 + b + b, (size * i) + 3 + b + b);
                            sheet.addMergedRegion(cellRangeAddress_yxleiji1);
                            setBorderStyle(BorderStyle.THIN, cellRangeAddress_yxleiji1, sheet);
                            XSSFCell peihedu1 = row0_4t.createCell((size * i) + 4 + b + b);
                            peihedu1.setCellValue("配合度");
                            peihedu1.setCellStyle(cFormat1);
                            CellRangeAddress cellRangeAddress_peihedu1 = new CellRangeAddress(4 + t, 5 + t, (size * i) + 4 + b + b, (size * i) + 4 + b + b);
                            sheet.addMergedRegion(cellRangeAddress_peihedu1);
                            setBorderStyle(BorderStyle.THIN, cellRangeAddress_peihedu1, sheet);
                            if (tNum.equals("0")) {
                                XSSFCell zfbenduan1 = row0_5t.createCell((size * i) + 1);
                                zfbenduan1.setCellValue("本段");
                                zfbenduan1.setCellStyle(cFormat1);
                                XSSFCell xkbenduan1 = row0_5t.createCell((size * i) + 2 + b);
                                xkbenduan1.setCellValue("本段");
                                xkbenduan1.setCellStyle(cFormat1);
                            }
                            XSSFCell zfleiji1 = row0_5t.createCell((size * i) + 1 + b);
                            zfleiji1.setCellValue("累计");
                            zfleiji1.setCellStyle(cFormat1);
                            XSSFCell xkleiji1 = row0_5t.createCell((size * i) + 2 + b + b);
                            xkleiji1.setCellValue("累计");
                            xkleiji1.setCellStyle(cFormat1);
                        }
                        for (int j = 0; j < list2.size(); j++) {
                            CellStyle cellStyle = j % 2 != 0 ? createCellStyle : createCellStyle2;
                            String mingciduanName = list2.get(j).get(0).getName();
                            XSSFRow shujurow = sheet.createRow(6 + t + j);
                            XSSFCell mingciName = shujurow.createCell(0);
                            mingciName.setCellValue(mingciduanName);
                            mingciName.setCellStyle(cellStyle);
                            for (int k = 0; k < list2.get(j).size(); k++) {
                                RptHeader rptHeader = list2.get(j).get(k);
                                if (tNum.equals("0")) {
                                    XSSFCell zfbenduan12 = shujurow.createCell((size * k) + 1);
                                    zfbenduan12.setCellValue(rptHeader.getExt2());
                                    zfbenduan12.setCellStyle(cellStyle);
                                    XSSFCell xkbenduan12 = shujurow.createCell((size * k) + 2 + b);
                                    xkbenduan12.setCellValue(rptHeader.getExt());
                                    xkbenduan12.setCellStyle(cellStyle);
                                }
                                XSSFCell zfleiji12 = shujurow.createCell((size * k) + 1 + b);
                                zfleiji12.setCellValue(rptHeader.getT1());
                                zfleiji12.setCellStyle(cellStyle);
                                XSSFCell xkleiji12 = shujurow.createCell((size * k) + 2 + b + b);
                                xkleiji12.setCellValue(rptHeader.getT2());
                                xkleiji12.setCellStyle(cellStyle);
                                XSSFCell yxleiji12 = shujurow.createCell((size * k) + 3 + b + b);
                                yxleiji12.setCellValue(rptHeader.getExt3());
                                yxleiji12.setCellStyle(cellStyle);
                                XSSFCell peihedu12 = shujurow.createCell((size * k) + 4 + b + b);
                                peihedu12.setCellValue(rptHeader.getT3());
                                peihedu12.setCellStyle(cellStyle);
                            }
                        }
                        int size1 = 2 + list2.size() + 3 + t + b;
                        XSSFRow row0_size1 = sheet.createRow(size1);
                        XSSFCell tishi = row0_size1.createCell(0);
                        tishi.setCellValue("注：1．“累计有效数”是指总分（累计）和学科（累计）都在指定范围内的累计数。 ");
                        tishi.setCellStyle(title);
                        XSSFRow row0_size11 = sheet.createRow(size1 + 1);
                        XSSFCell tishi2 = row0_size11.createCell(0);
                        tishi2.setCellValue("   2．配合度=累计有效数/总分累计数 ");
                        tishi2.setCellStyle(title);
                        sheet.addMergedRegion(new CellRangeAddress(size1, size1, 0, 10));
                        sheet.addMergedRegion(new CellRangeAddress(size1 + 1, size1 + 1, 0, 10));
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    FileOutputStream fileOut = new FileOutputStream(excelFile);
                    wwBook.write(fileOut);
                    fileOut.close();
                    if (wwBook != null) {
                        try {
                            wwBook.close();
                            if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                                HttpServletResponse response = ServletActionContext.getResponse();
                                response.reset();
                                ServletOutputStream outputStream = response.getOutputStream();
                                String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                String loadFileName2 = loadFileName.replace("+", " ");
                                response.setContentType("Content-type: applicationnd.ms-excel");
                                response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xlsx");
                                response.setHeader("Content-length", String.valueOf(excelFile.length()));
                                byte[] tempByte = new byte[1024];
                                FileInputStream in = new FileInputStream(excelFile);
                                while (true) {
                                    int n = in.read(tempByte);
                                    if (n == -1) {
                                        break;
                                    }
                                    try {
                                        outputStream.write(tempByte, 0, n);
                                    } catch (Exception e2) {
                                        this.log.error("保存未成功", e2);
                                    }
                                }
                                outputStream.flush();
                                outputStream.close();
                                in.close();
                            }
                        } catch (Exception e3) {
                            e3.printStackTrace();
                        }
                    }
                } catch (Throwable th) {
                    if (wwBook != null) {
                        try {
                            wwBook.close();
                            if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                                HttpServletResponse response2 = ServletActionContext.getResponse();
                                response2.reset();
                                ServletOutputStream outputStream2 = response2.getOutputStream();
                                String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                String loadFileName4 = loadFileName3.replace("+", " ");
                                response2.setContentType("Content-type: applicationnd.ms-excel");
                                response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xlsx");
                                response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                                byte[] tempByte2 = new byte[1024];
                                FileInputStream in2 = new FileInputStream(excelFile);
                                while (true) {
                                    int n2 = in2.read(tempByte2);
                                    if (n2 == -1) {
                                        break;
                                    }
                                    try {
                                        outputStream2.write(tempByte2, 0, n2);
                                    } catch (Exception e4) {
                                        this.log.error("保存未成功", e4);
                                    }
                                }
                                outputStream2.flush();
                                outputStream2.close();
                                in2.close();
                            }
                        } catch (Exception e5) {
                            e5.printStackTrace();
                            throw th;
                        }
                    }
                    throw th;
                }
            } catch (Exception e6) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response3 = ServletActionContext.getResponse();
                            response3.reset();
                            ServletOutputStream outputStream3 = response3.getOutputStream();
                            String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName6 = loadFileName5.replace("+", " ");
                            response3.setContentType("Content-type: applicationnd.ms-excel");
                            response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xlsx");
                            response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte3 = new byte[1024];
                            FileInputStream in3 = new FileInputStream(excelFile);
                            while (true) {
                                int n3 = in3.read(tempByte3);
                                if (n3 == -1) {
                                    break;
                                }
                                try {
                                    outputStream3.write(tempByte3, 0, n3);
                                } catch (Exception e7) {
                                    this.log.error("保存未成功", e7);
                                }
                            }
                            outputStream3.flush();
                            outputStream3.close();
                            in3.close();
                        }
                    } catch (Exception e8) {
                        e8.printStackTrace();
                    }
                }
            }
        } catch (Exception e9) {
            e9.printStackTrace();
        }
        return null;
    }

    public File getSubChartImgFile_G2(String insertUser, List list, String lType, String dirPath) {
        subjectLineImage_G2(list, lType, insertUser);
        File file = new File(dirPath + File.separator + "tmpLinePng" + File.separator + insertUser + lType + ".png");
        return file;
    }

    public void subjectLineImage_G2(List<Gradelevel> quest, String lType, String insertUser) {
        quest.get(0);
        List<RptHeader> list2 = quest.get(1);
        List<RptHeader> list3 = quest.get(2);
        List<RptHeader> list4 = quest.get(3);
        new DecimalFormat("0.00");
        if (lType.equals("g2highScoreNum")) {
            String xName1 = String.valueOf("班级相对有效数对比图");
            String namestr = "";
            String[] columnKeys1 = new String[list3.size()];
            for (int i = 0; i < list3.size(); i++) {
                columnKeys1[i] = list3.get(i).getExt();
            }
            for (int j = 0; j < list2.size(); j++) {
                if (namestr.indexOf(list2.get(j).getClassName()) == -1) {
                    namestr = namestr + list2.get(j).getClassName() + Const.STRING_SEPERATOR;
                }
            }
            String[] className = namestr.split(Const.STRING_SEPERATOR);
            String[] rowKeys1 = new String[namestr.split(Const.STRING_SEPERATOR).length];
            for (int i2 = 0; i2 < rowKeys1.length; i2++) {
                rowKeys1[i2] = className[i2];
            }
            double[][] data = new double[namestr.split(Const.STRING_SEPERATOR).length][list3.size()];
            int m = 0;
            Double.valueOf(0.0d);
            Double.valueOf(0.0d);
            List list_data = new ArrayList();
            for (int k = 0; k < namestr.split(Const.STRING_SEPERATOR).length; k++) {
                for (int j2 = 0; j2 < list4.size(); j2++) {
                    if (list4.get(j2).getClassName().equals(className[k])) {
                        data[k][m] = Double.parseDouble(list4.get(j2).getA_num());
                        list_data.add(Double.valueOf(Double.parseDouble(list4.get(j2).getA_num())));
                        m++;
                        if (m >= list3.size()) {
                            m = 0;
                        }
                    }
                }
            }
            Double maxDesc = (Double) Collections.max(list_data);
            Double minDesc = (Double) Collections.min(list_data);
            Double count_unit = Double.valueOf((maxDesc.doubleValue() - minDesc.doubleValue()) / 5.0d);
            if (count_unit.doubleValue() < 1.0d) {
                count_unit = Double.valueOf(maxDesc.doubleValue() / 5.0d);
            }
            HttpServletResponse response = ServletActionContext.getResponse();
            response.reset();
            response.setContentType("image/jpeg");
            JFreeChart chart = this.lc.getLineChar(data, rowKeys1, columnKeys1, "", "", xName1, "#0", count_unit, Integer.valueOf(rowKeys1.length), "Y", "##.#");
            getChartImageFolder(chart, "tmpLinePng", Const.height_500, Const.width, insertUser + lType);
        }
        if (lType.equals("g2rates")) {
            String xName12 = String.valueOf("班级绝对有效数对比图");
            String namestr2 = "";
            String[] columnKeys12 = new String[list3.size()];
            for (int i3 = 0; i3 < list3.size(); i3++) {
                columnKeys12[i3] = list3.get(i3).getExt();
            }
            for (int j3 = 0; j3 < list2.size(); j3++) {
                if (namestr2.indexOf(list2.get(j3).getClassName()) == -1) {
                    namestr2 = namestr2 + list2.get(j3).getClassName() + Const.STRING_SEPERATOR;
                }
            }
            String[] className2 = namestr2.split(Const.STRING_SEPERATOR);
            String[] rowKeys12 = new String[namestr2.split(Const.STRING_SEPERATOR).length];
            for (int i4 = 0; i4 < rowKeys12.length; i4++) {
                rowKeys12[i4] = className2[i4];
            }
            double[][] data2 = new double[namestr2.split(Const.STRING_SEPERATOR).length][list3.size()];
            int m2 = 0;
            Double.valueOf(0.0d);
            Double.valueOf(0.0d);
            List list_data2 = new ArrayList();
            for (int k2 = 0; k2 < namestr2.split(Const.STRING_SEPERATOR).length; k2++) {
                for (int j4 = 0; j4 < list4.size(); j4++) {
                    if (list4.get(j4).getClassName().equals(className2[k2])) {
                        data2[k2][m2] = Double.parseDouble(list4.get(j4).getR_num());
                        list_data2.add(Double.valueOf(Double.parseDouble(list4.get(j4).getR_num())));
                        m2++;
                        if (m2 >= list3.size()) {
                            m2 = 0;
                        }
                    }
                }
            }
            Double maxDesc2 = (Double) Collections.max(list_data2);
            Double minDesc2 = (Double) Collections.min(list_data2);
            Double count_unit2 = Double.valueOf((maxDesc2.doubleValue() - minDesc2.doubleValue()) / 5.0d);
            if (count_unit2.doubleValue() < 1.0d) {
                count_unit2 = Double.valueOf(maxDesc2.doubleValue() / 5.0d);
            }
            HttpServletResponse response2 = ServletActionContext.getResponse();
            response2.reset();
            response2.setContentType("image/jpeg");
            JFreeChart chart2 = this.lc.getLineChar(data2, rowKeys12, columnKeys12, "", "", xName12, "#0", count_unit2, Integer.valueOf(rowKeys12.length), "Y", "##.#");
            getChartImageFolder(chart2, "tmpLinePng", Const.height_500, Const.width, insertUser + lType);
        }
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String G3_exportg3(String teachUnit_s, String examNum, String gradeNum, String teachUnit, String subjectNum, String classNum, String studentId, String studentType, String type, String source, String step, String sNum, String c_exam, String rpt_name, String isMoreSchool, String rptTitle, String isHistory, String isSaveWrite, String dirPath, String uri, String userNum, String schName, String gradeName, String className, String subjectName, String imgRoot, String agent, String show, String fufen) {
        String folderPath = "ExportFolder/reportExcel" + userNum;
        String str = "reportExcel" + userNum;
        String str2 = "reportExcel" + userNum;
        String excelName = (null == gradeName || "".equals(gradeName)) ? rpt_name + "_" + gradeNum : rpt_name + "_" + gradeName;
        if (null != classNum && !"".equals(classNum) && !classNum.contains(Const.STRING_SEPERATOR)) {
            excelName = (null == className || "".equals(className)) ? excelName + "_" + classNum : excelName + "_" + className;
        }
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        try {
            WritableWorkbook wwBook = Workbook.createWorkbook(excelFile);
            WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
            biaotis1.setAlignment(Alignment.LEFT);
            biaotis1.setVerticalAlignment(VerticalAlignment.CENTRE);
            WritableFont titles = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            WritableCellFormat title = new WritableCellFormat(titles);
            title.setAlignment(Alignment.LEFT);
            title.setVerticalAlignment(VerticalAlignment.CENTRE);
            title.setWrap(true);
            WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            WritableCellFormat cFormat1 = new WritableCellFormat(font1);
            cFormat1.setAlignment(Alignment.CENTRE);
            cFormat1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1.setBackground(Const.titleBackground_color);
            cFormat1.setWrap(true);
            WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            CellFormat writableCellFormat = new WritableCellFormat(font2);
            writableCellFormat.setAlignment(Alignment.CENTRE);
            writableCellFormat.setVerticalAlignment(VerticalAlignment.CENTRE);
            writableCellFormat.setBackground(Const.textJiBackGround_color);
            writableCellFormat.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            writableCellFormat.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            writableCellFormat.setBorder(Border.LEFT, BorderLineStyle.THIN);
            writableCellFormat.setBorder(Border.TOP, BorderLineStyle.THIN);
            writableCellFormat.setWrap(true);
            DateFormat df1 = new DateFormat("0.0%");
            CellFormat writableCellFormat2 = new WritableCellFormat(font2, df1);
            writableCellFormat2.setAlignment(Alignment.CENTRE);
            writableCellFormat2.setVerticalAlignment(VerticalAlignment.CENTRE);
            writableCellFormat2.setBackground(Const.textJiBackGround_color);
            writableCellFormat2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            writableCellFormat2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            writableCellFormat2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            writableCellFormat2.setBorder(Border.TOP, BorderLineStyle.THIN);
            writableCellFormat2.setWrap(true);
            WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            CellFormat writableCellFormat3 = new WritableCellFormat(font3);
            writableCellFormat3.setAlignment(Alignment.CENTRE);
            writableCellFormat3.setVerticalAlignment(VerticalAlignment.CENTRE);
            writableCellFormat3.setBackground(Const.textOuBackGround_color);
            writableCellFormat3.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            writableCellFormat3.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            writableCellFormat3.setBorder(Border.LEFT, BorderLineStyle.THIN);
            writableCellFormat3.setBorder(Border.TOP, BorderLineStyle.THIN);
            writableCellFormat3.setWrap(true);
            CellFormat writableCellFormat4 = new WritableCellFormat(font3, df1);
            writableCellFormat4.setAlignment(Alignment.CENTRE);
            writableCellFormat4.setVerticalAlignment(VerticalAlignment.CENTRE);
            writableCellFormat4.setBackground(Const.textOuBackGround_color);
            writableCellFormat4.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            writableCellFormat4.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            writableCellFormat4.setBorder(Border.LEFT, BorderLineStyle.THIN);
            writableCellFormat4.setBorder(Border.TOP, BorderLineStyle.THIN);
            writableCellFormat4.setWrap(true);
            List<RptHeader> quest = this.g3.getLevelRank(teachUnit_s, examNum, subjectNum, gradeNum, teachUnit, classNum, type, studentType, source, fufen);
            try {
                try {
                    WritableSheet sheet = wwBook.createSheet(rpt_name, 0);
                    sheet.getSettings().setShowGridLines(false);
                    try {
                        Label biaotou = new Label(0, 0, rpt_name, biaotis1);
                        sheet.addCell(biaotou);
                        DecimalFormat df03 = new DecimalFormat("0.000");
                        df03.setRoundingMode(RoundingMode.HALF_UP);
                        Label xinxi = new Label(0, 1, rptTitle, title);
                        sheet.addCell(xinxi);
                        String[] rows = {"A级", "B级", "C级", "D级", "E级"};
                        sheet.setRowView(1, Const.height_500);
                        sheet.mergeCells(0, 0, (rows.length * 4) + 3, 0);
                        sheet.mergeCells(0, 1, (rows.length * 4) + 3, 1);
                        int existCellNum = 0;
                        if ("01".equals(teachUnit_s)) {
                            Label banji = new Label(0, 2, "班级", cFormat1);
                            sheet.addCell(banji);
                            sheet.mergeCells(0, 2, 0, 3);
                            Label xueke = new Label(1, 2, "学科教师", cFormat1);
                            sheet.addCell(xueke);
                            sheet.mergeCells(1, 2, 1, 3);
                            Label banren = new Label(2, 2, "班主任", cFormat1);
                            sheet.addCell(banren);
                            sheet.mergeCells(2, 2, 2, 3);
                        } else {
                            Label banji2 = new Label(0, 2, "类层", cFormat1);
                            sheet.addCell(banji2);
                            sheet.mergeCells(0, 2, 0, 3);
                            existCellNum = 2;
                        }
                        Label cankao = new Label(3 - existCellNum, 2, "参考人数", cFormat1);
                        sheet.addCell(cankao);
                        sheet.mergeCells(3 - existCellNum, 2, 3 - existCellNum, 3);
                        for (int r = 0; r < rows.length; r++) {
                            Label jibie = new Label((4 + (r * 4)) - existCellNum, 2, rows[r], cFormat1);
                            sheet.addCell(jibie);
                            sheet.mergeCells((4 + (r * 4)) - existCellNum, 2, (7 + (r * 4)) - existCellNum, 2);
                            Label renshu = new Label((4 + (r * 4)) - existCellNum, 3, "人数", cFormat1);
                            sheet.addCell(renshu);
                            sheet.mergeCells((4 + (r * 4)) - existCellNum, 3, (4 + (r * 4)) - existCellNum, 3);
                            Label fenshuxian = new Label((5 + (r * 4)) - existCellNum, 3, "分数线", cFormat1);
                            sheet.addCell(fenshuxian);
                            sheet.mergeCells((5 + (r * 4)) - existCellNum, 3, (5 + (r * 4)) - existCellNum, 3);
                            Label bili = new Label((6 + (r * 4)) - existCellNum, 3, "比例", cFormat1);
                            sheet.addCell(bili);
                            sheet.mergeCells((6 + (r * 4)) - existCellNum, 3, (6 + (r * 4)) - existCellNum, 3);
                            Label leiji = new Label((7 + (r * 4)) - existCellNum, 3, "累计比例", cFormat1);
                            sheet.addCell(leiji);
                            sheet.mergeCells((7 + (r * 4)) - existCellNum, 3, (7 + (r * 4)) - existCellNum, 3);
                        }
                        for (int i = 0; i < quest.size(); i++) {
                            CellFormat cellFormat = i % 2 != 0 ? writableCellFormat : writableCellFormat3;
                            CellFormat cellFormat2 = i % 2 != 0 ? writableCellFormat2 : writableCellFormat4;
                            Label leiji2 = new Label(0, 4 + i, quest.get(i).getClassName(), cellFormat);
                            sheet.addCell(leiji2);
                            if ("01".equals(teachUnit_s)) {
                                Label teacherName = new Label(1, 4 + i, quest.get(i).getTeacherName(), cellFormat);
                                sheet.addCell(teacherName);
                                Label banzhuren = new Label(2, 4 + i, quest.get(i).getClassDirector(), cellFormat);
                                sheet.addCell(banzhuren);
                            }
                            Number numOfStudent = new Number(3 - existCellNum, 4 + i, Integer.valueOf(quest.get(i).getNumOfStudent()).intValue(), cellFormat);
                            sheet.addCell(numOfStudent);
                            Number a = new Number(4 - existCellNum, 4 + i, Integer.valueOf(quest.get(i).getA()).intValue(), cellFormat);
                            sheet.addCell(a);
                            Number aScore = new Number(5 - existCellNum, 4 + i, quest.get(i).getLeveraScore(), cellFormat);
                            sheet.addCell(aScore);
                            Number rate_a = new Number(6 - existCellNum, 4 + i, Double.valueOf(df03.format(quest.get(i).getRate_a())).doubleValue(), cellFormat2);
                            sheet.addCell(rate_a);
                            Number l_rate_a = new Number(7 - existCellNum, 4 + i, Double.valueOf(df03.format(quest.get(i).getL_rate_a())).doubleValue(), cellFormat2);
                            sheet.addCell(l_rate_a);
                            Number b = new Number(8 - existCellNum, 4 + i, Integer.valueOf(quest.get(i).getB()).intValue(), cellFormat);
                            sheet.addCell(b);
                            Number bScore = new Number(9 - existCellNum, 4 + i, quest.get(i).getLeverbScore(), cellFormat);
                            sheet.addCell(bScore);
                            Number rate_b = new Number(10 - existCellNum, 4 + i, Double.valueOf(df03.format(quest.get(i).getRate_b())).doubleValue(), cellFormat2);
                            sheet.addCell(rate_b);
                            Number l_rate_b = new Number(11 - existCellNum, 4 + i, Double.valueOf(df03.format(quest.get(i).getL_rate_b())).doubleValue(), cellFormat2);
                            sheet.addCell(l_rate_b);
                            Number c = new Number(12 - existCellNum, 4 + i, Integer.valueOf(quest.get(i).getC()).intValue(), cellFormat);
                            sheet.addCell(c);
                            Number cScore = new Number(13 - existCellNum, 4 + i, quest.get(i).getLevercScore(), cellFormat);
                            sheet.addCell(cScore);
                            Number rate_c = new Number(14 - existCellNum, 4 + i, Double.valueOf(df03.format(quest.get(i).getRate_c())).doubleValue(), cellFormat2);
                            sheet.addCell(rate_c);
                            Number l_rate_c = new Number(15 - existCellNum, 4 + i, Double.valueOf(df03.format(quest.get(i).getL_rate_c())).doubleValue(), cellFormat2);
                            sheet.addCell(l_rate_c);
                            Number d = new Number(16 - existCellNum, 4 + i, Integer.valueOf(quest.get(i).getD()).intValue(), cellFormat);
                            sheet.addCell(d);
                            Number dScore = new Number(17 - existCellNum, 4 + i, quest.get(i).getLeverdScore(), cellFormat);
                            sheet.addCell(dScore);
                            Number rate_d = new Number(18 - existCellNum, 4 + i, Double.valueOf(df03.format(quest.get(i).getRate_d())).doubleValue(), cellFormat2);
                            sheet.addCell(rate_d);
                            Number l_rate_d = new Number(19 - existCellNum, 4 + i, Double.valueOf(df03.format(quest.get(i).getL_rate_d())).doubleValue(), cellFormat2);
                            sheet.addCell(l_rate_d);
                            Number e = new Number(20 - existCellNum, 4 + i, Integer.valueOf(quest.get(i).getE()).intValue(), cellFormat);
                            sheet.addCell(e);
                            Number eScore = new Number(21 - existCellNum, 4 + i, quest.get(i).getLevereScore(), cellFormat);
                            sheet.addCell(eScore);
                            Number rate_e = new Number(22 - existCellNum, 4 + i, Double.valueOf(df03.format(quest.get(i).getRate_e())).doubleValue(), cellFormat2);
                            sheet.addCell(rate_e);
                            Number l_rate_e = new Number(23 - existCellNum, 4 + i, Double.valueOf(df03.format(quest.get(i).getL_rate_e())).doubleValue(), cellFormat2);
                            sheet.addCell(l_rate_e);
                        }
                    } catch (Exception e2) {
                        e2.printStackTrace();
                    }
                    wwBook.write();
                    if (wwBook != null) {
                        try {
                            wwBook.close();
                            if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                                HttpServletResponse response = ServletActionContext.getResponse();
                                response.reset();
                                ServletOutputStream outputStream = response.getOutputStream();
                                String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                String loadFileName2 = loadFileName.replace("+", " ");
                                response.setContentType("Content-type: applicationnd.ms-excel");
                                response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xls");
                                response.setHeader("Content-length", String.valueOf(excelFile.length()));
                                byte[] tempByte = new byte[1024];
                                FileInputStream in = new FileInputStream(excelFile);
                                while (true) {
                                    int n = in.read(tempByte);
                                    if (n == -1) {
                                        break;
                                    }
                                    try {
                                        outputStream.write(tempByte, 0, n);
                                    } catch (Exception e3) {
                                        this.log.error("保存未成功", e3);
                                    }
                                }
                                outputStream.flush();
                                outputStream.close();
                                in.close();
                            }
                        } catch (WriteException e4) {
                            e4.printStackTrace();
                        }
                    }
                } catch (Throwable th) {
                    if (wwBook != null) {
                        try {
                            wwBook.close();
                            if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                                HttpServletResponse response2 = ServletActionContext.getResponse();
                                response2.reset();
                                ServletOutputStream outputStream2 = response2.getOutputStream();
                                String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                String loadFileName4 = loadFileName3.replace("+", " ");
                                response2.setContentType("Content-type: applicationnd.ms-excel");
                                response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xls");
                                response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                                byte[] tempByte2 = new byte[1024];
                                FileInputStream in2 = new FileInputStream(excelFile);
                                while (true) {
                                    int n2 = in2.read(tempByte2);
                                    if (n2 == -1) {
                                        break;
                                    }
                                    try {
                                        outputStream2.write(tempByte2, 0, n2);
                                    } catch (Exception e5) {
                                        this.log.error("保存未成功", e5);
                                    }
                                }
                                outputStream2.flush();
                                outputStream2.close();
                                in2.close();
                            }
                        } catch (WriteException e6) {
                            e6.printStackTrace();
                            throw th;
                        }
                    }
                    throw th;
                }
            } catch (Exception e7) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response3 = ServletActionContext.getResponse();
                            response3.reset();
                            ServletOutputStream outputStream3 = response3.getOutputStream();
                            String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName6 = loadFileName5.replace("+", " ");
                            response3.setContentType("Content-type: applicationnd.ms-excel");
                            response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xls");
                            response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte3 = new byte[1024];
                            FileInputStream in3 = new FileInputStream(excelFile);
                            while (true) {
                                int n3 = in3.read(tempByte3);
                                if (n3 == -1) {
                                    break;
                                }
                                try {
                                    outputStream3.write(tempByte3, 0, n3);
                                } catch (Exception e8) {
                                    this.log.error("保存未成功", e8);
                                }
                            }
                            outputStream3.flush();
                            outputStream3.close();
                            in3.close();
                        }
                    } catch (WriteException e9) {
                        e9.printStackTrace();
                    }
                }
            }
        } catch (Exception e10) {
            e10.printStackTrace();
        }
        return null;
    }

    public File getSubChartImgFile_G3(String insertUser, List list, String lType, String dirPath, String teachUnit_s) {
        subjectLineImage(list, lType, insertUser, teachUnit_s);
        File file = new File(dirPath + File.separator + "tmpLinePng" + File.separator + insertUser + lType + ".png");
        return file;
    }

    public void subjectLineImage(List<RptHeader> list, String lType, String insertUser, String teachUnit_s) {
        String xName1;
        String xName12;
        DecimalFormat df = new DecimalFormat("0.00");
        if (lType.equals("g3scoreRank")) {
            if ("01".equals(teachUnit_s)) {
                xName12 = String.valueOf("班级成绩等级分布(%)对比图");
            } else {
                xName12 = String.valueOf("类层成绩等级分布(%)对比图");
            }
            String[] columnKeys1 = new String[list.size()];
            String[] rowKeys1 = {"A级", "B级", "C级", "D级", "E级"};
            double[][] data = new double[rowKeys1.length][list.size()];
            Double.valueOf(0.0d);
            Double.valueOf(0.0d);
            List list_data = new ArrayList();
            for (int k = 0; k < rowKeys1.length; k++) {
                for (int j = 0; j < list.size(); j++) {
                    columnKeys1[j] = list.get(j).getClassName().trim();
                    if (rowKeys1[k].equals("A级")) {
                        data[k][j] = Double.parseDouble(df.format(list.get(j).getRate_a() * 100.0d));
                        list_data.add(Double.valueOf(Double.parseDouble(df.format(list.get(j).getRate_a() * 100.0d))));
                    }
                    if (rowKeys1[k].equals("B级")) {
                        data[k][j] = Double.parseDouble(df.format(list.get(j).getRate_b() * 100.0d));
                        list_data.add(Double.valueOf(Double.parseDouble(df.format(list.get(j).getRate_b() * 100.0d))));
                    }
                    if (rowKeys1[k].equals("C级")) {
                        data[k][j] = Double.parseDouble(df.format(list.get(j).getRate_c() * 100.0d));
                        list_data.add(Double.valueOf(Double.parseDouble(df.format(list.get(j).getRate_c() * 100.0d))));
                    }
                    if (rowKeys1[k].equals("D级")) {
                        data[k][j] = Double.parseDouble(df.format(list.get(j).getRate_d() * 100.0d));
                        list_data.add(Double.valueOf(Double.parseDouble(df.format(list.get(j).getRate_d()))));
                    }
                    if (rowKeys1[k].equals("E级")) {
                        data[k][j] = Double.parseDouble(df.format(list.get(j).getRate_e() * 100.0d));
                        list_data.add(Double.valueOf(Double.parseDouble(df.format(list.get(j).getRate_e() * 100.0d))));
                    }
                }
            }
            Double maxDesc = (Double) Collections.max(list_data);
            Double minDesc = (Double) Collections.min(list_data);
            Double count_unit = Double.valueOf((maxDesc.doubleValue() - minDesc.doubleValue()) / 5.0d);
            HttpServletResponse response = ServletActionContext.getResponse();
            response.reset();
            response.setContentType("image/jpeg");
            JFreeChart chart = this.lc.getLineChar(data, rowKeys1, columnKeys1, "", "", xName12, "#0", count_unit, 0, "Y", "##.#");
            getChartImageFolder(chart, "tmpLinePng", Const.width_1100, 300, insertUser + lType);
        }
        if (lType.equals("g3scoreRank2")) {
            if ("01".equals(teachUnit_s)) {
                xName1 = String.valueOf("各班成绩等级(%)堆积柱形图");
            } else {
                xName1 = String.valueOf("各类层成绩等级(%)堆积柱形图");
            }
            String[] columnKeys12 = new String[list.size()];
            String[] rowKeys12 = {"A级", "B级", "C级", "D级", "E级"};
            double[][] data2 = new double[rowKeys12.length][list.size()];
            for (int k2 = 0; k2 < rowKeys12.length; k2++) {
                for (int j2 = 0; j2 < list.size(); j2++) {
                    columnKeys12[j2] = list.get(j2).getClassName();
                    if (rowKeys12[k2].equals("A级")) {
                        data2[k2][j2] = Double.parseDouble(df.format(list.get(j2).getRate_a() * 100.0d));
                    }
                    if (rowKeys12[k2].equals("B级")) {
                        data2[k2][j2] = Double.parseDouble(df.format(list.get(j2).getRate_b() * 100.0d));
                    }
                    if (rowKeys12[k2].equals("C级")) {
                        data2[k2][j2] = Double.parseDouble(df.format(list.get(j2).getRate_c() * 100.0d));
                    }
                    if (rowKeys12[k2].equals("D级")) {
                        data2[k2][j2] = Double.parseDouble(df.format(list.get(j2).getRate_d() * 100.0d));
                    }
                    if (rowKeys12[k2].equals("E级")) {
                        data2[k2][j2] = Double.parseDouble(df.format(list.get(j2).getRate_e() * 100.0d));
                    }
                }
            }
            JFreeChart chart2 = this.st.makeStackedBarChart(data2, rowKeys12, columnKeys12, "", "", xName1, Double.valueOf(20.0d), Double.valueOf(100.0d));
            getChartImageFolder(chart2, "tmpLinePng", Const.width_1100, 300, insertUser + lType);
        }
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String G5_exportg3(String examNum, String gradeNum, String schoolNum, String subjectNum, String classNum, String studentId, String studentType, String type, String source, String step, String sNum, String c_exam, String rpt_name, String isMoreSchool, String rptTitle, String isHistory, String isSaveWrite, String dirPath, String uri, String userNum, String schName, String gradeName, String className, String subjectName, String imgRoot, String agent, String fufen, String subCompose, String islevel) {
        ServletActionContext.getServletContext();
        String levelclass = this.system.getIsLevelClass(examNum, gradeNum, subjectNum, null);
        if (null == levelclass || levelclass.equals("")) {
            levelclass = "F";
        }
        String folderPath = "ExportFolder/reportExcel" + userNum;
        String str = "reportExcel" + userNum;
        String str2 = "reportExcel" + userNum;
        String excelName = (null == gradeName || "".equals(gradeName)) ? rpt_name + "_" + gradeNum : rpt_name + "_" + gradeName;
        if (null != classNum && !"".equals(classNum) && !classNum.contains(Const.STRING_SEPERATOR)) {
            excelName = (null == className || "".equals(className)) ? excelName + "_" + classNum : excelName + "_" + className;
        }
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        try {
            WritableWorkbook wwBook = Workbook.createWorkbook(excelFile);
            WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
            biaotis1.setAlignment(Alignment.LEFT);
            biaotis1.setVerticalAlignment(VerticalAlignment.CENTRE);
            WritableFont titles = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat title = new WritableCellFormat(titles);
            title.setAlignment(Alignment.LEFT);
            title.setVerticalAlignment(VerticalAlignment.CENTRE);
            title.setWrap(true);
            WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            WritableCellFormat cFormat1 = new WritableCellFormat(font1);
            cFormat1.setAlignment(Alignment.CENTRE);
            cFormat1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1.setBackground(Const.titleBackground_color);
            cFormat1.setWrap(true);
            WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat2 = new WritableCellFormat(font2);
            cFormat2.setAlignment(Alignment.CENTRE);
            cFormat2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2.setBackground(Const.textJiBackGround_color);
            cFormat2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2.setWrap(true);
            NumberFormat nf1 = new NumberFormat("0.0");
            WritableCellFormat cFormat2_1 = new WritableCellFormat(font2, nf1);
            cFormat2_1.setAlignment(Alignment.CENTRE);
            cFormat2_1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_1.setBackground(Const.textJiBackGround_color);
            cFormat2_1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_1.setWrap(true);
            WritableCellFormat cFormat2_2 = new WritableCellFormat(font2);
            cFormat2_2.setAlignment(Alignment.CENTRE);
            cFormat2_2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_2.setBackground(Const.textJiBackGround_color);
            cFormat2_2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_2.setWrap(true);
            WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat3 = new WritableCellFormat(font3);
            cFormat3.setAlignment(Alignment.CENTRE);
            cFormat3.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3.setBackground(Const.textOuBackGround_color);
            cFormat3.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3.setWrap(true);
            WritableCellFormat cFormat3_1 = new WritableCellFormat(font3, nf1);
            cFormat3_1.setAlignment(Alignment.CENTRE);
            cFormat3_1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_1.setBackground(Const.textOuBackGround_color);
            cFormat3_1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_1.setWrap(true);
            WritableCellFormat cFormat3_2 = new WritableCellFormat(font3);
            cFormat3_2.setAlignment(Alignment.CENTRE);
            cFormat3_2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_2.setBackground(Const.textOuBackGround_color);
            cFormat3_2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_2.setWrap(true);
            List quest = new ArrayList();
            if (schoolNum.indexOf(Const.STRING_SEPERATOR) == -1) {
                List<Class> list1 = this.g5.getStudentScoreClass(schoolNum, gradeNum, classNum, examNum, subjectNum, fufen, islevel);
                if (null != list1) {
                    quest.add(list1);
                }
                for (int i = 0; i < list1.size(); i++) {
                    Class c = list1.get(i);
                    String cl = c.getClassNum().toString();
                    List l = this.g5.getStudentScoreRank(examNum, gradeNum, subjectNum, schoolNum, cl, studentType, type, source, isHistory, levelclass, fufen, subCompose, islevel);
                    quest.add(l);
                }
            } else {
                List<Class> list12 = this.g5.getStudentScoreClass(schoolNum, gradeNum, classNum, examNum, subjectNum, fufen, islevel);
                if (null != list12) {
                    quest.add(list12);
                }
                for (int i2 = 0; i2 < list12.size(); i2++) {
                    Class c2 = list12.get(i2);
                    String sc = c2.getClassNum().toString();
                    List l2 = this.g5.getStudentScoreRank_q(examNum, gradeNum, subjectNum, sc, classNum, studentType, type, source, isHistory, levelclass, fufen, subCompose, islevel);
                    quest.add(l2);
                }
            }
            try {
                WritableSheet sheet = wwBook.createSheet(rpt_name, 0);
                sheet.getSettings().setShowGridLines(false);
                try {
                    Label biaotou = new Label(0, 0, rpt_name, biaotis1);
                    sheet.addCell(biaotou);
                    DecimalFormat df01 = new DecimalFormat("0.0");
                    df01.setRoundingMode(RoundingMode.HALF_UP);
                    List<Class> list13 = (List) quest.get(0);
                    Label xinxi = new Label(0, 1, rptTitle, title);
                    sheet.addCell(xinxi);
                    sheet.setRowView(1, Const.height_500);
                    sheet.mergeCells(0, 0, (list13.size() * 4) - 1, 0);
                    sheet.mergeCells(0, 1, (list13.size() * 4) - 1, 1);
                    String viewRankOfScoreInfo = Configuration.getInstance().getViewRankOfScoreInfo();
                    int index = 4;
                    int rr = 0;
                    if (!viewRankOfScoreInfo.equals("1")) {
                        rr = 2;
                        index = 2;
                    }
                    for (int i3 = 0; i3 < list13.size(); i3++) {
                        if (!quest.get(i3 + 1).equals("")) {
                            int k = i3 + 1;
                            List<Studentlevel> studentlist = (List) quest.get(k);
                            for (int m = 0; m < studentlist.size(); m++) {
                                if (i3 % 2 != 0) {
                                    Label studentName = new Label(index * i3, 4 + m, studentlist.get(m).getStudentName(), cFormat2);
                                    sheet.addCell(studentName);
                                    sheet.mergeCells(index * i3, 4 + m, index * i3, 4 + m);
                                    sheet.setColumnView(index * i3, 15);
                                    Double totalScores = studentlist.get(m).getTotalScore();
                                    String totalScoresstr = Convert.toBigDecimal(df01.format(totalScores)).stripTrailingZeros().toPlainString();
                                    Double t = Double.valueOf(totalScoresstr);
                                    Number totalScore = new Number((index * i3) + 1, 4 + m, t.doubleValue(), cFormat2_2);
                                    sheet.addCell(totalScore);
                                    sheet.mergeCells((index * i3) + 1, 4 + m, (index * i3) + 1, 4 + m);
                                    if (schoolNum.indexOf(Const.STRING_SEPERATOR) == -1) {
                                        Label classNamess = new Label(i3 * index, 2, list13.get(i3).getClassName(), cFormat2);
                                        sheet.addCell(classNamess);
                                        sheet.mergeCells(i3 * index, 2, (3 - rr) + (i3 * index), 2);
                                        Label xuesheng = new Label(i3 * index, 3, "姓名", cFormat2);
                                        sheet.addCell(xuesheng);
                                        sheet.mergeCells(i3 * 4, 3, i3 * 4, 3);
                                        Label yuanshi = new Label((i3 * index) + 1, 3, fufen.equals("1") ? "赋分" : "原始分", cFormat2);
                                        sheet.addCell(yuanshi);
                                        sheet.mergeCells((i3 * 4) + 1, 3, (i3 * 4) + 1, 3);
                                        if (viewRankOfScoreInfo.equals("1")) {
                                            Label banpai = new Label((i3 * index) + 2, 3, "班排", cFormat2);
                                            sheet.addCell(banpai);
                                            sheet.mergeCells((i3 * 4) + 2, 3, (i3 * 4) + 2, 3);
                                            Label gradepai = new Label((i3 * index) + 3, 3, "校排", cFormat2);
                                            sheet.addCell(gradepai);
                                            sheet.mergeCells((i3 * 4) + 3, 3, (i3 * 4) + 3, 3);
                                            Number classRanking = new Number((index * i3) + 2, 4 + m, studentlist.get(m).getClassRanking(), cFormat2);
                                            sheet.addCell(classRanking);
                                            sheet.mergeCells((index * i3) + 2, 4 + m, (index * i3) + 2, 4 + m);
                                            Number gradeRanking = new Number((index * i3) + 3, 4 + m, studentlist.get(m).getGradeRanking(), cFormat2);
                                            sheet.addCell(gradeRanking);
                                            sheet.mergeCells((index * i3) + 3, 4 + m, (index * i3) + 3, 4 + m);
                                        }
                                    } else {
                                        Label classNamess2 = new Label(i3 * index, 2, list13.get(i3).getClassName(), cFormat2);
                                        sheet.addCell(classNamess2);
                                        sheet.mergeCells(i3 * index, 2, (3 - rr) + (i3 * index), 2);
                                        Label xuesheng2 = new Label(i3 * index, 3, "姓名", cFormat2);
                                        sheet.addCell(xuesheng2);
                                        sheet.mergeCells(i3 * index, 3, i3 * index, 3);
                                        Label yuanshi2 = new Label((i3 * index) + 1, 3, fufen.equals("1") ? "赋分" : "原始分", cFormat2);
                                        sheet.addCell(yuanshi2);
                                        sheet.mergeCells((i3 * index) + 1, 3, (i3 * index) + 1, 3);
                                        if (viewRankOfScoreInfo.equals("1")) {
                                            Label banpai2 = new Label((i3 * index) + 2, 3, "校排", cFormat2);
                                            sheet.addCell(banpai2);
                                            sheet.mergeCells((i3 * index) + 2, 3, (i3 * index) + 2, 3);
                                            Label gradepai2 = new Label((i3 * index) + 3, 3, "区排", cFormat2);
                                            sheet.addCell(gradepai2);
                                            sheet.mergeCells((i3 * index) + 3, 3, (i3 * index) + 3, 3);
                                            Number classRanking2 = new Number((index * i3) + 2, 4 + m, studentlist.get(m).getGradeRanking(), cFormat2);
                                            sheet.addCell(classRanking2);
                                            sheet.mergeCells((index * i3) + 2, 4 + m, (index * i3) + 2, 4 + m);
                                            Number gradeRanking2 = new Number((index * i3) + 3, 4 + m, studentlist.get(m).getAreaRanking(), cFormat2);
                                            sheet.addCell(gradeRanking2);
                                            sheet.mergeCells((index * i3) + 3, 4 + m, (index * i3) + 3, 4 + m);
                                        }
                                    }
                                } else {
                                    Label studentName2 = new Label(index * i3, 4 + m, studentlist.get(m).getStudentName(), cFormat3);
                                    sheet.addCell(studentName2);
                                    sheet.mergeCells(index * i3, 4 + m, index * i3, 4 + m);
                                    sheet.setColumnView(index * i3, 15);
                                    Double totalScores2 = studentlist.get(m).getTotalScore();
                                    String totalScoresstr2 = Convert.toBigDecimal(df01.format(totalScores2)).stripTrailingZeros().toPlainString();
                                    Double t2 = Double.valueOf(totalScoresstr2);
                                    Number totalScore2 = new Number((index * i3) + 1, 4 + m, t2.doubleValue(), cFormat3_2);
                                    sheet.addCell(totalScore2);
                                    sheet.mergeCells((index * i3) + 1, 4 + m, (index * i3) + 1, 4 + m);
                                    if (schoolNum.indexOf(Const.STRING_SEPERATOR) == -1) {
                                        Label classNamess3 = new Label(i3 * index, 2, list13.get(i3).getClassName(), cFormat3);
                                        sheet.addCell(classNamess3);
                                        sheet.mergeCells(i3 * index, 2, (3 - rr) + (i3 * index), 2);
                                        Label xuesheng3 = new Label(i3 * index, 3, "姓名", cFormat3);
                                        sheet.addCell(xuesheng3);
                                        sheet.mergeCells(i3 * index, 3, i3 * index, 3);
                                        Label yuanshi3 = new Label((i3 * index) + 1, 3, fufen.equals("1") ? "赋分" : "原始分", cFormat3);
                                        sheet.addCell(yuanshi3);
                                        sheet.mergeCells((i3 * index) + 1, 3, (i3 * index) + 1, 3);
                                        if (viewRankOfScoreInfo.equals("1")) {
                                            Label banpai3 = new Label((i3 * index) + 2, 3, "班排", cFormat3);
                                            sheet.addCell(banpai3);
                                            sheet.mergeCells((i3 * index) + 2, 3, (i3 * index) + 2, 3);
                                            Label gradepai3 = new Label((i3 * index) + 3, 3, "校排", cFormat3);
                                            sheet.addCell(gradepai3);
                                            sheet.mergeCells((i3 * index) + 3, 3, (i3 * index) + 3, 3);
                                            Number classRanking3 = new Number((index * i3) + 2, 4 + m, studentlist.get(m).getClassRanking(), cFormat3);
                                            sheet.addCell(classRanking3);
                                            sheet.mergeCells((index * i3) + 2, 4 + m, (index * i3) + 2, 4 + m);
                                            Number gradeRanking3 = new Number((index * i3) + 3, 4 + m, studentlist.get(m).getGradeRanking(), cFormat3);
                                            sheet.addCell(gradeRanking3);
                                            sheet.mergeCells((index * i3) + 3, 4 + m, (index * i3) + 3, 4 + m);
                                        }
                                    } else {
                                        Label classNamess4 = new Label(i3 * index, 2, list13.get(i3).getClassName(), cFormat3);
                                        sheet.addCell(classNamess4);
                                        sheet.mergeCells(i3 * index, 2, (3 - rr) + (i3 * index), 2);
                                        Label xuesheng4 = new Label(i3 * index, 3, "姓名", cFormat3);
                                        sheet.addCell(xuesheng4);
                                        sheet.mergeCells(i3 * index, 3, i3 * index, 3);
                                        Label yuanshi4 = new Label((i3 * index) + 1, 3, fufen.equals("1") ? "赋分" : "原始分", cFormat3);
                                        sheet.addCell(yuanshi4);
                                        sheet.mergeCells((i3 * index) + 1, 3, (i3 * index) + 1, 3);
                                        if (viewRankOfScoreInfo.equals("1")) {
                                            Label banpai4 = new Label((i3 * index) + 2, 3, "校排", cFormat3);
                                            sheet.addCell(banpai4);
                                            sheet.mergeCells((i3 * index) + 2, 3, (i3 * index) + 2, 3);
                                            Label gradepai4 = new Label((i3 * index) + 3, 3, "区排", cFormat3);
                                            sheet.addCell(gradepai4);
                                            sheet.mergeCells((i3 * index) + 3, 3, (i3 * index) + 3, 3);
                                            Number classRanking4 = new Number((index * i3) + 2, 4 + m, studentlist.get(m).getGradeRanking(), cFormat3);
                                            sheet.addCell(classRanking4);
                                            sheet.mergeCells((index * i3) + 2, 4 + m, (index * i3) + 2, 4 + m);
                                            Number gradeRanking4 = new Number((index * i3) + 3, 4 + m, studentlist.get(m).getAreaRanking(), cFormat3);
                                            sheet.addCell(gradeRanking4);
                                            sheet.mergeCells((index * i3) + 3, 4 + m, (index * i3) + 3, 4 + m);
                                        }
                                    }
                                }
                            }
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                wwBook.write();
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response = ServletActionContext.getResponse();
                            response.reset();
                            ServletOutputStream outputStream = response.getOutputStream();
                            String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName2 = loadFileName.replace("+", " ");
                            response.setContentType("Content-type: applicationnd.ms-excel");
                            response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xls");
                            response.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte = new byte[1024];
                            FileInputStream in = new FileInputStream(excelFile);
                            while (true) {
                                int n = in.read(tempByte);
                                if (n == -1) {
                                    break;
                                }
                                try {
                                    outputStream.write(tempByte, 0, n);
                                } catch (Exception e2) {
                                    this.log.error("保存未成功", e2);
                                }
                            }
                            outputStream.flush();
                            outputStream.close();
                            in.close();
                        }
                    } catch (WriteException e3) {
                        e3.printStackTrace();
                    }
                }
            } catch (Exception e4) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response2 = ServletActionContext.getResponse();
                            response2.reset();
                            ServletOutputStream outputStream2 = response2.getOutputStream();
                            String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName4 = loadFileName3.replace("+", " ");
                            response2.setContentType("Content-type: applicationnd.ms-excel");
                            response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xls");
                            response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte2 = new byte[1024];
                            FileInputStream in2 = new FileInputStream(excelFile);
                            while (true) {
                                int n2 = in2.read(tempByte2);
                                if (n2 == -1) {
                                    break;
                                }
                                try {
                                    outputStream2.write(tempByte2, 0, n2);
                                } catch (Exception e5) {
                                    this.log.error("保存未成功", e5);
                                }
                            }
                            outputStream2.flush();
                            outputStream2.close();
                            in2.close();
                        }
                    } catch (WriteException e6) {
                        e6.printStackTrace();
                    }
                }
            } catch (Throwable th) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response3 = ServletActionContext.getResponse();
                            response3.reset();
                            ServletOutputStream outputStream3 = response3.getOutputStream();
                            String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName6 = loadFileName5.replace("+", " ");
                            response3.setContentType("Content-type: applicationnd.ms-excel");
                            response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xls");
                            response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte3 = new byte[1024];
                            FileInputStream in3 = new FileInputStream(excelFile);
                            while (true) {
                                int n3 = in3.read(tempByte3);
                                if (n3 == -1) {
                                    break;
                                }
                                try {
                                    outputStream3.write(tempByte3, 0, n3);
                                } catch (Exception e7) {
                                    this.log.error("保存未成功", e7);
                                }
                            }
                            outputStream3.flush();
                            outputStream3.close();
                            in3.close();
                        }
                    } catch (WriteException e8) {
                        e8.printStackTrace();
                        throw th;
                    }
                }
                throw th;
            }
        } catch (Exception e9) {
            e9.printStackTrace();
        }
        return null;
    }

    public String G6_g6export_old(String examNum, String gradeNum, String schoolNum, String subjectNum, String classNum, String studentId, String studentType, String type, String source, String step, String sNum, String c_exam, String rpt_name, String isMoreSchool, String rptTitle, String isHistory, String isSaveWrite, String dirPath, String uri, String userNum, String schName, String gradeName, String className, String subjectName, String imgRoot, int m, String agent, String subRank, String downRank, String fufen, String scoreName, String subCompose, String islevel, String isShowSubCompose, String shouxuanHide) {
        String schNum;
        String gNum;
        String folderPath = "ExportFolder/reportExcel" + userNum;
        String str = "reportExcel" + userNum;
        String str2 = "reportExcel" + userNum;
        Double fistMax = Double.valueOf(0.0d);
        Double secondMax = Double.valueOf(0.0d);
        Double.valueOf(0.0d);
        String[][] showMax = new String[3][3];
        String excelName = (null == gradeName || "".equals(gradeName)) ? rpt_name + "_" + gradeNum : rpt_name + "_" + gradeName;
        if (null != classNum && !"".equals(classNum) && !classNum.contains(Const.STRING_SEPERATOR)) {
            excelName = (null == className || "".equals(className)) ? excelName + "_" + classNum : excelName + "_" + className;
        }
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        String viewRankOfScoreInfo = Configuration.getInstance().getViewRankOfScoreInfo();
        try {
            WritableWorkbook wwBook = Workbook.createWorkbook(excelFile);
            WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Colour.BLACK);
            WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
            biaotis1.setAlignment(Alignment.LEFT);
            biaotis1.setVerticalAlignment(VerticalAlignment.CENTRE);
            WritableFont titles = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Colour.BLACK);
            WritableCellFormat title = new WritableCellFormat(titles);
            title.setAlignment(Alignment.LEFT);
            title.setVerticalAlignment(VerticalAlignment.CENTRE);
            title.setWrap(true);
            WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Colour.BLACK);
            WritableCellFormat cFormat1 = new WritableCellFormat(font1);
            cFormat1.setAlignment(Alignment.CENTRE);
            cFormat1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1.setBackground(Const.jxl_head);
            cFormat1.setWrap(true);
            WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Colour.BLACK);
            WritableCellFormat cFormat2 = new WritableCellFormat(font2);
            cFormat2.setAlignment(Alignment.CENTRE);
            cFormat2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2.setBackground(Const.jxlcolo_row2);
            cFormat2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2.setWrap(true);
            NumberFormat nf1 = new NumberFormat("0.0");
            WritableCellFormat cFormat2_1 = new WritableCellFormat(font2, nf1);
            cFormat2_1.setAlignment(Alignment.CENTRE);
            cFormat2_1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_1.setBackground(Const.jxlcolo_row2);
            cFormat2_1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_1.setWrap(true);
            WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Colour.BLACK);
            WritableCellFormat cFormat3 = new WritableCellFormat(font3);
            cFormat3.setAlignment(Alignment.CENTRE);
            cFormat3.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3.setBackground(Const.jxlcolo_row1);
            cFormat3.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3.setWrap(true);
            WritableCellFormat cFormat3_1 = new WritableCellFormat(font3, nf1);
            cFormat3_1.setAlignment(Alignment.CENTRE);
            cFormat3_1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_1.setBackground(Const.jxlcolo_row1);
            cFormat3_1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_1.setWrap(true);
            WritableFont font4 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Colour.BLACK);
            font4.setColour(Colour.BLUE);
            WritableCellFormat cFormat4 = new WritableCellFormat(font4);
            cFormat4.setAlignment(Alignment.CENTRE);
            cFormat4.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat4.setBackground(Const.jxlcolo_row2);
            cFormat4.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat4.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat4.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat4.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat4.setWrap(true);
            WritableFont font5 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Colour.BLACK);
            font5.setColour(Colour.BLUE);
            WritableCellFormat cFormat5 = new WritableCellFormat(font5);
            cFormat5.setAlignment(Alignment.CENTRE);
            cFormat5.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat5.setBackground(Const.jxlcolo_row1);
            cFormat5.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat5.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat5.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat5.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat5.setWrap(true);
            WritableFont color = new WritableFont(WritableFont.ARIAL);
            color.setColour(Colour.GOLD);
            new WritableCellFormat(color);
            new Date().getTime();
            List quest = this.g6.getStudentScoreGradeRankList(examNum, gradeNum, schoolNum, classNum, type, studentType, source, sNum, 0, Integer.valueOf(sNum).intValue() + 100000, subjectNum, subRank, downRank, fufen, scoreName, subCompose, islevel);
            try {
                try {
                    new Date().getTime();
                    WritableSheet sheet = wwBook.createSheet(rpt_name, 0);
                    sheet.getSettings().setShowGridLines(false);
                    try {
                        Label biaotou = new Label(0, 0, rpt_name, biaotis1);
                        sheet.addCell(biaotou);
                        DecimalFormat df01 = new DecimalFormat("0.0");
                        df01.setRoundingMode(RoundingMode.HALF_UP);
                        Label xinxi = new Label(0, 1, rptTitle, title);
                        sheet.addCell(xinxi);
                        sheet.setRowView(1, Const.height_500);
                        List<Subject> list0 = (List) quest.get(0);
                        List<Studentlevel> list1 = (List) quest.get(1);
                        List<Student> list2 = (List) quest.get(2);
                        sheet.mergeCells(0, 0, (list0.size() * 4) + 2, 0);
                        sheet.mergeCells(0, 1, (list0.size() * 4) + 2, 1);
                        String isMoreSchoolStr = "T";
                        if (schoolNum.indexOf(Const.STRING_SEPERATOR) == -1) {
                            schNum = "班级";
                            gNum = "年级排名";
                        } else {
                            schNum = "学校";
                            gNum = "学校排名";
                        }
                        Label paiming = new Label(0, 2, "ID号", cFormat1);
                        sheet.addCell(paiming);
                        sheet.mergeCells(0, 2, 0, 3);
                        Label xuesheng = new Label(1 + 0, 2, "学生姓名", cFormat1);
                        sheet.addCell(xuesheng);
                        Label banji = new Label(2 + 0, 2, schNum, cFormat1);
                        sheet.addCell(banji);
                        sheet.mergeCells(1 + 0, 2, 1 + 0, 3);
                        sheet.mergeCells(2 + 0, 2, 2 + 0, 3);
                        int hs = 0;
                        if (shouxuanHide != null && shouxuanHide.equals("1")) {
                            Label shouxuan = new Label(3 + 0, 2, "首选科目", cFormat1);
                            sheet.addCell(shouxuan);
                            Label xuanke = new Label(4 + 0, 2, "首选科目", cFormat1);
                            sheet.addCell(xuanke);
                            sheet.mergeCells(3 + 0, 2, 3 + 0, 3);
                            sheet.mergeCells(4 + 0, 2, 4 + 0, 3);
                            hs = 2;
                        } else if (isShowSubCompose != null && isShowSubCompose.equals("1")) {
                            Label xuanke2 = new Label(3 + 0, 2, "首选科目", cFormat1);
                            sheet.addCell(xuanke2);
                            sheet.mergeCells(3 + 0, 2, 3 + 0, 3);
                            hs = 1;
                        }
                        DecimalFormat df = new DecimalFormat("0.0");
                        df.setRoundingMode(RoundingMode.HALF_UP);
                        int size = 4;
                        String scoreType = (scoreName == null || !scoreName.equals("1")) ? "标准分区" : "得分";
                        int cc = 0;
                        if (!viewRankOfScoreInfo.equals("1")) {
                            cc = 3;
                            size = 4 - 3;
                        }
                        int five = 0;
                        for (int j = 0; j < list2.size(); j++) {
                            if (j % 2 == 0) {
                                Label c_gradeRanking = new Label(0, 4 + j, list2.get(j).getExt1() + "", cFormat2);
                                sheet.addCell(c_gradeRanking);
                                Label studentName = new Label(1 + 0, 4 + j, list2.get(j).getStudentName(), cFormat2);
                                sheet.addCell(studentName);
                                sheet.setColumnView(1, 15);
                                Label classNames = new Label(2 + 0, 4 + j, list2.get(j).getClassName(), cFormat2);
                                sheet.addCell(classNames);
                                if (shouxuanHide != null && shouxuanHide.equals("1")) {
                                    Label shouxuank = new Label(3 + 0, 4 + j, list2.get(j).getExt3(), cFormat2);
                                    sheet.addCell(shouxuank);
                                    Label xuankezuhe = new Label(4 + 0, 4 + j, list2.get(j).getExt2(), cFormat2);
                                    sheet.addCell(xuankezuhe);
                                } else if (isShowSubCompose != null && isShowSubCompose.equals("1")) {
                                    Label xuankezuhe2 = new Label(3 + 0, 4 + j, list2.get(j).getExt2(), cFormat2);
                                    sheet.addCell(xuankezuhe2);
                                }
                                String subStr = "";
                                for (int i = 0; i < list0.size(); i++) {
                                    if (i == 0 && "F".equals(list0.get(i).getExt6())) {
                                        isMoreSchoolStr = "F";
                                        cc = cc == 0 ? 0 : 2;
                                        size = 3 - cc;
                                    }
                                    String list0_getext1 = list0.get(i).getExt1();
                                    String list0_getsubjectname = list0.get(i).getSubjectName();
                                    if (subStr.indexOf(list0_getext1 + list0_getsubjectname) == -1) {
                                        Label kemu = new Label(3 + (i * size) + 0 + hs, 2, list0.get(i).getSubjectName(), cFormat1);
                                        sheet.addCell(kemu);
                                        sheet.mergeCells(3 + (i * size) + 0 + hs, 2, 2 + size + (i * size) + 0 + 0 + hs, 2);
                                        Label yuanshi = new Label(3 + (i * size) + 0 + hs, 3, scoreType, cFormat1);
                                        sheet.addCell(yuanshi);
                                        if (viewRankOfScoreInfo.equals("1")) {
                                            Label banpai = new Label(4 + (i * size) + 0 + 0 + hs, 3, "班级排名", cFormat1);
                                            sheet.addCell(banpai);
                                            sheet.setColumnView(4 + (i * size) + 0 + 0, 10);
                                            Label nianpai = new Label(5 + (i * size) + 0 + 0 + hs, 3, gNum, cFormat1);
                                            sheet.addCell(nianpai);
                                            sheet.setColumnView(5 + (i * size) + 0 + 0, 10);
                                            if ("T".equals(isMoreSchoolStr)) {
                                                Label qupai = new Label(6 + (i * size) + 0 + 0 + hs, 3, "全区排名", cFormat1);
                                                sheet.addCell(qupai);
                                                sheet.setColumnView(6 + (i * size) + 0 + 0, 10);
                                            }
                                        }
                                        subStr = subStr + list0_getext1 + list0_getsubjectname + Const.STRING_SEPERATOR;
                                    }
                                    int t = 0;
                                    String studentIds = list2.get(j).getStudentId();
                                    String subjectNames = list0.get(i).getSubjectName();
                                    for (int d = 0; d < list1.size(); d++) {
                                        if ((studentIds + subjectNames).equals(list1.get(d).getStudentId() + list1.get(d).getSubjectName())) {
                                            t = 1;
                                        }
                                    }
                                    if (t == 1) {
                                        for (int d2 = 0; d2 < list1.size(); d2++) {
                                            String list2_studentId = list2.get(j).getStudentId();
                                            String list2_studentName = list2.get(j).getStudentName();
                                            String list1_studentId = list1.get(d2).getStudentId();
                                            String list1_studentName = list1.get(d2).getStudentName();
                                            String list1_isSub = list1.get(d2).getIsSub();
                                            int list1_mainType = list1.get(d2).getMainType();
                                            String list0_subjectName = list0.get(i).getSubjectName();
                                            String list1_subjectName = list1.get(d2).getSubjectName();
                                            if ((list2_studentId + list2_studentName).equals(list1_studentId + list1_studentName) && list0_subjectName.equals(list1_subjectName)) {
                                                Double totalScores = list1.get(d2).getTotalScore();
                                                Double score = Double.valueOf(df.format(totalScores));
                                                Number totalScore = new Number(3 + (i * size) + 0 + hs, 4 + j, score.doubleValue(), cFormat2);
                                                sheet.addCell(totalScore);
                                                if (viewRankOfScoreInfo.equals("1")) {
                                                    Number classRanking = new Number(4 + (i * size) + 0 + 0 + hs, 4 + j, list1.get(d2).getClassRanking(), cFormat2);
                                                    sheet.addCell(classRanking);
                                                    Number gradeRanking = new Number(5 + (i * size) + 0 + 0 + hs, 4 + j, list1.get(d2).getGradeRanking(), cFormat2);
                                                    sheet.addCell(gradeRanking);
                                                    if ("T".equals(isMoreSchoolStr)) {
                                                        Number areaRanking = new Number(6 + (i * size) + 0 + 0 + hs, 4 + j, list1.get(d2).getAreaRanking(), cFormat2);
                                                        sheet.addCell(areaRanking);
                                                    }
                                                }
                                                if (list1_mainType > 0 && list1_isSub.equals("F") && list1_mainType != 3 && list1_mainType != 4 && list1_mainType != 5) {
                                                    if (score.doubleValue() >= fistMax.doubleValue()) {
                                                        secondMax = fistMax;
                                                        fistMax = score;
                                                        showMax[1][0] = showMax[0][0];
                                                        showMax[1][1] = showMax[0][1];
                                                        showMax[1][2] = showMax[0][2];
                                                        showMax[0][0] = String.valueOf(3 + (i * 3));
                                                        showMax[0][1] = String.valueOf(4 + j);
                                                        showMax[0][2] = String.valueOf(score);
                                                    } else if (score.doubleValue() >= secondMax.doubleValue()) {
                                                        secondMax = score;
                                                        showMax[1][0] = String.valueOf(3 + (i * 4));
                                                        showMax[1][1] = String.valueOf(4 + j);
                                                        showMax[1][2] = String.valueOf(score);
                                                    }
                                                    if (list1_subjectName.equals("五科总分")) {
                                                        five = 1;
                                                        Number totalScore2 = new Number(Integer.parseInt(showMax[0][0]), Integer.parseInt(showMax[0][1]), Double.parseDouble(showMax[0][2]), cFormat4);
                                                        sheet.addCell(totalScore2);
                                                        Number totalScore3 = new Number(Integer.parseInt(showMax[1][0]), Integer.parseInt(showMax[1][1]), Double.parseDouble(showMax[1][2]), cFormat4);
                                                        sheet.addCell(totalScore3);
                                                        if (showMax[1][2].equals(showMax[2][2])) {
                                                            Number totalScore4 = new Number(Integer.parseInt(showMax[2][0]), Integer.parseInt(showMax[2][1]), Double.parseDouble(showMax[2][2]), cFormat4);
                                                            sheet.addCell(totalScore4);
                                                        }
                                                        secondMax = Double.valueOf(0.0d);
                                                        fistMax = Double.valueOf(0.0d);
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        Label totalScore5 = new Label(3 + (i * size) + 0 + hs, 4 + j, "", cFormat2);
                                        sheet.addCell(totalScore5);
                                        if (viewRankOfScoreInfo.equals("1")) {
                                            Label classRanking2 = new Label(4 + (i * size) + 0 + 0 + hs, 4 + j, "", cFormat2);
                                            sheet.addCell(classRanking2);
                                            Label gradeRanking2 = new Label(5 + (i * size) + 0 + 0 + hs, 4 + j, "", cFormat2);
                                            sheet.addCell(gradeRanking2);
                                            if ("T".equals(isMoreSchoolStr)) {
                                                Label areaRanking2 = new Label(6 + (i * size) + 0 + 0 + hs, 4 + j, "", cFormat2);
                                                sheet.addCell(areaRanking2);
                                            }
                                        }
                                    }
                                }
                            } else {
                                Label c_gradeRanking2 = new Label(0, 4 + j, list2.get(j).getExt1(), cFormat3);
                                sheet.addCell(c_gradeRanking2);
                                Label studentName2 = new Label(1 + 0, 4 + j, list2.get(j).getStudentName(), cFormat3);
                                sheet.addCell(studentName2);
                                sheet.setColumnView(1, 15);
                                Label classNames2 = new Label(2 + 0, 4 + j, list2.get(j).getClassName(), cFormat3);
                                sheet.addCell(classNames2);
                                if (shouxuanHide != null && shouxuanHide.equals("1")) {
                                    Label shouxuank2 = new Label(3 + 0, 4 + j, list2.get(j).getExt3(), cFormat3);
                                    sheet.addCell(shouxuank2);
                                    Label xuankezuhe3 = new Label(4 + 0, 4 + j, list2.get(j).getExt2(), cFormat3);
                                    sheet.addCell(xuankezuhe3);
                                } else if (isShowSubCompose != null && isShowSubCompose.equals("1")) {
                                    Label xuankezuhe4 = new Label(3 + 0, 4 + j, list2.get(j).getExt2(), cFormat3);
                                    sheet.addCell(xuankezuhe4);
                                }
                                String subStr2 = "";
                                for (int i2 = 0; i2 < list0.size(); i2++) {
                                    if (i2 == 0 && "F".equals(list0.get(i2).getExt6())) {
                                        isMoreSchoolStr = "F";
                                        cc = cc == 0 ? 0 : 2;
                                        size = 3 - cc;
                                    }
                                    String list0_getext12 = list0.get(i2).getExt1();
                                    String list0_getsubjectname2 = list0.get(i2).getSubjectName();
                                    if (subStr2.indexOf(list0_getext12 + list0_getsubjectname2) == -1) {
                                        Label kemu2 = new Label(3 + (i2 * size) + 0 + hs, 2, list0.get(i2).getSubjectName(), cFormat1);
                                        sheet.addCell(kemu2);
                                        sheet.mergeCells(3 + (i2 * size) + 0 + hs, 2, 2 + size + (i2 * size) + 0 + 0 + hs, 2);
                                        Label yuanshi2 = new Label(3 + (i2 * size) + 0 + hs, 3, scoreType, cFormat1);
                                        sheet.addCell(yuanshi2);
                                        if (viewRankOfScoreInfo.equals("1")) {
                                            Label banpai2 = new Label(4 + (i2 * size) + 0 + 0 + hs, 3, "班级排名", cFormat1);
                                            sheet.addCell(banpai2);
                                            sheet.setColumnView(4 + (i2 * size) + 0 + 0 + hs, 10);
                                            Label nianpai2 = new Label(5 + (i2 * size) + 0 + 0 + hs, 3, gNum, cFormat1);
                                            sheet.addCell(nianpai2);
                                            sheet.setColumnView(5 + (i2 * size) + 0 + 0 + hs, 10);
                                            if ("T".equals(isMoreSchoolStr)) {
                                                Label qupai2 = new Label(6 + (i2 * size) + 0 + 0 + hs, 3, "全区排名", cFormat1);
                                                sheet.addCell(qupai2);
                                                sheet.setColumnView(6 + (i2 * size) + 0 + 0, 10);
                                            }
                                        }
                                        subStr2 = subStr2 + list0_getext12 + list0_getsubjectname2 + Const.STRING_SEPERATOR;
                                    }
                                    int t2 = 0;
                                    String studentIds2 = list2.get(j).getStudentId();
                                    String subjectNames2 = list0.get(i2).getSubjectName();
                                    for (int d3 = 0; d3 < list1.size(); d3++) {
                                        if ((studentIds2 + subjectNames2).equals(list1.get(d3).getStudentId() + list1.get(d3).getSubjectName())) {
                                            t2 = 1;
                                        }
                                    }
                                    if (t2 == 1) {
                                        for (int d22 = 0; d22 < list1.size(); d22++) {
                                            String list2_studentId2 = list2.get(j).getStudentId();
                                            String list2_studentName2 = list2.get(j).getStudentName();
                                            String list1_studentId2 = list1.get(d22).getStudentId();
                                            String list1_studentName2 = list1.get(d22).getStudentName();
                                            String list1_isSub2 = list1.get(d22).getIsSub();
                                            int list1_mainType2 = list1.get(d22).getMainType();
                                            String list0_subjectName2 = list0.get(i2).getSubjectName();
                                            String list1_subjectName2 = list1.get(d22).getSubjectName();
                                            if ((list2_studentId2 + list2_studentName2).equals(list1_studentId2 + list1_studentName2) && list0_subjectName2.equals(list1_subjectName2)) {
                                                Double totalScores2 = list1.get(d22).getTotalScore();
                                                Double score2 = Double.valueOf(df.format(totalScores2));
                                                Number totalScore6 = new Number(3 + (i2 * size) + 0 + hs, 4 + j, score2.doubleValue(), cFormat3);
                                                sheet.addCell(totalScore6);
                                                if (viewRankOfScoreInfo.equals("1")) {
                                                    Number classRanking3 = new Number(4 + (i2 * size) + 0 + 0 + hs, 4 + j, list1.get(d22).getClassRanking(), cFormat3);
                                                    sheet.addCell(classRanking3);
                                                    Number gradeRanking3 = new Number(5 + (i2 * size) + 0 + 0 + hs, 4 + j, list1.get(d22).getGradeRanking(), cFormat3);
                                                    sheet.addCell(gradeRanking3);
                                                    if ("T".equals(isMoreSchoolStr)) {
                                                        Number areaRanking3 = new Number(6 + (i2 * size) + 0 + 0 + hs, 4 + j, list1.get(d22).getAreaRanking(), cFormat3);
                                                        sheet.addCell(areaRanking3);
                                                    }
                                                }
                                                if (list1_mainType2 > 0 && list1_isSub2.equals("F") && list1_mainType2 != 3 && list1_mainType2 != 4 && list1_mainType2 != 5) {
                                                    if (score2.doubleValue() >= fistMax.doubleValue()) {
                                                        if (secondMax == fistMax) {
                                                            showMax[2][0] = showMax[1][0];
                                                            showMax[2][1] = showMax[1][1];
                                                            showMax[2][2] = showMax[1][2];
                                                        }
                                                        secondMax = fistMax;
                                                        fistMax = score2;
                                                        showMax[1][0] = showMax[0][0];
                                                        showMax[1][1] = showMax[0][1];
                                                        showMax[1][2] = showMax[0][2];
                                                        showMax[0][0] = String.valueOf(3 + (i2 * 3));
                                                        showMax[0][1] = String.valueOf(4 + j);
                                                        showMax[0][2] = String.valueOf(score2);
                                                    } else if (score2.doubleValue() >= secondMax.doubleValue()) {
                                                        secondMax = score2;
                                                        showMax[1][0] = String.valueOf(3 + (i2 * 3));
                                                        showMax[1][1] = String.valueOf(4 + j);
                                                        showMax[1][2] = String.valueOf(score2);
                                                    }
                                                    if (list1_subjectName2.equals("五科总分")) {
                                                        five = 1;
                                                        Number totalScore7 = new Number(Integer.parseInt(showMax[0][0]), Integer.parseInt(showMax[0][1]), Double.parseDouble(showMax[0][2]), cFormat5);
                                                        sheet.addCell(totalScore7);
                                                        Number totalScore8 = new Number(Integer.parseInt(showMax[1][0]), Integer.parseInt(showMax[1][1]), Double.parseDouble(showMax[1][2]), cFormat5);
                                                        sheet.addCell(totalScore8);
                                                        if (showMax[1][1] == showMax[2][1]) {
                                                            Number totalScore9 = new Number(Integer.parseInt(showMax[2][0]), Integer.parseInt(showMax[2][1]), Double.parseDouble(showMax[2][2]), cFormat5);
                                                            sheet.addCell(totalScore9);
                                                        }
                                                        secondMax = Double.valueOf(0.0d);
                                                        fistMax = Double.valueOf(0.0d);
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        Label totalScore10 = new Label(3 + (i2 * size) + 0 + hs, 4 + j, "", cFormat3);
                                        sheet.addCell(totalScore10);
                                        if (viewRankOfScoreInfo.equals("1")) {
                                            Label classRanking4 = new Label(4 + (i2 * size) + 0 + 0 + hs, 4 + j, "", cFormat3);
                                            sheet.addCell(classRanking4);
                                            Label gradeRanking4 = new Label(5 + (i2 * size) + 0 + 0 + hs, 4 + j, "", cFormat3);
                                            sheet.addCell(gradeRanking4);
                                            if ("T".equals(isMoreSchoolStr)) {
                                                Label areaRanking4 = new Label(6 + (i2 * size) + 0 + 0 + hs, 4 + j, "", cFormat3);
                                                sheet.addCell(areaRanking4);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        Label tishi = new Label(0, list2.size() + 5, "注：*非教学班查询的是第一列对应科目的前多少名，也是按该科目排序的。教学班教学按所选的科目排序。 ", title);
                        sheet.addCell(tishi);
                        sheet.mergeCells(0, list2.size() + 5, 20, list2.size() + 7);
                        if (five == 1) {
                            Label tishi1 = new Label(0, list2.size() + 7, "\t*蓝色字体为副科最高分(分数最高的两门科目)，计入五科总分。红色字体为并列最高分，不计入五科总分。 ", title);
                            sheet.addCell(tishi1);
                            sheet.mergeCells(0, list2.size() + 7, 20, list2.size() + 9);
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    wwBook.write();
                    if (wwBook != null) {
                        try {
                            wwBook.close();
                            if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                                HttpServletResponse response = ServletActionContext.getResponse();
                                response.reset();
                                ServletOutputStream outputStream = response.getOutputStream();
                                String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                String loadFileName2 = loadFileName.replace("+", " ");
                                response.setContentType("Content-type: applicationnd.ms-excel");
                                response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xls");
                                response.setHeader("Content-length", String.valueOf(excelFile.length()));
                                byte[] tempByte = new byte[1024];
                                FileInputStream in = new FileInputStream(excelFile);
                                while (true) {
                                    int n = in.read(tempByte);
                                    if (n == -1) {
                                        break;
                                    }
                                    try {
                                        outputStream.write(tempByte, 0, n);
                                    } catch (Exception e2) {
                                        this.log.error("保存未成功", e2);
                                    }
                                }
                                outputStream.flush();
                                outputStream.close();
                                in.close();
                            }
                        } catch (WriteException e3) {
                            e3.printStackTrace();
                        }
                    }
                } catch (Throwable th) {
                    if (wwBook != null) {
                        try {
                            wwBook.close();
                            if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                                HttpServletResponse response2 = ServletActionContext.getResponse();
                                response2.reset();
                                ServletOutputStream outputStream2 = response2.getOutputStream();
                                String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                String loadFileName4 = loadFileName3.replace("+", " ");
                                response2.setContentType("Content-type: applicationnd.ms-excel");
                                response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xls");
                                response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                                byte[] tempByte2 = new byte[1024];
                                FileInputStream in2 = new FileInputStream(excelFile);
                                while (true) {
                                    int n2 = in2.read(tempByte2);
                                    if (n2 == -1) {
                                        break;
                                    }
                                    try {
                                        outputStream2.write(tempByte2, 0, n2);
                                    } catch (Exception e4) {
                                        this.log.error("保存未成功", e4);
                                    }
                                }
                                outputStream2.flush();
                                outputStream2.close();
                                in2.close();
                            }
                        } catch (WriteException e5) {
                            e5.printStackTrace();
                            throw th;
                        }
                    }
                    throw th;
                }
            } catch (Exception e6) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response3 = ServletActionContext.getResponse();
                            response3.reset();
                            ServletOutputStream outputStream3 = response3.getOutputStream();
                            String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName6 = loadFileName5.replace("+", " ");
                            response3.setContentType("Content-type: applicationnd.ms-excel");
                            response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xls");
                            response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte3 = new byte[1024];
                            FileInputStream in3 = new FileInputStream(excelFile);
                            while (true) {
                                int n3 = in3.read(tempByte3);
                                if (n3 == -1) {
                                    break;
                                }
                                try {
                                    outputStream3.write(tempByte3, 0, n3);
                                } catch (Exception e7) {
                                    this.log.error("保存未成功", e7);
                                }
                            }
                            outputStream3.flush();
                            outputStream3.close();
                            in3.close();
                        }
                    } catch (WriteException e8) {
                        e8.printStackTrace();
                    }
                }
            }
        } catch (Exception e9) {
            e9.printStackTrace();
        }
        return null;
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String G6_g6export(String examNum, String gradeNum, String schoolNum, String subjectNum, String classNum, String studentId, String studentType, String type, String source, String step, String sNum, String c_exam, String rpt_name, String isMoreSchool, String rptTitle, String isHistory, String isSaveWrite, String dirPath, String uri, String userNum, String schName, String gradeName, String className, String subjectName, String imgRoot, int m, String agent, String subRank, String downRank, String fufen, String scoreName, String subCompose, String islevel, String isShowSubCompose, String shouxuanHide) {
        String schNum;
        String gNum;
        String folderPath = "ExportFolder/reportExcel" + userNum;
        String str = "reportExcel" + userNum;
        String str2 = "reportExcel" + userNum;
        Double fistMax = Double.valueOf(0.0d);
        Double secondMax = Double.valueOf(0.0d);
        Double.valueOf(0.0d);
        String[][] showMax = new String[3][3];
        String excelName = (null == gradeName || "".equals(gradeName)) ? rpt_name + "_" + gradeNum : rpt_name + "_" + gradeName;
        if (null != classNum && !"".equals(classNum) && !classNum.contains(Const.STRING_SEPERATOR)) {
            excelName = (null == className || "".equals(className)) ? excelName + "_" + classNum : excelName + "_" + className;
        }
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        String viewRankOfScoreInfo = Configuration.getInstance().getViewRankOfScoreInfo();
        try {
            WritableWorkbook wwBook = Workbook.createWorkbook(excelFile);
            WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
            biaotis1.setAlignment(Alignment.LEFT);
            biaotis1.setVerticalAlignment(VerticalAlignment.CENTRE);
            WritableFont titles = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat title = new WritableCellFormat(titles);
            title.setAlignment(Alignment.LEFT);
            title.setVerticalAlignment(VerticalAlignment.CENTRE);
            title.setWrap(true);
            WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            WritableCellFormat cFormat1 = new WritableCellFormat(font1);
            cFormat1.setAlignment(Alignment.CENTRE);
            cFormat1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1.setBackground(Const.titleBackground_color);
            cFormat1.setWrap(true);
            WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            CellFormat writableCellFormat = new WritableCellFormat(font2);
            writableCellFormat.setAlignment(Alignment.CENTRE);
            writableCellFormat.setVerticalAlignment(VerticalAlignment.CENTRE);
            writableCellFormat.setBackground(Const.textOuBackGround_color);
            writableCellFormat.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            writableCellFormat.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            writableCellFormat.setBorder(Border.LEFT, BorderLineStyle.THIN);
            writableCellFormat.setBorder(Border.TOP, BorderLineStyle.THIN);
            writableCellFormat.setWrap(true);
            NumberFormat nf1 = new NumberFormat("0.0");
            WritableCellFormat cFormat2_1 = new WritableCellFormat(font2, nf1);
            cFormat2_1.setAlignment(Alignment.CENTRE);
            cFormat2_1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_1.setBackground(Const.textOuBackGround_color);
            cFormat2_1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_1.setWrap(true);
            WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            CellFormat writableCellFormat2 = new WritableCellFormat(font3);
            writableCellFormat2.setAlignment(Alignment.CENTRE);
            writableCellFormat2.setVerticalAlignment(VerticalAlignment.CENTRE);
            writableCellFormat2.setBackground(Const.textJiBackGround_color);
            writableCellFormat2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            writableCellFormat2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            writableCellFormat2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            writableCellFormat2.setBorder(Border.TOP, BorderLineStyle.THIN);
            writableCellFormat2.setWrap(true);
            WritableCellFormat cFormat3_1 = new WritableCellFormat(font3, nf1);
            cFormat3_1.setAlignment(Alignment.CENTRE);
            cFormat3_1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_1.setBackground(Const.textJiBackGround_color);
            cFormat3_1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_1.setWrap(true);
            WritableFont font4 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            font4.setColour(Const.textWUSubFont_color2);
            WritableCellFormat cFormat4 = new WritableCellFormat(font4);
            cFormat4.setAlignment(Alignment.CENTRE);
            cFormat4.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat4.setBackground(Const.textJiBackGround_color);
            cFormat4.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat4.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat4.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat4.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat4.setWrap(true);
            WritableFont font5 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            font5.setColour(Const.textWUSubFont_color2);
            WritableCellFormat cFormat5 = new WritableCellFormat(font5);
            cFormat5.setAlignment(Alignment.CENTRE);
            cFormat5.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat5.setBackground(Const.textJiBackGround_color);
            cFormat5.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat5.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat5.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat5.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat5.setWrap(true);
            WritableFont color = new WritableFont(WritableFont.ARIAL);
            color.setColour(Const.textWUSubFont_color);
            new WritableCellFormat(color);
            List quest = this.g6.getStudentScoreGradeRankList(examNum, gradeNum, schoolNum, classNum, type, studentType, source, sNum, 0, Integer.valueOf(sNum).intValue() + 100000, subjectNum, subRank, downRank, fufen, scoreName, subCompose, islevel);
            String isDengji = this.system.getDengji(examNum, gradeNum, subjectNum, fufen);
            try {
                try {
                    WritableSheet sheet = wwBook.createSheet(rpt_name, 0);
                    sheet.getSettings().setShowGridLines(false);
                    try {
                        Label biaotou = new Label(0, 0, rpt_name, biaotis1);
                        sheet.addCell(biaotou);
                        DecimalFormat df01 = new DecimalFormat("0.0");
                        df01.setRoundingMode(RoundingMode.HALF_UP);
                        Label xinxi = new Label(0, 1, rptTitle, title);
                        sheet.addCell(xinxi);
                        sheet.setRowView(1, Const.height_500);
                        List<Subject> list0 = (List) quest.get(0);
                        List<Studentlevel> list1 = (List) quest.get(1);
                        List<Student> list2 = (List) quest.get(2);
                        sheet.mergeCells(0, 0, (list0.size() * 4) + 2, 0);
                        sheet.mergeCells(0, 1, (list0.size() * 4) + 2, 1);
                        String isMoreSchoolStr = "T";
                        if (schoolNum.indexOf(Const.STRING_SEPERATOR) == -1) {
                            schNum = "班级";
                            gNum = "校排";
                        } else {
                            schNum = "学校";
                            gNum = "校排";
                        }
                        Label paiming = new Label(0, 2, "学生编号", cFormat1);
                        sheet.addCell(paiming);
                        sheet.mergeCells(0, 2, 0, 3);
                        Label xuesheng = new Label(1 + 0, 2, "姓名", cFormat1);
                        sheet.addCell(xuesheng);
                        Label banji = new Label(2 + 0, 2, schNum, cFormat1);
                        sheet.addCell(banji);
                        sheet.mergeCells(1 + 0, 2, 1 + 0, 3);
                        sheet.mergeCells(2 + 0, 2, 2 + 0, 3);
                        int hs = 0;
                        if (shouxuanHide != null && shouxuanHide.equals("1")) {
                            Label shouxuan = new Label(3 + 0, 2, "首选科目", cFormat1);
                            sheet.addCell(shouxuan);
                            Label xuanke = new Label(4 + 0, 2, "选科组合", cFormat1);
                            sheet.addCell(xuanke);
                            sheet.mergeCells(3 + 0, 2, 3 + 0, 3);
                            sheet.mergeCells(4 + 0, 2, 4 + 0, 3);
                            hs = 2;
                        } else if (isShowSubCompose != null && isShowSubCompose.equals("1")) {
                            Label xuanke2 = new Label(3 + 0, 2, "选科组合", cFormat1);
                            sheet.addCell(xuanke2);
                            sheet.mergeCells(3 + 0, 2, 3 + 0, 3);
                            hs = 1;
                        }
                        DecimalFormat df = new DecimalFormat("0.0");
                        df.setRoundingMode(RoundingMode.HALF_UP);
                        int dengjiCount = 0;
                        int size = 4;
                        String scoreType = (scoreName == null || !scoreName.equals("1")) ? "标准分区" : "得分";
                        int five = 0;
                        for (int j = 0; j < list2.size(); j++) {
                            CellFormat cellFormat = j % 2 == 0 ? writableCellFormat : writableCellFormat2;
                            Label c_gradeRanking = new Label(0, 4 + j, list2.get(j).getExt1() + "", cellFormat);
                            sheet.addCell(c_gradeRanking);
                            Label studentName = new Label(1 + 0, 4 + j, list2.get(j).getStudentName(), cellFormat);
                            sheet.addCell(studentName);
                            sheet.setColumnView(1, 15);
                            Label classNames = new Label(2 + 0, 4 + j, list2.get(j).getClassName(), cellFormat);
                            sheet.addCell(classNames);
                            if (shouxuanHide != null && shouxuanHide.equals("1")) {
                                Label shouxuank = new Label(3 + 0, 4 + j, list2.get(j).getExt3(), cellFormat);
                                sheet.addCell(shouxuank);
                                Label xuankezuhe = new Label(4 + 0, 4 + j, list2.get(j).getExt2(), cellFormat);
                                sheet.addCell(xuankezuhe);
                            } else if (isShowSubCompose != null && isShowSubCompose.equals("1")) {
                                Label xuankezuhe2 = new Label(3 + 0, 4 + j, list2.get(j).getExt2(), cellFormat);
                                sheet.addCell(xuankezuhe2);
                            }
                            String subStr = "";
                            for (int i = 0; i < list0.size(); i++) {
                                if (i == 0) {
                                    int size2 = 4;
                                    int cc = 0;
                                    if (!viewRankOfScoreInfo.equals("1")) {
                                        cc = 3;
                                        size2 = 4 - 3;
                                    }
                                    if ("T".equals(isDengji)) {
                                        dengjiCount = 1;
                                    }
                                    size = size2 + dengjiCount;
                                    if ("F".equals(list0.get(i).getExt6())) {
                                        isMoreSchoolStr = "F";
                                        int cc2 = cc == 0 ? 0 : 2;
                                        size = (3 - cc2) + dengjiCount;
                                    } else if ("T".equals(isDengji)) {
                                        dengjiCount++;
                                        size++;
                                    }
                                }
                                String list0_getext1 = list0.get(i).getExt1();
                                String list0_getsubjectname = list0.get(i).getSubjectName();
                                if (subStr.indexOf(list0_getext1 + list0_getsubjectname) == -1) {
                                    Label kemu = new Label(3 + (i * size) + 0 + hs, 2, list0.get(i).getSubjectName(), cFormat1);
                                    sheet.addCell(kemu);
                                    sheet.mergeCells(3 + (i * size) + 0 + hs, 2, ((((3 + (i * size)) + 0) + hs) + size) - 1, 2);
                                    Label yuanshi = new Label(3 + (i * size) + 0 + hs, 3, scoreType, cFormat1);
                                    sheet.addCell(yuanshi);
                                    if ("T".equals(isDengji)) {
                                        Label dengjixiao = new Label(4 + (i * size) + 0 + 0 + hs, 3, "校等级", cFormat1);
                                        sheet.addCell(dengjixiao);
                                        if ("T".equals(isMoreSchoolStr)) {
                                            Label dengji = new Label(5 + (i * size) + 0 + 0 + hs, 3, "区等级", cFormat1);
                                            sheet.addCell(dengji);
                                        }
                                    }
                                    if (viewRankOfScoreInfo.equals("1")) {
                                        Label banpai = new Label(4 + (i * size) + 0 + 0 + hs + dengjiCount, 3, "班排", cFormat1);
                                        sheet.addCell(banpai);
                                        sheet.setColumnView(4 + (i * size) + 0 + 0 + hs + dengjiCount, 10);
                                        Label nianpai = new Label(5 + (i * size) + 0 + 0 + hs + dengjiCount, 3, gNum, cFormat1);
                                        sheet.addCell(nianpai);
                                        sheet.setColumnView(5 + (i * size) + 0 + 0 + hs + dengjiCount, 10);
                                        if ("T".equals(isMoreSchoolStr)) {
                                            Label qupai = new Label(6 + (i * size) + 0 + 0 + hs + dengjiCount, 3, "区排", cFormat1);
                                            sheet.addCell(qupai);
                                            sheet.setColumnView(6 + (i * size) + 0 + 0 + hs + dengjiCount, 10);
                                        }
                                    }
                                    subStr = subStr + list0_getext1 + list0_getsubjectname + Const.STRING_SEPERATOR;
                                }
                                int t = 0;
                                String studentIds = list2.get(j).getStudentId();
                                String subjectNames = list0.get(i).getSubjectName();
                                List<Studentlevel> ss = (List) list1.stream().filter(stu -> {
                                    return studentIds.equals(stu.getStudentId()) && subjectNames.equals(stu.getSubjectName());
                                }).collect(Collectors.toList());
                                if (null != ss && ss.size() > 0) {
                                    t = 1;
                                }
                                if (t == 1) {
                                    for (int d2 = 0; d2 < list1.size(); d2++) {
                                        String list2_studentId = list2.get(j).getStudentId();
                                        String list2_studentName = list2.get(j).getStudentName();
                                        String list1_studentId = list1.get(d2).getStudentId();
                                        String list1_studentName = list1.get(d2).getStudentName();
                                        String list1_isSub = list1.get(d2).getIsSub();
                                        int list1_mainType = list1.get(d2).getMainType();
                                        String list0_subjectName = list0.get(i).getSubjectName();
                                        String list1_subjectName = list1.get(d2).getSubjectName();
                                        if ((list2_studentId + list2_studentName).equals(list1_studentId + list1_studentName) && list0_subjectName.equals(list1_subjectName)) {
                                            if (null == list1.get(d2).getTotalScore()) {
                                                Label totalScore = new Label(3 + (i * size) + 0 + hs, 4 + j, "", cellFormat);
                                                sheet.addCell(totalScore);
                                                if ("T".equals(isDengji)) {
                                                    Label dengjixiao2 = new Label(4 + (i * size) + 0 + 0 + hs, 4 + j, "", cellFormat);
                                                    sheet.addCell(dengjixiao2);
                                                    if ("T".equals(isMoreSchoolStr)) {
                                                        Label dengji2 = new Label(5 + (i * size) + 0 + 0 + hs, 4 + j, "", cellFormat);
                                                        sheet.addCell(dengji2);
                                                    }
                                                }
                                                if (viewRankOfScoreInfo.equals("1")) {
                                                    Label classRanking = new Label(4 + (i * size) + 0 + 0 + hs + dengjiCount, 4 + j, "", cellFormat);
                                                    sheet.addCell(classRanking);
                                                    Label gradeRanking = new Label(5 + (i * size) + 0 + 0 + hs + dengjiCount, 4 + j, "", cellFormat);
                                                    sheet.addCell(gradeRanking);
                                                    if ("T".equals(isMoreSchoolStr)) {
                                                        Label areaRanking = new Label(6 + (i * size) + 0 + 0 + hs + dengjiCount, 4 + j, "", cellFormat);
                                                        sheet.addCell(areaRanking);
                                                    }
                                                }
                                            } else {
                                                Double totalScores = list1.get(d2).getTotalScore();
                                                Double score = Double.valueOf(df.format(totalScores));
                                                BigDecimal score0 = Convert.toBigDecimal(score).stripTrailingZeros();
                                                String scoreStr = score0.toPlainString();
                                                Number totalScore2 = new Number(3 + (i * size) + 0 + hs, 4 + j, Double.valueOf(scoreStr).doubleValue(), cellFormat);
                                                sheet.addCell(totalScore2);
                                                if ("T".equals(isDengji)) {
                                                    Label dengjixiao3 = new Label(4 + (i * size) + 0 + 0 + hs, 4 + j, list1.get(d2).getDengjixiao(), cellFormat);
                                                    sheet.addCell(dengjixiao3);
                                                    if ("T".equals(isMoreSchoolStr)) {
                                                        Label dengji3 = new Label(5 + (i * size) + 0 + 0 + hs, 4 + j, list1.get(d2).getDengji(), cellFormat);
                                                        sheet.addCell(dengji3);
                                                    }
                                                }
                                                if (viewRankOfScoreInfo.equals("1")) {
                                                    Number classRanking2 = new Number(4 + (i * size) + 0 + 0 + hs + dengjiCount, 4 + j, list1.get(d2).getClassRanking(), cellFormat);
                                                    sheet.addCell(classRanking2);
                                                    Number gradeRanking2 = new Number(5 + (i * size) + 0 + 0 + hs + dengjiCount, 4 + j, list1.get(d2).getGradeRanking(), cellFormat);
                                                    sheet.addCell(gradeRanking2);
                                                    if ("T".equals(isMoreSchoolStr)) {
                                                        Number areaRanking2 = new Number(6 + (i * size) + 0 + 0 + hs + dengjiCount, 4 + j, list1.get(d2).getAreaRanking(), cellFormat);
                                                        sheet.addCell(areaRanking2);
                                                    }
                                                }
                                                if (list1_mainType > 0 && list1_isSub.equals("F") && list1_mainType != 3 && list1_mainType != 4 && list1_mainType != 5) {
                                                    if (score.doubleValue() >= fistMax.doubleValue()) {
                                                        secondMax = fistMax;
                                                        fistMax = score;
                                                        showMax[1][0] = showMax[0][0];
                                                        showMax[1][1] = showMax[0][1];
                                                        showMax[1][2] = showMax[0][2];
                                                        showMax[0][0] = String.valueOf(3 + (i * 3));
                                                        showMax[0][1] = String.valueOf(4 + j);
                                                        showMax[0][2] = String.valueOf(score);
                                                    } else if (score.doubleValue() >= secondMax.doubleValue()) {
                                                        secondMax = score;
                                                        showMax[1][0] = String.valueOf(3 + (i * 4));
                                                        showMax[1][1] = String.valueOf(4 + j);
                                                        showMax[1][2] = String.valueOf(score);
                                                    }
                                                    if (list1_subjectName.equals("五科总分")) {
                                                        five = 1;
                                                        Number totalScore3 = new Number(Integer.parseInt(showMax[0][0]), Integer.parseInt(showMax[0][1]), Double.parseDouble(showMax[0][2]), cFormat4);
                                                        sheet.addCell(totalScore3);
                                                        Number totalScore4 = new Number(Integer.parseInt(showMax[1][0]), Integer.parseInt(showMax[1][1]), Double.parseDouble(showMax[1][2]), cFormat4);
                                                        sheet.addCell(totalScore4);
                                                        if (showMax[1][2].equals(showMax[2][2])) {
                                                            Number totalScore5 = new Number(Integer.parseInt(showMax[2][0]), Integer.parseInt(showMax[2][1]), Double.parseDouble(showMax[2][2]), cFormat4);
                                                            sheet.addCell(totalScore5);
                                                        }
                                                        secondMax = Double.valueOf(0.0d);
                                                        fistMax = Double.valueOf(0.0d);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    Label totalScore6 = new Label(3 + (i * size) + 0 + hs, 4 + j, "", cellFormat);
                                    sheet.addCell(totalScore6);
                                    if ("T".equals(isDengji)) {
                                        Label dengjixiao4 = new Label(4 + (i * size) + 0 + 0 + hs, 4 + j, "", cellFormat);
                                        sheet.addCell(dengjixiao4);
                                        if ("T".equals(isMoreSchoolStr)) {
                                            Label dengji4 = new Label(5 + (i * size) + 0 + 0 + hs, 4 + j, "", cellFormat);
                                            sheet.addCell(dengji4);
                                        }
                                    }
                                    if (viewRankOfScoreInfo.equals("1")) {
                                        Label classRanking3 = new Label(4 + (i * size) + 0 + 0 + hs + dengjiCount, 4 + j, "", cellFormat);
                                        sheet.addCell(classRanking3);
                                        Label gradeRanking3 = new Label(5 + (i * size) + 0 + 0 + hs + dengjiCount, 4 + j, "", cellFormat);
                                        sheet.addCell(gradeRanking3);
                                        if ("T".equals(isMoreSchoolStr)) {
                                            Label areaRanking3 = new Label(6 + (i * size) + 0 + 0 + hs + dengjiCount, 4 + j, "", cellFormat);
                                            sheet.addCell(areaRanking3);
                                        }
                                    }
                                }
                            }
                        }
                        Label tishi = new Label(0, list2.size() + 5, "注：*非教学班查询的是第一列对应科目的前多少名，也是按该科目排序的。教学班教学按所选的科目排序。 ", title);
                        sheet.addCell(tishi);
                        sheet.mergeCells(0, list2.size() + 5, 20, list2.size() + 7);
                        if (five == 1) {
                            Label tishi1 = new Label(0, list2.size() + 7, "\t*蓝色字体为副科最高分(分数最高的两门科目)，计入五科总分。红色字体为并列最高分，不计入五科总分。 ", title);
                            sheet.addCell(tishi1);
                            sheet.mergeCells(0, list2.size() + 7, 20, list2.size() + 9);
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    wwBook.write();
                    if (wwBook != null) {
                        try {
                            wwBook.close();
                            if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                                HttpServletResponse response = ServletActionContext.getResponse();
                                response.reset();
                                ServletOutputStream outputStream = response.getOutputStream();
                                String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                String loadFileName2 = loadFileName.replace("+", " ");
                                response.setContentType("Content-type: applicationnd.ms-excel");
                                response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xls");
                                response.setHeader("Content-length", String.valueOf(excelFile.length()));
                                byte[] tempByte = new byte[1024];
                                FileInputStream in = new FileInputStream(excelFile);
                                while (true) {
                                    int n = in.read(tempByte);
                                    if (n == -1) {
                                        break;
                                    }
                                    try {
                                        outputStream.write(tempByte, 0, n);
                                    } catch (Exception e2) {
                                        this.log.error("保存未成功", e2);
                                    }
                                }
                                outputStream.flush();
                                outputStream.close();
                                in.close();
                            }
                        } catch (WriteException e3) {
                            e3.printStackTrace();
                        }
                    }
                } catch (Throwable th) {
                    if (wwBook != null) {
                        try {
                            wwBook.close();
                            if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                                HttpServletResponse response2 = ServletActionContext.getResponse();
                                response2.reset();
                                ServletOutputStream outputStream2 = response2.getOutputStream();
                                String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                String loadFileName4 = loadFileName3.replace("+", " ");
                                response2.setContentType("Content-type: applicationnd.ms-excel");
                                response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xls");
                                response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                                byte[] tempByte2 = new byte[1024];
                                FileInputStream in2 = new FileInputStream(excelFile);
                                while (true) {
                                    int n2 = in2.read(tempByte2);
                                    if (n2 == -1) {
                                        break;
                                    }
                                    try {
                                        outputStream2.write(tempByte2, 0, n2);
                                    } catch (Exception e4) {
                                        this.log.error("保存未成功", e4);
                                    }
                                }
                                outputStream2.flush();
                                outputStream2.close();
                                in2.close();
                            }
                        } catch (WriteException e5) {
                            e5.printStackTrace();
                            throw th;
                        }
                    }
                    throw th;
                }
            } catch (Exception e6) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response3 = ServletActionContext.getResponse();
                            response3.reset();
                            ServletOutputStream outputStream3 = response3.getOutputStream();
                            String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName6 = loadFileName5.replace("+", " ");
                            response3.setContentType("Content-type: applicationnd.ms-excel");
                            response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xls");
                            response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte3 = new byte[1024];
                            FileInputStream in3 = new FileInputStream(excelFile);
                            while (true) {
                                int n3 = in3.read(tempByte3);
                                if (n3 == -1) {
                                    break;
                                }
                                try {
                                    outputStream3.write(tempByte3, 0, n3);
                                } catch (Exception e7) {
                                    this.log.error("保存未成功", e7);
                                }
                            }
                            outputStream3.flush();
                            outputStream3.close();
                            in3.close();
                        }
                    } catch (WriteException e8) {
                        e8.printStackTrace();
                    }
                }
            }
        } catch (Exception e9) {
            e9.printStackTrace();
        }
        return null;
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String G7_g7export(String examNum, String gradeNum, String schoolNum, String subjectNum, String classNum, String studentId, String studentType, String type, String source, String step, String sNum, String c_exam, String rpt_name, String isMoreSchool, String rptTitle, String isHistory, String isSaveWrite, String dirPath, String uri, String userNum, String schName, String gradeName, String className, String subjectName, String imgRoot, String all_class, String agent, String fufen, String subCompose) {
        String folderPath = "reportExcel" + userNum;
        String folderName = "reportExcel" + userNum;
        String zipName = "reportExcel" + userNum;
        Double fistMax = Double.valueOf(0.0d);
        Double secondMax = Double.valueOf(0.0d);
        Double.valueOf(0.0d);
        String[][] showMax = new String[3][3];
        String excelName = (null == gradeName || "".equals(gradeName)) ? rpt_name + "_" + gradeNum : rpt_name + "_" + gradeName;
        if (null != classNum && !"".equals(classNum) && !classNum.contains(Const.STRING_SEPERATOR)) {
            excelName = (null == className || "".equals(className)) ? excelName + "_" + classNum : excelName + "_" + className;
        }
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        String filePath = null;
        try {
            WritableWorkbook wwBook = Workbook.createWorkbook(excelFile);
            WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
            biaotis1.setAlignment(Alignment.LEFT);
            biaotis1.setVerticalAlignment(VerticalAlignment.CENTRE);
            WritableFont titles = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat title = new WritableCellFormat(titles);
            title.setAlignment(Alignment.LEFT);
            title.setVerticalAlignment(VerticalAlignment.CENTRE);
            title.setWrap(true);
            WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            WritableCellFormat cFormat1 = new WritableCellFormat(font1);
            cFormat1.setAlignment(Alignment.CENTRE);
            cFormat1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1.setBackground(Const.titleBackground_color);
            cFormat1.setWrap(true);
            WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat2 = new WritableCellFormat(font2);
            cFormat2.setAlignment(Alignment.CENTRE);
            cFormat2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2.setBackground(Const.textOuBackGround_color);
            cFormat2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2.setWrap(true);
            NumberFormat nf1 = new NumberFormat("0.0");
            WritableCellFormat cFormat2_1 = new WritableCellFormat(font2, nf1);
            cFormat2_1.setAlignment(Alignment.CENTRE);
            cFormat2_1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_1.setBackground(Const.textOuBackGround_color);
            cFormat2_1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_1.setWrap(true);
            WritableCellFormat cFormat2_2 = new WritableCellFormat(font2);
            cFormat2_2.setAlignment(Alignment.CENTRE);
            cFormat2_2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_2.setBackground(Const.textOuBackGround_color);
            cFormat2_2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_2.setWrap(true);
            WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat3 = new WritableCellFormat(font3);
            cFormat3.setAlignment(Alignment.CENTRE);
            cFormat3.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3.setBackground(Const.textJiBackGround_color);
            cFormat3.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3.setWrap(true);
            WritableCellFormat cFormat3_1 = new WritableCellFormat(font3, nf1);
            cFormat3_1.setAlignment(Alignment.CENTRE);
            cFormat3_1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_1.setBackground(Const.textJiBackGround_color);
            cFormat3_1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_1.setWrap(true);
            WritableCellFormat cFormat3_2 = new WritableCellFormat(font3);
            cFormat3_2.setAlignment(Alignment.CENTRE);
            cFormat3_2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_2.setBackground(Const.textJiBackGround_color);
            cFormat3_2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_2.setWrap(true);
            WritableFont font4 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            font4.setColour(Const.textWUSubFont_color2);
            WritableCellFormat cFormat4 = new WritableCellFormat(font4);
            cFormat4.setAlignment(Alignment.CENTRE);
            cFormat4.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat4.setBackground(Const.textOuBackGround_color);
            cFormat4.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat4.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat4.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat4.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat4.setWrap(true);
            WritableFont font5 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            font5.setColour(Const.textWUSubFont_color2);
            WritableCellFormat cFormat5 = new WritableCellFormat(font5);
            cFormat5.setAlignment(Alignment.CENTRE);
            cFormat5.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat5.setBackground(Const.textJiBackGround_color);
            cFormat5.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat5.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat5.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat5.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat5.setWrap(true);
            List quest = this.g7.getstuScoreClaCompare(examNum, subjectNum, gradeNum, schoolNum, classNum, type, studentType, source, fufen, subCompose);
            try {
                WritableSheet sheet = wwBook.createSheet(rpt_name, 0);
                sheet.getSettings().setShowGridLines(false);
                try {
                    Label biaotou = new Label(0, 0, rpt_name, biaotis1);
                    sheet.addCell(biaotou);
                    DecimalFormat df01 = new DecimalFormat("0.0");
                    df01.setRoundingMode(RoundingMode.HALF_UP);
                    sheet.setRowView(1, Const.height_500);
                    List<Subject> list0 = (List) quest.get(0);
                    List<RptHeader> list1 = (List) quest.get(1);
                    List<Student> list2 = (List) quest.get(2);
                    sheet.mergeCells(0, 0, (list0.size() * 3) + 2, 0);
                    sheet.mergeCells(0, 1, (list0.size() * 3) + 2, 1);
                    Label paiming = new Label(0, 2, "排名", cFormat1);
                    sheet.addCell(paiming);
                    sheet.setColumnView(0, 8);
                    sheet.mergeCells(0, 2, 0, 3);
                    Label xuesheng = new Label(1, 2, "姓名", cFormat1);
                    sheet.addCell(xuesheng);
                    sheet.setColumnView(1, 15);
                    sheet.mergeCells(1, 2, 1, 3);
                    Label bianhao = new Label(2, 2, "学生编号", cFormat1);
                    sheet.addCell(bianhao);
                    sheet.setColumnView(2, 10);
                    sheet.mergeCells(2, 2, 2, 3);
                    int five = 0;
                    for (int j = 0; j < list2.size(); j++) {
                        if (j % 2 == 0) {
                            String classRanking = Convert.toStr(list2.get(j).getExt1());
                            if (null == classRanking || classRanking.equals("")) {
                                Label ext1 = new Label(0, 4 + j, classRanking, cFormat2);
                                sheet.addCell(ext1);
                            } else {
                                Number ext12 = new Number(0, 4 + j, Integer.valueOf(classRanking).intValue(), cFormat2);
                                sheet.addCell(ext12);
                            }
                            Label studentName = new Label(1, 4 + j, list2.get(j).getStudentName(), cFormat2);
                            sheet.addCell(studentName);
                            Label studentId_val = new Label(2, 4 + j, list2.get(j).getStudentId(), cFormat2);
                            sheet.addCell(studentId_val);
                            String subStr = "";
                            for (int s = 0; s < list0.size(); s++) {
                                if (subStr.indexOf(list0.get(s).getExt1() + list0.get(s).getSubjectName()) == -1) {
                                    Label kemu = new Label(3 + (s * 3), 2, list0.get(s).getSubjectName(), cFormat1);
                                    sheet.addCell(kemu);
                                    sheet.mergeCells(3 + (s * 3), 2, 5 + (s * 3), 2);
                                    Label yuanshi = new Label(3 + (s * 3), 3, fufen.equals("1") ? "赋分" : "原始分", cFormat1);
                                    sheet.addCell(yuanshi);
                                    Label banpai = new Label(4 + (s * 3), 3, "相对平均", cFormat1);
                                    sheet.addCell(banpai);
                                    sheet.setColumnView(4 + (s * 3), 10);
                                    Label nianpai = new Label(5 + (s * 3), 3, "相对最高", cFormat1);
                                    sheet.addCell(nianpai);
                                    sheet.setColumnView(4 + (s * 3), 10);
                                    subStr = subStr + list0.get(s).getExt1() + list0.get(s).getSubjectName() + Const.STRING_SEPERATOR;
                                }
                                int t = 0;
                                String studentIds = list2.get(j).getStudentId();
                                String subjectNames = list0.get(s).getSubjectName();
                                for (int d = 0; d < list1.size(); d++) {
                                    if ((studentIds + subjectNames).equals(list1.get(d).getStudentId() + list1.get(d).getSubjectName())) {
                                        t = 1;
                                    }
                                }
                                if (t == 1) {
                                    for (int d2 = 0; d2 < list1.size(); d2++) {
                                        String list2_studentId = list2.get(j).getStudentId();
                                        String list2_studentName = list2.get(j).getStudentName();
                                        String list1_studentId = list1.get(d2).getStudentId();
                                        String list1_studentName = list1.get(d2).getStudentName();
                                        String list1_isSub = list1.get(d2).getIsHidden();
                                        int list1_mainType = Integer.parseInt(list1.get(d2).getMainType());
                                        String list0_subjectName = list0.get(s).getSubjectName();
                                        String list1_subjectName = list1.get(d2).getSubjectName();
                                        if ((list2_studentId + list2_studentName).equals(list1_studentId + list1_studentName) && list0_subjectName.equals(list1_subjectName)) {
                                            String scorestr = Convert.toBigDecimal(df01.format(list1.get(d2).getTotalScore())).stripTrailingZeros().toPlainString();
                                            Number totalScore = new Number(3 + (s * 3), 4 + j, Double.valueOf(scorestr).doubleValue(), cFormat2_2);
                                            sheet.addCell(totalScore);
                                            Double totalScores = Double.valueOf(df01.format(list1.get(d2).getTotalScore()));
                                            if (list1_mainType > 0 && list1_isSub.equals("F") && list1_mainType != 3 && list1_mainType != 4 && list1_mainType != 5) {
                                                if (totalScores.doubleValue() >= fistMax.doubleValue()) {
                                                    secondMax = fistMax;
                                                    fistMax = totalScores;
                                                    showMax[1][0] = showMax[0][0];
                                                    showMax[1][1] = showMax[0][1];
                                                    showMax[1][2] = showMax[0][2];
                                                    showMax[0][0] = String.valueOf(3 + (s * 4));
                                                    showMax[0][1] = String.valueOf(4 + j);
                                                    showMax[0][2] = String.valueOf(totalScores);
                                                } else if (totalScores.doubleValue() >= secondMax.doubleValue()) {
                                                    secondMax = totalScores;
                                                    showMax[1][0] = String.valueOf(3 + (s * 4));
                                                    showMax[1][1] = String.valueOf(4 + j);
                                                    showMax[1][2] = String.valueOf(totalScores);
                                                }
                                            }
                                            Number ca = new Number(4 + (s * 3), 4 + j, Double.valueOf(df01.format(list1.get(d2).getCa())).doubleValue(), cFormat2_1);
                                            sheet.addCell(ca);
                                            Number cm = new Number(5 + (s * 3), 4 + j, Double.valueOf(df01.format(list1.get(d2).getCm())).doubleValue(), cFormat2_1);
                                            sheet.addCell(cm);
                                            if (list1_subjectName.equals("五科总分")) {
                                                five = 1;
                                                Number totalScore2 = new Number(Integer.parseInt(showMax[0][0]), Integer.parseInt(showMax[0][1]), Double.parseDouble(showMax[0][2]), cFormat4);
                                                sheet.addCell(totalScore2);
                                                Number totalScore3 = new Number(Integer.parseInt(showMax[1][0]), Integer.parseInt(showMax[1][1]), Double.parseDouble(showMax[1][2]), cFormat4);
                                                sheet.addCell(totalScore3);
                                                if (showMax[1][2].equals(showMax[2][2])) {
                                                    Number totalScore4 = new Number(Integer.parseInt(showMax[2][0]), Integer.parseInt(showMax[2][1]), Double.parseDouble(showMax[2][2]), cFormat4);
                                                    sheet.addCell(totalScore4);
                                                }
                                                secondMax = Double.valueOf(0.0d);
                                                fistMax = Double.valueOf(0.0d);
                                            }
                                        }
                                    }
                                } else {
                                    Label totalScore5 = new Label(3 + (s * 3), 4 + j, "", cFormat2);
                                    sheet.addCell(totalScore5);
                                    Label ca2 = new Label(4 + (s * 3), 4 + j, "", cFormat2);
                                    sheet.addCell(ca2);
                                    Label cm2 = new Label(5 + (s * 3), 4 + j, "", cFormat2);
                                    sheet.addCell(cm2);
                                }
                            }
                        } else {
                            String classRanking2 = Convert.toStr(list2.get(j).getExt1());
                            if (null == classRanking2 || classRanking2.equals("")) {
                                Label ext13 = new Label(0, 4 + j, classRanking2, cFormat3);
                                sheet.addCell(ext13);
                            } else {
                                Number ext14 = new Number(0, 4 + j, Integer.valueOf(classRanking2).intValue(), cFormat3);
                                sheet.addCell(ext14);
                            }
                            Label studentName2 = new Label(1, 4 + j, list2.get(j).getStudentName(), cFormat3);
                            sheet.addCell(studentName2);
                            Label studentId_val2 = new Label(2, 4 + j, list2.get(j).getStudentId(), cFormat3);
                            sheet.addCell(studentId_val2);
                            String subStr2 = "";
                            for (int s2 = 0; s2 < list0.size(); s2++) {
                                if (subStr2.indexOf(list0.get(s2).getExt1() + list0.get(s2).getSubjectName()) == -1) {
                                    Label kemu2 = new Label(3 + (s2 * 3), 2, list0.get(s2).getSubjectName(), cFormat1);
                                    sheet.addCell(kemu2);
                                    sheet.mergeCells(3 + (s2 * 3), 2, 5 + (s2 * 3), 2);
                                    Label yuanshi2 = new Label(3 + (s2 * 3), 3, fufen.equals("1") ? "赋分" : "原始分", cFormat1);
                                    sheet.addCell(yuanshi2);
                                    Label banpai2 = new Label(4 + (s2 * 3), 3, "相对平均", cFormat1);
                                    sheet.addCell(banpai2);
                                    sheet.setColumnView(4 + (s2 * 3), 10);
                                    Label nianpai2 = new Label(5 + (s2 * 3), 3, "相对最高", cFormat1);
                                    sheet.addCell(nianpai2);
                                    sheet.setColumnView(5 + (s2 * 3), 10);
                                    subStr2 = subStr2 + list0.get(s2).getExt1() + list0.get(s2).getSubjectName() + Const.STRING_SEPERATOR;
                                }
                                int t2 = 0;
                                String studentIds2 = list2.get(j).getStudentId();
                                String subjectNames2 = list0.get(s2).getSubjectName();
                                for (int d3 = 0; d3 < list1.size(); d3++) {
                                    if ((studentIds2 + subjectNames2).equals(list1.get(d3).getStudentId() + list1.get(d3).getSubjectName())) {
                                        t2 = 1;
                                    }
                                }
                                if (t2 == 1) {
                                    for (int d22 = 0; d22 < list1.size(); d22++) {
                                        String list2_studentId2 = list2.get(j).getStudentId();
                                        String list2_studentName2 = list2.get(j).getStudentName();
                                        String list1_studentId2 = list1.get(d22).getStudentId();
                                        String list1_studentName2 = list1.get(d22).getStudentName();
                                        String list1_isSub2 = list1.get(d22).getIsHidden();
                                        int list1_mainType2 = Integer.parseInt(list1.get(d22).getMainType());
                                        String list0_subjectName2 = list0.get(s2).getSubjectName();
                                        String list1_subjectName2 = list1.get(d22).getSubjectName();
                                        if ((list2_studentId2 + list2_studentName2).equals(list1_studentId2 + list1_studentName2) && list0_subjectName2.equals(list1_subjectName2)) {
                                            String scorestr2 = Convert.toBigDecimal(df01.format(list1.get(d22).getTotalScore())).stripTrailingZeros().toPlainString();
                                            Number totalScore6 = new Number(3 + (s2 * 3), 4 + j, Double.valueOf(scorestr2).doubleValue(), cFormat3_2);
                                            sheet.addCell(totalScore6);
                                            Double totalScores2 = Double.valueOf(df01.format(list1.get(d22).getTotalScore()));
                                            if (list1_mainType2 > 0 && list1_isSub2.equals("F") && list1_mainType2 != 3 && list1_mainType2 != 4 && list1_mainType2 != 5) {
                                                if (totalScores2.doubleValue() >= fistMax.doubleValue()) {
                                                    secondMax = fistMax;
                                                    fistMax = totalScores2;
                                                    showMax[1][0] = showMax[0][0];
                                                    showMax[1][1] = showMax[0][1];
                                                    showMax[1][2] = showMax[0][2];
                                                    showMax[0][0] = String.valueOf(3 + (s2 * 4));
                                                    showMax[0][1] = String.valueOf(4 + j);
                                                    showMax[0][2] = String.valueOf(totalScores2);
                                                } else if (totalScores2.doubleValue() >= secondMax.doubleValue()) {
                                                    secondMax = totalScores2;
                                                    showMax[1][0] = String.valueOf(3 + (s2 * 4));
                                                    showMax[1][1] = String.valueOf(4 + j);
                                                    showMax[1][2] = String.valueOf(totalScores2);
                                                }
                                            }
                                            Number ca3 = new Number(4 + (s2 * 3), 4 + j, Double.valueOf(df01.format(list1.get(d22).getCa())).doubleValue(), cFormat3_1);
                                            sheet.addCell(ca3);
                                            Number cm3 = new Number(5 + (s2 * 3), 4 + j, Double.valueOf(df01.format(list1.get(d22).getCm())).doubleValue(), cFormat3_1);
                                            sheet.addCell(cm3);
                                            if (list1_subjectName2.equals("五科总分")) {
                                                five = 1;
                                                Number totalScore7 = new Number(Integer.parseInt(showMax[0][0]), Integer.parseInt(showMax[0][1]), Double.parseDouble(showMax[0][2]), cFormat5);
                                                sheet.addCell(totalScore7);
                                                Number totalScore8 = new Number(Integer.parseInt(showMax[1][0]), Integer.parseInt(showMax[1][1]), Double.parseDouble(showMax[1][2]), cFormat5);
                                                sheet.addCell(totalScore8);
                                                if (showMax[1][1] == showMax[2][1]) {
                                                    Number totalScore9 = new Number(Integer.parseInt(showMax[2][0]), Integer.parseInt(showMax[2][1]), Double.parseDouble(showMax[2][2]), cFormat5);
                                                    sheet.addCell(totalScore9);
                                                }
                                                secondMax = Double.valueOf(0.0d);
                                                fistMax = Double.valueOf(0.0d);
                                            }
                                        }
                                    }
                                } else {
                                    Label totalScore10 = new Label(3 + (s2 * 3), 4 + j, "", cFormat3);
                                    sheet.addCell(totalScore10);
                                    Label ca4 = new Label(4 + (s2 * 3), 4 + j, "", cFormat3);
                                    sheet.addCell(ca4);
                                    Label cm4 = new Label(5 + (s2 * 3), 4 + j, "", cFormat3);
                                    sheet.addCell(cm4);
                                }
                            }
                        }
                    }
                    if (five == 1) {
                        Label xinxi2 = new Label(0, 1, rptTitle + "\t*蓝色字体为副科最高分(分数最高的两门科目)，计入五科总分。红色字体为并列最高分，不计入五科总分。", title);
                        sheet.addCell(xinxi2);
                    } else {
                        Label xinxi22 = new Label(0, 1, rptTitle, title);
                        sheet.addCell(xinxi22);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                wwBook.write();
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            if (Integer.valueOf(all_class).intValue() == 1) {
                                HttpServletResponse response = ServletActionContext.getResponse();
                                response.reset();
                                ServletOutputStream outputStream = response.getOutputStream();
                                String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                String loadFileName2 = loadFileName.replace("+", " ");
                                response.setContentType("Content-type: applicationnd.ms-excel");
                                response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xls");
                                response.setHeader("Content-length", String.valueOf(excelFile.length()));
                                byte[] tempByte = new byte[1024];
                                FileInputStream in = new FileInputStream(excelFile);
                                while (true) {
                                    int n = in.read(tempByte);
                                    if (n == -1) {
                                        break;
                                    }
                                    try {
                                        outputStream.write(tempByte, 0, n);
                                    } catch (Exception e2) {
                                        this.log.error("保存未成功", e2);
                                    }
                                }
                                outputStream.flush();
                                outputStream.close();
                                in.close();
                            } else {
                                filePath = methodZipAll(uri, dirPath, folderName, zipName);
                            }
                        }
                    } catch (WriteException e3) {
                        e3.printStackTrace();
                    }
                }
            } catch (Exception e4) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            if (Integer.valueOf(all_class).intValue() == 1) {
                                HttpServletResponse response2 = ServletActionContext.getResponse();
                                response2.reset();
                                ServletOutputStream outputStream2 = response2.getOutputStream();
                                String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                String loadFileName4 = loadFileName3.replace("+", " ");
                                response2.setContentType("Content-type: applicationnd.ms-excel");
                                response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xls");
                                response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                                byte[] tempByte2 = new byte[1024];
                                FileInputStream in2 = new FileInputStream(excelFile);
                                while (true) {
                                    int n2 = in2.read(tempByte2);
                                    if (n2 == -1) {
                                        break;
                                    }
                                    try {
                                        outputStream2.write(tempByte2, 0, n2);
                                    } catch (Exception e5) {
                                        this.log.error("保存未成功", e5);
                                    }
                                }
                                outputStream2.flush();
                                outputStream2.close();
                                in2.close();
                            } else {
                                filePath = methodZipAll(uri, dirPath, folderName, zipName);
                            }
                        }
                    } catch (WriteException e6) {
                        e6.printStackTrace();
                    }
                }
            } catch (Throwable th) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            if (Integer.valueOf(all_class).intValue() == 1) {
                                HttpServletResponse response3 = ServletActionContext.getResponse();
                                response3.reset();
                                ServletOutputStream outputStream3 = response3.getOutputStream();
                                String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                String loadFileName6 = loadFileName5.replace("+", " ");
                                response3.setContentType("Content-type: applicationnd.ms-excel");
                                response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xls");
                                response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                                byte[] tempByte3 = new byte[1024];
                                FileInputStream in3 = new FileInputStream(excelFile);
                                while (true) {
                                    int n3 = in3.read(tempByte3);
                                    if (n3 == -1) {
                                        break;
                                    }
                                    try {
                                        outputStream3.write(tempByte3, 0, n3);
                                    } catch (Exception e7) {
                                        this.log.error("保存未成功", e7);
                                    }
                                }
                                outputStream3.flush();
                                outputStream3.close();
                                in3.close();
                            } else {
                                methodZipAll(uri, dirPath, folderName, zipName);
                            }
                        }
                    } catch (WriteException e8) {
                        e8.printStackTrace();
                        throw th;
                    }
                }
                throw th;
            }
        } catch (Exception e9) {
            e9.printStackTrace();
        }
        return filePath;
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String G8_g8export(String examNum, String gradeNum, String schoolNum, String subjectNum, String classNum, String studentId, String studentType, String type, String source, String step, String sNum, String c_exam, String rpt_name, String isMoreSchool, String rptTitle, String isHistory, String isSaveWrite, String dirPath, String uri, String userNum, String schName, String gradeName, String className, String subjectName, String imgRoot, String agent, String fufen, String subCompose, String jiaoxueban) {
        String folderPath = "ExportFolder/reportExcel" + userNum;
        String str = "reportExcel" + userNum;
        String str2 = "reportExcel" + userNum;
        Double.valueOf(0.0d);
        Double.valueOf(0.0d);
        Double.valueOf(0.0d);
        String[][] strArr = new String[3][3];
        String excelName = (null == gradeName || "".equals(gradeName)) ? rpt_name + "_" + gradeNum : rpt_name + "_" + gradeName;
        if (null != classNum && !"".equals(classNum) && !classNum.contains(Const.STRING_SEPERATOR)) {
            excelName = (null == className || "".equals(className)) ? excelName + "_" + classNum : excelName + "_" + className;
        }
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        try {
            WritableWorkbook wwBook = Workbook.createWorkbook(excelFile);
            WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
            biaotis1.setAlignment(Alignment.LEFT);
            biaotis1.setVerticalAlignment(VerticalAlignment.CENTRE);
            WritableFont titles = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat title = new WritableCellFormat(titles);
            title.setAlignment(Alignment.LEFT);
            title.setVerticalAlignment(VerticalAlignment.CENTRE);
            title.setWrap(true);
            WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            WritableCellFormat cFormat1 = new WritableCellFormat(font1);
            cFormat1.setAlignment(Alignment.CENTRE);
            cFormat1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1.setBackground(Const.titleBackground_color);
            cFormat1.setWrap(true);
            WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            CellFormat writableCellFormat = new WritableCellFormat(font2);
            writableCellFormat.setAlignment(Alignment.CENTRE);
            writableCellFormat.setVerticalAlignment(VerticalAlignment.CENTRE);
            writableCellFormat.setBackground(Const.textOuBackGround_color);
            writableCellFormat.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            writableCellFormat.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            writableCellFormat.setBorder(Border.LEFT, BorderLineStyle.THIN);
            writableCellFormat.setBorder(Border.TOP, BorderLineStyle.THIN);
            writableCellFormat.setWrap(true);
            NumberFormat nf1 = new NumberFormat("0.0");
            WritableCellFormat cFormat2_1 = new WritableCellFormat(font2, nf1);
            cFormat2_1.setAlignment(Alignment.CENTRE);
            cFormat2_1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_1.setBackground(Const.textOuBackGround_color);
            cFormat2_1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_1.setWrap(true);
            WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            CellFormat writableCellFormat2 = new WritableCellFormat(font3);
            writableCellFormat2.setAlignment(Alignment.CENTRE);
            writableCellFormat2.setVerticalAlignment(VerticalAlignment.CENTRE);
            writableCellFormat2.setBackground(Const.textJiBackGround_color);
            writableCellFormat2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            writableCellFormat2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            writableCellFormat2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            writableCellFormat2.setBorder(Border.TOP, BorderLineStyle.THIN);
            writableCellFormat2.setWrap(true);
            WritableCellFormat cFormat3_1 = new WritableCellFormat(font3, nf1);
            cFormat3_1.setAlignment(Alignment.CENTRE);
            cFormat3_1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_1.setBackground(Const.textJiBackGround_color);
            cFormat3_1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_1.setWrap(true);
            WritableFont font4 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            font4.setColour(Const.textWUSubFont_color2);
            WritableCellFormat cFormat4 = new WritableCellFormat(font4);
            cFormat4.setAlignment(Alignment.CENTRE);
            cFormat4.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat4.setBackground(Const.textOuBackGround_color);
            cFormat4.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat4.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat4.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat4.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat4.setWrap(true);
            WritableFont font5 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            font5.setColour(Const.textWUSubFont_color2);
            WritableCellFormat cFormat5 = new WritableCellFormat(font5);
            cFormat5.setAlignment(Alignment.CENTRE);
            cFormat5.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat5.setBackground(Const.textJiBackGround_color);
            cFormat5.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat5.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat5.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat5.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat5.setWrap(true);
            List quest = this.g8.getStuScoreGradeCompare(examNum, subjectNum, gradeNum, schoolNum, classNum, type, studentType, source, 0, Integer.valueOf(sNum).intValue(), fufen, subCompose);
            try {
                WritableSheet sheet = wwBook.createSheet(rpt_name, 0);
                sheet.getSettings().setShowGridLines(false);
                try {
                    Label biaotou = new Label(0, 0, rpt_name, biaotis1);
                    sheet.addCell(biaotou);
                    Label xinxi = new Label(0, 1, rptTitle, title);
                    sheet.addCell(xinxi);
                    sheet.setRowView(1, Const.height_500);
                    sheet.mergeCells(0, 0, 9, 0);
                    sheet.mergeCells(0, 1, 9, 1);
                    String schNum = schoolNum.indexOf(Const.STRING_SEPERATOR) == -1 ? "班级" : "学校";
                    Label paiming = new Label(0, 2, "排名", cFormat1);
                    sheet.addCell(paiming);
                    sheet.setColumnView(0, 8);
                    sheet.mergeCells(0, 2, 0, 3);
                    Label bianhao = new Label(1, 2, "学生编号", cFormat1);
                    sheet.addCell(bianhao);
                    sheet.setColumnView(1, 15);
                    sheet.mergeCells(1, 2, 1, 3);
                    Label xuesheng = new Label(2, 2, "姓名", cFormat1);
                    sheet.addCell(xuesheng);
                    sheet.setColumnView(2, 10);
                    sheet.mergeCells(2, 2, 2, 3);
                    if ("T".equals(jiaoxueban)) {
                        for (int i = 0; i < quest.size(); i++) {
                            CellFormat cellFormat = i % 2 == 0 ? writableCellFormat : writableCellFormat2;
                            Object[] data = (Object[]) quest.get(i);
                            String[] subjectNames = String.valueOf(data[4]).split(Const.STRING_SEPERATOR);
                            String[] classNames = String.valueOf(data[3]).split(Const.STRING_SEPERATOR);
                            String[] totalScores = String.valueOf(data[5]).split(Const.STRING_SEPERATOR);
                            String[] cas = String.valueOf(data[6]).split(Const.STRING_SEPERATOR);
                            String[] cms = String.valueOf(data[7]).split(Const.STRING_SEPERATOR);
                            if (i == 0) {
                                for (int j = 0; j < subjectNames.length; j++) {
                                    Label kemu = new Label(3 + (j * 4), 2, subjectNames[j], cFormat1);
                                    sheet.addCell(kemu);
                                    sheet.mergeCells(3 + (j * 4), 2, 6 + (j * 4), 2);
                                    Label banji = new Label(3 + (j * 4), 3, schNum, cFormat1);
                                    sheet.addCell(banji);
                                    Label yuanshi = new Label(4 + (j * 4), 3, "1".equals(fufen) ? "赋分" : "原始分", cFormat1);
                                    sheet.addCell(yuanshi);
                                    Label banpai = new Label(5 + (j * 4), 3, "相对平均", cFormat1);
                                    sheet.addCell(banpai);
                                    sheet.setColumnView(5 + (j * 3), 10);
                                    Label nianpai = new Label(6 + (j * 4), 3, "相对最高", cFormat1);
                                    sheet.addCell(nianpai);
                                    sheet.setColumnView(6 + (j * 3), 10);
                                }
                            }
                            Number ext1 = new Number(0, 4 + i, Integer.valueOf(data[0].toString()).intValue(), cellFormat);
                            sheet.addCell(ext1);
                            Label studentId_val = new Label(1, 4 + i, String.valueOf(data[1]), cellFormat);
                            sheet.addCell(studentId_val);
                            Label studentName = new Label(2, 4 + i, String.valueOf(data[2]), cellFormat);
                            sheet.addCell(studentName);
                            for (int j2 = 0; j2 < subjectNames.length; j2++) {
                                Label ext2 = new Label(3 + (j2 * 4), 4 + i, classNames[j2], cellFormat);
                                sheet.addCell(ext2);
                                if (j2 >= totalScores.length || "".equals(totalScores[j2])) {
                                    Blank yuanshi2 = new Blank(4 + (j2 * 4), 4 + i, cellFormat);
                                    sheet.addCell(yuanshi2);
                                    Blank banpai2 = new Blank(5 + (j2 * 4), 4 + i, cellFormat);
                                    sheet.addCell(banpai2);
                                    Blank nianpai2 = new Blank(6 + (j2 * 4), 4 + i, cellFormat);
                                    sheet.addCell(nianpai2);
                                } else {
                                    Number yuanshi3 = new Number(4 + (j2 * 4), 4 + i, Double.valueOf(totalScores[j2]).doubleValue(), cellFormat);
                                    sheet.addCell(yuanshi3);
                                    Number banpai3 = new Number(5 + (j2 * 4), 4 + i, Double.valueOf(cas[j2]).doubleValue(), cellFormat);
                                    sheet.addCell(banpai3);
                                    Number nianpai3 = new Number(6 + (j2 * 4), 4 + i, Double.valueOf(cms[j2]).doubleValue(), cellFormat);
                                    sheet.addCell(nianpai3);
                                }
                            }
                        }
                    } else {
                        Label banji2 = new Label(3, 2, schNum, cFormat1);
                        sheet.addCell(banji2);
                        sheet.mergeCells(3, 2, 3, 3);
                        for (int i2 = 0; i2 < quest.size(); i2++) {
                            CellFormat cellFormat2 = i2 % 2 == 0 ? writableCellFormat : writableCellFormat2;
                            Object[] data2 = (Object[]) quest.get(i2);
                            String[] subjectNames2 = String.valueOf(data2[4]).split(Const.STRING_SEPERATOR);
                            String[] totalScores2 = String.valueOf(data2[5]).split(Const.STRING_SEPERATOR);
                            String[] cas2 = String.valueOf(data2[6]).split(Const.STRING_SEPERATOR);
                            String[] cms2 = String.valueOf(data2[7]).split(Const.STRING_SEPERATOR);
                            if (i2 == 0) {
                                for (int j3 = 0; j3 < subjectNames2.length; j3++) {
                                    Label kemu2 = new Label(4 + (j3 * 3), 2, subjectNames2[j3], cFormat1);
                                    sheet.addCell(kemu2);
                                    sheet.mergeCells(4 + (j3 * 3), 2, 6 + (j3 * 3), 2);
                                    Label yuanshi4 = new Label(4 + (j3 * 3), 3, "1".equals(fufen) ? "赋分" : "原始分", cFormat1);
                                    sheet.addCell(yuanshi4);
                                    Label banpai4 = new Label(5 + (j3 * 3), 3, "相对平均", cFormat1);
                                    sheet.addCell(banpai4);
                                    sheet.setColumnView(5 + (j3 * 3), 10);
                                    Label nianpai4 = new Label(6 + (j3 * 3), 3, "相对最高", cFormat1);
                                    sheet.addCell(nianpai4);
                                    sheet.setColumnView(6 + (j3 * 3), 10);
                                }
                            }
                            Number ext12 = new Number(0, 4 + i2, Integer.valueOf(data2[0].toString()).intValue(), cellFormat2);
                            sheet.addCell(ext12);
                            Label studentId_val2 = new Label(1, 4 + i2, String.valueOf(data2[1]), cellFormat2);
                            sheet.addCell(studentId_val2);
                            Label studentName2 = new Label(2, 4 + i2, String.valueOf(data2[2]), cellFormat2);
                            sheet.addCell(studentName2);
                            Label ext22 = new Label(3, 4 + i2, String.valueOf(data2[3]), cellFormat2);
                            sheet.addCell(ext22);
                            for (int j4 = 0; j4 < subjectNames2.length; j4++) {
                                if (j4 >= totalScores2.length || "".equals(totalScores2[j4])) {
                                    Blank yuanshi5 = new Blank(4 + (j4 * 3), 4 + i2, cellFormat2);
                                    sheet.addCell(yuanshi5);
                                    Blank banpai5 = new Blank(5 + (j4 * 3), 4 + i2, cellFormat2);
                                    sheet.addCell(banpai5);
                                    Blank nianpai5 = new Blank(6 + (j4 * 3), 4 + i2, cellFormat2);
                                    sheet.addCell(nianpai5);
                                } else {
                                    Number yuanshi6 = new Number(4 + (j4 * 3), 4 + i2, Double.valueOf(totalScores2[j4]).doubleValue(), cellFormat2);
                                    sheet.addCell(yuanshi6);
                                    Number banpai6 = new Number(5 + (j4 * 3), 4 + i2, Double.valueOf(cas2[j4]).doubleValue(), cellFormat2);
                                    sheet.addCell(banpai6);
                                    Number nianpai6 = new Number(6 + (j4 * 3), 4 + i2, Double.valueOf(cms2[j4]).doubleValue(), cellFormat2);
                                    sheet.addCell(nianpai6);
                                }
                            }
                        }
                    }
                    Label zhu = new Label(0, quest.size() + 5, "注：*最高分、平均分为本年级、本科类最高分、平均分\n*排名依据：教学班教学按学科、否则按总分 ", title);
                    sheet.addCell(zhu);
                    sheet.mergeCells(0, quest.size() + 5, 9, quest.size() + 5);
                    sheet.setRowView(quest.size() + 5, 600, false);
                } catch (Exception e) {
                    e.printStackTrace();
                }
                wwBook.write();
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response = ServletActionContext.getResponse();
                            response.reset();
                            ServletOutputStream outputStream = response.getOutputStream();
                            String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName2 = loadFileName.replace("+", " ");
                            response.setContentType("Content-type: applicationnd.ms-excel");
                            response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xls");
                            response.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte = new byte[1024];
                            FileInputStream in = new FileInputStream(excelFile);
                            while (true) {
                                int n = in.read(tempByte);
                                if (n == -1) {
                                    break;
                                }
                                try {
                                    outputStream.write(tempByte, 0, n);
                                } catch (Exception e2) {
                                    this.log.error("保存未成功", e2);
                                }
                            }
                            outputStream.flush();
                            outputStream.close();
                            in.close();
                        }
                    } catch (WriteException e3) {
                        e3.printStackTrace();
                    }
                }
            } catch (Exception e4) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response2 = ServletActionContext.getResponse();
                            response2.reset();
                            ServletOutputStream outputStream2 = response2.getOutputStream();
                            String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName4 = loadFileName3.replace("+", " ");
                            response2.setContentType("Content-type: applicationnd.ms-excel");
                            response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xls");
                            response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte2 = new byte[1024];
                            FileInputStream in2 = new FileInputStream(excelFile);
                            while (true) {
                                int n2 = in2.read(tempByte2);
                                if (n2 == -1) {
                                    break;
                                }
                                try {
                                    outputStream2.write(tempByte2, 0, n2);
                                } catch (Exception e5) {
                                    this.log.error("保存未成功", e5);
                                }
                            }
                            outputStream2.flush();
                            outputStream2.close();
                            in2.close();
                        }
                    } catch (WriteException e6) {
                        e6.printStackTrace();
                    }
                }
            } catch (Throwable th) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response3 = ServletActionContext.getResponse();
                            response3.reset();
                            ServletOutputStream outputStream3 = response3.getOutputStream();
                            String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName6 = loadFileName5.replace("+", " ");
                            response3.setContentType("Content-type: applicationnd.ms-excel");
                            response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xls");
                            response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte3 = new byte[1024];
                            FileInputStream in3 = new FileInputStream(excelFile);
                            while (true) {
                                int n3 = in3.read(tempByte3);
                                if (n3 == -1) {
                                    break;
                                }
                                try {
                                    outputStream3.write(tempByte3, 0, n3);
                                } catch (Exception e7) {
                                    this.log.error("保存未成功", e7);
                                }
                            }
                            outputStream3.flush();
                            outputStream3.close();
                            in3.close();
                        }
                    } catch (WriteException e8) {
                        e8.printStackTrace();
                        throw th;
                    }
                }
                throw th;
            }
        } catch (Exception e9) {
            e9.printStackTrace();
        }
        return null;
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String oneSubAnaly_exportgetData(String teachUnit_s, String examNum, String gradeNum, String teachUnit, String subjectNum, String classNum, String studentId, String studentType, String type, String source, String step, String sNum, String c_exam, String rpt_name, String isMoreSchool, String rptTitle, String isHistory, String isSaveWrite, String dirPath, String uri, String userNum, String schName, String gradeName, String className, String subjectName, String imgRoot, String agent, String fufen, String subCompose) {
        String rptTitle2 = this.sp.getHeaderStr(examNum, subjectNum, gradeNum, teachUnit, classNum, studentId, studentType, true, true, false, false, false, true, false, true, false, false, false, false, false, true, false, subCompose, fufen);
        String folderPath = "ExportFolder/reportExcel" + userNum;
        String str = "reportExcel" + userNum;
        String str2 = "reportExcel" + userNum;
        String excelName = (null == gradeName || "".equals(gradeName)) ? rpt_name + "_" + gradeNum : rpt_name + "_" + gradeName;
        if (null != classNum && !"".equals(classNum) && !classNum.contains(Const.STRING_SEPERATOR)) {
            excelName = (null == className || "".equals(className)) ? excelName + "_" + classNum : excelName + "_" + className;
        }
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        try {
            WritableWorkbook wwBook = Workbook.createWorkbook(excelFile);
            WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
            biaotis1.setAlignment(Alignment.LEFT);
            biaotis1.setVerticalAlignment(VerticalAlignment.CENTRE);
            WritableFont titles = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat title = new WritableCellFormat(titles);
            title.setAlignment(Alignment.LEFT);
            title.setVerticalAlignment(VerticalAlignment.CENTRE);
            title.setWrap(true);
            WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            WritableCellFormat cFormat1 = new WritableCellFormat(font1);
            cFormat1.setAlignment(Alignment.CENTRE);
            cFormat1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1.setBackground(Const.titleBackground_color);
            cFormat1.setWrap(true);
            WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat2 = new WritableCellFormat(font2);
            cFormat2.setAlignment(Alignment.CENTRE);
            cFormat2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2.setBackground(Const.textOuBackGround_color);
            cFormat2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2.setWrap(true);
            DateFormat df1 = new DateFormat("0.0%");
            WritableCellFormat cFormat2_0 = new WritableCellFormat(font2, df1);
            cFormat2_0.setAlignment(Alignment.CENTRE);
            cFormat2_0.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_0.setBackground(Const.textOuBackGround_color);
            cFormat2_0.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_0.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_0.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_0.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_0.setWrap(true);
            NumberFormat nf1 = new NumberFormat("0.00");
            WritableCellFormat cFormat2_1 = new WritableCellFormat(font2, nf1);
            cFormat2_1.setAlignment(Alignment.CENTRE);
            cFormat2_1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_1.setBackground(Const.textOuBackGround_color);
            cFormat2_1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_1.setWrap(true);
            NumberFormat nf2 = new NumberFormat("0.00");
            WritableCellFormat cFormat2_2 = new WritableCellFormat(font2, nf2);
            cFormat2_2.setAlignment(Alignment.CENTRE);
            cFormat2_2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_2.setBackground(Const.textOuBackGround_color);
            cFormat2_2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_2.setWrap(true);
            NumberFormat nf3 = new NumberFormat("0.000");
            WritableCellFormat cFormat2_3 = new WritableCellFormat(font2, nf3);
            cFormat2_3.setAlignment(Alignment.CENTRE);
            cFormat2_3.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_3.setBackground(Const.textOuBackGround_color);
            cFormat2_3.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_3.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_3.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_3.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_3.setWrap(true);
            WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat3 = new WritableCellFormat(font3);
            cFormat3.setAlignment(Alignment.CENTRE);
            cFormat3.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3.setBackground(Const.textJiBackGround_color);
            cFormat3.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3.setWrap(true);
            WritableCellFormat cFormat3_0 = new WritableCellFormat(font3, df1);
            cFormat3_0.setAlignment(Alignment.CENTRE);
            cFormat3_0.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_0.setBackground(Const.textJiBackGround_color);
            cFormat3_0.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_0.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_0.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_0.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_0.setWrap(true);
            WritableCellFormat cFormat3_1 = new WritableCellFormat(font3, nf1);
            cFormat3_1.setAlignment(Alignment.CENTRE);
            cFormat3_1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_1.setBackground(Const.textJiBackGround_color);
            cFormat3_1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_1.setWrap(true);
            WritableCellFormat cFormat3_2 = new WritableCellFormat(font3, nf2);
            cFormat3_2.setAlignment(Alignment.CENTRE);
            cFormat3_2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_2.setBackground(Const.textJiBackGround_color);
            cFormat3_2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_2.setWrap(true);
            WritableCellFormat cFormat3_3 = new WritableCellFormat(font3, nf3);
            cFormat3_3.setAlignment(Alignment.CENTRE);
            cFormat3_3.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_3.setBackground(Const.textJiBackGround_color);
            cFormat3_3.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_3.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_3.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_3.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_3.setWrap(true);
            List quest = this.reportService.getOneSubAnaly(teachUnit_s, examNum, gradeNum, teachUnit, subjectNum, studentType, type, source, "0", fufen, subCompose);
            try {
                WritableSheet sheet = wwBook.createSheet(rpt_name, 0);
                sheet.getSettings().setShowGridLines(false);
                try {
                    Label biaotou = new Label(0, 0, rpt_name, biaotis1);
                    sheet.addCell(biaotou);
                    DecimalFormat df01 = new DecimalFormat("0.0");
                    DecimalFormat df02 = new DecimalFormat("0.00");
                    DecimalFormat df03 = new DecimalFormat("0.000");
                    df01.setRoundingMode(RoundingMode.HALF_UP);
                    df02.setRoundingMode(RoundingMode.HALF_UP);
                    df03.setRoundingMode(RoundingMode.HALF_UP);
                    Label xinxi = new Label(0, 1, rptTitle2, title);
                    sheet.addCell(xinxi);
                    sheet.setRowView(1, Const.height_500);
                    sheet.mergeCells(0, 0, 14, 0);
                    sheet.mergeCells(0, 1, 14, 1);
                    Label mingcheng = new Label(0, 2, "学科 ", cFormat1);
                    sheet.addCell(mingcheng);
                    Label banren = new Label(1, 2, "参考人数", cFormat1);
                    sheet.addCell(banren);
                    Label a3 = new Label(2, 2, "满分", cFormat1);
                    sheet.addCell(a3);
                    Label a4 = new Label(3, 2, "学科均分", cFormat1);
                    sheet.addCell(a4);
                    Label a5 = new Label(4, 2, "难度", cFormat1);
                    sheet.addCell(a5);
                    Label a6 = new Label(5, 2, "最高分", cFormat1);
                    sheet.addCell(a6);
                    Label a7 = new Label(6, 2, "最低分", cFormat1);
                    sheet.addCell(a7);
                    Label a8 = new Label(7, 2, "标准差", cFormat1);
                    sheet.addCell(a8);
                    Label a9 = new Label(8, 2, "变异系数", cFormat1);
                    sheet.addCell(a9);
                    Label a10 = new Label(9, 2, "高分人数", cFormat1);
                    sheet.addCell(a10);
                    Label a11 = new Label(10, 2, "高分率", cFormat1);
                    sheet.addCell(a11);
                    Label a12 = new Label(11, 2, "优秀人数", cFormat1);
                    sheet.addCell(a12);
                    Label a13 = new Label(12, 2, "优秀率", cFormat1);
                    sheet.addCell(a13);
                    Label a14 = new Label(13, 2, "及格人数", cFormat1);
                    sheet.addCell(a14);
                    Label a15 = new Label(14, 2, "及格率", cFormat1);
                    sheet.addCell(a15);
                    Label a16 = new Label(15, 2, "低分人数", cFormat1);
                    sheet.addCell(a16);
                    Label a17 = new Label(16, 2, "低分率", cFormat1);
                    sheet.addCell(a17);
                    for (int i = 0; i < quest.size(); i++) {
                        BigDecimal fullscore = Convert.toBigDecimal(((Object[]) quest.get(i))[3]).stripTrailingZeros();
                        String fullscoreStr = fullscore.toPlainString();
                        BigDecimal max0 = Convert.toBigDecimal(((Object[]) quest.get(i))[12]).stripTrailingZeros();
                        String maxstr = max0.toPlainString();
                        BigDecimal min0 = Convert.toBigDecimal(((Object[]) quest.get(i))[13]).stripTrailingZeros();
                        String minstr = min0.toPlainString();
                        if (i % 2 != 0) {
                            Label b1 = new Label(0, 3 + i, (String) ((Object[]) quest.get(i))[1], cFormat2);
                            sheet.addCell(b1);
                            Number b2 = new Number(1, 3 + i, Integer.valueOf(((Object[]) quest.get(i))[2] + "").intValue(), cFormat2);
                            sheet.addCell(b2);
                            Label b3 = new Label(2, 3 + i, fullscoreStr, cFormat2_1);
                            sheet.addCell(b3);
                            Number b4 = new Number(3, 3 + i, Double.valueOf(df02.format(((Object[]) quest.get(i))[9])).doubleValue(), cFormat2_1);
                            sheet.addCell(b4);
                            Number b5 = new Number(4, 3 + i, Double.valueOf(df03.format(((Object[]) quest.get(i))[4])).doubleValue(), cFormat2_3);
                            sheet.addCell(b5);
                            Label b6 = new Label(5, 3 + i, maxstr, cFormat2_1);
                            sheet.addCell(b6);
                            Label b7 = new Label(6, 3 + i, minstr, cFormat2_1);
                            sheet.addCell(b7);
                            Number b8 = new Number(7, 3 + i, Double.valueOf(df02.format(((Object[]) quest.get(i))[11])).doubleValue(), cFormat2_2);
                            sheet.addCell(b8);
                            Double cc = Double.valueOf(((Object[]) quest.get(i))[11] + "");
                            Double dd = Double.valueOf(((Object[]) quest.get(i))[9] + "");
                            Double c9 = Double.valueOf(df02.format(cc.doubleValue() / dd.doubleValue()));
                            Number b9 = new Number(8, 3 + i, c9.doubleValue(), cFormat2_2);
                            sheet.addCell(b9);
                            Number b10 = new Number(9, 3 + i, Integer.valueOf(((Object[]) quest.get(i))[10] + "").intValue(), cFormat2);
                            sheet.addCell(b10);
                            Double cc1 = Double.valueOf(((Object[]) quest.get(i))[10] + "");
                            Double dd1 = Double.valueOf(((Object[]) quest.get(i))[2] + "");
                            Double c11 = Double.valueOf(df03.format(cc1.doubleValue() / dd1.doubleValue()));
                            Number b11 = new Number(10, 3 + i, c11.doubleValue(), cFormat2_0);
                            sheet.addCell(b11);
                            Number b12 = new Number(11, 3 + i, Integer.valueOf(((Object[]) quest.get(i))[7] + "").intValue(), cFormat2);
                            sheet.addCell(b12);
                            Number b13 = new Number(12, 3 + i, Double.parseDouble(df03.format(((Object[]) quest.get(i))[8])), cFormat2_0);
                            sheet.addCell(b13);
                            Number b14 = new Number(13, 3 + i, Integer.valueOf(((Object[]) quest.get(i))[5] + "").intValue(), cFormat2);
                            sheet.addCell(b14);
                            Double b15_val = Double.valueOf(((Object[]) quest.get(i))[6] + "");
                            Double b15_str = Double.valueOf(df03.format(b15_val));
                            Number b15 = new Number(14, 3 + i, b15_str.doubleValue(), cFormat2_0);
                            sheet.addCell(b15);
                            Number b16 = new Number(15, 3 + i, Integer.valueOf(((Object[]) quest.get(i))[15] + "").intValue(), cFormat2);
                            sheet.addCell(b16);
                            Double b17_val = Double.valueOf(((Object[]) quest.get(i))[16] + "");
                            Double b17_str = Double.valueOf(df03.format(b17_val));
                            Number b17 = new Number(16, 3 + i, b17_str.doubleValue(), cFormat2_0);
                            sheet.addCell(b17);
                        } else {
                            Label b18 = new Label(0, 3 + i, (String) ((Object[]) quest.get(i))[1], cFormat3);
                            sheet.addCell(b18);
                            Number b22 = new Number(1, 3 + i, Integer.valueOf(((Object[]) quest.get(i))[2] + "").intValue(), cFormat3);
                            sheet.addCell(b22);
                            Label b32 = new Label(2, 3 + i, fullscoreStr, cFormat3_1);
                            sheet.addCell(b32);
                            Number b42 = new Number(3, 3 + i, Double.valueOf(df02.format(((Object[]) quest.get(i))[9])).doubleValue(), cFormat3_1);
                            sheet.addCell(b42);
                            Number b52 = new Number(4, 3 + i, Double.valueOf(df03.format(((Object[]) quest.get(i))[4])).doubleValue(), cFormat3_3);
                            sheet.addCell(b52);
                            Label b62 = new Label(5, 3 + i, maxstr, cFormat3_1);
                            sheet.addCell(b62);
                            Label b72 = new Label(6, 3 + i, minstr, cFormat3_1);
                            sheet.addCell(b72);
                            Number b82 = new Number(7, 3 + i, Double.valueOf(df02.format(((Object[]) quest.get(i))[11])).doubleValue(), cFormat3_2);
                            sheet.addCell(b82);
                            Double cc2 = Double.valueOf(((Object[]) quest.get(i))[11] + "");
                            Double dd2 = Double.valueOf(((Object[]) quest.get(i))[9] + "");
                            Double c92 = Double.valueOf(df02.format(cc2.doubleValue() / dd2.doubleValue()));
                            Number b92 = new Number(8, 3 + i, c92.doubleValue(), cFormat3_2);
                            sheet.addCell(b92);
                            Number b102 = new Number(9, 3 + i, Integer.valueOf(((Object[]) quest.get(i))[10] + "").intValue(), cFormat3);
                            sheet.addCell(b102);
                            Double cc12 = Double.valueOf(((Object[]) quest.get(i))[10] + "");
                            Double dd12 = Double.valueOf(((Object[]) quest.get(i))[2] + "");
                            Double c112 = Double.valueOf(df03.format(cc12.doubleValue() / dd12.doubleValue()));
                            Number b112 = new Number(10, 3 + i, c112.doubleValue(), cFormat3_0);
                            sheet.addCell(b112);
                            Number b122 = new Number(11, 3 + i, Integer.valueOf(((Object[]) quest.get(i))[7] + "").intValue(), cFormat3);
                            sheet.addCell(b122);
                            Number b132 = new Number(12, 3 + i, Double.parseDouble(df03.format(((Object[]) quest.get(i))[8])), cFormat3_0);
                            sheet.addCell(b132);
                            Number b142 = new Number(13, 3 + i, Integer.valueOf(((Object[]) quest.get(i))[5] + "").intValue(), cFormat3);
                            sheet.addCell(b142);
                            Double b15_val2 = Double.valueOf(((Object[]) quest.get(i))[6] + "");
                            Double b15_str2 = Double.valueOf(df03.format(b15_val2));
                            Number b152 = new Number(14, 3 + i, b15_str2.doubleValue(), cFormat3_0);
                            sheet.addCell(b152);
                            Number b162 = new Number(15, 3 + i, Integer.valueOf(((Object[]) quest.get(i))[15] + "").intValue(), cFormat3);
                            sheet.addCell(b162);
                            Double b17_val2 = Double.valueOf(((Object[]) quest.get(i))[16] + "");
                            Double b17_str2 = Double.valueOf(df03.format(b17_val2));
                            Number b172 = new Number(16, 3 + i, b17_str2.doubleValue(), cFormat3_0);
                            sheet.addCell(b172);
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                wwBook.write();
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response = ServletActionContext.getResponse();
                            response.reset();
                            ServletOutputStream outputStream = response.getOutputStream();
                            String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName2 = loadFileName.replace("+", " ");
                            response.setContentType("Content-type: applicationnd.ms-excel");
                            response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xls");
                            response.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte = new byte[1024];
                            FileInputStream in = new FileInputStream(excelFile);
                            while (true) {
                                int n = in.read(tempByte);
                                if (n == -1) {
                                    break;
                                }
                                try {
                                    outputStream.write(tempByte, 0, n);
                                } catch (Exception e2) {
                                    this.log.error("保存未成功", e2);
                                }
                            }
                            outputStream.flush();
                            outputStream.close();
                            in.close();
                        }
                    } catch (WriteException e3) {
                        e3.printStackTrace();
                    }
                }
            } catch (Exception e4) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response2 = ServletActionContext.getResponse();
                            response2.reset();
                            ServletOutputStream outputStream2 = response2.getOutputStream();
                            String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName4 = loadFileName3.replace("+", " ");
                            response2.setContentType("Content-type: applicationnd.ms-excel");
                            response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xls");
                            response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte2 = new byte[1024];
                            FileInputStream in2 = new FileInputStream(excelFile);
                            while (true) {
                                int n2 = in2.read(tempByte2);
                                if (n2 == -1) {
                                    break;
                                }
                                try {
                                    outputStream2.write(tempByte2, 0, n2);
                                } catch (Exception e5) {
                                    this.log.error("保存未成功", e5);
                                }
                            }
                            outputStream2.flush();
                            outputStream2.close();
                            in2.close();
                        }
                    } catch (WriteException e6) {
                        e6.printStackTrace();
                    }
                }
            } catch (Throwable th) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response3 = ServletActionContext.getResponse();
                            response3.reset();
                            ServletOutputStream outputStream3 = response3.getOutputStream();
                            String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName6 = loadFileName5.replace("+", " ");
                            response3.setContentType("Content-type: applicationnd.ms-excel");
                            response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xls");
                            response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte3 = new byte[1024];
                            FileInputStream in3 = new FileInputStream(excelFile);
                            while (true) {
                                int n3 = in3.read(tempByte3);
                                if (n3 == -1) {
                                    break;
                                }
                                try {
                                    outputStream3.write(tempByte3, 0, n3);
                                } catch (Exception e7) {
                                    this.log.error("保存未成功", e7);
                                }
                            }
                            outputStream3.flush();
                            outputStream3.close();
                            in3.close();
                        }
                    } catch (WriteException e8) {
                        e8.printStackTrace();
                        throw th;
                    }
                }
                throw th;
            }
        } catch (Exception e9) {
            e9.printStackTrace();
        }
        return null;
    }

    public File getSubChartImgFile_oneSubAnaly(String insertUser, List list, String lType, String dirPath) {
        subjectLineImage_oneSubAnaly(list, lType, insertUser);
        File file = new File(dirPath + File.separator + "tmpLinePng" + File.separator + insertUser + lType + ".png");
        return file;
    }

    public void subjectLineImage_oneSubAnaly(List list, String lType, String insertUser) {
        DecimalFormat df1 = new DecimalFormat("0.0");
        DecimalFormat df2 = new DecimalFormat("0.00");
        DecimalFormat df3 = new DecimalFormat("0.000");
        df1.setRoundingMode(RoundingMode.HALF_UP);
        df2.setRoundingMode(RoundingMode.HALF_UP);
        df3.setRoundingMode(RoundingMode.HALF_UP);
        int sjtCount = 0;
        for (int m = 0; m < list.size(); m++) {
            String subjectNum = String.valueOf(((Object[]) list.get(m))[0]);
            if (subjectNum.length() == 3) {
                sjtCount++;
            }
        }
        if (lType.equals("l10difficulty")) {
            new ArrayList();
            double[][] data = new double[1][sjtCount];
            String[] columnKeys1 = new String[sjtCount];
            String[] rowKeys1 = {"难度"};
            Double.valueOf(0.0d);
            Double.valueOf(0.0d);
            List list_data = new ArrayList();
            int aa = 0;
            for (int i = 0; i < list.size(); i++) {
                String subjectNum2 = String.valueOf(((Object[]) list.get(i))[0]);
                if (subjectNum2.length() == 3) {
                    double dd = Double.parseDouble(String.valueOf(((Object[]) list.get(i))[4] + ""));
                    String c2 = df3.format(dd);
                    data[0][aa] = Double.parseDouble(c2);
                    list_data.add(Double.valueOf(Double.parseDouble(c2)));
                    columnKeys1[aa] = (String) ((Object[]) list.get(i))[1];
                    aa++;
                }
            }
            Double maxDesc = (Double) Collections.max(list_data);
            Double minDesc = (Double) Collections.min(list_data);
            Double count_unit = Double.valueOf((maxDesc.doubleValue() - minDesc.doubleValue()) / 5.0d);
            HttpServletResponse response = ServletActionContext.getResponse();
            response.reset();
            response.setContentType("image/jpeg");
            JFreeChart chart = this.lc.getLineChar(data, rowKeys1, columnKeys1, "学科", "", "学科难度对比图", "#0.000", count_unit, Integer.valueOf(rowKeys1.length), "Y", "##.###");
            getChartImageFolder(chart, "tmpLinePng", Const.width, Const.height_500, insertUser + lType);
            return;
        }
        if (lType.equals("l10average")) {
            double[][] data2 = new double[1][sjtCount];
            String[] columnKeys12 = new String[sjtCount];
            String[] rowKeys12 = {"平均分"};
            Double.valueOf(0.0d);
            Double.valueOf(0.0d);
            List list_data2 = new ArrayList();
            int aa2 = 0;
            for (int i2 = 0; i2 < list.size(); i2++) {
                String subjectNum3 = String.valueOf(((Object[]) list.get(i2))[0]);
                if (subjectNum3.length() == 3) {
                    double dd2 = Double.parseDouble(String.valueOf(((Object[]) list.get(i2))[9] + ""));
                    String c22 = df1.format(dd2);
                    data2[0][aa2] = Double.parseDouble(c22);
                    list_data2.add(Double.valueOf(Double.parseDouble(c22)));
                    columnKeys12[aa2] = (String) ((Object[]) list.get(i2))[1];
                    aa2++;
                }
            }
            Double maxDesc2 = (Double) Collections.max(list_data2);
            Double minDesc2 = (Double) Collections.min(list_data2);
            Double count_unit2 = Double.valueOf((maxDesc2.doubleValue() - minDesc2.doubleValue()) / 5.0d);
            HttpServletResponse response2 = ServletActionContext.getResponse();
            response2.reset();
            response2.setContentType("image/jpeg");
            JFreeChart chart2 = this.lc.getLineChar(data2, rowKeys12, columnKeys12, "学科", "", "学科平均分对比图", "#0.0", count_unit2, Integer.valueOf(rowKeys12.length), "Y", "##.#");
            getChartImageFolder(chart2, "tmpLinePng", Const.width, Const.height_500, insertUser + lType);
            return;
        }
        if (!lType.equals("l10distribute")) {
            if (lType.equals("l10coefficient")) {
                new ArrayList();
                double[][] data3 = new double[1][sjtCount];
                String[] columnKeys13 = new String[sjtCount];
                String[] rowKeys13 = {"变异系数"};
                Double.valueOf(0.0d);
                Double.valueOf(0.0d);
                List list_data3 = new ArrayList();
                int aa3 = 0;
                for (int i3 = 0; i3 < list.size(); i3++) {
                    String subjectNum4 = String.valueOf(((Object[]) list.get(i3))[0]);
                    if (subjectNum4.length() == 3) {
                        double dd3 = Double.parseDouble(String.valueOf(((Object[]) list.get(i3))[9] + ""));
                        double cc = Double.parseDouble(String.valueOf(((Object[]) list.get(i3))[11] + ""));
                        String c3 = df2.format(cc / dd3);
                        data3[0][aa3] = Double.parseDouble(c3);
                        list_data3.add(Double.valueOf(Double.parseDouble(c3)));
                        columnKeys13[aa3] = (String) ((Object[]) list.get(i3))[1];
                        aa3++;
                    }
                }
                Double maxDesc3 = (Double) Collections.max(list_data3);
                Double minDesc3 = (Double) Collections.min(list_data3);
                Double count_unit3 = Double.valueOf((maxDesc3.doubleValue() - minDesc3.doubleValue()) / 5.0d);
                HttpServletResponse response3 = ServletActionContext.getResponse();
                response3.reset();
                response3.setContentType("image/jpeg");
                JFreeChart chart3 = this.lc.getLineChar(data3, rowKeys13, columnKeys13, "学科", "", "变异系数对比图", "#0.00", count_unit3, Integer.valueOf(rowKeys13.length), "Y", "##.##");
                getChartImageFolder(chart3, "tmpLinePng", Const.width, Const.height_500, insertUser + lType);
                return;
            }
            return;
        }
        new ArrayList();
        double[][] data4 = new double[4][sjtCount];
        String[] columnKeys14 = new String[sjtCount];
        String[] rowKeys14 = {"高分率", "优秀率", "及格率", "低分率"};
        Double.valueOf(0.0d);
        Double.valueOf(0.0d);
        List list_data4 = new ArrayList();
        int aa4 = 0;
        for (int i4 = 0; i4 < list.size(); i4++) {
            String subjectNum5 = String.valueOf(((Object[]) list.get(i4))[0]);
            if (subjectNum5.length() == 3) {
                double cc1 = Double.parseDouble(String.valueOf(((Object[]) list.get(i4))[10] + ""));
                double dd1 = Double.parseDouble(String.valueOf(((Object[]) list.get(i4))[2] + ""));
                String c11 = df1.format((cc1 / dd1) * 100.0d);
                data4[0][aa4] = Double.parseDouble(c11);
                list_data4.add(Double.valueOf(Double.parseDouble(c11)));
                String cc2 = df1.format(Math.round(Double.parseDouble(String.valueOf(((Object[]) list.get(i4))[8] + "")) * 1000.0d) * 0.1d);
                data4[1][aa4] = Double.parseDouble(cc2);
                list_data4.add(Double.valueOf(Double.parseDouble(cc2)));
                String cc3 = df1.format(Math.round(Double.parseDouble(String.valueOf(((Object[]) list.get(i4))[6] + "")) * 1000.0d) * 0.1d);
                data4[2][aa4] = Double.parseDouble(cc3);
                list_data4.add(Double.valueOf(Double.parseDouble(cc3)));
                String cc4 = df1.format(Math.round(Double.parseDouble(String.valueOf(((Object[]) list.get(i4))[16] + "")) * 1000.0d) * 0.1d);
                data4[3][aa4] = Double.parseDouble(cc4);
                list_data4.add(Double.valueOf(Double.parseDouble(cc4)));
                columnKeys14[aa4] = (String) ((Object[]) list.get(i4))[1];
                aa4++;
            }
        }
        Double maxDesc4 = (Double) Collections.max(list_data4);
        Double minDesc4 = (Double) Collections.min(list_data4);
        Double count_unit4 = Double.valueOf((maxDesc4.doubleValue() - minDesc4.doubleValue()) / 5.0d);
        HttpServletResponse response4 = ServletActionContext.getResponse();
        response4.reset();
        response4.setContentType("image/jpeg");
        JFreeChart chart4 = this.lc.getLineChar(data4, rowKeys14, columnKeys14, "学科", "", "四率分布对比图", "#0.00", count_unit4, Integer.valueOf(rowKeys14.length), "Y", "##.#");
        getChartImageFolder(chart4, "tmpLinePng", Const.width, Const.height_500, insertUser + lType);
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String allSubAnaly_exportgetData(String teachUnit_s, String examNum, String gradeNum, String teachUnit, String subjectNum, String classNum, String studentId, String studentType, String type, String source, String step, String sNum, String c_exam, String rpt_name, String isMoreSchool, String rptTitle, String isHistory, String isSaveWrite, String dirPath, String uri, String userNum, String schName, String gradeName, String className, String subjectName, String imgRoot, String agent, String fufen, String l2Allsubpassrait, String subCompose, String islevel) {
        String IsShowReferenceRate = Configuration.getInstance().getIsShowReferenceRate();
        String rptTitle2 = this.sp.getHeaderStr(examNum, subjectNum, gradeNum, teachUnit, classNum, studentId, studentType, true, true, false, false, false, true, false, true, false, false, false, false, false, true, false, subCompose, fufen);
        String folderPath = "ExportFolder/reportExcel" + userNum;
        String str = "reportExcel" + userNum;
        String str2 = "reportExcel" + userNum;
        String excelName = (null == gradeName || "".equals(gradeName)) ? rpt_name + "_" + gradeNum : rpt_name + "_" + gradeName;
        if (null != classNum && !"".equals(classNum) && !"null".equals(classNum) && !classNum.contains(Const.STRING_SEPERATOR)) {
            excelName = (null == className || "".equals(className)) ? excelName + "_" + classNum : excelName + "_" + className;
        }
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        try {
            WritableWorkbook wwBook = Workbook.createWorkbook(excelFile);
            WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
            biaotis1.setAlignment(Alignment.LEFT);
            biaotis1.setVerticalAlignment(VerticalAlignment.CENTRE);
            WritableFont titles = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat title = new WritableCellFormat(titles);
            title.setAlignment(Alignment.LEFT);
            title.setVerticalAlignment(VerticalAlignment.CENTRE);
            title.setWrap(true);
            WritableFont font_red = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.xiaoyuAvg_color);
            WritableCellFormat cFormat_red = new WritableCellFormat(font_red);
            cFormat_red.setAlignment(Alignment.CENTRE);
            cFormat_red.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat_red.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat_red.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat_red.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat_red.setBackground(Const.textJiBackGround_color);
            cFormat_red.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat_red.setWrap(true);
            WritableFont font_red2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.xiaoyuAvg_color);
            WritableCellFormat cFormat_red2 = new WritableCellFormat(font_red2);
            cFormat_red2.setAlignment(Alignment.CENTRE);
            cFormat_red2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat_red2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat_red2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat_red2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat_red2.setBackground(Const.textOuBackGround_color);
            cFormat_red2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat_red2.setWrap(true);
            WritableFont font_blue = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.dayuAvg_color);
            WritableCellFormat cFormat_blue = new WritableCellFormat(font_blue);
            cFormat_blue.setAlignment(Alignment.CENTRE);
            cFormat_blue.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat_blue.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat_blue.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat_blue.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat_blue.setBackground(Const.textJiBackGround_color);
            cFormat_blue.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat_blue.setWrap(true);
            WritableFont font_blue2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.dayuAvg_color);
            WritableCellFormat cFormat_blue2 = new WritableCellFormat(font_blue2);
            cFormat_blue2.setAlignment(Alignment.CENTRE);
            cFormat_blue2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat_blue2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat_blue2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat_blue2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat_blue2.setBackground(Const.textOuBackGround_color);
            cFormat_blue.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat_blue.setWrap(true);
            WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat1 = new WritableCellFormat(font1);
            cFormat1.setAlignment(Alignment.CENTRE);
            cFormat1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1.setBackground(Const.titleBackground_color);
            cFormat1.setWrap(true);
            WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat2 = new WritableCellFormat(font2);
            cFormat2.setAlignment(Alignment.CENTRE);
            cFormat2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2.setBackground(Const.textOuBackGround_color);
            cFormat2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2.setWrap(true);
            DateFormat df1 = new DateFormat("0.0%");
            WritableCellFormat cFormat2_0 = new WritableCellFormat(font2, df1);
            cFormat2_0.setAlignment(Alignment.CENTRE);
            cFormat2_0.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_0.setBackground(Const.textOuBackGround_color);
            cFormat2_0.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_0.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_0.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_0.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_0.setWrap(true);
            new NumberFormat("0.0");
            WritableCellFormat cFormat2_1 = new WritableCellFormat(font2);
            cFormat2_1.setAlignment(Alignment.CENTRE);
            cFormat2_1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_1.setBackground(Const.textOuBackGround_color);
            cFormat2_1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_1.setWrap(true);
            NumberFormat nf2 = new NumberFormat("0.00");
            WritableCellFormat cFormat2_2 = new WritableCellFormat(font2, nf2);
            cFormat2_2.setAlignment(Alignment.CENTRE);
            cFormat2_2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_2.setBackground(Const.textOuBackGround_color);
            cFormat2_2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_2.setWrap(true);
            WritableFont font2_bold = new WritableFont(WritableFont.ARIAL, 10, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat2_bold = new WritableCellFormat(font2_bold);
            cFormat2_bold.setAlignment(Alignment.CENTRE);
            cFormat2_bold.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_bold.setBackground(Const.textOuBackGround_color);
            cFormat2_bold.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_bold.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_bold.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_bold.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_bold.setWrap(true);
            WritableCellFormat cFormat2_bold_0 = new WritableCellFormat(font2_bold, df1);
            cFormat2_bold_0.setAlignment(Alignment.CENTRE);
            cFormat2_bold_0.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_bold_0.setBackground(Const.textOuBackGround_color);
            cFormat2_bold_0.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_bold_0.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_bold_0.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_bold_0.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_bold_0.setWrap(true);
            WritableCellFormat cFormat2_bold_1 = new WritableCellFormat(font2_bold);
            cFormat2_bold_1.setAlignment(Alignment.CENTRE);
            cFormat2_bold_1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_bold_1.setBackground(Const.textOuBackGround_color);
            cFormat2_bold_1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_bold_1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_bold_1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_bold_1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_bold_1.setWrap(true);
            WritableCellFormat cFormat2_bold_2 = new WritableCellFormat(font2_bold, nf2);
            cFormat2_bold_2.setAlignment(Alignment.CENTRE);
            cFormat2_bold_2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_bold_2.setBackground(Const.textOuBackGround_color);
            cFormat2_bold_2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_bold_2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_bold_2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_bold_2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_bold_2.setWrap(true);
            WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat3 = new WritableCellFormat(font3);
            cFormat3.setAlignment(Alignment.CENTRE);
            cFormat3.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3.setBackground(Const.textJiBackGround_color);
            cFormat3.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3.setWrap(true);
            WritableCellFormat cFormat3_0 = new WritableCellFormat(font3, df1);
            cFormat3_0.setAlignment(Alignment.CENTRE);
            cFormat3_0.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_0.setBackground(Const.textJiBackGround_color);
            cFormat3_0.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_0.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_0.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_0.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_0.setWrap(true);
            WritableCellFormat cFormat3_1 = new WritableCellFormat(font3);
            cFormat3_1.setAlignment(Alignment.CENTRE);
            cFormat3_1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_1.setBackground(Const.textJiBackGround_color);
            cFormat3_1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_1.setWrap(true);
            WritableCellFormat cFormat3_2 = new WritableCellFormat(font3, nf2);
            cFormat3_2.setAlignment(Alignment.CENTRE);
            cFormat3_2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_2.setBackground(Const.textJiBackGround_color);
            cFormat3_2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_2.setWrap(true);
            WritableFont font3_bold = new WritableFont(WritableFont.ARIAL, 10, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat3_bold = new WritableCellFormat(font3_bold);
            cFormat3_bold.setAlignment(Alignment.CENTRE);
            cFormat3_bold.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_bold.setBackground(Const.textJiBackGround_color);
            cFormat3_bold.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_bold.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_bold.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_bold.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_bold.setWrap(true);
            WritableCellFormat cFormat3_bold_0 = new WritableCellFormat(font3_bold, df1);
            cFormat3_bold_0.setAlignment(Alignment.CENTRE);
            cFormat3_bold_0.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_bold_0.setBackground(Const.textJiBackGround_color);
            cFormat3_bold_0.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_bold_0.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_bold_0.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_bold_0.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_bold_0.setWrap(true);
            WritableCellFormat cFormat3_bold_1 = new WritableCellFormat(font3_bold);
            cFormat3_bold_1.setAlignment(Alignment.CENTRE);
            cFormat3_bold_1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_bold_1.setBackground(Const.textJiBackGround_color);
            cFormat3_bold_1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_bold_1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_bold_1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_bold_1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_bold_1.setWrap(true);
            WritableCellFormat cFormat3_bold_2 = new WritableCellFormat(font3_bold, nf2);
            cFormat3_bold_2.setAlignment(Alignment.CENTRE);
            cFormat3_bold_2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_bold_2.setBackground(Const.textJiBackGround_color);
            cFormat3_bold_2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_bold_2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_bold_2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_bold_2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_bold_2.setWrap(true);
            WritableCellFormat cFormat4 = new WritableCellFormat(font3);
            cFormat4.setAlignment(Alignment.CENTRE);
            cFormat4.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat4.setBackground(Const.subject_color);
            cFormat4.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat4.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat4.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat4.setBorder(Border.TOP, BorderLineStyle.THIN);
            String viewRankOfScoreInfo = Configuration.getInstance().getViewRankOfScoreInfo();
            List<List<Gradelevel>> quest = this.reportService.getAllSubAnaly(teachUnit_s, examNum, gradeNum, teachUnit, subjectNum, studentType, type, source, sNum, "0", fufen, l2Allsubpassrait, subCompose, islevel, classNum);
            try {
                WritableSheet sheet = wwBook.createSheet(rpt_name, 0);
                sheet.getSettings().setShowGridLines(false);
                try {
                    Label biaotou = new Label(0, 0, rpt_name, biaotis1);
                    sheet.addCell(biaotou);
                    new DecimalFormat("0");
                    DecimalFormat df01 = new DecimalFormat("0.0");
                    DecimalFormat df02 = new DecimalFormat("0.00");
                    DecimalFormat df03 = new DecimalFormat("0.000");
                    df01.setRoundingMode(RoundingMode.HALF_UP);
                    df02.setRoundingMode(RoundingMode.HALF_UP);
                    df03.setRoundingMode(RoundingMode.HALF_UP);
                    Label xinxi = new Label(0, 1, rptTitle2, title);
                    sheet.addCell(xinxi);
                    sheet.setRowView(1, Const.height_500);
                    sheet.mergeCells(0, 0, 17, 0);
                    sheet.mergeCells(0, 1, 17, 1);
                    Label kemu = new Label(0, 2, "科目", cFormat1);
                    sheet.addCell(kemu);
                    if ("00".equals(teachUnit_s)) {
                        Label banren = new Label(1, 2, "教学单位", cFormat1);
                        sheet.addCell(banren);
                    } else {
                        Label banren2 = new Label(1, 2, "教学单位", cFormat1);
                        sheet.addCell(banren2);
                    }
                    Label a3 = new Label(2, 2, "参考人数", cFormat1);
                    sheet.addCell(a3);
                    int jj = 0;
                    if (IsShowReferenceRate.equals("1")) {
                        Label aa = new Label(3, 2, "参考率", cFormat1);
                        sheet.addCell(aa);
                        jj = 1;
                    }
                    Label a4 = new Label(3 + jj, 2, "均分", cFormat1);
                    sheet.addCell(a4);
                    int ii = jj;
                    if (!viewRankOfScoreInfo.equals("3")) {
                        Label a5 = new Label(4 + jj, 2, "均分排名", cFormat1);
                        sheet.addCell(a5);
                        ii++;
                    }
                    Label a6 = new Label(4 + ii, 2, "最高分", cFormat1);
                    sheet.addCell(a6);
                    Label a7 = new Label(5 + ii, 2, "最低分", cFormat1);
                    sheet.addCell(a7);
                    Label a8 = new Label(6 + ii, 2, "标准差", cFormat1);
                    sheet.addCell(a8);
                    Label a9 = new Label(7 + ii, 2, "变异系数", cFormat1);
                    sheet.addCell(a9);
                    Label a91 = new Label(8 + ii, 2, "难度", cFormat1);
                    sheet.addCell(a91);
                    Label a92 = new Label(9 + ii, 2, "区分度", cFormat1);
                    sheet.addCell(a92);
                    Label a10 = new Label(10 + ii, 2, "高分人数", cFormat1);
                    sheet.addCell(a10);
                    Label a11 = new Label(11 + ii, 2, "高分率", cFormat1);
                    sheet.addCell(a11);
                    Label a12 = new Label(12 + ii, 2, "优秀人数", cFormat1);
                    sheet.addCell(a12);
                    Label a13 = new Label(13 + ii, 2, "优秀率", cFormat1);
                    sheet.addCell(a13);
                    Label a14 = new Label(14 + ii, 2, "及格人数", cFormat1);
                    sheet.addCell(a14);
                    Label a15 = new Label(15 + ii, 2, "及格率", cFormat1);
                    sheet.addCell(a15);
                    int index = 0;
                    if (l2Allsubpassrait.equals("1")) {
                        Label a151 = new Label(16 + ii, 2, "全科目及格率", cFormat1);
                        sheet.addCell(a151);
                        index = 1;
                    }
                    Label a1512 = new Label(16 + index + ii, 2, "低分人数", cFormat1);
                    sheet.addCell(a1512);
                    Label a1511 = new Label(17 + index + ii, 2, "低分率", cFormat1);
                    sheet.addCell(a1511);
                    Label a16 = new Label(18 + index + ii, 2, "前" + sNum + "名贡献数", cFormat1);
                    sheet.addCell(a16);
                    Label a17 = new Label(19 + index + ii, 2, "贡献率", cFormat1);
                    sheet.addCell(a17);
                    if (!viewRankOfScoreInfo.equals("3")) {
                        Label a18 = new Label(20 + index + ii, 2, "贡献排名", cFormat1);
                        sheet.addCell(a18);
                    }
                    Map<String, Gradelevel> map = new HashMap<>();
                    for (int k = 0; k < quest.size(); k++) {
                        List<Gradelevel> list1 = quest.get(k);
                        for (int i = 0; i < list1.size(); i++) {
                            if (("00".equals(teachUnit_s) && "00".equals(list1.get(i).getExt2())) || ("01".equals(teachUnit_s) && Const.class_grade.equals(list1.get(i).getClassNum()))) {
                                String sbj = list1.get(i).getSubjectNum();
                                Gradelevel gl = new Gradelevel();
                                gl.setAverage(list1.get(i).getAverage());
                                gl.setExcellencerate(list1.get(i).getExcellencerate());
                                map.put(sbj, gl);
                            }
                        }
                    }
                    int m = 0;
                    int n = 0;
                    for (int k2 = 0; k2 < quest.size(); k2++) {
                        List<Gradelevel> list12 = quest.get(k2);
                        n += list12.size();
                        int p = 2 + (n * 1);
                        for (int i2 = 0; i2 < list12.size(); i2++) {
                            if (i2 == 0) {
                                Label a0 = new Label(0, 3 + m, quest.get(k2).get(0).getSubjectName(), cFormat3);
                                sheet.addCell(a0);
                                sheet.mergeCells(0, 3 + m, 0, p);
                            }
                            if (i2 % 2 != 0) {
                                if ("01".equals(teachUnit_s) && Const.class_grade.equals(list12.get(i2).getClassNum())) {
                                    Label b1 = new Label(1, 3 + m + i2, list12.get(i2).getClassName(), cFormat2_bold);
                                    sheet.addCell(b1);
                                    Number b2 = new Number(2, 3 + m + i2, Convert.toInt(list12.get(i2).getNumOfStudent(), 0).intValue(), cFormat2_bold);
                                    sheet.addCell(b2);
                                    if (IsShowReferenceRate.equals("1")) {
                                        Double cankaolv = list12.get(i2).getCankaolv();
                                        if (null == cankaolv) {
                                            Label bb = new Label(3, 3 + m + i2, "--", cFormat2_bold);
                                            sheet.addCell(bb);
                                        } else {
                                            Number bb2 = new Number(3, 3 + m + i2, Double.parseDouble(df03.format(cankaolv)), cFormat2_bold_0);
                                            sheet.addCell(bb2);
                                        }
                                    }
                                    Object b3_val = list12.get(i2).getAverage();
                                    Double b3_val_D = Double.valueOf(df02.format(b3_val));
                                    Number b3 = new Number(3 + jj, 3 + m + i2, b3_val_D.doubleValue(), cFormat2_bold_2);
                                    sheet.addCell(b3);
                                    if (!viewRankOfScoreInfo.equals("3")) {
                                        Label b4 = new Label(4 + jj, 3 + m + i2, "", cFormat2_bold);
                                        sheet.addCell(b4);
                                    }
                                    Object b5_val = list12.get(i2).getMax();
                                    Double b5_val_D = Double.valueOf(df01.format(b5_val));
                                    BigDecimal b5_val_D0 = Convert.toBigDecimal(b5_val_D).stripTrailingZeros();
                                    String b5_val_DStr = b5_val_D0.toPlainString();
                                    Label b5 = new Label(4 + ii, 3 + m + i2, b5_val_DStr, cFormat2_bold_1);
                                    sheet.addCell(b5);
                                    Object b6_val = list12.get(i2).getMin();
                                    Double b6_val_D = Double.valueOf(df01.format(b6_val));
                                    BigDecimal b6_val_D0 = Convert.toBigDecimal(b6_val_D).stripTrailingZeros();
                                    String b6_val_DStr = b6_val_D0.toPlainString();
                                    Label b6 = new Label(5 + ii, 3 + m + i2, b6_val_DStr, cFormat2_bold_1);
                                    sheet.addCell(b6);
                                    Object b7_val = list12.get(i2).getSd();
                                    Double b7_val_D = Double.valueOf(df02.format(b7_val));
                                    Number b7 = new Number(6 + ii, 3 + m + i2, b7_val_D.doubleValue(), cFormat2_bold_2);
                                    sheet.addCell(b7);
                                    Object b8_val = list12.get(i2).getCv();
                                    Double b8_val_D = Double.valueOf(df02.format(b8_val));
                                    Number b8 = new Number(7 + ii, 3 + m + i2, b8_val_D.doubleValue(), cFormat2_bold_2);
                                    sheet.addCell(b8);
                                    Object b8_val1 = list12.get(i2).getDifficult();
                                    Double b8_val_D1 = Double.valueOf(df02.format(b8_val1));
                                    Number b81 = new Number(8 + ii, 3 + m + i2, b8_val_D1.doubleValue(), cFormat2_bold_2);
                                    sheet.addCell(b81);
                                    Object b8_val2 = list12.get(i2).getDesci();
                                    Double b8_val_D2 = Double.valueOf(df02.format(b8_val2));
                                    Number b82 = new Number(9 + ii, 3 + m + i2, b8_val_D2.doubleValue(), cFormat2_bold_2);
                                    sheet.addCell(b82);
                                    Number b9 = new Number(10 + ii, 3 + m + i2, Convert.toInt(list12.get(i2).getHighscoreNum(), 0).intValue(), cFormat2_bold);
                                    sheet.addCell(b9);
                                    Number b10 = new Number(11 + ii, 3 + m + i2, Double.parseDouble(df03.format(list12.get(i2).getHighrate())), cFormat2_bold_0);
                                    sheet.addCell(b10);
                                    Number b11 = new Number(12 + ii, 3 + m + i2, Convert.toInt(list12.get(i2).getExcellence(), 0).intValue(), cFormat2_bold);
                                    sheet.addCell(b11);
                                    Number b12 = new Number(13 + ii, 3 + m + i2, Double.parseDouble(df03.format(list12.get(i2).getExcellencerate())), cFormat2_bold_0);
                                    sheet.addCell(b12);
                                    Number b13 = new Number(14 + ii, 3 + m + i2, Convert.toInt(list12.get(i2).getPass(), 0).intValue(), cFormat2_bold);
                                    sheet.addCell(b13);
                                    Number b14 = new Number(15 + ii, 3 + m + i2, Double.parseDouble(df03.format(list12.get(i2).getPassrate())), cFormat2_bold_0);
                                    sheet.addCell(b14);
                                    if (l2Allsubpassrait.equals("1")) {
                                        Double quankejigelv = list12.get(i2).getQuankejigelv();
                                        if (null == quankejigelv) {
                                            Label b15 = new Label(16 + ii, 3 + m + i2, "--", cFormat2_bold);
                                            sheet.addCell(b15);
                                        } else {
                                            Number b152 = new Number(16 + ii, 3 + m + i2, Double.parseDouble(df03.format(quankejigelv)), cFormat2_bold_0);
                                            sheet.addCell(b152);
                                        }
                                    }
                                    Number b141 = new Number(16 + index + ii, 3 + m + i2, Convert.toInt(list12.get(i2).getLowscoreNum(), 0).intValue(), cFormat2_bold);
                                    sheet.addCell(b141);
                                    Number b1411 = new Number(17 + index + ii, 3 + m + i2, Double.parseDouble(df03.format(list12.get(i2).getLowrate())), cFormat2_bold_0);
                                    sheet.addCell(b1411);
                                    Number b153 = new Number(18 + index + ii, 3 + m + i2, Convert.toInt(list12.get(i2).getNum(), 0).intValue(), cFormat2_bold);
                                    sheet.addCell(b153);
                                    if (i2 == list12.size() - 1) {
                                        Label b16 = new Label(19 + index + ii, 3 + m + i2, "-", cFormat2_bold);
                                        sheet.addCell(b16);
                                        if (!viewRankOfScoreInfo.equals("3")) {
                                            Label b17 = new Label(20 + index + ii, 3 + m + i2, "-", cFormat2_bold);
                                            sheet.addCell(b17);
                                        }
                                    } else {
                                        Number b162 = new Number(19 + index + ii, 3 + m + i2, Double.parseDouble(df03.format(list12.get(i2).getDevote())), cFormat2_bold_0);
                                        sheet.addCell(b162);
                                        if (!viewRankOfScoreInfo.equals("3")) {
                                            Number b172 = new Number(20 + index + ii, 3 + m + i2, Convert.toInt(list12.get(i2).getT_order(), 0).intValue(), cFormat2_bold);
                                            sheet.addCell(b172);
                                        }
                                    }
                                } else {
                                    String sjt = list12.get(i2).getSubjectNum();
                                    Double avg = Convert.toDouble(df02.format(list12.get(i2).getAverage()));
                                    Double youxiulv = Convert.toDouble(df03.format(list12.get(i2).getExcellencerate()));
                                    Gradelevel gl2 = map.get(sjt);
                                    Double allclass_avg = Convert.toDouble(df02.format(gl2.getAverage()));
                                    Double allclass_youxiulv = Convert.toDouble(df03.format(gl2.getExcellencerate()));
                                    if (avg.doubleValue() < allclass_avg.doubleValue() && youxiulv.doubleValue() < allclass_youxiulv.doubleValue()) {
                                        Label b18 = new Label(1, 3 + m + i2, list12.get(i2).getClassName(), cFormat_red2);
                                        sheet.addCell(b18);
                                    } else if (avg.doubleValue() <= allclass_avg.doubleValue() || youxiulv.doubleValue() <= allclass_youxiulv.doubleValue()) {
                                        Label b19 = new Label(1, 3 + m + i2, list12.get(i2).getClassName(), cFormat2);
                                        sheet.addCell(b19);
                                    } else {
                                        Label b110 = new Label(1, 3 + m + i2, list12.get(i2).getClassName(), cFormat_blue2);
                                        sheet.addCell(b110);
                                    }
                                    Number b22 = new Number(2, 3 + m + i2, Convert.toInt(list12.get(i2).getNumOfStudent(), 0).intValue(), cFormat2);
                                    sheet.addCell(b22);
                                    if (IsShowReferenceRate.equals("1")) {
                                        Double cankaolv2 = list12.get(i2).getCankaolv();
                                        if (null == cankaolv2) {
                                            Label bb3 = new Label(3, 3 + m + i2, "--", cFormat2);
                                            sheet.addCell(bb3);
                                        } else {
                                            Number bb4 = new Number(3, 3 + m + i2, Double.parseDouble(df03.format(cankaolv2)), cFormat2_0);
                                            sheet.addCell(bb4);
                                        }
                                    }
                                    Object b3_val2 = list12.get(i2).getAverage();
                                    Double b3_val_D2 = Double.valueOf(df02.format(b3_val2));
                                    Number b32 = new Number(3 + jj, 3 + m + i2, b3_val_D2.doubleValue(), cFormat2_2);
                                    sheet.addCell(b32);
                                    if (!viewRankOfScoreInfo.equals("3")) {
                                        if (list12.get(i2).getRank().equals("")) {
                                            Label b42 = new Label(4 + jj, 3 + m + i2, "", cFormat2);
                                            sheet.addCell(b42);
                                        } else {
                                            Number b43 = new Number(4 + jj, 3 + m + i2, Convert.toInt(list12.get(i2).getRank(), 0).intValue(), cFormat2);
                                            sheet.addCell(b43);
                                        }
                                    }
                                    Object b5_val2 = list12.get(i2).getMax();
                                    Double b5_val_D2 = Double.valueOf(df01.format(b5_val2));
                                    BigDecimal b5_val_D02 = Convert.toBigDecimal(b5_val_D2).stripTrailingZeros();
                                    String b5_val_DStr2 = b5_val_D02.toPlainString();
                                    Label b52 = new Label(4 + ii, 3 + m + i2, b5_val_DStr2, cFormat2_1);
                                    sheet.addCell(b52);
                                    Object b6_val2 = list12.get(i2).getMin();
                                    Double b6_val_D2 = Double.valueOf(df01.format(b6_val2));
                                    BigDecimal b6_val_D02 = Convert.toBigDecimal(b6_val_D2).stripTrailingZeros();
                                    String b6_val_DStr2 = b6_val_D02.toPlainString();
                                    Label b62 = new Label(5 + ii, 3 + m + i2, b6_val_DStr2, cFormat2_1);
                                    sheet.addCell(b62);
                                    Object b7_val2 = list12.get(i2).getSd();
                                    Double b7_val_D2 = Double.valueOf(df02.format(b7_val2));
                                    Number b72 = new Number(6 + ii, 3 + m + i2, b7_val_D2.doubleValue(), cFormat2_2);
                                    sheet.addCell(b72);
                                    Object b8_val3 = list12.get(i2).getCv();
                                    Double b8_val_D3 = Double.valueOf(df02.format(b8_val3));
                                    Number b83 = new Number(7 + ii, 3 + m + i2, b8_val_D3.doubleValue(), cFormat2_2);
                                    sheet.addCell(b83);
                                    Object b8_val12 = list12.get(i2).getDifficult();
                                    Double b8_val_D12 = Double.valueOf(df02.format(b8_val12));
                                    Number b812 = new Number(8 + ii, 3 + m + i2, b8_val_D12.doubleValue(), cFormat2_2);
                                    sheet.addCell(b812);
                                    Object b8_val22 = list12.get(i2).getDesci();
                                    Double b8_val_D22 = Double.valueOf(df02.format(b8_val22));
                                    Number b822 = new Number(9 + ii, 3 + m + i2, b8_val_D22.doubleValue(), cFormat2_2);
                                    sheet.addCell(b822);
                                    Number b92 = new Number(10 + ii, 3 + m + i2, Convert.toInt(list12.get(i2).getHighscoreNum(), 0).intValue(), cFormat2);
                                    sheet.addCell(b92);
                                    Number b102 = new Number(11 + ii, 3 + m + i2, Double.parseDouble(df03.format(list12.get(i2).getHighrate())), cFormat2_0);
                                    sheet.addCell(b102);
                                    Number b112 = new Number(12 + ii, 3 + m + i2, Convert.toInt(list12.get(i2).getExcellence(), 0).intValue(), cFormat2);
                                    sheet.addCell(b112);
                                    Number b122 = new Number(13 + ii, 3 + m + i2, Double.parseDouble(df03.format(list12.get(i2).getExcellencerate())), cFormat2_0);
                                    sheet.addCell(b122);
                                    Number b132 = new Number(14 + ii, 3 + m + i2, Convert.toInt(list12.get(i2).getPass(), 0).intValue(), cFormat2);
                                    sheet.addCell(b132);
                                    Number b142 = new Number(15 + ii, 3 + m + i2, Double.parseDouble(df03.format(list12.get(i2).getPassrate())), cFormat2_0);
                                    sheet.addCell(b142);
                                    if (l2Allsubpassrait.equals("1")) {
                                        Double quankejigelv2 = list12.get(i2).getQuankejigelv();
                                        if (null == quankejigelv2) {
                                            Label b154 = new Label(16 + ii, 3 + m + i2, "--", cFormat2);
                                            sheet.addCell(b154);
                                        } else {
                                            Number b155 = new Number(16 + ii, 3 + m + i2, Double.parseDouble(df03.format(quankejigelv2)), cFormat2_0);
                                            sheet.addCell(b155);
                                        }
                                    }
                                    Number b1412 = new Number(16 + index + ii, 3 + m + i2, Convert.toInt(list12.get(i2).getLowscoreNum(), 0).intValue(), cFormat2);
                                    sheet.addCell(b1412);
                                    Number b14112 = new Number(17 + index + ii, 3 + m + i2, Double.parseDouble(df03.format(list12.get(i2).getLowrate())), cFormat2_0);
                                    sheet.addCell(b14112);
                                    Number b156 = new Number(18 + index + ii, 3 + m + i2, Convert.toInt(list12.get(i2).getNum(), 0).intValue(), cFormat2);
                                    sheet.addCell(b156);
                                    if (i2 == list12.size() - 1) {
                                        Label b163 = new Label(19 + index + ii, 3 + m + i2, "-", cFormat2);
                                        sheet.addCell(b163);
                                        if (!viewRankOfScoreInfo.equals("3")) {
                                            Label b173 = new Label(20 + index + ii, 3 + m + i2, "-", cFormat2);
                                            sheet.addCell(b173);
                                        }
                                    } else {
                                        Number b164 = new Number(19 + index + ii, 3 + m + i2, Double.parseDouble(df03.format(list12.get(i2).getDevote())), cFormat2_0);
                                        sheet.addCell(b164);
                                        if (!viewRankOfScoreInfo.equals("3")) {
                                            Number b174 = new Number(20 + index + ii, 3 + m + i2, Convert.toInt(list12.get(i2).getT_order(), 0).intValue(), cFormat2);
                                            sheet.addCell(b174);
                                        }
                                    }
                                }
                            } else if ("01".equals(teachUnit_s) && Const.class_grade.equals(list12.get(i2).getClassNum())) {
                                Label b111 = new Label(1, 3 + m + i2, list12.get(i2).getClassName(), cFormat3_bold);
                                sheet.addCell(b111);
                                Number b23 = new Number(2, 3 + m + i2, Convert.toInt(list12.get(i2).getNumOfStudent(), 0).intValue(), cFormat3_bold);
                                sheet.addCell(b23);
                                if (IsShowReferenceRate.equals("1")) {
                                    Double cankaolv3 = list12.get(i2).getCankaolv();
                                    if (null == cankaolv3) {
                                        Label bb5 = new Label(3, 3 + m + i2, "--", cFormat3_bold);
                                        sheet.addCell(bb5);
                                    } else {
                                        Number bb6 = new Number(3, 3 + m + i2, Double.parseDouble(df03.format(cankaolv3)), cFormat3_bold_0);
                                        sheet.addCell(bb6);
                                    }
                                }
                                Object b3_val3 = list12.get(i2).getAverage();
                                Double b3_val_D3 = Double.valueOf(df02.format(b3_val3));
                                Number b33 = new Number(3 + jj, 3 + m + i2, b3_val_D3.doubleValue(), cFormat3_bold_2);
                                sheet.addCell(b33);
                                if (!viewRankOfScoreInfo.equals("3")) {
                                    Label b44 = new Label(4 + jj, 3 + m + i2, "", cFormat3_bold);
                                    sheet.addCell(b44);
                                }
                                Object b5_val3 = list12.get(i2).getMax();
                                Double b5_val_D3 = Double.valueOf(df01.format(b5_val3));
                                BigDecimal b5_val_D03 = Convert.toBigDecimal(b5_val_D3).stripTrailingZeros();
                                String b5_val_DStr3 = b5_val_D03.toPlainString();
                                Label b53 = new Label(4 + ii, 3 + m + i2, b5_val_DStr3, cFormat3_bold_1);
                                sheet.addCell(b53);
                                Object b6_val3 = list12.get(i2).getMin();
                                Double b6_val_D3 = Double.valueOf(df01.format(b6_val3));
                                BigDecimal b6_val_D03 = Convert.toBigDecimal(b6_val_D3).stripTrailingZeros();
                                String b6_val_DStr3 = b6_val_D03.toPlainString();
                                Label b63 = new Label(5 + ii, 3 + m + i2, b6_val_DStr3, cFormat3_bold_1);
                                sheet.addCell(b63);
                                Object b7_val3 = list12.get(i2).getSd();
                                Double b7_val_D3 = Double.valueOf(df02.format(b7_val3));
                                Number b73 = new Number(6 + ii, 3 + m + i2, b7_val_D3.doubleValue(), cFormat3_bold_2);
                                sheet.addCell(b73);
                                Object b8_val4 = list12.get(i2).getCv();
                                Double b8_val_D4 = Double.valueOf(df02.format(b8_val4));
                                Number b84 = new Number(7 + ii, 3 + m + i2, b8_val_D4.doubleValue(), cFormat3_bold_2);
                                sheet.addCell(b84);
                                Object b8_val13 = list12.get(i2).getDifficult();
                                Double b8_val_D13 = Double.valueOf(df02.format(b8_val13));
                                Number b813 = new Number(8 + ii, 3 + m + i2, b8_val_D13.doubleValue(), cFormat3_bold_2);
                                sheet.addCell(b813);
                                Object b8_val23 = list12.get(i2).getDesci();
                                Double b8_val_D23 = Double.valueOf(df02.format(b8_val23));
                                Number b823 = new Number(9 + ii, 3 + m + i2, b8_val_D23.doubleValue(), cFormat3_bold_2);
                                sheet.addCell(b823);
                                Number b93 = new Number(10 + ii, 3 + m + i2, Convert.toInt(list12.get(i2).getHighscoreNum(), 0).intValue(), cFormat3_bold);
                                sheet.addCell(b93);
                                Number b103 = new Number(11 + ii, 3 + m + i2, Double.parseDouble(df03.format(list12.get(i2).getHighrate())), cFormat3_bold_0);
                                sheet.addCell(b103);
                                Number b113 = new Number(12 + ii, 3 + m + i2, Convert.toInt(list12.get(i2).getExcellence(), 0).intValue(), cFormat3_bold);
                                sheet.addCell(b113);
                                Number b123 = new Number(13 + ii, 3 + m + i2, Double.parseDouble(df03.format(list12.get(i2).getExcellencerate())), cFormat3_bold_0);
                                sheet.addCell(b123);
                                Number b133 = new Number(14 + ii, 3 + m + i2, Convert.toInt(list12.get(i2).getPass(), 0).intValue(), cFormat3_bold);
                                sheet.addCell(b133);
                                Number b143 = new Number(15 + ii, 3 + m + i2, Double.parseDouble(df03.format(list12.get(i2).getPassrate())), cFormat3_bold_0);
                                sheet.addCell(b143);
                                if (l2Allsubpassrait.equals("1")) {
                                    Double quankejigelv3 = list12.get(i2).getQuankejigelv();
                                    if (null == quankejigelv3) {
                                        Label b157 = new Label(16 + ii, 3 + m + i2, "--", cFormat3_bold);
                                        sheet.addCell(b157);
                                    } else {
                                        Number b158 = new Number(16 + ii, 3 + m + i2, Double.parseDouble(df03.format(quankejigelv3)), cFormat3_bold_0);
                                        sheet.addCell(b158);
                                    }
                                }
                                Number b1413 = new Number(16 + index + ii, 3 + m + i2, Convert.toInt(list12.get(i2).getLowscoreNum(), 0).intValue(), cFormat3_bold);
                                sheet.addCell(b1413);
                                Number b14113 = new Number(17 + index + ii, 3 + m + i2, Double.parseDouble(df03.format(list12.get(i2).getLowrate())), cFormat3_bold_0);
                                sheet.addCell(b14113);
                                Number b159 = new Number(18 + index + ii, 3 + m + i2, Convert.toInt(list12.get(i2).getNum(), 0).intValue(), cFormat3_bold);
                                sheet.addCell(b159);
                                if (i2 == list12.size() - 1) {
                                    Label b165 = new Label(19 + index + ii, 3 + m + i2, "-", cFormat3_bold);
                                    sheet.addCell(b165);
                                    if (!viewRankOfScoreInfo.equals("3")) {
                                        Label b175 = new Label(20 + index + ii, 3 + m + i2, "-", cFormat3_bold);
                                        sheet.addCell(b175);
                                    }
                                } else {
                                    Number b166 = new Number(19 + index + ii, 3 + m + i2, Double.parseDouble(df03.format(list12.get(i2).getDevote())), cFormat3_bold_0);
                                    sheet.addCell(b166);
                                    if (!viewRankOfScoreInfo.equals("3")) {
                                        Number b176 = new Number(20 + index + ii, 3 + m + i2, Convert.toInt(list12.get(i2).getT_order(), 0).intValue(), cFormat3_bold);
                                        sheet.addCell(b176);
                                    }
                                }
                            } else {
                                String sjt2 = list12.get(i2).getSubjectNum();
                                Double avg2 = Convert.toDouble(df02.format(list12.get(i2).getAverage()));
                                Double youxiulv2 = Convert.toDouble(df03.format(list12.get(i2).getExcellencerate()));
                                Gradelevel gl3 = map.get(sjt2);
                                Double allclass_avg2 = Convert.toDouble(df02.format(gl3.getAverage()));
                                Double allclass_youxiulv2 = Convert.toDouble(df03.format(gl3.getExcellencerate()));
                                if (avg2.doubleValue() < allclass_avg2.doubleValue() && youxiulv2.doubleValue() < allclass_youxiulv2.doubleValue()) {
                                    Label b114 = new Label(1, 3 + m + i2, list12.get(i2).getClassName(), cFormat_red);
                                    sheet.addCell(b114);
                                } else if (avg2.doubleValue() <= allclass_avg2.doubleValue() || youxiulv2.doubleValue() <= allclass_youxiulv2.doubleValue()) {
                                    Label b115 = new Label(1, 3 + m + i2, list12.get(i2).getClassName(), cFormat3);
                                    sheet.addCell(b115);
                                } else {
                                    Label b116 = new Label(1, 3 + m + i2, list12.get(i2).getClassName(), cFormat_blue);
                                    sheet.addCell(b116);
                                }
                                Number b24 = new Number(2, 3 + m + i2, Convert.toInt(list12.get(i2).getNumOfStudent(), 0).intValue(), cFormat3);
                                sheet.addCell(b24);
                                if (IsShowReferenceRate.equals("1")) {
                                    Double cankaolv4 = list12.get(i2).getCankaolv();
                                    if (null == cankaolv4) {
                                        Label bb7 = new Label(3, 3 + m + i2, "--", cFormat3);
                                        sheet.addCell(bb7);
                                    } else {
                                        Number bb8 = new Number(3, 3 + m + i2, Double.parseDouble(df03.format(cankaolv4)), cFormat3_0);
                                        sheet.addCell(bb8);
                                    }
                                }
                                Object b3_val4 = list12.get(i2).getAverage();
                                Double b3_val_D4 = Double.valueOf(df02.format(b3_val4));
                                Number b34 = new Number(3 + jj, 3 + m + i2, b3_val_D4.doubleValue(), cFormat3_2);
                                sheet.addCell(b34);
                                if (!viewRankOfScoreInfo.equals("3")) {
                                    if (list12.get(i2).getRank().equals("")) {
                                        Label b45 = new Label(4 + jj, 3 + m + i2, "", cFormat3);
                                        sheet.addCell(b45);
                                    } else {
                                        Number b46 = new Number(4 + jj, 3 + m + i2, Convert.toInt(list12.get(i2).getRank(), 0).intValue(), cFormat3);
                                        sheet.addCell(b46);
                                    }
                                }
                                Object b5_val4 = list12.get(i2).getMax();
                                Double b5_val_D4 = Double.valueOf(df01.format(b5_val4));
                                BigDecimal b5_val_D04 = Convert.toBigDecimal(b5_val_D4).stripTrailingZeros();
                                String b5_val_DStr4 = b5_val_D04.toPlainString();
                                Label b54 = new Label(4 + ii, 3 + m + i2, b5_val_DStr4, cFormat3_1);
                                sheet.addCell(b54);
                                Object b6_val4 = list12.get(i2).getMin();
                                Double b6_val_D4 = Double.valueOf(df01.format(b6_val4));
                                BigDecimal b6_val_D04 = Convert.toBigDecimal(b6_val_D4).stripTrailingZeros();
                                String b6_val_DStr4 = b6_val_D04.toPlainString();
                                Label b64 = new Label(5 + ii, 3 + m + i2, b6_val_DStr4, cFormat3_1);
                                sheet.addCell(b64);
                                Object b7_val4 = list12.get(i2).getSd();
                                Double b7_val_D4 = Double.valueOf(df02.format(b7_val4));
                                Number b74 = new Number(6 + ii, 3 + m + i2, b7_val_D4.doubleValue(), cFormat3_2);
                                sheet.addCell(b74);
                                Object b8_val5 = list12.get(i2).getCv();
                                Double b8_val_D5 = Double.valueOf(df02.format(b8_val5));
                                Number b85 = new Number(7 + ii, 3 + m + i2, b8_val_D5.doubleValue(), cFormat3_2);
                                sheet.addCell(b85);
                                Object b8_val14 = list12.get(i2).getDifficult();
                                Double b8_val_D14 = Double.valueOf(df02.format(b8_val14));
                                Number b814 = new Number(8 + ii, 3 + m + i2, b8_val_D14.doubleValue(), cFormat3_2);
                                sheet.addCell(b814);
                                Object b8_val24 = list12.get(i2).getDesci();
                                Double b8_val_D24 = Double.valueOf(df02.format(b8_val24));
                                Number b824 = new Number(9 + ii, 3 + m + i2, b8_val_D24.doubleValue(), cFormat3_2);
                                sheet.addCell(b824);
                                Number b94 = new Number(10 + ii, 3 + m + i2, Convert.toInt(list12.get(i2).getHighscoreNum(), 0).intValue(), cFormat3);
                                sheet.addCell(b94);
                                Number b104 = new Number(11 + ii, 3 + m + i2, Double.parseDouble(df03.format(list12.get(i2).getHighrate())), cFormat3_0);
                                sheet.addCell(b104);
                                Number b117 = new Number(12 + ii, 3 + m + i2, Convert.toInt(list12.get(i2).getExcellence(), 0).intValue(), cFormat3);
                                sheet.addCell(b117);
                                Number b124 = new Number(13 + ii, 3 + m + i2, Double.parseDouble(df03.format(list12.get(i2).getExcellencerate())), cFormat3_0);
                                sheet.addCell(b124);
                                Number b134 = new Number(14 + ii, 3 + m + i2, Convert.toInt(list12.get(i2).getPass(), 0).intValue(), cFormat3);
                                sheet.addCell(b134);
                                Number b144 = new Number(15 + ii, 3 + m + i2, Double.parseDouble(df03.format(list12.get(i2).getPassrate())), cFormat3_0);
                                sheet.addCell(b144);
                                if (l2Allsubpassrait.equals("1")) {
                                    Double quankejigelv4 = list12.get(i2).getQuankejigelv();
                                    if (null == quankejigelv4) {
                                        Label b1510 = new Label(16 + ii, 3 + m + i2, "--", cFormat3);
                                        sheet.addCell(b1510);
                                    } else {
                                        Number b1511 = new Number(16 + ii, 3 + m + i2, Double.parseDouble(df03.format(quankejigelv4)), cFormat3_0);
                                        sheet.addCell(b1511);
                                    }
                                }
                                Number b1414 = new Number(16 + index + ii, 3 + m + i2, Convert.toInt(list12.get(i2).getLowscoreNum(), 0).intValue(), cFormat3);
                                sheet.addCell(b1414);
                                Number b14114 = new Number(17 + index + ii, 3 + m + i2, Double.parseDouble(df03.format(list12.get(i2).getLowrate())), cFormat3_0);
                                sheet.addCell(b14114);
                                Number b1512 = new Number(18 + index + ii, 3 + m + i2, Convert.toInt(list12.get(i2).getNum(), 0).intValue(), cFormat3);
                                sheet.addCell(b1512);
                                if (i2 == list12.size() - 1) {
                                    Label b167 = new Label(19 + index + ii, 3 + m + i2, "-", cFormat3);
                                    sheet.addCell(b167);
                                    if (!viewRankOfScoreInfo.equals("3")) {
                                        Label b177 = new Label(20 + index + ii, 3 + m + i2, "-", cFormat3);
                                        sheet.addCell(b177);
                                    }
                                } else {
                                    Number b168 = new Number(19 + index + ii, 3 + m + i2, Double.parseDouble(df03.format(list12.get(i2).getDevote())), cFormat3_0);
                                    sheet.addCell(b168);
                                    if (!viewRankOfScoreInfo.equals("3")) {
                                        Number b178 = new Number(20 + index + ii, 3 + m + i2, Convert.toInt(list12.get(i2).getT_order(), 0).intValue(), cFormat3);
                                        sheet.addCell(b178);
                                    }
                                }
                            }
                        }
                        m += list12.size();
                    }
                    Label tishi = new Label(0, n + 4, "注：红色表示任教班级均分与优秀率均低于全校平均水平，蓝色表示任教班级均分与优秀率均高于全校平均水平", title);
                    sheet.addCell(tishi);
                    sheet.mergeCells(0, n + 4, 12, n + 4);
                } catch (Exception e) {
                    e.printStackTrace();
                }
                wwBook.write();
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response = ServletActionContext.getResponse();
                            response.reset();
                            ServletOutputStream outputStream = response.getOutputStream();
                            String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName2 = loadFileName.replace("+", " ");
                            response.setContentType("Content-type: applicationnd.ms-excel");
                            response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xls");
                            response.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte = new byte[1024];
                            FileInputStream in = new FileInputStream(excelFile);
                            while (true) {
                                int n2 = in.read(tempByte);
                                if (n2 == -1) {
                                    break;
                                }
                                try {
                                    outputStream.write(tempByte, 0, n2);
                                } catch (Exception e2) {
                                    this.log.error("保存未成功", e2);
                                }
                            }
                            outputStream.flush();
                            outputStream.close();
                            in.close();
                        }
                    } catch (WriteException e3) {
                        e3.printStackTrace();
                    }
                }
            } catch (Exception e4) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response2 = ServletActionContext.getResponse();
                            response2.reset();
                            ServletOutputStream outputStream2 = response2.getOutputStream();
                            String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName4 = loadFileName3.replace("+", " ");
                            response2.setContentType("Content-type: applicationnd.ms-excel");
                            response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xls");
                            response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte2 = new byte[1024];
                            FileInputStream in2 = new FileInputStream(excelFile);
                            while (true) {
                                int n3 = in2.read(tempByte2);
                                if (n3 == -1) {
                                    break;
                                }
                                try {
                                    outputStream2.write(tempByte2, 0, n3);
                                } catch (Exception e5) {
                                    this.log.error("保存未成功", e5);
                                }
                            }
                            outputStream2.flush();
                            outputStream2.close();
                            in2.close();
                        }
                    } catch (WriteException e6) {
                        e6.printStackTrace();
                    }
                }
            } catch (Throwable th) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response3 = ServletActionContext.getResponse();
                            response3.reset();
                            ServletOutputStream outputStream3 = response3.getOutputStream();
                            String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName6 = loadFileName5.replace("+", " ");
                            response3.setContentType("Content-type: applicationnd.ms-excel");
                            response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xls");
                            response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte3 = new byte[1024];
                            FileInputStream in3 = new FileInputStream(excelFile);
                            while (true) {
                                int n4 = in3.read(tempByte3);
                                if (n4 == -1) {
                                    break;
                                }
                                try {
                                    outputStream3.write(tempByte3, 0, n4);
                                } catch (Exception e7) {
                                    this.log.error("保存未成功", e7);
                                }
                            }
                            outputStream3.flush();
                            outputStream3.close();
                            in3.close();
                        }
                    } catch (WriteException e8) {
                        e8.printStackTrace();
                        throw th;
                    }
                }
                throw th;
            }
        } catch (Exception e9) {
            e9.printStackTrace();
        }
        return null;
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String scoreSection_exportgetData(String areaval, String examNum, String gradeNum, String schoolNum, String subjectNum, String classNum, String studentId, String studentType, String type, String source, String step, String sNum, String c_exam, String rpt_name, String isMoreSchool, String rptTitle, String isHistory, String isSaveWrite, String dirPath, String uri, String userNum, String schName, String gradeName, String className, String subjectName, String imgRoot, String agent, String fufen, String subCompose, String islevel, String teachUnit, String teachUnit_s, String contrastObject, String contrast_s) throws Exception {
        String loadFileName;
        List quest = this.reportService.getScoreSectionRank2(areaval, examNum, gradeNum, schoolNum, subjectNum, classNum, studentType, type, source, step, "0", fufen, subCompose, islevel, teachUnit, teachUnit_s, contrastObject, contrast_s);
        File f1 = new File(dirPath);
        if (!f1.exists()) {
            f1.mkdirs();
        }
        File excelFile = new File(dirPath + File.separator + "E5-分段统计-实力对比.xlsx");
        if (!excelFile.exists()) {
            excelFile.createNewFile();
        }
        SXSSFWorkbook wb = new SXSSFWorkbook();
        wb.setCompressTempFiles(true);
        Font font = wb.createFont();
        font.setFontHeightInPoints((short) 10);
        font.setFontName("Arial");
        Font font2 = wb.createFont();
        font2.setFontHeightInPoints((short) 15);
        font2.setFontName("Arial");
        font2.setBold(true);
        CellStyle zhuCellStyle = wb.createCellStyle();
        zhuCellStyle.setFont(font);
        zhuCellStyle.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
        CellStyle zhuCellStyle2 = wb.createCellStyle();
        zhuCellStyle2.setFont(font);
        zhuCellStyle2.setAlignment(HorizontalAlignment.RIGHT);
        CellStyle titleStyle = wb.createCellStyle();
        titleStyle.setBorderBottom(BorderStyle.THIN);
        titleStyle.setBorderTop(BorderStyle.THIN);
        titleStyle.setBorderRight(BorderStyle.THIN);
        titleStyle.setBorderLeft(BorderStyle.THIN);
        titleStyle.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
        titleStyle.setWrapText(true);
        titleStyle.setFont(font2);
        CellStyle titleDetailStyle = wb.createCellStyle();
        titleDetailStyle.setBorderBottom(BorderStyle.THIN);
        titleDetailStyle.setBorderTop(BorderStyle.THIN);
        titleDetailStyle.setBorderRight(BorderStyle.THIN);
        titleDetailStyle.setBorderLeft(BorderStyle.THIN);
        titleDetailStyle.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
        titleDetailStyle.setWrapText(true);
        titleDetailStyle.setFont(font);
        CellStyle biaotoucellStyle = wb.createCellStyle();
        biaotoucellStyle.setFillForegroundColor((short) 13);
        biaotoucellStyle.setBorderBottom(BorderStyle.THIN);
        biaotoucellStyle.setBorderTop(BorderStyle.THIN);
        biaotoucellStyle.setBorderRight(BorderStyle.THIN);
        biaotoucellStyle.setBorderLeft(BorderStyle.THIN);
        biaotoucellStyle.setAlignment(HorizontalAlignment.CENTER);
        biaotoucellStyle.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
        biaotoucellStyle.setWrapText(true);
        biaotoucellStyle.setFont(font);
        biaotoucellStyle.setFillForegroundColor(Const.fillForeground_color);
        biaotoucellStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        CellStyle cellStyle2 = wb.createCellStyle();
        cellStyle2.setFillForegroundColor((short) 13);
        cellStyle2.setBorderBottom(BorderStyle.THIN);
        cellStyle2.setBorderTop(BorderStyle.THIN);
        cellStyle2.setBorderRight(BorderStyle.THIN);
        cellStyle2.setBorderLeft(BorderStyle.THIN);
        cellStyle2.setAlignment(HorizontalAlignment.CENTER);
        cellStyle2.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
        cellStyle2.setWrapText(true);
        cellStyle2.setFont(font);
        cellStyle2.setFillForegroundColor(Const.fillForeground_color2);
        cellStyle2.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        CellStyle cellStyle3 = wb.createCellStyle();
        cellStyle3.setFillForegroundColor((short) 13);
        cellStyle3.setBorderBottom(BorderStyle.THIN);
        cellStyle3.setBorderTop(BorderStyle.THIN);
        cellStyle3.setBorderRight(BorderStyle.THIN);
        cellStyle3.setBorderLeft(BorderStyle.THIN);
        cellStyle3.setAlignment(HorizontalAlignment.CENTER);
        cellStyle3.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
        cellStyle3.setWrapText(true);
        cellStyle3.setFont(font);
        cellStyle3.setFillForegroundColor(Const.fillForeground_color3);
        cellStyle3.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        SXSSFSheet sheet = wb.createSheet("E5-分段统计-实力对比");
        sheet.setColumnWidth(0, 4000);
        sheet.setDefaultRowHeight((short) 400);
        SXSSFRow createRow = sheet.createRow(0);
        SXSSFRow createRow2 = sheet.createRow(1);
        createRow.setHeight((short) 550);
        createRow2.setHeight((short) 450);
        Cell titleCell = createRow.createCell(0);
        Cell titleDetailCell = createRow2.createCell(0);
        titleCell.setCellValue("E5-分段统计-实力对比");
        titleDetailCell.setCellValue(rptTitle);
        List len = (List) quest.get(0);
        CellRangeAddress titleRange = new CellRangeAddress(0, 0, 0, len.size() * 2);
        CellRangeAddress detailRange = new CellRangeAddress(1, 1, 0, len.size() * 2);
        sheet.addMergedRegion(titleRange);
        sheet.addMergedRegion(detailRange);
        titleCell.setCellStyle(titleStyle);
        titleDetailCell.setCellStyle(titleDetailStyle);
        setBorderStyle(BorderStyle.THIN, titleRange, sheet);
        setBorderStyle(BorderStyle.THIN, detailRange, sheet);
        SXSSFRow createRow3 = sheet.createRow(2);
        SXSSFRow createRow4 = sheet.createRow(3);
        SXSSFRow createRow5 = sheet.createRow(4);
        createRow3.setHeight((short) 550);
        createRow4.setHeight((short) 450);
        createRow5.setHeight((short) 450);
        for (int i = 0; i < quest.size(); i++) {
            List list1 = (List) quest.get(i);
            SXSSFRow createRow6 = sheet.createRow(5 + i);
            for (int j = 0; j < list1.size(); j++) {
                if (i == 0) {
                    Cell schoolCell0 = createRow3.createCell(0);
                    Cell schoolCell = createRow3.createCell((j * 2) + 1);
                    Cell maxTotalScoreCell = createRow4.createCell(0);
                    Cell maxTotalScoreCell1 = createRow4.createCell((j * 2) + 1);
                    Cell fenshuduanCell1 = createRow5.createCell(i);
                    Cell fenshuduanCell2 = createRow5.createCell((j * 2) + 1);
                    Cell fenshuduanCell3 = createRow5.createCell((j * 2) + 2);
                    schoolCell0.setCellValue("教学单位");
                    schoolCell.setCellValue((String) ((Object[]) list1.get(j))[3]);
                    maxTotalScoreCell.setCellValue("最高分");
                    maxTotalScoreCell1.setCellValue(Double.parseDouble(((Object[]) list1.get(j))[10] + ""));
                    fenshuduanCell1.setCellValue("分数段");
                    fenshuduanCell2.setCellValue("人数");
                    fenshuduanCell3.setCellValue("累计人数");
                    CellRangeAddress schoolRange = new CellRangeAddress(2, 2, (j * 2) + 1, (j * 2) + 2);
                    CellRangeAddress maxTotalscoreRange = new CellRangeAddress(3, 3, (j * 2) + 1, (j * 2) + 2);
                    sheet.addMergedRegion(schoolRange);
                    sheet.addMergedRegion(maxTotalscoreRange);
                    schoolCell0.setCellStyle(biaotoucellStyle);
                    schoolCell.setCellStyle(biaotoucellStyle);
                    maxTotalScoreCell.setCellStyle(biaotoucellStyle);
                    maxTotalScoreCell1.setCellStyle(biaotoucellStyle);
                    fenshuduanCell1.setCellStyle(biaotoucellStyle);
                    fenshuduanCell2.setCellStyle(biaotoucellStyle);
                    fenshuduanCell3.setCellStyle(biaotoucellStyle);
                    setBorderStyle(BorderStyle.THIN, schoolRange, sheet);
                    setBorderStyle(BorderStyle.THIN, maxTotalscoreRange, sheet);
                }
                if (i % 2 != 0) {
                    if (j == 0) {
                        Cell shujuFenshuduanCell = createRow6.createCell(0);
                        shujuFenshuduanCell.setCellValue((String) ((Object[]) list1.get(j))[4]);
                        shujuFenshuduanCell.setCellStyle(cellStyle2);
                    }
                    if (Integer.valueOf(((Object[]) list1.get(j))[7] + "").intValue() == 0) {
                        Cell shujurenshuCell = createRow6.createCell((j * 2) + 1);
                        shujurenshuCell.setCellValue("");
                        shujurenshuCell.setCellStyle(cellStyle2);
                    } else {
                        Cell shujurenshuCell2 = createRow6.createCell((j * 2) + 1);
                        shujurenshuCell2.setCellValue(Integer.valueOf(((Object[]) list1.get(j))[7] + "").intValue());
                        shujurenshuCell2.setCellStyle(cellStyle2);
                    }
                    if (Integer.valueOf(((Object[]) list1.get(j))[9] + "").intValue() == 0) {
                        Cell shujuleijishuCell = createRow6.createCell((j * 2) + 2);
                        shujuleijishuCell.setCellValue("");
                        shujuleijishuCell.setCellStyle(cellStyle2);
                    } else {
                        Cell shujuleijishuCell2 = createRow6.createCell((j * 2) + 2);
                        shujuleijishuCell2.setCellValue(Integer.valueOf(((Object[]) list1.get(j))[9] + "").intValue());
                        shujuleijishuCell2.setCellStyle(cellStyle2);
                    }
                } else {
                    if (j == 0) {
                        Cell shujuFenshuduanCell2 = createRow6.createCell(0);
                        shujuFenshuduanCell2.setCellValue((String) ((Object[]) list1.get(j))[4]);
                        shujuFenshuduanCell2.setCellStyle(cellStyle3);
                    }
                    if (Integer.valueOf(((Object[]) list1.get(j))[7] + "").intValue() == 0) {
                        Cell shujurenshuCell3 = createRow6.createCell((j * 2) + 1);
                        shujurenshuCell3.setCellValue("");
                        shujurenshuCell3.setCellStyle(cellStyle3);
                    } else {
                        Cell shujurenshuCell4 = createRow6.createCell((j * 2) + 1);
                        shujurenshuCell4.setCellValue(Integer.valueOf(((Object[]) list1.get(j))[7] + "").intValue());
                        shujurenshuCell4.setCellStyle(cellStyle3);
                    }
                    if (Integer.valueOf(((Object[]) list1.get(j))[9] + "").intValue() == 0) {
                        Cell shujuleijishuCell3 = createRow6.createCell((j * 2) + 2);
                        shujuleijishuCell3.setCellValue("");
                        shujuleijishuCell3.setCellStyle(cellStyle3);
                    } else {
                        Cell shujuleijishuCell4 = createRow6.createCell((j * 2) + 2);
                        shujuleijishuCell4.setCellValue(Integer.valueOf(((Object[]) list1.get(j))[9] + "").intValue());
                        shujuleijishuCell4.setCellStyle(cellStyle3);
                    }
                }
            }
        }
        FileOutputStream fileout = new FileOutputStream(excelFile);
        wb.write(fileout);
        fileout.flush();
        if (wb != null) {
            wb.close();
            HttpServletResponse response = ServletActionContext.getResponse();
            response.reset();
            ServletOutputStream outputStream = response.getOutputStream();
            if (agent.indexOf("firefox") == -1) {
                loadFileName = URLEncoder.encode("E5-分段统计-实力对比", "UTF-8");
            } else {
                loadFileName = new String("E5-分段统计-实力对比".getBytes("UTF-8"), "ISO8859-1");
            }
            response.setContentType("Content-type: applicationnd.ms-excel");
            response.setHeader("Content-disposition", "attachment;filename=" + loadFileName + ".xlsx");
            response.setHeader("Content-length", String.valueOf(excelFile.length()));
            byte[] tempByte = new byte[1024];
            FileInputStream in = new FileInputStream(excelFile);
            while (true) {
                int n = in.read(tempByte);
                if (n != -1) {
                    try {
                        outputStream.write(tempByte, 0, n);
                    } catch (Exception e) {
                        Log.info("E5导出：", e);
                    }
                } else {
                    outputStream.flush();
                    outputStream.close();
                    in.close();
                    return null;
                }
            }
        } else {
            return null;
        }
    }

    public File getSubChartImgFile_scoreSection(String insertUser, List list, String lType, String dirPath) {
        subjectLineImage_scoreSection(list, lType, insertUser);
        File file = new File(dirPath + File.separator + "tmpLinePng" + File.separator + insertUser + lType + ".png");
        return file;
    }

    public void subjectLineImage_scoreSection(List list, String lType, String insertUser) {
        new ArrayList();
        DecimalFormat df = new DecimalFormat("0.00");
        DecimalFormat unitdf = new DecimalFormat("0.0");
        if (lType.equals("l2duanrate")) {
            int allsize = list.size();
            List classList = new ArrayList();
            if (list != null && allsize > 0) {
                classList = (List) list.get(0);
            }
            int classListsize = classList.size();
            double[][] data = new double[classListsize][list.size()];
            String[] columnKeys1 = new String[list.size()];
            String[] rowKeys1 = new String[classListsize];
            Double.valueOf(0.0d);
            Double.valueOf(0.0d);
            List list_data = new ArrayList();
            for (int i = 0; i < list.size(); i++) {
                List list1 = (List) list.get(i);
                for (int k = 0; k < list1.size(); k++) {
                    if (i == 0) {
                        for (int a = 0; a < list.size(); a++) {
                            List listdata = (List) list.get(a);
                            String bb = String.valueOf(((Object[]) listdata.get(k))[7]);
                            String cc = String.valueOf(((Object[]) listdata.get(k))[8]);
                            double dd = 0.0d;
                            if (null != ((Object[]) listdata.get(k))[8] && !((Object[]) listdata.get(k))[8].equals("0")) {
                                dd = Double.parseDouble(bb) / Double.parseDouble(cc);
                            }
                            data[k][a] = Double.parseDouble(df.format(dd));
                            list_data.add(Double.valueOf(Double.parseDouble(df.format(dd))));
                        }
                        rowKeys1[k] = String.valueOf(((Object[]) list1.get(k))[3]);
                    }
                    if (k == 0) {
                        columnKeys1[i] = String.valueOf(((Object[]) list1.get(k))[4]);
                    }
                }
            }
            Double maxDesc = (Double) Collections.max(list_data);
            Double minDesc = (Double) Collections.min(list_data);
            Double count_unit = Double.valueOf(Double.parseDouble(unitdf.format((maxDesc.doubleValue() - minDesc.doubleValue()) / 5.0d)));
            HttpServletResponse response = ServletActionContext.getResponse();
            response.reset();
            response.setContentType("image/jpeg");
            JFreeChart chart = this.lc.getLineChar(data, rowKeys1, columnKeys1, "分数段", "", "分段频率分布对比图", "#0.0", count_unit, Integer.valueOf(rowKeys1.length), "Y", "##.##");
            getChartImageFolder(chart, "tmpLinePng", Const.width_1100, Const.height_400, insertUser + lType);
        }
        if (lType.equals("12leirate")) {
            int allsize2 = list.size();
            List classList2 = new ArrayList();
            if (list != null && allsize2 > 0) {
                classList2 = (List) list.get(0);
            }
            int classListsize2 = classList2.size();
            double[][] data2 = new double[classListsize2][list.size()];
            String[] columnKeys12 = new String[list.size()];
            String[] rowKeys12 = new String[classListsize2];
            Double.valueOf(0.0d);
            Double.valueOf(0.0d);
            List list_data2 = new ArrayList();
            for (int i2 = 0; i2 < list.size(); i2++) {
                List list12 = (List) list.get(i2);
                for (int k2 = 0; k2 < list12.size(); k2++) {
                    if (i2 == 0) {
                        for (int a2 = 0; a2 < list.size(); a2++) {
                            List listdata2 = (List) list.get(a2);
                            String bb2 = String.valueOf(((Object[]) listdata2.get(k2))[9]);
                            String cc2 = String.valueOf(((Object[]) listdata2.get(k2))[8]);
                            double dd2 = 0.0d;
                            if (null != ((Object[]) listdata2.get(k2))[8] && !((Object[]) listdata2.get(k2))[8].equals("0")) {
                                dd2 = Double.parseDouble(bb2) / Double.parseDouble(cc2);
                            }
                            data2[k2][a2] = Double.parseDouble(df.format(dd2));
                            list_data2.add(Double.valueOf(Double.parseDouble(df.format(dd2))));
                        }
                        rowKeys12[k2] = String.valueOf(((Object[]) list12.get(k2))[3]);
                    }
                    if (k2 == 0) {
                        columnKeys12[i2] = String.valueOf(((Object[]) list12.get(k2))[4]);
                    }
                }
            }
            Double maxDesc2 = (Double) Collections.max(list_data2);
            Double minDesc2 = (Double) Collections.min(list_data2);
            Double count_unit2 = Double.valueOf(Double.parseDouble(unitdf.format((maxDesc2.doubleValue() - minDesc2.doubleValue()) / 5.0d)));
            HttpServletResponse response2 = ServletActionContext.getResponse();
            response2.reset();
            response2.setContentType("image/jpeg");
            JFreeChart chart2 = this.lc.getLineChar(data2, rowKeys12, columnKeys12, "分数段", "", "分段累计频率分布对比图", "#0.0", count_unit2, Integer.valueOf(rowKeys12.length), "Y", "##.##");
            getChartImageFolder(chart2, "tmpLinePng", Const.width_1100, Const.height_400, insertUser + lType);
        }
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String examScoreVeiw_exportgetData(String teachUnit_s, String examNum, String gradeNum, String teachUnit, String subjectNum, String classNum, String studentId, String studentType, String type, String source, String step, String sNum, String c_exam, String rpt_name, String isMoreSchool, String rptTitle, String isHistory, String isSaveWrite, String dirPath, String uri, String userNum, String schName, String gradeName, String className, String subjectName, String imgRoot, String agent, String fufen, String subCompose) {
        String rptTitle2 = this.sp.getHeaderStr(examNum, subjectNum, gradeNum, teachUnit, classNum, studentId, studentType, true, true, true, true, false, true, true, true, false, true, true, true, true, true, false, subCompose, fufen);
        List quest = this.reportService.getExamScoreView(teachUnit_s, examNum, gradeNum, teachUnit, subjectNum, classNum, studentType, type, source, "0", fufen, subCompose);
        String folderPath = "ExportFolder/reportExcel" + userNum;
        String str = "reportExcel" + userNum;
        String str2 = "reportExcel" + userNum;
        String excelName = (null == gradeName || "".equals(gradeName)) ? rpt_name + "_" + gradeNum : rpt_name + "_" + gradeName;
        if (null != classNum && !"".equals(classNum) && !classNum.contains(Const.STRING_SEPERATOR)) {
            excelName = (null == className || "".equals(className)) ? excelName + "_" + classNum : excelName + "_" + className;
        }
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        String fufenStr = "1".equals(fufen) ? "赋分" : "原始分";
        try {
            WritableWorkbook wwBook = Workbook.createWorkbook(excelFile);
            WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
            biaotis1.setAlignment(Alignment.LEFT);
            biaotis1.setVerticalAlignment(VerticalAlignment.CENTRE);
            WritableFont titles = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat title = new WritableCellFormat(titles);
            title.setAlignment(Alignment.LEFT);
            title.setVerticalAlignment(VerticalAlignment.CENTRE);
            title.setWrap(true);
            WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            WritableCellFormat cFormat1 = new WritableCellFormat(font1);
            cFormat1.setAlignment(Alignment.CENTRE);
            cFormat1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1.setBackground(Const.titleBackground_color);
            cFormat1.setWrap(true);
            WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat2 = new WritableCellFormat(font2);
            cFormat2.setAlignment(Alignment.CENTRE);
            cFormat2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2.setBackground(Const.textOuBackGround_color);
            cFormat2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2.setWrap(true);
            NumberFormat nf1 = new NumberFormat("0.0");
            WritableCellFormat cFormat2_1 = new WritableCellFormat(font2, nf1);
            cFormat2_1.setAlignment(Alignment.CENTRE);
            cFormat2_1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_1.setBackground(Const.textOuBackGround_color);
            cFormat2_1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_1.setWrap(true);
            WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat3 = new WritableCellFormat(font3);
            cFormat3.setAlignment(Alignment.CENTRE);
            cFormat3.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3.setBackground(Const.textJiBackGround_color);
            cFormat3.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3.setWrap(true);
            WritableCellFormat cFormat3_1 = new WritableCellFormat(font3, nf1);
            cFormat3_1.setAlignment(Alignment.CENTRE);
            cFormat3_1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_1.setBackground(Const.textJiBackGround_color);
            cFormat3_1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_1.setWrap(true);
            try {
                try {
                    WritableSheet sheet = wwBook.createSheet(rpt_name, 0);
                    sheet.getSettings().setShowGridLines(false);
                    try {
                        Label biaotou = new Label(0, 0, rpt_name, biaotis1);
                        sheet.addCell(biaotou);
                        DecimalFormat df01 = new DecimalFormat("0.0");
                        df01.setRoundingMode(RoundingMode.HALF_UP);
                        Label xinxi = new Label(0, 1, rptTitle2, title);
                        sheet.addCell(xinxi);
                        sheet.setRowView(1, Const.height_500);
                        sheet.mergeCells(0, 0, 7, 0);
                        sheet.mergeCells(0, 1, 7, 1);
                        if ("01".equals(teachUnit_s)) {
                            Label banming = new Label(0, 2, "班级名称", cFormat1);
                            sheet.addCell(banming);
                        } else {
                            Label banming2 = new Label(0, 2, "类层名称", cFormat1);
                            sheet.addCell(banming2);
                        }
                        sheet.mergeCells(0, 2, 0, 3);
                        sheet.setColumnView(0, 12);
                        Label banren = new Label(1, 2, "班主任", cFormat1);
                        sheet.addCell(banren);
                        sheet.mergeCells(1, 2, 1, 3);
                        Label xueke = new Label(2, 2, "学科教师", cFormat1);
                        sheet.addCell(xueke);
                        sheet.mergeCells(2, 2, 2, 3);
                        sheet.setColumnView(2, 12);
                        Label yuanshi = new Label(3, 2, fufenStr + "(平均分)", cFormat1);
                        sheet.addCell(yuanshi);
                        sheet.mergeCells(3, 2, 4, 2);
                        Label biaozhun = new Label(5, 2, "标准分(平均分)", cFormat1);
                        sheet.addCell(biaozhun);
                        sheet.mergeCells(5, 2, 6, 2);
                        Label gongxian = new Label(7, 2, "贡献指数", cFormat1);
                        sheet.addCell(gongxian);
                        sheet.mergeCells(7, 2, 7, 3);
                        sheet.setColumnView(7, 12);
                        Label zongfen = new Label(3, 3, "总分", cFormat1);
                        sheet.addCell(zongfen);
                        Label xueke1 = new Label(4, 3, "学科", cFormat1);
                        sheet.addCell(xueke1);
                        Label zongfen1 = new Label(5, 3, "总分", cFormat1);
                        sheet.addCell(zongfen1);
                        Label xueke2 = new Label(6, 3, "学科", cFormat1);
                        sheet.addCell(xueke2);
                        for (int i = 0; i < quest.size(); i++) {
                            if (i % 2 != 0) {
                                Label a1 = new Label(0, 4 + i, (String) ((Object[]) quest.get(i))[2], cFormat2);
                                sheet.addCell(a1);
                                Label a2 = new Label(1, 4 + i, (String) ((Object[]) quest.get(i))[4], cFormat2);
                                sheet.addCell(a2);
                                Label a3 = new Label(2, 4 + i, (String) ((Object[]) quest.get(i))[3], cFormat2);
                                sheet.addCell(a3);
                                Object a4_val = ((Object[]) quest.get(i))[5];
                                Double a4_val_D = Double.valueOf(df01.format(a4_val));
                                Number a4 = new Number(3, 4 + i, a4_val_D.doubleValue(), cFormat2_1);
                                sheet.addCell(a4);
                                Object a5_val = ((Object[]) quest.get(i))[6];
                                Double a5_val_D = Double.valueOf(df01.format(a5_val));
                                Number a5 = new Number(4, 4 + i, a5_val_D.doubleValue(), cFormat2_1);
                                sheet.addCell(a5);
                                Double a6_val = Double.valueOf(((Object[]) quest.get(i))[9].toString());
                                Double a6_val_D = Double.valueOf(df01.format(a6_val));
                                Double a7_val = Double.valueOf(((Object[]) quest.get(i))[10].toString());
                                Double a7_val_D = Double.valueOf(df01.format(a7_val));
                                String num = ((Object[]) quest.get(i))[0] + "";
                                if (num.equals("8")) {
                                    Label a6 = new Label(5, 4 + i, "-", cFormat2);
                                    sheet.addCell(a6);
                                    Label a7 = new Label(6, 4 + i, "-", cFormat2);
                                    sheet.addCell(a7);
                                } else {
                                    Number a62 = new Number(5, 4 + i, a6_val_D.doubleValue(), cFormat2_1);
                                    sheet.addCell(a62);
                                    Number a72 = new Number(6, 4 + i, a7_val_D.doubleValue(), cFormat2_1);
                                    sheet.addCell(a72);
                                }
                                if (num.equals("8")) {
                                    Label a8 = new Label(7, 4 + i, "-", cFormat2);
                                    sheet.addCell(a8);
                                } else if (a6_val_D.doubleValue() == 0.0d) {
                                    Number a82 = new Number(7, 4 + i, 0.0d, cFormat2);
                                    sheet.addCell(a82);
                                } else {
                                    Double cc = Double.valueOf(df01.format((a7_val.doubleValue() / a6_val.doubleValue()) * 100.0d));
                                    Number a83 = new Number(7, 4 + i, cc.doubleValue(), cFormat2_1);
                                    sheet.addCell(a83);
                                }
                            } else {
                                Label a12 = new Label(0, 4 + i, (String) ((Object[]) quest.get(i))[2], cFormat3);
                                sheet.addCell(a12);
                                Label a22 = new Label(1, 4 + i, (String) ((Object[]) quest.get(i))[4], cFormat3);
                                sheet.addCell(a22);
                                Label a32 = new Label(2, 4 + i, (String) ((Object[]) quest.get(i))[3], cFormat3);
                                sheet.addCell(a32);
                                Object a4_val2 = ((Object[]) quest.get(i))[5];
                                Double a4_val_D2 = Double.valueOf(df01.format(a4_val2));
                                Number a42 = new Number(3, 4 + i, a4_val_D2.doubleValue(), cFormat3_1);
                                sheet.addCell(a42);
                                Object a5_val2 = ((Object[]) quest.get(i))[6];
                                Double a5_val_D2 = Double.valueOf(df01.format(a5_val2));
                                Number a52 = new Number(4, 4 + i, a5_val_D2.doubleValue(), cFormat3_1);
                                sheet.addCell(a52);
                                Double a6_val2 = Double.valueOf(((Object[]) quest.get(i))[9].toString());
                                Double a6_val_D2 = Double.valueOf(df01.format(a6_val2));
                                Double a7_val2 = Double.valueOf(((Object[]) quest.get(i))[10].toString());
                                Double a7_val_D2 = Double.valueOf(df01.format(a7_val2));
                                String num2 = ((Object[]) quest.get(i))[0] + "";
                                if (num2.equals("8")) {
                                    Label a63 = new Label(5, 4 + i, "-", cFormat3);
                                    sheet.addCell(a63);
                                    Label a73 = new Label(6, 4 + i, "-", cFormat3);
                                    sheet.addCell(a73);
                                } else {
                                    Number a64 = new Number(5, 4 + i, a6_val_D2.doubleValue(), cFormat3_1);
                                    sheet.addCell(a64);
                                    Number a74 = new Number(6, 4 + i, a7_val_D2.doubleValue(), cFormat3_1);
                                    sheet.addCell(a74);
                                }
                                if (num2.equals("8")) {
                                    Label a84 = new Label(7, 4 + i, "-", cFormat3);
                                    sheet.addCell(a84);
                                } else if (a6_val_D2.doubleValue() == 0.0d) {
                                    Number a85 = new Number(7, 4 + i, 0.0d, cFormat3);
                                    sheet.addCell(a85);
                                } else {
                                    Double cc2 = Double.valueOf(df01.format((a7_val2.doubleValue() / a6_val2.doubleValue()) * 100.0d));
                                    Number a86 = new Number(7, 4 + i, cc2.doubleValue(), cFormat3_1);
                                    sheet.addCell(a86);
                                }
                            }
                        }
                        Label tishi = new Label(0, quest.size() + 4, "班级学科贡献指数(平均分)=班级学科标准分(平均分)/班级总分标准分(平均分)*100;", title);
                        sheet.addCell(tishi);
                        Label tishi2 = new Label(0, quest.size() + 5, "班级学科贡献指数(平均分)用来衡量班级学科对班级总分的贡献程度,指数越大,贡献越大,临界值为100;", title);
                        sheet.addCell(tishi2);
                        sheet.mergeCells(0, quest.size() + 4, 7, quest.size() + 4);
                        sheet.mergeCells(0, quest.size() + 5, 7, quest.size() + 5);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    wwBook.write();
                    if (wwBook != null) {
                        try {
                            wwBook.close();
                            if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                                HttpServletResponse response = ServletActionContext.getResponse();
                                response.reset();
                                ServletOutputStream outputStream = response.getOutputStream();
                                String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                String loadFileName2 = loadFileName.replace("+", " ");
                                response.setContentType("Content-type: applicationnd.ms-excel");
                                response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xls");
                                response.setHeader("Content-length", String.valueOf(excelFile.length()));
                                byte[] tempByte = new byte[1024];
                                FileInputStream in = new FileInputStream(excelFile);
                                while (true) {
                                    int n = in.read(tempByte);
                                    if (n == -1) {
                                        break;
                                    }
                                    try {
                                        outputStream.write(tempByte, 0, n);
                                    } catch (Exception e2) {
                                        this.log.error("保存未成功", e2);
                                    }
                                }
                                outputStream.flush();
                                outputStream.close();
                                in.close();
                            }
                        } catch (WriteException e3) {
                            e3.printStackTrace();
                        }
                    }
                } catch (Exception e4) {
                    if (wwBook != null) {
                        try {
                            wwBook.close();
                            if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                                HttpServletResponse response2 = ServletActionContext.getResponse();
                                response2.reset();
                                ServletOutputStream outputStream2 = response2.getOutputStream();
                                String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                String loadFileName4 = loadFileName3.replace("+", " ");
                                response2.setContentType("Content-type: applicationnd.ms-excel");
                                response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xls");
                                response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                                byte[] tempByte2 = new byte[1024];
                                FileInputStream in2 = new FileInputStream(excelFile);
                                while (true) {
                                    int n2 = in2.read(tempByte2);
                                    if (n2 == -1) {
                                        break;
                                    }
                                    try {
                                        outputStream2.write(tempByte2, 0, n2);
                                    } catch (Exception e5) {
                                        this.log.error("保存未成功", e5);
                                    }
                                }
                                outputStream2.flush();
                                outputStream2.close();
                                in2.close();
                            }
                        } catch (WriteException e6) {
                            e6.printStackTrace();
                        }
                    }
                }
            } catch (Throwable th) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response3 = ServletActionContext.getResponse();
                            response3.reset();
                            ServletOutputStream outputStream3 = response3.getOutputStream();
                            String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName6 = loadFileName5.replace("+", " ");
                            response3.setContentType("Content-type: applicationnd.ms-excel");
                            response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xls");
                            response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte3 = new byte[1024];
                            FileInputStream in3 = new FileInputStream(excelFile);
                            while (true) {
                                int n3 = in3.read(tempByte3);
                                if (n3 == -1) {
                                    break;
                                }
                                try {
                                    outputStream3.write(tempByte3, 0, n3);
                                } catch (Exception e7) {
                                    this.log.error("保存未成功", e7);
                                }
                            }
                            outputStream3.flush();
                            outputStream3.close();
                            in3.close();
                        }
                    } catch (WriteException e8) {
                        e8.printStackTrace();
                        throw th;
                    }
                }
                throw th;
            }
        } catch (Exception e9) {
            e9.printStackTrace();
        }
        return null;
    }

    public File getSubChartImgFile_examScoreVeiw(String teachUnit_s, String insertUser, List list, String lType, String dirPath) {
        subjectLineImage_examScoreVeiw(teachUnit_s, list, lType, insertUser);
        File file = new File(dirPath + File.separator + "tmpLinePng" + File.separator + insertUser + lType + ".png");
        return file;
    }

    public void subjectLineImage_examScoreVeiw(String teachUnit_s, List list, String lType, String insertUser) {
        Double value;
        new ArrayList();
        DecimalFormat df = new DecimalFormat("0.0");
        double[][] data = new double[1][list.size()];
        String xvalue = "类层";
        if ("01".equals(teachUnit_s)) {
            xvalue = "班级";
        }
        if (lType.equals("l3xueke1")) {
            String[] columnKeys1 = new String[list.size()];
            String[] rowKeys1 = {"学科平均分"};
            Double.valueOf(0.0d);
            Double.valueOf(0.0d);
            List list_data = new ArrayList();
            for (int i = 0; i < list.size(); i++) {
                columnKeys1[i] = (String) ((Object[]) list.get(i))[2];
                data[0][i] = Double.parseDouble(df.format(Double.parseDouble(((Object[]) list.get(i))[6] + "")));
                list_data.add(Double.valueOf(Double.parseDouble(df.format(Double.parseDouble(((Object[]) list.get(i))[6] + "")))));
            }
            Double maxDesc = (Double) Collections.max(list_data);
            Double minDesc = (Double) Collections.min(list_data);
            Double count_unit = Double.valueOf((maxDesc.doubleValue() - minDesc.doubleValue()) / 5.0d);
            int height = (int) (0.45d * Const.width);
            HttpServletResponse response = ServletActionContext.getResponse();
            response.reset();
            response.setContentType("image/jpeg");
            JFreeChart chart = this.lc.getLineChar(data, rowKeys1, columnKeys1, xvalue, "", "学科平均分对比图", "#.00", count_unit, Integer.valueOf(rowKeys1.length), "Y", "##.#");
            getChartImageFolder(chart, "tmpLinePng", Const.width, height, insertUser + lType);
            return;
        }
        int className_count = 0;
        for (int x = 0; x < list.size(); x++) {
            String num = ((Object[]) list.get(x))[0] + "";
            if (!num.equals("8")) {
                className_count++;
            }
        }
        double[][] data1 = new double[2][className_count];
        String[] columnKeys12 = new String[className_count];
        String[] rowKeys12 = {"参照数", "学科贡献指数"};
        Double.valueOf(0.0d);
        Double.valueOf(0.0d);
        List list_data2 = new ArrayList();
        for (int i2 = 0; i2 < list.size(); i2++) {
            Double.valueOf(0.0d);
            String num2 = ((Object[]) list.get(i2))[0] + "";
            if (!num2.equals("8")) {
                columnKeys12[i2] = (String) ((Object[]) list.get(i2))[2];
                String a4_val = ((Object[]) list.get(i2))[5] + "";
                Double a4_val_D = Double.valueOf(a4_val);
                Double a4_val_D2 = Double.valueOf(df.format(a4_val_D));
                String a6_val = ((Object[]) list.get(i2))[9] + "";
                Double a6_val_D = Double.valueOf(a6_val);
                Double a6_val_D_d = Double.valueOf(df.format(a6_val_D));
                String a7_val = ((Object[]) list.get(i2))[10] + "";
                Double a7_val_D = Double.valueOf(a7_val);
                Double.valueOf(df.format(a7_val_D));
                if (a4_val_D2.doubleValue() == 0.0d || a6_val_D_d.doubleValue() == 0.0d) {
                    value = Double.valueOf(0.0d);
                } else {
                    Double va = Double.valueOf(a7_val_D.doubleValue() / a6_val_D.doubleValue());
                    value = Double.valueOf(va.doubleValue() * 100.0d);
                }
                data1[0][i2] = 100.0d;
                data1[1][i2] = value.doubleValue();
                list_data2.add(Double.valueOf(100.0d));
                list_data2.add(value);
            }
        }
        Double maxDesc2 = (Double) Collections.max(list_data2);
        Double minDesc2 = (Double) Collections.min(list_data2);
        Double count_unit2 = Double.valueOf((maxDesc2.doubleValue() - minDesc2.doubleValue()) / 5.0d);
        int height2 = (int) (0.45d * Const.width);
        HttpServletResponse response2 = ServletActionContext.getResponse();
        response2.reset();
        response2.setContentType("image/jpeg");
        JFreeChart chart2 = this.lc.getLineChar(data1, rowKeys12, columnKeys12, xvalue, "", "学科贡献指数(平均分)对比图", "#.00", count_unit2, Integer.valueOf(rowKeys12.length), "Y", "##.#");
        getChartImageFolder(chart2, "tmpLinePng", Const.width, height2, insertUser + lType);
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String allSubjectAvgVeiw_exportgetData(String areaval, String examNum, String gradeNum, String schoolNum, String subjectNum, String classNum, String studentId, String studentType, String type, String source, String step, String sNum, String c_exam, String rpt_name, String isMoreSchool, String rptTitle, String isHistory, String isSaveWrite, String dirPath, String uri, String userNum, String schName, String gradeName, String className, String subjectName, String imgRoot, String agent, String fufen, String subCompose, String teachUnit, String teachUnit_s) {
        String rptTitle2 = this.sp.getHeaderStr(examNum, subjectNum, gradeNum, schoolNum, classNum, studentId, studentType, true, true, false, false, false, true, false, true, false, false, false, true, true, true, false, subCompose, fufen);
        List list = this.reportService.getAllSubAvgView(areaval, examNum, gradeNum, schoolNum, classNum, studentType, type, source, "0", fufen, subCompose, teachUnit, teachUnit_s);
        String folderPath = "ExportFolder/reportExcel" + userNum;
        String str = "reportExcel" + userNum;
        String str2 = "reportExcel" + userNum;
        String excelName = (null == gradeName || "".equals(gradeName)) ? rpt_name + "_" + gradeNum : rpt_name + "_" + gradeName;
        if (null != classNum && !"".equals(classNum) && !classNum.contains(Const.STRING_SEPERATOR)) {
            excelName = (null == className || "".equals(className)) ? excelName + "_" + classNum : excelName + "_" + className;
        }
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        try {
            WritableWorkbook wwBook = Workbook.createWorkbook(excelFile);
            WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
            biaotis1.setAlignment(Alignment.LEFT);
            biaotis1.setVerticalAlignment(VerticalAlignment.CENTRE);
            WritableFont titles = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat title = new WritableCellFormat(titles);
            title.setAlignment(Alignment.LEFT);
            title.setVerticalAlignment(VerticalAlignment.CENTRE);
            title.setWrap(true);
            WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            WritableCellFormat cFormat1 = new WritableCellFormat(font1);
            cFormat1.setAlignment(Alignment.CENTRE);
            cFormat1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1.setBackground(Const.titleBackground_color);
            cFormat1.setWrap(true);
            WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat2 = new WritableCellFormat(font2);
            cFormat2.setAlignment(Alignment.CENTRE);
            cFormat2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2.setBackground(Const.textOuBackGround_color);
            cFormat2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2.setWrap(true);
            WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat3 = new WritableCellFormat(font3);
            cFormat3.setAlignment(Alignment.CENTRE);
            cFormat3.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3.setBackground(Const.textJiBackGround_color);
            cFormat3.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3.setWrap(true);
            try {
                WritableSheet sheet = wwBook.createSheet(rpt_name, 0);
                sheet.getSettings().setShowGridLines(false);
                try {
                    List subjectList = (List) list.get(0);
                    List quest = (List) list.get(1);
                    Label biaotou = new Label(0, 0, rpt_name, biaotis1);
                    sheet.addCell(biaotou);
                    new DecimalFormat("0");
                    new DecimalFormat("0.0");
                    DecimalFormat df2 = new DecimalFormat("0.00");
                    Label xinxi = new Label(0, 1, rptTitle2, title);
                    sheet.addCell(xinxi);
                    sheet.setRowView(1, Const.height_500);
                    sheet.mergeCells(0, 0, (subjectList.size() * 2) + 1, 0);
                    sheet.mergeCells(0, 1, (subjectList.size() * 2) + 1, 1);
                    Label banji = new Label(0, 2, "教学单位", cFormat1);
                    sheet.addCell(banji);
                    sheet.mergeCells(0, 2, 0, 3);
                    Label banren = new Label(1, 2, "负责人", cFormat1);
                    sheet.addCell(banren);
                    sheet.mergeCells(1, 2, 1, 3);
                    Label bianyiXishu = new Label(2 + (subjectList.size() * 2), 2, "变异系数（%）", cFormat1);
                    sheet.addCell(bianyiXishu);
                    sheet.mergeCells(2 + (subjectList.size() * 2), 2, 2 + (subjectList.size() * 2), 3);
                    String subStr2 = "";
                    for (int i = 0; i < quest.size(); i++) {
                        String claNum = ((Object[]) ((List) quest.get(i)).get(0))[0] + "";
                        if (i % 2 == 0) {
                            int count = 0;
                            Label classNameLabel = new Label(0, 4 + i, ((Object[]) ((List) quest.get(i)).get(0))[3] + "", cFormat2);
                            sheet.addCell(classNameLabel);
                            Label banren_value = new Label(1, 4 + i, ((Object[]) ((List) quest.get(i)).get(0))[4] + "", cFormat2);
                            sheet.addCell(banren_value);
                            Object byxs = ((Object[]) ((List) quest.get(i)).get(0))[12];
                            String byxs_val = null == byxs ? "-" : df2.format(byxs);
                            if (byxs_val.equals("-")) {
                                Label bianyiXishu_value = new Label(2 + (subjectList.size() * 2), 4 + i, byxs_val, cFormat2);
                                sheet.addCell(bianyiXishu_value);
                            } else {
                                Number bianyiXishu_value2 = new Number(2 + (subjectList.size() * 2), 4 + i, Double.valueOf(byxs_val).doubleValue(), cFormat2);
                                sheet.addCell(bianyiXishu_value2);
                            }
                            for (int j = 0; j < subjectList.size(); j++) {
                                int subjectList_num = ((Subject) subjectList.get(j)).getSubjectNum();
                                String subjectList_name = ((Subject) subjectList.get(j)).getSubjectName();
                                if (subStr2.indexOf(subjectList_num + subjectList_name) == -1) {
                                    Label subjectNameLabel = new Label(2 + (2 * j), 2, ((Subject) subjectList.get(j)).getSubjectName(), cFormat1);
                                    sheet.addCell(subjectNameLabel);
                                    sheet.mergeCells(2 + (2 * j), 2, 3 + (2 * j), 2);
                                    Label avg = new Label(2 + (2 * j), 3, "平均分", cFormat1);
                                    sheet.addCell(avg);
                                    Label biaozhun = new Label(3 + (2 * j), 3, "标准分T", cFormat1);
                                    sheet.addCell(biaozhun);
                                    subStr2 = subStr2 + subjectList_num + subjectList_name + Const.STRING_SEPERATOR;
                                }
                                int t = 0;
                                String claName = ((Object[]) ((List) quest.get(i)).get(0))[3] + "";
                                String claP = ((Object[]) ((List) quest.get(i)).get(0))[4] + "";
                                String str3 = ((Object[]) ((List) quest.get(i)).get(0))[5] + "";
                                String subName = ((Object[]) ((List) quest.get(i)).get(0))[6] + "";
                                String subjectNames = ((Subject) subjectList.get(j)).getSubjectName();
                                String str4 = ((Object[]) ((List) quest.get(i)).get(0))[5] + "";
                                ((Subject) subjectList.get(j)).getSubjectName();
                                List li = (List) quest.get(i);
                                for (int d = 0; d < li.size(); d++) {
                                    String quest_claP = ((Object[]) li.get(d))[4] + "";
                                    String quest_name = ((Object[]) li.get(d))[6] + "";
                                    if ((claP + subjectNames).equals(quest_claP + quest_name)) {
                                        t = 1;
                                    }
                                }
                                if (t == 1) {
                                    for (int d2 = 0; d2 < li.size(); d2++) {
                                        String quest_claName = ((Object[]) li.get(d2))[3] + "";
                                        String quest_claP2 = ((Object[]) li.get(d2))[4] + "";
                                        String str5 = ((Object[]) li.get(d2))[5] + "";
                                        String quest_name2 = ((Object[]) li.get(d2))[6] + "";
                                        if ((claName + claP).equals(quest_claName + quest_claP2) && subName.equals(quest_name2)) {
                                            String pingjunfen_val = ((Object[]) li.get(count))[7] + "";
                                            if (pingjunfen_val.equals("-")) {
                                                Label pingjunfen = new Label(2 + (2 * j), 4 + i, pingjunfen_val, cFormat2);
                                                sheet.addCell(pingjunfen);
                                            } else {
                                                Double pingjunfen_val_D = Double.valueOf(pingjunfen_val);
                                                Number pingjunfen2 = new Number(2 + (2 * j), 4 + i, pingjunfen_val_D.doubleValue(), cFormat2);
                                                sheet.addCell(pingjunfen2);
                                            }
                                            if (claNum.equals("8")) {
                                                Double.valueOf(50.0d);
                                                Label biao = new Label(3 + (2 * j), 4 + i, "-", cFormat2);
                                                sheet.addCell(biao);
                                            } else {
                                                String biao_val = ((Object[]) li.get(count))[8] + "";
                                                if (biao_val.equals("-")) {
                                                    Label biao2 = new Label(3 + (2 * j), 4 + i, biao_val, cFormat2);
                                                    sheet.addCell(biao2);
                                                } else {
                                                    Double biao_val_D = Double.valueOf(biao_val);
                                                    Number biao3 = new Number(3 + (2 * j), 4 + i, biao_val_D.doubleValue(), cFormat2);
                                                    sheet.addCell(biao3);
                                                }
                                            }
                                            count++;
                                        }
                                    }
                                } else {
                                    Label pingjunfen3 = new Label(2 + (2 * j), 4 + i, "--", cFormat2);
                                    sheet.addCell(pingjunfen3);
                                    Label biao4 = new Label(3 + (2 * j), 4 + i, "--", cFormat2);
                                    sheet.addCell(biao4);
                                }
                            }
                        } else {
                            int count2 = 0;
                            Label classNameLabel2 = new Label(0, 4 + i, ((Object[]) ((List) quest.get(i)).get(0))[3] + "", cFormat3);
                            sheet.addCell(classNameLabel2);
                            Label banren_value2 = new Label(1, 4 + i, ((Object[]) ((List) quest.get(i)).get(0))[4] + "", cFormat3);
                            sheet.addCell(banren_value2);
                            Object byxs2 = ((Object[]) ((List) quest.get(i)).get(0))[12];
                            String byxs_val2 = null == byxs2 ? "-" : df2.format(byxs2);
                            if (byxs_val2.equals("-")) {
                                Label bianyiXishu_value3 = new Label(2 + (subjectList.size() * 2), 4 + i, byxs_val2, cFormat3);
                                sheet.addCell(bianyiXishu_value3);
                            } else {
                                Number bianyiXishu_value4 = new Number(2 + (subjectList.size() * 2), 4 + i, Double.valueOf(byxs_val2).doubleValue(), cFormat3);
                                sheet.addCell(bianyiXishu_value4);
                            }
                            for (int j2 = 0; j2 < subjectList.size(); j2++) {
                                int subjectList_num2 = ((Subject) subjectList.get(j2)).getSubjectNum();
                                String subjectList_name2 = ((Subject) subjectList.get(j2)).getSubjectName();
                                if (subStr2.indexOf(subjectList_num2 + subjectList_name2) == -1) {
                                    Label subjectNameLabel2 = new Label(2 + (2 * j2), 2, ((Subject) subjectList.get(j2)).getSubjectName(), cFormat1);
                                    sheet.addCell(subjectNameLabel2);
                                    sheet.mergeCells(2 + (2 * j2), 2, 3 + (2 * j2), 2);
                                    Label avg2 = new Label(2 + (2 * j2), 3, "平均分", cFormat1);
                                    sheet.addCell(avg2);
                                    Label biaozhun2 = new Label(3 + (2 * j2), 3, "标准分T", cFormat1);
                                    sheet.addCell(biaozhun2);
                                    subStr2 = subStr2 + subjectList_num2 + subjectList_name2 + Const.STRING_SEPERATOR;
                                }
                                int t2 = 0;
                                String claName2 = ((Object[]) ((List) quest.get(i)).get(0))[3] + "";
                                String claP2 = ((Object[]) ((List) quest.get(i)).get(0))[4] + "";
                                String str6 = ((Object[]) ((List) quest.get(i)).get(0))[5] + "";
                                String subName2 = ((Object[]) ((List) quest.get(i)).get(0))[6] + "";
                                String subjectNames2 = ((Subject) subjectList.get(j2)).getSubjectName();
                                String str7 = ((Object[]) ((List) quest.get(i)).get(0))[5] + "";
                                ((Subject) subjectList.get(j2)).getSubjectName();
                                List li2 = (List) quest.get(i);
                                for (int d3 = 0; d3 < li2.size(); d3++) {
                                    String quest_claP3 = ((Object[]) li2.get(d3))[4] + "";
                                    String quest_name3 = ((Object[]) li2.get(d3))[6] + "";
                                    if ((claP2 + subjectNames2).equals(quest_claP3 + quest_name3)) {
                                        t2 = 1;
                                    }
                                }
                                if (t2 == 1) {
                                    for (int d22 = 0; d22 < li2.size(); d22++) {
                                        String quest_claName2 = ((Object[]) li2.get(d22))[3] + "";
                                        String quest_claP4 = ((Object[]) li2.get(d22))[4] + "";
                                        String str8 = ((Object[]) li2.get(d22))[5] + "";
                                        String quest_name4 = ((Object[]) li2.get(d22))[6] + "";
                                        if ((claName2 + claP2).equals(quest_claName2 + quest_claP4) && subName2.equals(quest_name4)) {
                                            String pingjunfen_val2 = ((Object[]) li2.get(count2))[7] + "";
                                            if (pingjunfen_val2.equals("-")) {
                                                Label pingjunfen4 = new Label(2 + (2 * j2), 4 + i, pingjunfen_val2, cFormat3);
                                                sheet.addCell(pingjunfen4);
                                            } else {
                                                Double pingjunfen_val_D2 = Double.valueOf(pingjunfen_val2);
                                                Number pingjunfen5 = new Number(2 + (2 * j2), 4 + i, pingjunfen_val_D2.doubleValue(), cFormat3);
                                                sheet.addCell(pingjunfen5);
                                            }
                                            if (claNum.equals("8")) {
                                                Double.valueOf(50.0d);
                                                Label biao5 = new Label(3 + (2 * j2), 4 + i, "-", cFormat3);
                                                sheet.addCell(biao5);
                                            } else {
                                                String biao_val2 = ((Object[]) li2.get(count2))[8] + "";
                                                if (biao_val2.equals("-")) {
                                                    Label biao6 = new Label(3 + (2 * j2), 4 + i, biao_val2, cFormat3);
                                                    sheet.addCell(biao6);
                                                } else {
                                                    Double biao_val_D2 = Double.valueOf(biao_val2);
                                                    Number biao7 = new Number(3 + (2 * j2), 4 + i, biao_val_D2.doubleValue(), cFormat3);
                                                    sheet.addCell(biao7);
                                                }
                                            }
                                            count2++;
                                        }
                                    }
                                } else {
                                    Label pingjunfen6 = new Label(2 + (2 * j2), 4 + i, "--", cFormat3);
                                    sheet.addCell(pingjunfen6);
                                    Label biao8 = new Label(3 + (2 * j2), 4 + i, "--", cFormat3);
                                    sheet.addCell(biao8);
                                }
                            }
                        }
                    }
                    int countd = 0;
                    String claIds = "";
                    for (int x = 0; x < quest.size(); x++) {
                        String classNums = ((Object[]) ((List) quest.get(x)).get(0))[0] + "";
                        String claId = ((Object[]) ((List) quest.get(x)).get(0))[2] + "";
                        if (!classNums.equals("8")) {
                            countd++;
                            claIds = claIds + claId + Const.STRING_SEPERATOR;
                        }
                    }
                    if (claIds.length() > 0) {
                        claIds.substring(0, claIds.length() - 1);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                wwBook.write();
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response = ServletActionContext.getResponse();
                            response.reset();
                            ServletOutputStream outputStream = response.getOutputStream();
                            String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName2 = loadFileName.replace("+", " ");
                            response.setContentType("Content-type: applicationnd.ms-excel");
                            response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xls");
                            response.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte = new byte[1024];
                            FileInputStream in = new FileInputStream(excelFile);
                            while (true) {
                                int n = in.read(tempByte);
                                if (n == -1) {
                                    break;
                                }
                                try {
                                    outputStream.write(tempByte, 0, n);
                                } catch (Exception e2) {
                                    this.log.error("保存未成功", e2);
                                }
                            }
                            outputStream.flush();
                            outputStream.close();
                            in.close();
                        }
                    } catch (WriteException e3) {
                        e3.printStackTrace();
                    }
                }
            } catch (Exception e4) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response2 = ServletActionContext.getResponse();
                            response2.reset();
                            ServletOutputStream outputStream2 = response2.getOutputStream();
                            String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName4 = loadFileName3.replace("+", " ");
                            response2.setContentType("Content-type: applicationnd.ms-excel");
                            response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xls");
                            response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte2 = new byte[1024];
                            FileInputStream in2 = new FileInputStream(excelFile);
                            while (true) {
                                int n2 = in2.read(tempByte2);
                                if (n2 == -1) {
                                    break;
                                }
                                try {
                                    outputStream2.write(tempByte2, 0, n2);
                                } catch (Exception e5) {
                                    this.log.error("保存未成功", e5);
                                }
                            }
                            outputStream2.flush();
                            outputStream2.close();
                            in2.close();
                        }
                    } catch (WriteException e6) {
                        e6.printStackTrace();
                    }
                }
            } catch (Throwable th) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response3 = ServletActionContext.getResponse();
                            response3.reset();
                            ServletOutputStream outputStream3 = response3.getOutputStream();
                            String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName6 = loadFileName5.replace("+", " ");
                            response3.setContentType("Content-type: applicationnd.ms-excel");
                            response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xls");
                            response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte3 = new byte[1024];
                            FileInputStream in3 = new FileInputStream(excelFile);
                            while (true) {
                                int n3 = in3.read(tempByte3);
                                if (n3 == -1) {
                                    break;
                                }
                                try {
                                    outputStream3.write(tempByte3, 0, n3);
                                } catch (Exception e7) {
                                    this.log.error("保存未成功", e7);
                                }
                            }
                            outputStream3.flush();
                            outputStream3.close();
                            in3.close();
                        }
                    } catch (WriteException e8) {
                        e8.printStackTrace();
                        throw th;
                    }
                }
                throw th;
            }
        } catch (Exception e9) {
            e9.printStackTrace();
        }
        return null;
    }

    public void subjectLineImage_allSubjectAvgVeiw(List list, String lType, String insertUser) {
        new ArrayList();
        makePolarChartl4_allSubjectAvgVeiw("", list, "l4", insertUser);
    }

    public JFreeChart makePolarChartl4_allSubjectAvgVeiw(String chartTitle, List dataList, String str, String insertUser) {
        DecimalFormat df = new DecimalFormat("0.0");
        for (int i = 0; i < dataList.size(); i++) {
            String classNum = ((Object[]) ((List) dataList.get(i)).get(0))[0] + "";
            if (!classNum.equals("8")) {
                List subjectList = (List) dataList.get(i);
                int sjtCount = 0;
                String claid = String.valueOf(((Object[]) subjectList.get(0))[2]);
                String claName = String.valueOf(((Object[]) subjectList.get(0))[3]);
                for (int m = 0; m < subjectList.size(); m++) {
                    int subjectNum = Integer.parseInt(String.valueOf(((Object[]) subjectList.get(m))[5]));
                    if (subjectNum > 4) {
                        sjtCount++;
                    }
                }
                String[] columnKeys = {claName};
                String[] rowKeys = new String[sjtCount];
                double[][] data = new double[1][sjtCount];
                int aa = 0;
                for (int m2 = 0; m2 < subjectList.size(); m2++) {
                    int subjectNum2 = Integer.parseInt(String.valueOf(((Object[]) subjectList.get(m2))[5]));
                    if (subjectNum2 > 4) {
                        double ssdt = 0.0d;
                        if (!((Object[]) subjectList.get(m2))[8].equals("-")) {
                            ssdt = Double.parseDouble(String.valueOf(((Object[]) subjectList.get(m2))[8]));
                        }
                        data[0][aa] = Double.valueOf(df.format(ssdt)).doubleValue();
                        rowKeys[aa] = String.valueOf(((Object[]) subjectList.get(m2))[6]);
                        aa++;
                    }
                }
                JFreeChart chart = this.lc.makeBarCharT7(data, columnKeys, rowKeys);
                getChartImageFolder(chart, "tmpLinePng", Const.width, Const.height_400, insertUser + "L4" + claid);
            }
        }
        return null;
    }

    private void createPolarChart_allSubjectAvgVeiw(String titile, DefaultCategoryDataset dataset, List dataList, String str, String k, String insertUser) {
        CalibrationSpiderWebPlot plot = new CalibrationSpiderWebPlot(dataset);
        plot.setDataset(dataset);
        java.awt.Font font = new java.awt.Font("宋书", 0, 12);
        plot.setLabelFont(font);
        plot.setStartAngle(90.0d);
        plot.setInteriorGap(0.3d);
        plot.setWebFilled(true);
        plot.setOutlineVisible(true);
        plot.setDrawRing(true);
        plot.setDirection(Rotation.ANTICLOCKWISE);
        plot.setBaseSeriesPaint(Color.green);
        plot.setSeriesPaint(0, new Color(0, 0, 255));
        plot.setAxisLinePaint(Color.LIGHT_GRAY);
        plot.setOutlineVisible(true);
        plot.setBackgroundPaint(ChartColor.WHITE);
        plot.setSeriesPaint(0, Color.blue);
        JFreeChart jfreechart = new JFreeChart(titile, TextTitle.DEFAULT_FONT, plot, false);
        jfreechart.setBackgroundPaint(ChartColor.WHITE);
        java.awt.Font font1 = new java.awt.Font("黑体", 1, 24);
        TextTitle title = new TextTitle(titile);
        LegendTitle legendTitle = new LegendTitle(jfreechart.getPlot());
        legendTitle.setPosition(RectangleEdge.RIGHT);
        title.setFont(font1);
        title.setPosition(RectangleEdge.TOP);
        jfreechart.setTitle(title);
        String lType = "l4avg" + k;
        String ssdt = insertUser + lType;
        getChartImageFolder(jfreechart, "tmpLinePng", 300, 300, ssdt);
    }

    public File getSubChartImgFile_allSubjectAvgVeiw(String insertUser, List list, String lType, String dirPath) {
        File file = new File(dirPath + File.separator + "tmpLinePng" + File.separator + insertUser + lType + ".png");
        return file;
    }

    public void subjectLineImage1_allSubjectAvgVeiw(List list, String lType, String insertUser) {
        List subjectList = (List) list.get(0);
        List quest = (List) list.get(1);
        String xName1 = "";
        new ArrayList();
        new DecimalFormat("0.00");
        Double.valueOf(0.0d);
        Double.valueOf(0.0d);
        int mm = 0;
        boolean flg = false;
        for (int su = 0; su < subjectList.size(); su++) {
            int c = 0;
            int cou = 0;
            for (int cla = 0; cla < quest.size(); cla++) {
                List cla_list = (List) quest.get(cla);
                for (int i = 0; i < cla_list.size(); i++) {
                    if (i == 0) {
                        String subjectNum = ((Object[]) cla_list.get(i))[5] + "";
                        if (Integer.parseInt(subjectNum) > 3) {
                            for (int cl = 0; cl < cla_list.size(); cl++) {
                                if ((((Subject) subjectList.get(su)).getSubjectNum() + "").equals(((Object[]) cla_list.get(cl))[5] + "")) {
                                    cou++;
                                }
                            }
                        }
                    }
                }
            }
            double[][] data = new double[1][cou];
            String[] columnKeys1 = new String[cou];
            String[] rowKeys1 = new String[1];
            List list_data = new ArrayList();
            for (int i2 = 0; i2 < 1; i2++) {
                for (int cla2 = 0; cla2 < quest.size(); cla2++) {
                    List cla_list2 = (List) quest.get(cla2);
                    int cl2 = 0;
                    while (true) {
                        if (cl2 < cla_list2.size()) {
                            String cl_subjectNum = ((Object[]) cla_list2.get(cl2))[5] + "";
                            if (Integer.parseInt(cl_subjectNum) <= 3 || !(((Subject) subjectList.get(su)).getSubjectNum() + "").equals(cl_subjectNum)) {
                                cl2++;
                            } else {
                                if (c == 0) {
                                    String subjectName = ((Object[]) cla_list2.get(cl2))[6] + "";
                                    xName1 = subjectName + "平均分对比图";
                                    rowKeys1[0] = subjectName + "";
                                    lType = "l4subjectavg" + mm;
                                    flg = true;
                                    mm++;
                                }
                                columnKeys1[c] = ((Object[]) cla_list2.get(cl2))[3] + "";
                                String cc = ((Object[]) cla_list2.get(cl2))[7] + "";
                                if (!cc.equals("-")) {
                                    data[0][c] = Double.parseDouble(cc);
                                    list_data.add(Double.valueOf(Double.parseDouble(cc)));
                                } else {
                                    data[0][c] = 0.0d;
                                    list_data.add(Double.valueOf(0.0d));
                                }
                                c++;
                            }
                        }
                    }
                }
            }
            if (flg) {
                Double maxDesc = (Double) Collections.max(list_data);
                Double minDesc = (Double) Collections.min(list_data);
                Double count_unit = Double.valueOf((maxDesc.doubleValue() - minDesc.doubleValue()) / 5.0d);
                HttpServletResponse response = ServletActionContext.getResponse();
                response.reset();
                response.setContentType("image/jpeg");
                JFreeChart chart = this.lc.getLineChar(data, rowKeys1, columnKeys1, "", "", xName1, "#0", count_unit, Integer.valueOf(rowKeys1.length), "Y", "##.##");
                getChartImageFolder(chart, "tmpLinePng", Const.width, Const.height_400, insertUser + lType);
            }
            flg = false;
        }
    }

    public File getSubChartImgFile1_allSubjectAvgVeiw(String insertUser, List list, String lType, String dirPath) {
        File file = new File(dirPath + File.separator + "tmpLinePng" + File.separator + insertUser + lType + ".png");
        return file;
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String moreExamOnesjt_exportgetData(String examNum, String gradeNum, String schoolNum, String subjectNum, String classNum, String studentId, String studentType, String type, String source, String step, String sNum, String c_exam, String rpt_name, String isMoreSchool, String rptTitle, String isHistory, String isSaveWrite, String dirPath, String uri, String userNum, String schName, String gradeName, String className, String subjectName, String imgRoot, String agent, String fufen, String subCompose, String islevel) {
        String rptTitle2 = this.sp.getHeaderStr(examNum, subjectNum, gradeNum, schoolNum, classNum, studentId, studentType, true, true, true, true, false, true, true, true, false, true, true, true, true, true, false, subCompose, fufen);
        List list = this.reportService.getMoreExamOnesjtScoreView(examNum, gradeNum, schoolNum, subjectNum, classNum, studentType, type, source, "0", fufen, subCompose, islevel);
        String folderPath = "ExportFolder/reportExcel" + userNum;
        String str = "reportExcel" + userNum;
        String str2 = "reportExcel" + userNum;
        String excelName = (null == gradeName || "".equals(gradeName)) ? rpt_name + "_" + gradeNum : rpt_name + "_" + gradeName;
        if (null != classNum && !"".equals(classNum) && !classNum.contains(Const.STRING_SEPERATOR)) {
            excelName = (null == className || "".equals(className)) ? excelName + "_" + classNum : excelName + "_" + className;
        }
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        String fufenStr = "1".equals(fufen) ? "赋分" : "原始分";
        String viewRankOfScoreInfo = Configuration.getInstance().getViewRankOfScoreInfo();
        try {
            WritableWorkbook wwBook = Workbook.createWorkbook(excelFile);
            WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
            biaotis1.setAlignment(Alignment.LEFT);
            biaotis1.setVerticalAlignment(VerticalAlignment.CENTRE);
            WritableFont zhushiFont = new WritableFont(WritableFont.ARIAL, 11, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.jxl_red);
            WritableCellFormat zhushi1 = new WritableCellFormat(zhushiFont);
            zhushi1.setAlignment(Alignment.LEFT);
            zhushi1.setVerticalAlignment(VerticalAlignment.CENTRE);
            WritableFont titles = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat title = new WritableCellFormat(titles);
            title.setAlignment(Alignment.LEFT);
            title.setVerticalAlignment(VerticalAlignment.CENTRE);
            title.setWrap(true);
            WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            WritableCellFormat cFormat1 = new WritableCellFormat(font1);
            cFormat1.setAlignment(Alignment.CENTRE);
            cFormat1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1.setBackground(Const.titleBackground_color);
            cFormat1.setWrap(true);
            WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat2 = new WritableCellFormat(font2);
            cFormat2.setAlignment(Alignment.CENTRE);
            cFormat2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2.setBackground(Const.textOuBackGround_color);
            cFormat2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2.setWrap(true);
            NumberFormat nf1 = new NumberFormat("0.0");
            WritableCellFormat cFormat2_1 = new WritableCellFormat(font2, nf1);
            cFormat2_1.setAlignment(Alignment.CENTRE);
            cFormat2_1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_1.setBackground(Const.textOuBackGround_color);
            cFormat2_1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_1.setWrap(true);
            WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat3 = new WritableCellFormat(font3);
            cFormat3.setAlignment(Alignment.CENTRE);
            cFormat3.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3.setBackground(Const.textJiBackGround_color);
            cFormat3.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3.setWrap(true);
            WritableCellFormat cFormat3_1 = new WritableCellFormat(font3, nf1);
            cFormat3_1.setAlignment(Alignment.CENTRE);
            cFormat3_1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_1.setBackground(Const.textJiBackGround_color);
            cFormat3_1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_1.setWrap(true);
            try {
                try {
                    WritableSheet sheet = wwBook.createSheet(rpt_name, 0);
                    sheet.getSettings().setShowGridLines(false);
                    try {
                        Label biaotou = new Label(0, 0, rpt_name, biaotis1);
                        sheet.addCell(biaotou);
                        Label zhushi = new Label(3, 0, "注：单校参考群体无重大变化，可进行校内比较；多校统考，可进行跨校比较（联考一般不适用）。", zhushi1);
                        sheet.addCell(zhushi);
                        DecimalFormat df01 = new DecimalFormat("0.0");
                        df01.setRoundingMode(RoundingMode.HALF_UP);
                        Label xinxi = new Label(0, 1, rptTitle2, title);
                        sheet.addCell(xinxi);
                        sheet.setRowView(1, Const.height_500);
                        List quest = (List) list.get(1);
                        List list0 = (List) list.get(0);
                        sheet.mergeCells(0, 0, 2, 0);
                        sheet.mergeCells(3, 0, 13, 0);
                        sheet.mergeCells(0, 1, 20, 1);
                        Label mingcheng = new Label(0, 2, "名称", cFormat1);
                        sheet.addCell(mingcheng);
                        sheet.mergeCells(0, 2, 0, 3);
                        if (schoolNum.indexOf(Const.STRING_SEPERATOR) != -1 || schoolNum.equals("allschool")) {
                            Label banren = new Label(1, 2, "年级主任", cFormat1);
                            sheet.addCell(banren);
                            sheet.mergeCells(1, 2, 1, 3);
                            sheet.setColumnView(1, 10);
                            Label jiaoshi = new Label(2, 2, "教研组长", cFormat1);
                            sheet.addCell(jiaoshi);
                            sheet.mergeCells(2, 2, 2, 3);
                            sheet.setColumnView(2, 10);
                        } else {
                            Label banren2 = new Label(1, 2, "班主任", cFormat1);
                            sheet.addCell(banren2);
                            sheet.mergeCells(1, 2, 1, 3);
                            Label jiaoshi2 = new Label(2, 2, "任课教师", cFormat1);
                            sheet.addCell(jiaoshi2);
                            sheet.mergeCells(2, 2, 2, 3);
                            sheet.setColumnView(2, 10);
                        }
                        int index = viewRankOfScoreInfo.equals("3") ? 2 : 3;
                        for (int i = 0; i < quest.size(); i++) {
                            int count = 0;
                            List list1 = (List) quest.get(i);
                            for (int k = 0; k < list1.size(); k++) {
                                int ii = 0;
                                for (int e = 0; e < list0.size(); e++) {
                                    if (i == 0 && k == 0) {
                                        Label kaoshi1 = new Label(3 + (index * e), 2, ((Object[]) list0.get(e))[1].toString(), cFormat1);
                                        sheet.addCell(kaoshi1);
                                        Label yuanshifen = new Label(3 + (index * e), 3, fufenStr, cFormat1);
                                        sheet.addCell(yuanshifen);
                                        if (!viewRankOfScoreInfo.equals("3")) {
                                            if (schoolNum.indexOf(Const.STRING_SEPERATOR) != -1 || schoolNum.equals("allschool")) {
                                                Label nianjipaiming = new Label(4 + (index * e), 3, "区县排名", cFormat1);
                                                sheet.addCell(nianjipaiming);
                                                sheet.setColumnView(4 + (index * e), 10);
                                            } else {
                                                Label nianjipaiming2 = new Label(4 + (index * e), 3, "年级排名", cFormat1);
                                                sheet.addCell(nianjipaiming2);
                                                sheet.setColumnView(4 + (index * e), 10);
                                            }
                                            ii = 1;
                                        }
                                        Label biaozhun = new Label(4 + (index * e) + ii, 3, "标准分T", cFormat1);
                                        sheet.addCell(biaozhun);
                                        sheet.mergeCells(3 + (index * e), 2, 4 + (index * e) + ii, 2);
                                    }
                                }
                                int iii = 0;
                                if (i % 2 != 0) {
                                    if (k == 0) {
                                        Label classNameLabel = new Label(0, 4 + i, (String) ((Object[]) list1.get(k))[4], cFormat2);
                                        sheet.addCell(classNameLabel);
                                        Label classteacher = new Label(1, 4 + i, (String) ((Object[]) list1.get(k))[6], cFormat2);
                                        sheet.addCell(classteacher);
                                        Label teacherName = new Label(2, 4 + i, (String) ((Object[]) list1.get(k))[5], cFormat2);
                                        sheet.addCell(teacherName);
                                    }
                                    int ee = count;
                                    while (true) {
                                        if (ee >= list0.size()) {
                                            break;
                                        }
                                        if (((Object[]) list0.get(ee))[0].equals(((Object[]) list1.get(k))[1] + ((Object[]) list1.get(k))[11].toString())) {
                                            Number a7 = new Number(3 + (index * ee), 4 + i, Double.valueOf(df01.format(((Object[]) list1.get(k))[7])).doubleValue(), cFormat2_1);
                                            sheet.addCell(a7);
                                            if (!viewRankOfScoreInfo.equals("3")) {
                                                Number a9 = new Number(4 + (index * ee), 4 + i, Double.valueOf(((Object[]) list1.get(k))[9].toString()).doubleValue(), cFormat2);
                                                sheet.addCell(a9);
                                                iii = 1;
                                            }
                                            Number a8 = new Number(4 + (index * ee) + iii, 4 + i, Double.valueOf(df01.format(((Object[]) list1.get(k))[8])).doubleValue(), cFormat2_1);
                                            sheet.addCell(a8);
                                            count = ee + 1;
                                        } else {
                                            Label a72 = new Label(3 + (index * ee), 4 + i, "", cFormat2);
                                            sheet.addCell(a72);
                                            if (!viewRankOfScoreInfo.equals("3")) {
                                                Label a92 = new Label(4 + (index * ee), 4 + i, "", cFormat2);
                                                sheet.addCell(a92);
                                                iii = 1;
                                            }
                                            Label a82 = new Label(4 + (index * ee) + iii, 4 + i, "", cFormat2);
                                            sheet.addCell(a82);
                                            ee++;
                                        }
                                    }
                                } else {
                                    if (k == 0) {
                                        Label classNameLabel2 = new Label(0, 4 + i, (String) ((Object[]) list1.get(k))[4], cFormat3);
                                        sheet.addCell(classNameLabel2);
                                        Label classteacher2 = new Label(1, 4 + i, (String) ((Object[]) list1.get(k))[6], cFormat3);
                                        sheet.addCell(classteacher2);
                                        Label teacherName2 = new Label(2, 4 + i, (String) ((Object[]) list1.get(k))[5], cFormat3);
                                        sheet.addCell(teacherName2);
                                    }
                                    int ee2 = count;
                                    while (true) {
                                        if (ee2 >= list0.size()) {
                                            break;
                                        }
                                        if (((Object[]) list0.get(ee2))[0].equals(((Object[]) list1.get(k))[1] + ((Object[]) list1.get(k))[11].toString())) {
                                            Number a73 = new Number(3 + (index * ee2), 4 + i, Double.valueOf(df01.format(((Object[]) list1.get(k))[7])).doubleValue(), cFormat3_1);
                                            sheet.addCell(a73);
                                            if (!viewRankOfScoreInfo.equals("3")) {
                                                Number a93 = new Number(4 + (index * ee2), 4 + i, Double.valueOf(((Object[]) list1.get(k))[9].toString()).doubleValue(), cFormat3);
                                                sheet.addCell(a93);
                                                iii = 1;
                                            }
                                            Number a83 = new Number(4 + (index * ee2) + iii, 4 + i, Double.valueOf(df01.format(((Object[]) list1.get(k))[8])).doubleValue(), cFormat3_1);
                                            sheet.addCell(a83);
                                            count = ee2 + 1;
                                        } else {
                                            Label a74 = new Label(3 + (index * ee2), 4 + i, "", cFormat3);
                                            sheet.addCell(a74);
                                            if (!viewRankOfScoreInfo.equals("3")) {
                                                Label a94 = new Label(4 + (index * ee2), 4 + i, "", cFormat3);
                                                sheet.addCell(a94);
                                                iii = 1;
                                            }
                                            Label a84 = new Label(4 + (index * ee2) + iii, 4 + i, "", cFormat3);
                                            sheet.addCell(a84);
                                            ee2++;
                                        }
                                    }
                                }
                            }
                        }
                    } catch (Exception e2) {
                        e2.printStackTrace();
                    }
                    wwBook.write();
                    if (wwBook != null) {
                        try {
                            wwBook.close();
                            if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                                HttpServletResponse response = ServletActionContext.getResponse();
                                response.reset();
                                ServletOutputStream outputStream = response.getOutputStream();
                                String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                String loadFileName2 = loadFileName.replace("+", " ");
                                response.setContentType("Content-type: applicationnd.ms-excel");
                                response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xls");
                                response.setHeader("Content-length", String.valueOf(excelFile.length()));
                                byte[] tempByte = new byte[1024];
                                FileInputStream in = new FileInputStream(excelFile);
                                while (true) {
                                    int n = in.read(tempByte);
                                    if (n == -1) {
                                        break;
                                    }
                                    try {
                                        outputStream.write(tempByte, 0, n);
                                    } catch (Exception e3) {
                                        this.log.error("保存未成功", e3);
                                    }
                                }
                                outputStream.flush();
                                outputStream.close();
                                in.close();
                            }
                        } catch (WriteException e4) {
                            e4.printStackTrace();
                        }
                    }
                } catch (Throwable th) {
                    if (wwBook != null) {
                        try {
                            wwBook.close();
                            if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                                HttpServletResponse response2 = ServletActionContext.getResponse();
                                response2.reset();
                                ServletOutputStream outputStream2 = response2.getOutputStream();
                                String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                String loadFileName4 = loadFileName3.replace("+", " ");
                                response2.setContentType("Content-type: applicationnd.ms-excel");
                                response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xls");
                                response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                                byte[] tempByte2 = new byte[1024];
                                FileInputStream in2 = new FileInputStream(excelFile);
                                while (true) {
                                    int n2 = in2.read(tempByte2);
                                    if (n2 == -1) {
                                        break;
                                    }
                                    try {
                                        outputStream2.write(tempByte2, 0, n2);
                                    } catch (Exception e5) {
                                        this.log.error("保存未成功", e5);
                                    }
                                }
                                outputStream2.flush();
                                outputStream2.close();
                                in2.close();
                            }
                        } catch (WriteException e6) {
                            e6.printStackTrace();
                            throw th;
                        }
                    }
                    throw th;
                }
            } catch (Exception e7) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response3 = ServletActionContext.getResponse();
                            response3.reset();
                            ServletOutputStream outputStream3 = response3.getOutputStream();
                            String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName6 = loadFileName5.replace("+", " ");
                            response3.setContentType("Content-type: applicationnd.ms-excel");
                            response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xls");
                            response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte3 = new byte[1024];
                            FileInputStream in3 = new FileInputStream(excelFile);
                            while (true) {
                                int n3 = in3.read(tempByte3);
                                if (n3 == -1) {
                                    break;
                                }
                                try {
                                    outputStream3.write(tempByte3, 0, n3);
                                } catch (Exception e8) {
                                    this.log.error("保存未成功", e8);
                                }
                            }
                            outputStream3.flush();
                            outputStream3.close();
                            in3.close();
                        }
                    } catch (WriteException e9) {
                        e9.printStackTrace();
                    }
                }
            }
        } catch (Exception e10) {
            e10.printStackTrace();
        }
        return null;
    }

    public File getSubChartImgFile_moreExamOnesjt(String insertUser, List list, String lType, String dirPath) {
        subjectLineImage_moreExamOnesjt(list, lType, insertUser);
        File file = new File(dirPath + File.separator + "tmpLinePng" + File.separator + insertUser + lType + ".png");
        return file;
    }

    public void subjectLineImage_moreExamOnesjt(List list, String lType, String insertUser) {
        List quest = (List) list.get(1);
        List len = (List) quest.get(0);
        List list0 = (List) list.get(0);
        new ArrayList();
        DecimalFormat df = new DecimalFormat("0.00");
        int allsize = quest.size();
        if (quest != null && allsize > 0) {
            len = (List) quest.get(0);
        }
        int classListsize = len.size();
        double[][] data = new double[quest.size()][classListsize];
        String[] columnKeys1 = new String[classListsize];
        String[] rowKeys1 = new String[quest.size()];
        Double.valueOf(0.0d);
        Double.valueOf(0.0d);
        List list_data = new ArrayList();
        for (int i = 0; i < quest.size(); i++) {
            int count = 0;
            List list1 = (List) quest.get(i);
            for (int k = 0; k < list1.size(); k++) {
                int ee = count;
                while (true) {
                    if (ee >= list0.size()) {
                        break;
                    }
                    if (((Object[]) list0.get(ee))[0].equals(((Object[]) list1.get(k))[1] + ((Object[]) list1.get(k))[11].toString())) {
                        String cc = String.valueOf(((Object[]) list1.get(k))[8] + "");
                        data[i][ee] = Double.parseDouble(df.format(Double.parseDouble(cc)));
                        list_data.add(Double.valueOf(Double.parseDouble(df.format(Double.parseDouble(cc)))));
                        count = ee + 1;
                        break;
                    }
                    data[i][ee] = 0.0d;
                    list_data.add(Double.valueOf(0.0d));
                    ee++;
                }
                if (i == 0) {
                    columnKeys1[k] = String.valueOf(((Object[]) list1.get(k))[10]);
                }
                if (k == 0) {
                    rowKeys1[i] = String.valueOf(((Object[]) list1.get(k))[4]);
                }
            }
        }
        Double maxDesc = (Double) Collections.max(list_data);
        Double minDesc = (Double) Collections.min(list_data);
        Double count_unit = Double.valueOf((maxDesc.doubleValue() - minDesc.doubleValue()) / 5.0d);
        HttpServletResponse response = ServletActionContext.getResponse();
        response.reset();
        response.setContentType("image/jpeg");
        JFreeChart chart = this.lc.getLineChar(data, rowKeys1, columnKeys1, "考试", "", "多次考试标准分变化趋势图", "#.00", count_unit, Integer.valueOf(rowKeys1.length), "Y", "##.#");
        getChartImageFolder(chart, "tmpLinePng", Const.width, Const.height_400, insertUser + lType);
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String stuImproveFallAnaly_exportgetData(String examNum, String gradeNum, String schoolNum, String subjectNum, String classNum, String studentId, String studentType, String type, String source, String step, String sNum, String c_exam, String rpt_name, String isMoreSchool, String rptTitle, String isHistory, String isSaveWrite, String dirPath, String uri, String userNum, String schName, String gradeName, String className, String subjectName, String imgRoot, String agent, String fufen, String subCompose, String islevel) {
        String rptTitle2 = this.sp.getHeaderStr(examNum, subjectNum, gradeNum, schoolNum, classNum, studentId, studentType, true, true, true, true, false, true, true, true, false, true, true, true, true, true, false, subCompose, fufen);
        List quest = this.reportService.getStudentImproveFallAnaly(examNum, gradeNum, schoolNum, subjectNum, classNum, studentType, type, source, sNum, c_exam, "0", fufen, subCompose, islevel);
        String folderPath = "ExportFolder/reportExcel" + userNum;
        String str = "reportExcel" + userNum;
        String str2 = "reportExcel" + userNum;
        String excelName = (null == gradeName || "".equals(gradeName)) ? rpt_name + "_" + gradeNum : rpt_name + "_" + gradeName;
        if (null != classNum && !"".equals(classNum) && !classNum.contains(Const.STRING_SEPERATOR)) {
            excelName = (null == className || "".equals(className)) ? excelName + "_" + classNum : excelName + "_" + className;
        }
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        String fufenStr = "1".equals(fufen) ? "赋分" : "原始分";
        try {
            WritableWorkbook wwBook = Workbook.createWorkbook(excelFile);
            WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
            biaotis1.setAlignment(Alignment.LEFT);
            biaotis1.setVerticalAlignment(VerticalAlignment.CENTRE);
            WritableFont zhushiFont = new WritableFont(WritableFont.ARIAL, 11, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.jxl_red);
            WritableCellFormat zhushi1 = new WritableCellFormat(zhushiFont);
            zhushi1.setAlignment(Alignment.LEFT);
            zhushi1.setVerticalAlignment(VerticalAlignment.CENTRE);
            WritableFont titles = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat title = new WritableCellFormat(titles);
            title.setAlignment(Alignment.LEFT);
            title.setVerticalAlignment(VerticalAlignment.CENTRE);
            title.setWrap(true);
            WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            WritableCellFormat cFormat1 = new WritableCellFormat(font1);
            cFormat1.setAlignment(Alignment.CENTRE);
            cFormat1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1.setBackground(Const.titleBackground_color);
            cFormat1.setWrap(true);
            WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat2 = new WritableCellFormat(font2);
            cFormat2.setAlignment(Alignment.CENTRE);
            cFormat2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2.setBackground(Const.textOuBackGround_color);
            cFormat2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2.setWrap(true);
            NumberFormat nf1 = new NumberFormat("0.0");
            WritableCellFormat cFormat2_1 = new WritableCellFormat(font2, nf1);
            cFormat2_1.setAlignment(Alignment.CENTRE);
            cFormat2_1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_1.setBackground(Const.textOuBackGround_color);
            cFormat2_1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_1.setWrap(true);
            NumberFormat nf2 = new NumberFormat("0.00");
            WritableCellFormat cFormat2_2 = new WritableCellFormat(font2, nf2);
            cFormat2_2.setAlignment(Alignment.CENTRE);
            cFormat2_2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_2.setBackground(Const.textOuBackGround_color);
            cFormat2_2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_2.setWrap(true);
            WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat3 = new WritableCellFormat(font3);
            cFormat3.setAlignment(Alignment.CENTRE);
            cFormat3.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3.setBackground(Const.textJiBackGround_color);
            cFormat3.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3.setWrap(true);
            WritableCellFormat cFormat3_1 = new WritableCellFormat(font3, nf1);
            cFormat3_1.setAlignment(Alignment.CENTRE);
            cFormat3_1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_1.setBackground(Const.textJiBackGround_color);
            cFormat3_1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_1.setWrap(true);
            WritableCellFormat cFormat3_2 = new WritableCellFormat(font3, nf2);
            cFormat3_2.setAlignment(Alignment.CENTRE);
            cFormat3_2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_2.setBackground(Const.textJiBackGround_color);
            cFormat3_2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_2.setWrap(true);
            String viewRankOfScoreInfo = Configuration.getInstance().getViewRankOfScoreInfo();
            try {
                try {
                    WritableSheet sheet = wwBook.createSheet(rpt_name, 0);
                    sheet.getSettings().setShowGridLines(false);
                    try {
                        Label biaotou = new Label(0, 0, rpt_name, biaotis1);
                        sheet.addCell(biaotou);
                        Label zhushi = new Label(3, 0, "注：单校参考群体无重大变化，可进行校内比较；多校统考，可进行跨校比较（联考一般不适用）。", zhushi1);
                        sheet.addCell(zhushi);
                        DecimalFormat df01 = new DecimalFormat("0.0");
                        DecimalFormat df02 = new DecimalFormat("0.00");
                        df01.setRoundingMode(RoundingMode.HALF_UP);
                        df02.setRoundingMode(RoundingMode.HALF_UP);
                        Label xinxi = new Label(0, 1, rptTitle2, title);
                        sheet.addCell(xinxi);
                        sheet.setRowView(1, Const.height_500);
                        sheet.mergeCells(0, 0, 2, 0);
                        sheet.mergeCells(3, 0, 13, 0);
                        sheet.mergeCells(0, 1, 13, 1);
                        Label banming = new Label(0, 2, "学生编号", cFormat1);
                        sheet.addCell(banming);
                        sheet.mergeCells(0, 2, 0, 3);
                        Label banren = new Label(1, 2, "学生姓名", cFormat1);
                        sheet.addCell(banren);
                        sheet.mergeCells(1, 2, 1, 3);
                        Label xueke = new Label(2, 2, "班级", cFormat1);
                        sheet.addCell(xueke);
                        sheet.mergeCells(2, 2, 2, 3);
                        int ii = 0;
                        if (c_exam == null || c_exam.equals("")) {
                            if (schoolNum.indexOf(Const.STRING_SEPERATOR) > -1) {
                                Label yuanshi = new Label(3, 2, "本次考试", cFormat1);
                                sheet.addCell(yuanshi);
                                Label yuanshifen = new Label(3, 3, fufenStr, cFormat1);
                                sheet.addCell(yuanshifen);
                                if (viewRankOfScoreInfo.equals("1")) {
                                    Label graderank = new Label(4, 3, "年级排名", cFormat1);
                                    sheet.addCell(graderank);
                                    ii = 0 + 1;
                                }
                                Label classrank = new Label(4 + ii, 3, "标准分T", cFormat1);
                                sheet.addCell(classrank);
                                sheet.mergeCells(3, 2, 4 + ii, 2);
                                Label gongxian = new Label(5 + ii, 2, "进步度", cFormat1);
                                sheet.addCell(gongxian);
                                sheet.mergeCells(5 + ii, 2, 5 + ii, 3);
                                Label zongfen = new Label(6 + ii, 2, "进步排名(学校)", cFormat1);
                                sheet.addCell(zongfen);
                                sheet.mergeCells(6 + ii, 2, 6 + ii, 3);
                                Label xueke1 = new Label(7 + ii, 2, "进步排名(区县)", cFormat1);
                                sheet.addCell(xueke1);
                                sheet.mergeCells(7 + ii, 2, 7 + ii, 3);
                                Label fsbh = new Label(8 + ii, 2, "分数变化", cFormat1);
                                sheet.addCell(fsbh);
                                sheet.mergeCells(8 + ii, 2, 8 + ii, 3);
                                if ("1".equals(viewRankOfScoreInfo)) {
                                    Label pmbh = new Label(9 + ii, 2, "排名变化", cFormat1);
                                    sheet.addCell(pmbh);
                                    sheet.mergeCells(9 + ii, 2, 9 + ii, 3);
                                }
                            } else {
                                Label yuanshi2 = new Label(3, 2, "本次考试", cFormat1);
                                sheet.addCell(yuanshi2);
                                Label yuanshifen2 = new Label(3, 3, fufenStr, cFormat1);
                                sheet.addCell(yuanshifen2);
                                if (viewRankOfScoreInfo.equals("1")) {
                                    Label graderank2 = new Label(4, 3, "年级排名", cFormat1);
                                    sheet.addCell(graderank2);
                                    ii = 1;
                                }
                                Label classrank2 = new Label(4 + ii, 3, "标准分T", cFormat1);
                                sheet.addCell(classrank2);
                                sheet.mergeCells(3, 2, 4 + ii, 2);
                                Label gongxian2 = new Label(5 + ii, 2, "进步度", cFormat1);
                                sheet.addCell(gongxian2);
                                sheet.mergeCells(5 + ii, 2, 5 + ii, 3);
                                Label zongfen2 = new Label(6 + ii, 2, "进步排名(班级)", cFormat1);
                                sheet.addCell(zongfen2);
                                sheet.mergeCells(6 + ii, 2, 6 + ii, 3);
                                Label xueke12 = new Label(7 + ii, 2, "进步排名(年级)", cFormat1);
                                sheet.addCell(xueke12);
                                sheet.mergeCells(7 + ii, 2, 7 + ii, 3);
                                Label fsbh2 = new Label(8 + ii, 2, "分数变化", cFormat1);
                                sheet.addCell(fsbh2);
                                sheet.mergeCells(8 + ii, 2, 8 + ii, 3);
                                if ("1".equals(viewRankOfScoreInfo)) {
                                    Label pmbh2 = new Label(9 + ii, 2, "排名变化", cFormat1);
                                    sheet.addCell(pmbh2);
                                    sheet.mergeCells(9 + ii, 2, 9 + ii, 3);
                                }
                            }
                        } else if (schoolNum.indexOf(Const.STRING_SEPERATOR) > -1) {
                            Label yuanshi3 = new Label(3, 2, "本次考试", cFormat1);
                            sheet.addCell(yuanshi3);
                            Label yuanshifen3 = new Label(3, 3, fufenStr, cFormat1);
                            sheet.addCell(yuanshifen3);
                            if (viewRankOfScoreInfo.equals("1")) {
                                Label graderank3 = new Label(4, 3, "区县排名", cFormat1);
                                sheet.addCell(graderank3);
                                ii = 0 + 1;
                            }
                            Label classrank3 = new Label(4 + ii, 3, "标准分T", cFormat1);
                            sheet.addCell(classrank3);
                            sheet.mergeCells(3, 2, 4 + ii, 2);
                            Label biaozhun = new Label(5 + ii, 2, "参照考试", cFormat1);
                            sheet.addCell(biaozhun);
                            Label yuanshifen1 = new Label(5 + ii, 3, fufenStr, cFormat1);
                            sheet.addCell(yuanshifen1);
                            int iii = ii;
                            if (viewRankOfScoreInfo.equals("1")) {
                                Label graderank1 = new Label(6 + ii, 3, "区县排名", cFormat1);
                                sheet.addCell(graderank1);
                                ii++;
                            }
                            Label classrank1 = new Label(6 + ii, 3, "标准分T", cFormat1);
                            sheet.addCell(classrank1);
                            sheet.mergeCells(5 + iii, 2, 6 + ii, 2);
                            Label gongxian3 = new Label(7 + ii, 2, "进步度", cFormat1);
                            sheet.addCell(gongxian3);
                            sheet.mergeCells(7 + ii, 2, 7 + ii, 3);
                            Label zongfen3 = new Label(8 + ii, 2, "进步排名(学校)", cFormat1);
                            sheet.addCell(zongfen3);
                            sheet.mergeCells(8 + ii, 2, 8 + ii, 3);
                            Label xueke13 = new Label(9 + ii, 2, "进步排名(区县)", cFormat1);
                            sheet.addCell(xueke13);
                            sheet.mergeCells(9 + ii, 2, 9 + ii, 3);
                            Label fsbh3 = new Label(10 + ii, 2, "分数变化", cFormat1);
                            sheet.addCell(fsbh3);
                            sheet.mergeCells(10 + ii, 2, 10 + ii, 3);
                            if ("1".equals(viewRankOfScoreInfo)) {
                                Label pmbh3 = new Label(11 + ii, 2, "排名变化", cFormat1);
                                sheet.addCell(pmbh3);
                                sheet.mergeCells(11 + ii, 2, 11 + ii, 3);
                            }
                        } else {
                            Label yuanshi4 = new Label(3, 2, "本次考试", cFormat1);
                            sheet.addCell(yuanshi4);
                            Label yuanshifen4 = new Label(3, 3, fufenStr, cFormat1);
                            sheet.addCell(yuanshifen4);
                            if (viewRankOfScoreInfo.equals("1")) {
                                Label graderank4 = new Label(4, 3, "年级排名", cFormat1);
                                sheet.addCell(graderank4);
                                ii = 0 + 1;
                            }
                            Label classrank4 = new Label(4 + ii, 3, "标准分T", cFormat1);
                            sheet.addCell(classrank4);
                            sheet.mergeCells(3, 2, 4 + ii, 2);
                            Label biaozhun2 = new Label(5 + ii, 2, "参照考试", cFormat1);
                            sheet.addCell(biaozhun2);
                            Label yuanshifen12 = new Label(5 + ii, 3, fufenStr, cFormat1);
                            sheet.addCell(yuanshifen12);
                            int iii2 = ii;
                            if (viewRankOfScoreInfo.equals("1")) {
                                Label graderank12 = new Label(6 + ii, 3, "年级排名", cFormat1);
                                sheet.addCell(graderank12);
                                ii++;
                            }
                            Label classrank12 = new Label(6 + ii, 3, "标准分T", cFormat1);
                            sheet.addCell(classrank12);
                            sheet.mergeCells(5 + iii2, 2, 6 + ii, 2);
                            Label gongxian4 = new Label(7 + ii, 2, "进步度", cFormat1);
                            sheet.addCell(gongxian4);
                            sheet.mergeCells(7 + ii, 2, 7 + ii, 3);
                            Label zongfen4 = new Label(8 + ii, 2, "进步排名(班级)", cFormat1);
                            sheet.addCell(zongfen4);
                            sheet.mergeCells(8 + ii, 2, 8 + ii, 3);
                            Label xueke14 = new Label(9 + ii, 2, "进步排名(年级)", cFormat1);
                            sheet.addCell(xueke14);
                            sheet.mergeCells(9 + ii, 2, 9 + ii, 3);
                            Label fsbh4 = new Label(10 + ii, 2, "分数变化", cFormat1);
                            sheet.addCell(fsbh4);
                            sheet.mergeCells(10 + ii, 2, 10 + ii, 3);
                            if ("1".equals(viewRankOfScoreInfo)) {
                                Label pmbh4 = new Label(11 + ii, 2, "排名变化", cFormat1);
                                sheet.addCell(pmbh4);
                                sheet.mergeCells(11 + ii, 2, 11 + ii, 3);
                            }
                        }
                        for (int i = 0; i < quest.size(); i++) {
                            int ii2 = 0;
                            if (i % 2 != 0) {
                                Label a1 = new Label(0, i + 4, (String) ((Object[]) quest.get(i))[0], cFormat2);
                                sheet.addCell(a1);
                                Label a2 = new Label(1, i + 4, (String) ((Object[]) quest.get(i))[1], cFormat2);
                                sheet.addCell(a2);
                                sheet.setColumnView(1, 16);
                                Label a3 = new Label(2, i + 4, (String) ((Object[]) quest.get(i))[2], cFormat2);
                                sheet.addCell(a3);
                                if (c_exam == null || c_exam.equals("")) {
                                    if (((Object[]) quest.get(i))[6].equals("") || null == ((Object[]) quest.get(i))[6] || ((Object[]) quest.get(i))[6].equals("null") || Double.valueOf(((Object[]) quest.get(i))[6] + "").doubleValue() == 0.0d) {
                                        Label a4 = new Label(3, i + 4, (String) ((Object[]) quest.get(i))[6], cFormat2);
                                        sheet.addCell(a4);
                                    } else {
                                        String a4str = Convert.toBigDecimal(df01.format(((Object[]) quest.get(i))[6])).stripTrailingZeros().toPlainString();
                                        Number a42 = new Number(3, i + 4, Double.valueOf(a4str).doubleValue(), cFormat2);
                                        sheet.addCell(a42);
                                    }
                                    if (viewRankOfScoreInfo.equals("1")) {
                                        Number a5 = new Number(4, i + 4, Integer.valueOf(((Object[]) quest.get(i))[5] + "").intValue(), cFormat2);
                                        sheet.addCell(a5);
                                        ii2 = 0 + 1;
                                    }
                                    Number a6 = new Number(4 + ii2, i + 4, Double.valueOf(df01.format(((Object[]) quest.get(i))[4])).doubleValue(), cFormat2_1);
                                    sheet.addCell(a6);
                                    Label a10 = new Label(5 + ii2, i + 4, "-", cFormat2);
                                    sheet.addCell(a10);
                                    Label a11 = new Label(6 + ii2, i + 4, "-", cFormat2);
                                    sheet.addCell(a11);
                                    Label a12 = new Label(7 + ii2, i + 4, "-", cFormat2);
                                    sheet.addCell(a12);
                                    Label a13 = new Label(8 + ii2, i + 4, "-", cFormat2);
                                    sheet.addCell(a13);
                                    if ("1".equals(viewRankOfScoreInfo)) {
                                        Label a14 = new Label(9 + ii2, i + 4, "-", cFormat2);
                                        sheet.addCell(a14);
                                    }
                                } else {
                                    if (((Object[]) quest.get(i))[6].equals("") || null == ((Object[]) quest.get(i))[6] || ((Object[]) quest.get(i))[6].equals("null") || Double.valueOf(((Object[]) quest.get(i))[6] + "").doubleValue() == 0.0d) {
                                        Label a43 = new Label(3, i + 4, "-", cFormat2_1);
                                        sheet.addCell(a43);
                                        if (viewRankOfScoreInfo.equals("1")) {
                                            Label a52 = new Label(4, i + 4, "-", cFormat2);
                                            sheet.addCell(a52);
                                            ii2 = 0 + 1;
                                        }
                                        Label a62 = new Label(4 + ii2, i + 4, "-", cFormat2_1);
                                        sheet.addCell(a62);
                                    } else {
                                        String a4str2 = Convert.toBigDecimal(df01.format(((Object[]) quest.get(i))[6])).stripTrailingZeros().toPlainString();
                                        Number a44 = new Number(3, i + 4, Double.valueOf(a4str2).doubleValue(), cFormat2);
                                        sheet.addCell(a44);
                                        if (viewRankOfScoreInfo.equals("1")) {
                                            Number a53 = new Number(4, i + 4, Integer.valueOf(((Object[]) quest.get(i))[5] + "").intValue(), cFormat2);
                                            sheet.addCell(a53);
                                            ii2 = 0 + 1;
                                        }
                                        Number a63 = new Number(4 + ii2, i + 4, Double.valueOf(df01.format(((Object[]) quest.get(i))[4])).doubleValue(), cFormat2_1);
                                        sheet.addCell(a63);
                                    }
                                    if (((Object[]) quest.get(i))[9].equals("") || null == ((Object[]) quest.get(i))[9] || ((Object[]) quest.get(i))[9].equals("null") || Double.valueOf(((Object[]) quest.get(i))[9] + "").doubleValue() == 0.0d) {
                                        Label a7 = new Label(5 + ii2, i + 4, "-", cFormat2_1);
                                        sheet.addCell(a7);
                                        if (viewRankOfScoreInfo.equals("1")) {
                                            Label a8 = new Label(6 + ii2, i + 4, "-", cFormat2);
                                            sheet.addCell(a8);
                                            ii2++;
                                        }
                                        Label a9 = new Label(6 + ii2, i + 4, "-", cFormat2_1);
                                        sheet.addCell(a9);
                                    } else {
                                        String a7str = Convert.toBigDecimal(df01.format(((Object[]) quest.get(i))[9])).stripTrailingZeros().toPlainString();
                                        Number a72 = new Number(5 + ii2, i + 4, Double.valueOf(a7str).doubleValue(), cFormat2);
                                        sheet.addCell(a72);
                                        if (viewRankOfScoreInfo.equals("1")) {
                                            Number a82 = new Number(6 + ii2, i + 4, Integer.valueOf(((Object[]) quest.get(i))[8] + "").intValue(), cFormat2);
                                            sheet.addCell(a82);
                                            ii2++;
                                        }
                                        Number a92 = new Number(6 + ii2, i + 4, Double.valueOf(df01.format(((Object[]) quest.get(i))[7])).doubleValue(), cFormat2_1);
                                        sheet.addCell(a92);
                                    }
                                    if (((Object[]) quest.get(i))[10].equals("") || null == ((Object[]) quest.get(i))[10] || ((Object[]) quest.get(i))[10].equals("null")) {
                                        Label a102 = new Label(7 + ii2, i + 4, "-", cFormat2_2);
                                        sheet.addCell(a102);
                                        Label a112 = new Label(8 + ii2, i + 4, "-", cFormat2);
                                        sheet.addCell(a112);
                                        Label a122 = new Label(9 + ii2, i + 4, "-", cFormat2);
                                        sheet.addCell(a122);
                                        Label a132 = new Label(10 + ii2, i + 4, "-", cFormat2);
                                        sheet.addCell(a132);
                                        if ("1".equals(viewRankOfScoreInfo)) {
                                            Label a142 = new Label(11 + ii2, i + 4, "-", cFormat2);
                                            sheet.addCell(a142);
                                        }
                                    } else {
                                        Number a103 = new Number(7 + ii2, i + 4, Double.valueOf(df02.format(((Object[]) quest.get(i))[10])).doubleValue(), cFormat2_2);
                                        sheet.addCell(a103);
                                        Number a113 = new Number(8 + ii2, i + 4, Integer.valueOf(((Object[]) quest.get(i))[12] + "").intValue(), cFormat2);
                                        sheet.addCell(a113);
                                        Number a123 = new Number(9 + ii2, i + 4, Integer.valueOf(((Object[]) quest.get(i))[11] + "").intValue(), cFormat2);
                                        sheet.addCell(a123);
                                        Number a133 = new Number(10 + ii2, i + 4, Double.valueOf(df01.format(((Object[]) quest.get(i))[6])).doubleValue() - Double.valueOf(df01.format(((Object[]) quest.get(i))[9])).doubleValue(), cFormat2_1);
                                        sheet.addCell(a133);
                                        if ("1".equals(viewRankOfScoreInfo)) {
                                            Number a143 = new Number(11 + ii2, i + 4, Integer.valueOf(((Object[]) quest.get(i))[8] + "").intValue() - Integer.valueOf(((Object[]) quest.get(i))[5] + "").intValue(), cFormat2);
                                            sheet.addCell(a143);
                                        }
                                    }
                                }
                            } else {
                                Label a15 = new Label(0, i + 4, (String) ((Object[]) quest.get(i))[0], cFormat3);
                                sheet.addCell(a15);
                                Label a22 = new Label(1, i + 4, (String) ((Object[]) quest.get(i))[1], cFormat3);
                                sheet.addCell(a22);
                                sheet.setColumnView(1, 16);
                                Label a32 = new Label(2, i + 4, (String) ((Object[]) quest.get(i))[2], cFormat3);
                                sheet.addCell(a32);
                                if (c_exam == null || c_exam.equals("")) {
                                    String a4str3 = Convert.toBigDecimal(df01.format(((Object[]) quest.get(i))[6])).stripTrailingZeros().toPlainString();
                                    Number a45 = new Number(3, i + 4, Double.valueOf(a4str3).doubleValue(), cFormat3);
                                    sheet.addCell(a45);
                                    if (viewRankOfScoreInfo.equals("1")) {
                                        Number a54 = new Number(4, i + 4, Integer.valueOf(((Object[]) quest.get(i))[5] + "").intValue(), cFormat3);
                                        sheet.addCell(a54);
                                        ii2 = 0 + 1;
                                    }
                                    Number a64 = new Number(4 + ii2, i + 4, Double.valueOf(df01.format(((Object[]) quest.get(i))[4])).doubleValue(), cFormat3_1);
                                    sheet.addCell(a64);
                                    Label a104 = new Label(5 + ii2, i + 4, "-", cFormat3);
                                    sheet.addCell(a104);
                                    Label a114 = new Label(6 + ii2, i + 4, "-", cFormat3);
                                    sheet.addCell(a114);
                                    Label a124 = new Label(7 + ii2, i + 4, "-", cFormat3);
                                    sheet.addCell(a124);
                                    Label a134 = new Label(8 + ii2, i + 4, "-", cFormat3);
                                    sheet.addCell(a134);
                                    if ("1".equals(viewRankOfScoreInfo)) {
                                        Label a144 = new Label(9 + ii2, i + 4, "-", cFormat3);
                                        sheet.addCell(a144);
                                    }
                                } else {
                                    if (((Object[]) quest.get(i))[6].equals("") || null == ((Object[]) quest.get(i))[6] || ((Object[]) quest.get(i))[6].equals("null") || Double.valueOf(((Object[]) quest.get(i))[6] + "").doubleValue() == 0.0d) {
                                        Label a46 = new Label(3, i + 4, "-", cFormat3_1);
                                        sheet.addCell(a46);
                                        if (viewRankOfScoreInfo.equals("1")) {
                                            Label a55 = new Label(4, i + 4, "-", cFormat3);
                                            sheet.addCell(a55);
                                            ii2 = 0 + 1;
                                        }
                                        Label a65 = new Label(4 + ii2, i + 4, "-", cFormat3_1);
                                        sheet.addCell(a65);
                                    } else {
                                        String a4str4 = Convert.toBigDecimal(df01.format(((Object[]) quest.get(i))[6])).stripTrailingZeros().toPlainString();
                                        Number a47 = new Number(3, i + 4, Double.valueOf(a4str4).doubleValue(), cFormat3);
                                        sheet.addCell(a47);
                                        if (viewRankOfScoreInfo.equals("1")) {
                                            Number a56 = new Number(4, i + 4, Integer.valueOf(((Object[]) quest.get(i))[5] + "").intValue(), cFormat3);
                                            sheet.addCell(a56);
                                            ii2 = 0 + 1;
                                        }
                                        Number a66 = new Number(4 + ii2, i + 4, Double.valueOf(df01.format(((Object[]) quest.get(i))[4])).doubleValue(), cFormat3_1);
                                        sheet.addCell(a66);
                                    }
                                    if (((Object[]) quest.get(i))[9].equals("") || null == ((Object[]) quest.get(i))[9] || ((Object[]) quest.get(i))[9].equals("null") || Double.valueOf(((Object[]) quest.get(i))[9] + "").doubleValue() == 0.0d) {
                                        Label a73 = new Label(5 + ii2, i + 4, "-", cFormat3_1);
                                        sheet.addCell(a73);
                                        if (viewRankOfScoreInfo.equals("1")) {
                                            Label a83 = new Label(6 + ii2, i + 4, "-", cFormat3);
                                            sheet.addCell(a83);
                                            ii2++;
                                        }
                                        Label a93 = new Label(6 + ii2, i + 4, "-", cFormat3_1);
                                        sheet.addCell(a93);
                                    } else {
                                        String a7str2 = Convert.toBigDecimal(df01.format(((Object[]) quest.get(i))[9])).stripTrailingZeros().toPlainString();
                                        Number a74 = new Number(5 + ii2, i + 4, Double.valueOf(a7str2).doubleValue(), cFormat3);
                                        sheet.addCell(a74);
                                        if (viewRankOfScoreInfo.equals("1")) {
                                            Number a84 = new Number(6 + ii2, i + 4, Integer.valueOf(((Object[]) quest.get(i))[8] + "").intValue(), cFormat3);
                                            sheet.addCell(a84);
                                            ii2++;
                                        }
                                        Number a94 = new Number(6 + ii2, i + 4, Double.valueOf(df01.format(((Object[]) quest.get(i))[7])).doubleValue(), cFormat3_1);
                                        sheet.addCell(a94);
                                    }
                                    if (((Object[]) quest.get(i))[10].equals("") || null == ((Object[]) quest.get(i))[10] || ((Object[]) quest.get(i))[10].equals("null")) {
                                        Label a105 = new Label(7 + ii2, i + 4, "-", cFormat3_2);
                                        sheet.addCell(a105);
                                        Label a115 = new Label(8 + ii2, i + 4, "-", cFormat3);
                                        sheet.addCell(a115);
                                        Label a125 = new Label(9 + ii2, i + 4, "-", cFormat3);
                                        sheet.addCell(a125);
                                        Label a135 = new Label(10 + ii2, i + 4, "-", cFormat3);
                                        sheet.addCell(a135);
                                        if ("1".equals(viewRankOfScoreInfo)) {
                                            Label a145 = new Label(11 + ii2, i + 4, "-", cFormat3);
                                            sheet.addCell(a145);
                                        }
                                    } else {
                                        Number a106 = new Number(7 + ii2, i + 4, Double.valueOf(df02.format(((Object[]) quest.get(i))[10])).doubleValue(), cFormat3_2);
                                        sheet.addCell(a106);
                                        Number a116 = new Number(8 + ii2, i + 4, Integer.valueOf(((Object[]) quest.get(i))[12] + "").intValue(), cFormat3);
                                        sheet.addCell(a116);
                                        Number a126 = new Number(9 + ii2, i + 4, Integer.valueOf(((Object[]) quest.get(i))[11] + "").intValue(), cFormat3);
                                        sheet.addCell(a126);
                                        Number a136 = new Number(10 + ii2, i + 4, Double.valueOf(df01.format(((Object[]) quest.get(i))[6])).doubleValue() - Double.valueOf(df01.format(((Object[]) quest.get(i))[9])).doubleValue(), cFormat3_1);
                                        sheet.addCell(a136);
                                        if ("1".equals(viewRankOfScoreInfo)) {
                                            Number a146 = new Number(11 + ii2, i + 4, Integer.valueOf(((Object[]) quest.get(i))[8] + "").intValue() - Integer.valueOf(((Object[]) quest.get(i))[5] + "").intValue(), cFormat3);
                                            sheet.addCell(a146);
                                        }
                                    }
                                }
                            }
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    wwBook.write();
                    if (wwBook != null) {
                        try {
                            wwBook.close();
                            if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                                HttpServletResponse response = ServletActionContext.getResponse();
                                response.reset();
                                ServletOutputStream outputStream = response.getOutputStream();
                                String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                String loadFileName2 = loadFileName.replace("+", " ");
                                response.setContentType("Content-type: applicationnd.ms-excel");
                                response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xls");
                                response.setHeader("Content-length", String.valueOf(excelFile.length()));
                                byte[] tempByte = new byte[1024];
                                FileInputStream in = new FileInputStream(excelFile);
                                while (true) {
                                    int n = in.read(tempByte);
                                    if (n == -1) {
                                        break;
                                    }
                                    try {
                                        outputStream.write(tempByte, 0, n);
                                    } catch (Exception e2) {
                                        this.log.error("保存未成功", e2);
                                    }
                                }
                                outputStream.flush();
                                outputStream.close();
                                in.close();
                            }
                        } catch (WriteException e3) {
                            e3.printStackTrace();
                        }
                    }
                } catch (Throwable th) {
                    if (wwBook != null) {
                        try {
                            wwBook.close();
                            if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                                HttpServletResponse response2 = ServletActionContext.getResponse();
                                response2.reset();
                                ServletOutputStream outputStream2 = response2.getOutputStream();
                                String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                String loadFileName4 = loadFileName3.replace("+", " ");
                                response2.setContentType("Content-type: applicationnd.ms-excel");
                                response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xls");
                                response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                                byte[] tempByte2 = new byte[1024];
                                FileInputStream in2 = new FileInputStream(excelFile);
                                while (true) {
                                    int n2 = in2.read(tempByte2);
                                    if (n2 == -1) {
                                        break;
                                    }
                                    try {
                                        outputStream2.write(tempByte2, 0, n2);
                                    } catch (Exception e4) {
                                        this.log.error("保存未成功", e4);
                                    }
                                }
                                outputStream2.flush();
                                outputStream2.close();
                                in2.close();
                            }
                        } catch (WriteException e5) {
                            e5.printStackTrace();
                            throw th;
                        }
                    }
                    throw th;
                }
            } catch (Exception e6) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response3 = ServletActionContext.getResponse();
                            response3.reset();
                            ServletOutputStream outputStream3 = response3.getOutputStream();
                            String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName6 = loadFileName5.replace("+", " ");
                            response3.setContentType("Content-type: applicationnd.ms-excel");
                            response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xls");
                            response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte3 = new byte[1024];
                            FileInputStream in3 = new FileInputStream(excelFile);
                            while (true) {
                                int n3 = in3.read(tempByte3);
                                if (n3 == -1) {
                                    break;
                                }
                                try {
                                    outputStream3.write(tempByte3, 0, n3);
                                } catch (Exception e7) {
                                    this.log.error("保存未成功", e7);
                                }
                            }
                            outputStream3.flush();
                            outputStream3.close();
                            in3.close();
                        }
                    } catch (WriteException e8) {
                        e8.printStackTrace();
                    }
                }
            }
        } catch (Exception e9) {
            e9.printStackTrace();
        }
        return null;
    }

    public File getChartImgFile_L7(List list, String userId, String c_exam, String[] tuName, String tname, String dirPath, boolean flg) {
        if (flg) {
            createChartImgFile_L7(list, userId, c_exam, tuName);
            return null;
        }
        File file = new File(dirPath + File.separator + "tmpLinePng" + File.separator + tname + userId + ".png");
        return file;
    }

    public void createChartImgFile_L7(List list, String userId, String c_exam, String[] tuName) {
        String[] rowKeys = {"本次考试", "参照考试", "进步度"};
        String[] columnKeys = new String[list.size()];
        double[][] data = new double[3][list.size()];
        double[] bubbleE = new double[list.size()];
        double[] bubbleC = new double[list.size()];
        double[] bubbleD = new double[list.size()];
        double[] bubbleZ = new double[list.size()];
        String[] bubbleName = new String[list.size()];
        double[] xMarker = {10.0d, 50.0d, 90.0d};
        String[] xColor = {"#50A6DA", "#F2586A"};
        String[] yColor = {"#FF6464", "#00FF00"};
        Double.valueOf(0.0d);
        Double.valueOf(0.0d);
        List list_data = new ArrayList();
        double yMax = 10.0d;
        for (int i = 0; i < list.size(); i++) {
            data[0][i] = Double.valueOf(((Object[]) list.get(i))[4] + "").doubleValue();
            data[1][i] = Double.valueOf(((Object[]) list.get(i))[7] + "").doubleValue();
            data[2][i] = Double.valueOf(((Object[]) list.get(i))[10] + "").doubleValue();
            columnKeys[i] = String.valueOf(i + 1) + ((Object[]) list.get(i))[1];
            bubbleE[i] = Double.valueOf(((Object[]) list.get(i))[4] + "").doubleValue();
            bubbleC[i] = Double.valueOf(((Object[]) list.get(i))[7] + "").doubleValue();
            bubbleD[i] = Double.valueOf(((Object[]) list.get(i))[10] + "").doubleValue();
            bubbleZ[i] = Double.valueOf(((Object[]) list.get(i))[10] + "").doubleValue();
            bubbleName[i] = ((Object[]) list.get(i))[1] + "";
            list_data.add(Double.valueOf(((Object[]) list.get(i))[4] + ""));
            list_data.add(Double.valueOf(((Object[]) list.get(i))[7] + ""));
            list_data.add(Double.valueOf(((Object[]) list.get(i))[10] + ""));
            if (Math.abs(bubbleD[i]) > yMax) {
                yMax = Math.abs(bubbleD[i]);
            }
        }
        double yMax2 = Math.ceil(yMax);
        double[] yMarker = {-yMax2, 0.0d, yMax2};
        if (list_data.size() == 0) {
            list_data.add(Double.valueOf(0.0d));
        }
        Double maxDesc = (Double) Collections.max(list_data);
        Double minDesc = (Double) Collections.min(list_data);
        Double count_unit = Double.valueOf((maxDesc.doubleValue() - minDesc.doubleValue()) / 5.0d);
        for (int i2 = 0; i2 < bubbleZ.length; i2++) {
            bubbleZ[i2] = 0.5d;
        }
        try {
            HttpServletResponse response = ServletActionContext.getResponse();
            response.reset();
            response.setContentType("image/jpeg");
            JFreeChart chart = this.lc.getLineChar(data, rowKeys, columnKeys, "学生", "分数", "学生进步度对比图", "#0", count_unit, Integer.valueOf(rowKeys.length), "Y", "##.#");
            getChartImageFolder(chart, "tmpLinePng", Const.width_1100, Const.height_500, tuName[0] + userId);
            JFreeChart chart1 = this.bubbleChart.createBubbleChart2(bubbleE, bubbleD, bubbleZ, bubbleName, "", "出口标准分", "进步度", xMarker, yMarker, xColor, yColor);
            getChartImageFolder(chart1, "tmpLinePng", 2000, 1000, tuName[1] + userId);
            JFreeChart chart2 = this.bubbleChart.createBubbleChart2(bubbleC, bubbleD, bubbleZ, bubbleName, "", "入口标准分", "进步度", xMarker, yMarker, xColor, yColor);
            getChartImageFolder(chart2, "tmpLinePng", 2000, 1000, tuName[2] + userId);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String ajaxAction_exportTopscore(String examNum, String gradeNum, String schoolNum, String subjectNum, String classNum, String studentId, String studentType, String type, String source, String step, String sNum, String c_exam, String rpt_name, String isMoreSchool, String rptTitle, String isHistory, String isSaveWrite, String dirPath, String uri, String userNum, String schName, String gradeName, String className, String subjectName, String imgRoot, String agent, String fufen, String subCompose, String islevel) {
        String rptTitle2 = this.sp.getHeaderStr(examNum, subjectNum, gradeNum, schoolNum, classNum, studentId, studentType, true, true, false, false, false, true, false, true, false, false, false, false, true, true, false, subCompose, fufen);
        String folderPath = "ExportFolder/reportExcel" + userNum;
        String str = "reportExcel" + userNum;
        String str2 = "reportExcel" + userNum;
        String excelName = (null == gradeName || "".equals(gradeName)) ? rpt_name + "_" + gradeNum : rpt_name + "_" + gradeName;
        if (null != classNum && !"".equals(classNum) && !classNum.contains(Const.STRING_SEPERATOR)) {
            excelName = (null == className || "".equals(className)) ? excelName + "_" + classNum : excelName + "_" + className;
        }
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        String fufenStr = "1".equals(fufen) ? "赋分" : "原始分";
        try {
            WritableWorkbook wwBook = Workbook.createWorkbook(excelFile);
            WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
            biaotis1.setAlignment(Alignment.LEFT);
            biaotis1.setVerticalAlignment(VerticalAlignment.CENTRE);
            WritableFont titles = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat title = new WritableCellFormat(titles);
            title.setAlignment(Alignment.LEFT);
            title.setVerticalAlignment(VerticalAlignment.CENTRE);
            title.setWrap(true);
            WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            WritableCellFormat cFormat1 = new WritableCellFormat(font1);
            cFormat1.setAlignment(Alignment.CENTRE);
            cFormat1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1.setBackground(Const.titleBackground_color);
            cFormat1.setWrap(true);
            WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat2 = new WritableCellFormat(font2);
            cFormat2.setAlignment(Alignment.CENTRE);
            cFormat2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2.setBackground(Const.textOuBackGround_color);
            cFormat2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2.setWrap(true);
            WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat3 = new WritableCellFormat(font3);
            cFormat3.setAlignment(Alignment.CENTRE);
            cFormat3.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3.setBackground(Const.textJiBackGround_color);
            cFormat3.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3.setWrap(true);
            List quest = report.maxClaScore(examNum, subjectNum, gradeNum, schoolNum, classNum, type, studentType, source, "0", fufen, subCompose, islevel);
            try {
                WritableSheet sheet = wwBook.createSheet(rpt_name, 0);
                try {
                    Label biaotou = new Label(0, 0, rpt_name, biaotis1);
                    sheet.addCell(biaotou);
                    new DecimalFormat("0");
                    Label xinxi = new Label(0, 1, rptTitle2, title);
                    sheet.addCell(xinxi);
                    sheet.setRowView(1, Const.height_500);
                    sheet.mergeCells(0, 1, (quest.size() * 3) - 1, 1);
                    sheet.mergeCells(0, 0, (quest.size() * 3) - 1, 0);
                    new DecimalFormat("0.00");
                    DecimalFormat df1 = new DecimalFormat("0.0");
                    if (quest.size() > 0) {
                        for (int i = 0; i < quest.size(); i++) {
                            String mData = (String) ((Object[]) ((List) quest.get(i)).get(0))[5];
                            Label subjectname = new Label(3 * i, 2, mData, cFormat1);
                            sheet.addCell(subjectname);
                            sheet.mergeCells(3 * i, 2, 2 + (3 * i), 2);
                            if (schoolNum.equals("allschool")) {
                                Label classTitle = new Label(3 * i, 3, "学校", cFormat1);
                                sheet.addCell(classTitle);
                            } else {
                                Label classTitle2 = new Label(3 * i, 3, "班级", cFormat1);
                                sheet.addCell(classTitle2);
                            }
                            Label a1 = new Label(1 + (3 * i), 3, "姓 名", cFormat1);
                            sheet.addCell(a1);
                            Label a2 = new Label(2 + (3 * i), 3, fufenStr, cFormat1);
                            sheet.addCell(a2);
                            List ss = (List) quest.get(i);
                            for (int k = 0; k < ss.size(); k++) {
                                if (k % 2 == 0) {
                                    Label aa = new Label(i * 3, 4 + k, ((Object[]) ss.get(k))[2] + "", cFormat2);
                                    sheet.addCell(aa);
                                    Label bb = new Label((i * 3) + 1, 4 + k, ((Object[]) ss.get(k))[7] + "", cFormat2);
                                    sheet.addCell(bb);
                                    Number cc = new Number((i * 3) + 2, 4 + k, Double.valueOf(df1.format(((Object[]) ss.get(k))[8])).doubleValue(), cFormat2);
                                    sheet.addCell(cc);
                                } else {
                                    Label aa2 = new Label(i * 3, 4 + k, ((Object[]) ss.get(k))[2] + "", cFormat3);
                                    sheet.addCell(aa2);
                                    Label bb2 = new Label((i * 3) + 1, 4 + k, ((Object[]) ss.get(k))[7] + "", cFormat3);
                                    sheet.addCell(bb2);
                                    Number cc2 = new Number((i * 3) + 2, 4 + k, Double.valueOf(df1.format(((Object[]) ss.get(k))[8])).doubleValue(), cFormat3);
                                    sheet.addCell(cc2);
                                }
                            }
                        }
                    } else {
                        Label subjectname2 = new Label(0, 2, "数据为空", cFormat1);
                        sheet.addCell(subjectname2);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                wwBook.write();
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response = ServletActionContext.getResponse();
                            response.reset();
                            ServletOutputStream outputStream = response.getOutputStream();
                            String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName2 = loadFileName.replace("+", " ");
                            response.setContentType("Content-type: applicationnd.ms-excel");
                            response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xls");
                            response.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte = new byte[1024];
                            FileInputStream in = new FileInputStream(excelFile);
                            while (true) {
                                int n = in.read(tempByte);
                                if (n == -1) {
                                    break;
                                }
                                try {
                                    outputStream.write(tempByte, 0, n);
                                } catch (Exception e2) {
                                    this.log.error("保存未成功", e2);
                                }
                            }
                            outputStream.flush();
                            outputStream.close();
                            in.close();
                        }
                    } catch (WriteException e3) {
                        e3.printStackTrace();
                    }
                }
            } catch (Exception e4) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response2 = ServletActionContext.getResponse();
                            response2.reset();
                            ServletOutputStream outputStream2 = response2.getOutputStream();
                            String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName4 = loadFileName3.replace("+", " ");
                            response2.setContentType("Content-type: applicationnd.ms-excel");
                            response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xls");
                            response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte2 = new byte[1024];
                            FileInputStream in2 = new FileInputStream(excelFile);
                            while (true) {
                                int n2 = in2.read(tempByte2);
                                if (n2 == -1) {
                                    break;
                                }
                                try {
                                    outputStream2.write(tempByte2, 0, n2);
                                } catch (Exception e5) {
                                    this.log.error("保存未成功", e5);
                                }
                            }
                            outputStream2.flush();
                            outputStream2.close();
                            in2.close();
                        }
                    } catch (WriteException e6) {
                        e6.printStackTrace();
                    }
                }
            } catch (Throwable th) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response3 = ServletActionContext.getResponse();
                            response3.reset();
                            ServletOutputStream outputStream3 = response3.getOutputStream();
                            String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName6 = loadFileName5.replace("+", " ");
                            response3.setContentType("Content-type: applicationnd.ms-excel");
                            response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xls");
                            response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte3 = new byte[1024];
                            FileInputStream in3 = new FileInputStream(excelFile);
                            while (true) {
                                int n3 = in3.read(tempByte3);
                                if (n3 == -1) {
                                    break;
                                }
                                try {
                                    outputStream3.write(tempByte3, 0, n3);
                                } catch (Exception e7) {
                                    this.log.error("保存未成功", e7);
                                }
                            }
                            outputStream3.flush();
                            outputStream3.close();
                            in3.close();
                        }
                    } catch (WriteException e8) {
                        e8.printStackTrace();
                        throw th;
                    }
                }
                throw th;
            }
        } catch (Exception e9) {
            e9.printStackTrace();
        }
        return null;
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String teachertopStu_exportgetData(String examNum, String gradeNum, String schoolNum, String subjectNum, String classNum, String studentId, String studentType, String type, String source, String step, String sNum, String c_exam, String rpt_name, String isMoreSchool, String rptTitle, String isHistory, String isSaveWrite, String dirPath, String uri, String userNum, String schName, String gradeName, String className, String subjectName, String imgRoot, String agent, String fufen, String subCompose, String islevel) {
        String rptTitle2 = this.sp.getHeaderStr(examNum, subjectNum, gradeNum, schoolNum, classNum, studentId, studentType, true, true, true, true, false, true, true, true, false, true, true, true, true, true, false, subCompose, fufen);
        String folderPath = "ExportFolder/reportExcel" + userNum;
        String str = "reportExcel" + userNum;
        String str2 = "reportExcel" + userNum;
        String excelName = (null == gradeName || "".equals(gradeName)) ? rpt_name + "_" + gradeNum : rpt_name + "_" + gradeName;
        if (null != classNum && !"".equals(classNum) && !classNum.contains(Const.STRING_SEPERATOR)) {
            excelName = (null == className || "".equals(className)) ? excelName + "_" + classNum : excelName + "_" + className;
        }
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        String fufenStr = "1".equals(fufen) ? "赋分" : "原始分";
        String viewRankOfScoreInfo = Configuration.getInstance().getViewRankOfScoreInfo();
        try {
            WritableWorkbook wwBook = Workbook.createWorkbook(excelFile);
            WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
            biaotis1.setAlignment(Alignment.LEFT);
            biaotis1.setVerticalAlignment(VerticalAlignment.CENTRE);
            WritableFont titles = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat title = new WritableCellFormat(titles);
            title.setAlignment(Alignment.LEFT);
            title.setVerticalAlignment(VerticalAlignment.CENTRE);
            title.setWrap(true);
            WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            WritableCellFormat cFormat1 = new WritableCellFormat(font1);
            cFormat1.setAlignment(Alignment.CENTRE);
            cFormat1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1.setBackground(Const.titleBackground_color);
            cFormat1.setWrap(true);
            WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat2 = new WritableCellFormat(font2);
            cFormat2.setAlignment(Alignment.CENTRE);
            cFormat2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2.setBackground(Const.textOuBackGround_color);
            cFormat2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2.setWrap(true);
            new NumberFormat("0.0");
            WritableCellFormat cFormat2_1 = new WritableCellFormat(font2);
            cFormat2_1.setAlignment(Alignment.CENTRE);
            cFormat2_1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_1.setBackground(Const.textOuBackGround_color);
            cFormat2_1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_1.setWrap(true);
            WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat3 = new WritableCellFormat(font3);
            cFormat3.setAlignment(Alignment.CENTRE);
            cFormat3.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3.setBackground(Const.textJiBackGround_color);
            cFormat3.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3.setWrap(true);
            WritableCellFormat cFormat3_1 = new WritableCellFormat(font3);
            cFormat3_1.setAlignment(Alignment.CENTRE);
            cFormat3_1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_1.setBackground(Const.textJiBackGround_color);
            cFormat3_1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_1.setWrap(true);
            List quest = this.reportService.getTeachertopStudent(examNum, subjectNum, gradeNum, schoolNum, classNum, studentType, type, source, sNum, "0", fufen, subCompose, islevel);
            try {
                try {
                    WritableSheet sheet = wwBook.createSheet(rpt_name, 0);
                    sheet.getSettings().setShowGridLines(false);
                    try {
                        Label biaotou = new Label(0, 0, rpt_name, biaotis1);
                        sheet.addCell(biaotou);
                        DecimalFormat df01 = new DecimalFormat("0.0");
                        df01.setRoundingMode(RoundingMode.HALF_UP);
                        List list1 = (List) quest.get(0);
                        List<Subject> subjectList = (List) quest.get(1);
                        new DecimalFormat("0");
                        Label xinxi = new Label(0, 1, rptTitle2, title);
                        sheet.addCell(xinxi);
                        sheet.setRowView(1, Const.height_500);
                        sheet.mergeCells(0, 0, subjectList.size() * 3, 0);
                        sheet.mergeCells(0, 1, subjectList.size() * 3, 1);
                        Label mingcheng = new Label(0, 2, "姓名", cFormat1);
                        sheet.addCell(mingcheng);
                        sheet.mergeCells(0, 2, 0, 3);
                        if (schoolNum.contains(Const.STRING_SEPERATOR) || schoolNum.contains("allschool")) {
                            Label banren = new Label(1, 2, "学校", cFormat1);
                            sheet.addCell(banren);
                        } else {
                            Label banren2 = new Label(1, 2, "班级", cFormat1);
                            sheet.addCell(banren2);
                        }
                        sheet.mergeCells(1, 2, 1, 3);
                        int index = viewRankOfScoreInfo.equals("1") ? 3 : 2;
                        for (int i = 0; i < subjectList.size(); i++) {
                            int ii = 0;
                            Label subjectNameLabel = new Label(2 + (index * i), 2, subjectList.get(i).getSubjectName(), cFormat1);
                            sheet.addCell(subjectNameLabel);
                            sheet.setColumnView(2 + (index * i), 10);
                            Label yunashifen = new Label(2 + (index * i), 3, fufenStr, cFormat1);
                            sheet.addCell(yunashifen);
                            if (viewRankOfScoreInfo.equals("1")) {
                                if (schoolNum.contains(Const.STRING_SEPERATOR) || schoolNum.contains("allschool")) {
                                    Label graderank = new Label(3 + (index * i), 3, "区排", cFormat1);
                                    sheet.addCell(graderank);
                                    sheet.setColumnView(3 + (3 * i), 10);
                                } else {
                                    Label graderank2 = new Label(3 + (index * i), 3, "校排", cFormat1);
                                    sheet.addCell(graderank2);
                                    sheet.setColumnView(3 + (index * i), 10);
                                }
                                ii = 0 + 1;
                            }
                            if (subjectList.get(i).getSubjectName().equals("总分")) {
                                sheet.mergeCells(2 + (index * i), 2, ((3 + (index * i)) + ii) - 1, 2);
                            } else {
                                sheet.mergeCells(2 + (index * i), 2, 3 + (index * i) + ii, 2);
                                Label ming = new Label(3 + (index * i) + ii, 3, "名差", cFormat1);
                                sheet.addCell(ming);
                            }
                        }
                        for (int j = 0; j < list1.size(); j++) {
                            if (j % 2 != 0) {
                                int m = 0;
                                List newList = (List) list1.get(j);
                                for (int k = 0; k < newList.size(); k++) {
                                    String iszongfen = Convert.toStr(((Object[]) newList.get(k))[3]);
                                    int ii2 = 0;
                                    if (k == 0) {
                                        Label studentName = new Label(0, 4 + j, String.valueOf(((Object[]) newList.get(k))[5] + ""), cFormat2);
                                        sheet.addCell(studentName);
                                        Label classNameLabel = new Label(1, 4 + j, String.valueOf(((Object[]) newList.get(k))[1] + ""), cFormat2);
                                        sheet.addCell(classNameLabel);
                                    }
                                    BigDecimal score0 = Convert.toBigDecimal(df01.format(((Object[]) newList.get(k))[6])).stripTrailingZeros();
                                    String scoreStr = score0.toPlainString();
                                    Number a1 = new Number(2 + (m * index), 4 + j, Double.valueOf(scoreStr).doubleValue(), cFormat2_1);
                                    sheet.addCell(a1);
                                    if (viewRankOfScoreInfo.equals("1")) {
                                        Number a2 = new Number(3 + (m * index), 4 + j, Integer.valueOf(((Object[]) newList.get(k))[7] + "").intValue(), cFormat2);
                                        sheet.addCell(a2);
                                        ii2 = 0 + 1;
                                    }
                                    if (!iszongfen.equals("总分")) {
                                        Number a3 = new Number(3 + (m * index) + ii2, 4 + j, Integer.valueOf(((Object[]) newList.get(k))[8] + "").intValue(), cFormat2);
                                        sheet.addCell(a3);
                                    }
                                    m++;
                                }
                            } else {
                                int m2 = 0;
                                List newList2 = (List) list1.get(j);
                                for (int k2 = 0; k2 < newList2.size(); k2++) {
                                    String iszongfen2 = Convert.toStr(((Object[]) newList2.get(k2))[3]);
                                    int ii3 = 0;
                                    if (k2 == 0) {
                                        Label studentName2 = new Label(0, 4 + j, String.valueOf(((Object[]) newList2.get(k2))[5] + ""), cFormat3);
                                        sheet.addCell(studentName2);
                                        Label classNameLabel2 = new Label(1, 4 + j, String.valueOf(((Object[]) newList2.get(k2))[1] + ""), cFormat3);
                                        sheet.addCell(classNameLabel2);
                                    }
                                    BigDecimal score02 = Convert.toBigDecimal(df01.format(((Object[]) newList2.get(k2))[6])).stripTrailingZeros();
                                    String scoreStr2 = score02.toPlainString();
                                    Number a12 = new Number(2 + (m2 * index), 4 + j, Double.valueOf(scoreStr2).doubleValue(), cFormat3_1);
                                    sheet.addCell(a12);
                                    if (viewRankOfScoreInfo.equals("1")) {
                                        Number a22 = new Number(3 + (m2 * index), 4 + j, Integer.valueOf(((Object[]) newList2.get(k2))[7] + "").intValue(), cFormat3);
                                        sheet.addCell(a22);
                                        ii3 = 0 + 1;
                                    }
                                    if (!iszongfen2.equals("总分")) {
                                        Number a32 = new Number(3 + (m2 * index) + ii3, 4 + j, Integer.valueOf(((Object[]) newList2.get(k2))[8] + "").intValue(), cFormat3);
                                        sheet.addCell(a32);
                                    }
                                    m2++;
                                }
                            }
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    wwBook.write();
                    if (wwBook != null) {
                        try {
                            wwBook.close();
                            if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                                HttpServletResponse response = ServletActionContext.getResponse();
                                response.reset();
                                ServletOutputStream outputStream = response.getOutputStream();
                                String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                String loadFileName2 = loadFileName.replace("+", " ");
                                response.setContentType("Content-type: applicationnd.ms-excel");
                                response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xls");
                                response.setHeader("Content-length", String.valueOf(excelFile.length()));
                                byte[] tempByte = new byte[1024];
                                FileInputStream in = new FileInputStream(excelFile);
                                while (true) {
                                    int n = in.read(tempByte);
                                    if (n == -1) {
                                        break;
                                    }
                                    try {
                                        outputStream.write(tempByte, 0, n);
                                    } catch (Exception e2) {
                                        this.log.error("保存未成功", e2);
                                    }
                                }
                                outputStream.flush();
                                outputStream.close();
                                in.close();
                            }
                        } catch (WriteException e3) {
                            e3.printStackTrace();
                        }
                    }
                } catch (Exception e4) {
                    if (wwBook != null) {
                        try {
                            wwBook.close();
                            if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                                HttpServletResponse response2 = ServletActionContext.getResponse();
                                response2.reset();
                                ServletOutputStream outputStream2 = response2.getOutputStream();
                                String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                String loadFileName4 = loadFileName3.replace("+", " ");
                                response2.setContentType("Content-type: applicationnd.ms-excel");
                                response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xls");
                                response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                                byte[] tempByte2 = new byte[1024];
                                FileInputStream in2 = new FileInputStream(excelFile);
                                while (true) {
                                    int n2 = in2.read(tempByte2);
                                    if (n2 == -1) {
                                        break;
                                    }
                                    try {
                                        outputStream2.write(tempByte2, 0, n2);
                                    } catch (Exception e5) {
                                        this.log.error("保存未成功", e5);
                                    }
                                }
                                outputStream2.flush();
                                outputStream2.close();
                                in2.close();
                            }
                        } catch (WriteException e6) {
                            e6.printStackTrace();
                        }
                    }
                }
            } catch (Throwable th) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response3 = ServletActionContext.getResponse();
                            response3.reset();
                            ServletOutputStream outputStream3 = response3.getOutputStream();
                            String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName6 = loadFileName5.replace("+", " ");
                            response3.setContentType("Content-type: applicationnd.ms-excel");
                            response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xls");
                            response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte3 = new byte[1024];
                            FileInputStream in3 = new FileInputStream(excelFile);
                            while (true) {
                                int n3 = in3.read(tempByte3);
                                if (n3 == -1) {
                                    break;
                                }
                                try {
                                    outputStream3.write(tempByte3, 0, n3);
                                } catch (Exception e7) {
                                    this.log.error("保存未成功", e7);
                                }
                            }
                            outputStream3.flush();
                            outputStream3.close();
                            in3.close();
                        }
                    } catch (WriteException e8) {
                        e8.printStackTrace();
                        throw th;
                    }
                }
                throw th;
            }
        } catch (Exception e9) {
            e9.printStackTrace();
        }
        return null;
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String upperLineAction_export_old(String examNum, String sjt, String gradeNum, String schoolNum, String subjectNum, String classNum, String studentId, String studentType, String type, String source, String step, String sNum, String c_exam, String rpt_name, String isMoreSchool, String rptTitle, String isHistory, String isSaveWrite, String dirPath, String uri, String userNum, String schName, String gradeName, String className, String subjectName, String imgRoot, String agent) {
        String rptTitle2 = this.sp.getHeaderStr(examNum, subjectNum, gradeNum, schoolNum, classNum, studentId, studentType, true, true, true, true, false, true, true, true, false, true, true, true, true, true, false, "0", "0");
        new ArrayList();
        List list = this.reportService.getUpperLineData_old(examNum, sjt, gradeNum, schoolNum, studentType, type, source, "0", null, null, null, null);
        String folderPath = "ExportFolder/reportExcel" + userNum;
        String str = "reportExcel" + userNum;
        String str2 = "reportExcel" + userNum;
        String excelName = (null == gradeName || "".equals(gradeName)) ? rpt_name + "_" + gradeNum : rpt_name + "_" + gradeName;
        if (null != classNum && !"".equals(classNum) && !classNum.contains(Const.STRING_SEPERATOR)) {
            excelName = (null == className || "".equals(className)) ? excelName + "_" + classNum : excelName + "_" + className;
        }
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        try {
            WritableWorkbook wwBook = Workbook.createWorkbook(excelFile);
            WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Colour.BLACK);
            WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
            biaotis1.setAlignment(Alignment.LEFT);
            biaotis1.setVerticalAlignment(VerticalAlignment.CENTRE);
            WritableFont titles = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Colour.BLACK);
            WritableCellFormat title = new WritableCellFormat(titles);
            title.setAlignment(Alignment.LEFT);
            title.setVerticalAlignment(VerticalAlignment.CENTRE);
            title.setWrap(true);
            NumberFormat nf1 = new NumberFormat("0.0");
            WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Colour.BLACK);
            WritableCellFormat cFormat1 = new WritableCellFormat(font1);
            cFormat1.setAlignment(Alignment.CENTRE);
            cFormat1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1.setBackground(Const.jxl_head);
            cFormat1.setWrap(true);
            WritableCellFormat cFormat1_1 = new WritableCellFormat(font1, nf1);
            cFormat1_1.setAlignment(Alignment.CENTRE);
            cFormat1_1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1_1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1_1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1_1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1_1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1_1.setBackground(Const.jxl_head);
            cFormat1_1.setWrap(true);
            WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Colour.BLACK);
            WritableCellFormat cFormat2 = new WritableCellFormat(font2);
            cFormat2.setAlignment(Alignment.CENTRE);
            cFormat2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2.setBackground(Const.jxlcolo_row2);
            cFormat2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2.setWrap(true);
            WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Colour.BLACK);
            WritableCellFormat cFormat3 = new WritableCellFormat(font3);
            cFormat3.setAlignment(Alignment.CENTRE);
            cFormat3.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3.setBackground(Const.jxlcolo_row1);
            cFormat3.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3.setWrap(true);
            try {
                WritableSheet sheet = wwBook.createSheet(rpt_name, 0);
                sheet.getSettings().setShowGridLines(false);
                try {
                    int list0Size = ((List) list.get(0)).size();
                    int list1Size = ((List) list.get(1)).size();
                    int list2Size = ((List) list.get(2)).size();
                    List allSubList = (List) list.get(0);
                    List claDataList = (List) list.get(1);
                    int aa = list0Size * list2Size;
                    int classCount = list1Size / aa;
                    Label biaoti = new Label(0, 0, rpt_name, biaotis1);
                    sheet.addCell(biaoti);
                    sheet.mergeCells(0, 0, 17, 0);
                    new DecimalFormat("0");
                    DecimalFormat df2 = new DecimalFormat("#.00");
                    Label xinxi = new Label(0, 1, rptTitle2, title);
                    sheet.addCell(xinxi);
                    sheet.setRowView(1, Const.height_500);
                    sheet.mergeCells(0, 1, 17, 1);
                    Label subject = new Label(0, 2, "学科", cFormat1);
                    sheet.addCell(subject);
                    Label batch = new Label(0, 3, "批次", cFormat1);
                    sheet.addCell(batch);
                    Label scoreThread = new Label(0, 4, "分数线", cFormat1);
                    sheet.addCell(scoreThread);
                    Label target = new Label(0, 5, "目标/上线", cFormat1);
                    sheet.addCell(target);
                    int huanse = 0;
                    for (int a = 0; a < aa * 4; a++) {
                        if ((classCount + 1) % 2 == 0) {
                            Label allGrade = new Label(0, classCount + 6, "全年级", cFormat3);
                            sheet.addCell(allGrade);
                            Label target_s_allGrade = new Label(a + 1, classCount + 6, "0", cFormat3);
                            sheet.addCell(target_s_allGrade);
                        } else {
                            Label allGrade2 = new Label(0, classCount + 6, "全年级", cFormat2);
                            sheet.addCell(allGrade2);
                            Label target_s_allGrade2 = new Label(a + 1, classCount + 6, "0", cFormat2);
                            sheet.addCell(target_s_allGrade2);
                        }
                    }
                    if (null != this.showAnalyiseImage && this.showAnalyiseImage.equals("1")) {
                        getSubChartImgFile_upperLineAction(examNum, sjt, gradeNum, schoolNum, studentType, type, source, null, imgRoot, "T", null, null, list, true, userNum);
                    }
                    for (int i = 0; i < ((List) list.get(0)).size(); i++) {
                        List list1 = (List) ((List) list.get(0)).get(i);
                        List singleSubList = (List) allSubList.get(i);
                        for (int j = 0; j < list1.size(); j++) {
                            if (i == 0 && null != this.showAnalyiseImage && this.showAnalyiseImage.equals("1")) {
                                for (int ii = 0; ii < allSubList.size(); ii++) {
                                    String subNum = String.valueOf(((Object[]) ((List) allSubList.get(ii)).get(0))[1]);
                                    String innerlineType = String.valueOf(((Object[]) singleSubList.get(j))[3]);
                                    File imgFile = getSubChartImgFile_upperLineAction(examNum, sjt, gradeNum, schoolNum, studentType, type, source, null, imgRoot, "T", subNum, innerlineType, list, false, userNum);
                                    WritableImage image = new WritableImage(0.0d, classCount + 8 + (22 * ii) + (j * 22 * allSubList.size()), 12.0d, 20.0d, imgFile);
                                    sheet.addImage(image);
                                }
                            }
                            Label subjects = new Label((i * 4 * list1.size()) + 1, 2, String.valueOf(((Object[]) list1.get(j))[0]), cFormat1);
                            sheet.addCell(subjects);
                            sheet.mergeCells((i * 4 * list1.size()) + 1, 2, (i * 4 * list1.size()) + (4 * singleSubList.size()), 2);
                            Label batchs = new Label((i * 4 * list1.size()) + (4 * j) + 1, 3, String.valueOf(((Object[]) list1.get(j))[6]), cFormat1);
                            sheet.addCell(batchs);
                            sheet.mergeCells((i * 4 * list1.size()) + (4 * j) + 1, 3, (i * 4 * list1.size()) + (4 * j) + 4, 3);
                            Number scoreThreads = new Number((i * 4 * list1.size()) + (4 * j) + 1, 4, Float.valueOf(((Object[]) list1.get(j))[5].toString()).floatValue(), cFormat1_1);
                            sheet.addCell(scoreThreads);
                            sheet.mergeCells((i * 4 * list1.size()) + (4 * j) + 1, 4, (i * 4 * list1.size()) + (4 * j) + 4, 4);
                            Label totalStudent = new Label((4 * i * list1.size()) + (4 * j) + 1, 5, "参考人数", cFormat1);
                            sheet.addCell(totalStudent);
                            Label targets = new Label((4 * i * list1.size()) + (4 * j) + 2, 5, "目标", cFormat1);
                            sheet.addCell(targets);
                            Label accomplish = new Label((4 * i * list1.size()) + (4 * j) + 3, 5, "上线", cFormat1);
                            sheet.addCell(accomplish);
                            Label accomplishLv = new Label((4 * i * list1.size()) + (4 * j) + 4, 5, "上线率", cFormat1);
                            sheet.addCell(accomplishLv);
                            sheet.setColumnView((4 * i * list1.size()) + (4 * j) + 1, 5);
                            sheet.setColumnView((4 * i * list1.size()) + (4 * j) + 2, 5);
                            sheet.setColumnView((4 * i * list1.size()) + (4 * j) + 3, 5);
                            sheet.setColumnView((4 * i * list1.size()) + (4 * j) + 4, 10);
                        }
                    }
                    if (null != this.showAnalyiseImage && this.showAnalyiseImage.equals("1")) {
                        getClaChartImgFile_upperLineAction(examNum, sjt, gradeNum, schoolNum, studentType, type, source, null, null, null, imgRoot, "T", list, true, userNum);
                    }
                    for (int x = 0; x < ((List) list.get(1)).size(); x++) {
                        if (x % aa < list2Size && x < aa && null != this.showAnalyiseImage && this.showAnalyiseImage.equals("1")) {
                            for (int cInt = 0; cInt < classCount; cInt++) {
                                String claNum = String.valueOf(((Object[]) claDataList.get((cInt * aa) + (x % aa)))[3]);
                                String innerlineType2 = String.valueOf(((Object[]) claDataList.get(x))[10]);
                                File imgFile2 = getClaChartImgFile_upperLineAction(examNum, sjt, gradeNum, schoolNum, studentType, type, source, null, claNum, innerlineType2, imgRoot, "T", list, false, userNum);
                                WritableImage image2 = new WritableImage(13.0d, classCount + 8 + (22 * cInt) + (x * 22 * classCount), 12.0d, 20.0d, imgFile2);
                                sheet.addImage(image2);
                            }
                        }
                        if (x % aa == 0) {
                            if (huanse % 2 == 0) {
                                Label class_name = new Label(0, (x / aa) + 6, String.valueOf(((Object[]) ((List) list.get(1)).get(x))[4]), cFormat2);
                                sheet.addCell(class_name);
                            } else {
                                Label class_name2 = new Label(0, (x / aa) + 6, String.valueOf(((Object[]) ((List) list.get(1)).get(x))[4]), cFormat3);
                                sheet.addCell(class_name2);
                            }
                            huanse++;
                        }
                    }
                    for (int c = 0; c < classCount; c++) {
                        for (int y = 0; y < aa; y++) {
                            if (c % 2 == 0) {
                                Number totalStudent_s = new Number((4 * y) + 1, 6 + c, Integer.valueOf(((Object[]) ((List) list.get(1)).get((aa * c) + y))[15].toString()).intValue(), cFormat2);
                                sheet.addCell(totalStudent_s);
                                Number target_s = new Number((4 * y) + 2, 6 + c, Integer.valueOf(((Object[]) ((List) list.get(1)).get((aa * c) + y))[12].toString()).intValue(), cFormat2);
                                sheet.addCell(target_s);
                                Number accomplish_s = new Number((4 * y) + 3, 6 + c, Integer.valueOf(((Object[]) ((List) list.get(1)).get((aa * c) + y))[11].toString()).intValue(), cFormat2);
                                sheet.addCell(accomplish_s);
                                Label accomplishLv_s = new Label((4 * y) + 4, 6 + c, ((Object[]) ((List) list.get(1)).get((aa * c) + y))[16].toString() + "%", cFormat2);
                                sheet.addCell(accomplishLv_s);
                                int quan_Grade_1 = Integer.valueOf(sheet.getCell((4 * y) + 1, 6 + classCount).getContents()).intValue();
                                int quan_Grade_2 = Integer.valueOf(sheet.getCell((4 * y) + 2, 6 + classCount).getContents()).intValue();
                                int quan_Grade_3 = Integer.valueOf(sheet.getCell((4 * y) + 3, 6 + classCount).getContents()).intValue();
                                int numOfStudent = Integer.valueOf(String.valueOf(((Object[]) ((List) list.get(1)).get((aa * c) + y))[15])).intValue();
                                int mubiao = Integer.valueOf(String.valueOf(((Object[]) ((List) list.get(1)).get((aa * c) + y))[12])).intValue();
                                int wancheng = Integer.valueOf(String.valueOf(((Object[]) ((List) list.get(1)).get((aa * c) + y))[11])).intValue();
                                int all_count_student = quan_Grade_1 + numOfStudent;
                                int all_count = quan_Grade_2 + mubiao;
                                int all_count_wancheng = quan_Grade_3 + wancheng;
                                Number all_student = new Number((4 * y) + 1, 6 + classCount, all_count_student, cFormat3);
                                sheet.addCell(all_student);
                                Number all = new Number((4 * y) + 2, 6 + classCount, all_count, cFormat3);
                                sheet.addCell(all);
                                Number all_2 = new Number((4 * y) + 3, 6 + classCount, all_count_wancheng, cFormat3);
                                sheet.addCell(all_2);
                                Label all_lv = new Label((4 * y) + 4, 6 + classCount, df2.format(Math.round((Double.valueOf(all_count_wancheng + "").doubleValue() / all_count_student) * 10000.0d) * 0.01d) + "%", cFormat3);
                                sheet.addCell(all_lv);
                            } else {
                                Number totalStudent_s2 = new Number((4 * y) + 1, 6 + c, Integer.valueOf(((Object[]) ((List) list.get(1)).get((aa * c) + y))[15].toString()).intValue(), cFormat3);
                                sheet.addCell(totalStudent_s2);
                                Number target_s2 = new Number((4 * y) + 2, 6 + c, Integer.valueOf(((Object[]) ((List) list.get(1)).get((aa * c) + y))[12].toString()).intValue(), cFormat3);
                                sheet.addCell(target_s2);
                                Number accomplish_s2 = new Number((4 * y) + 3, 6 + c, Integer.valueOf(((Object[]) ((List) list.get(1)).get((aa * c) + y))[11].toString()).intValue(), cFormat3);
                                sheet.addCell(accomplish_s2);
                                Label accomplishLv_s2 = new Label((4 * y) + 4, 6 + c, ((Object[]) ((List) list.get(1)).get((aa * c) + y))[16].toString() + "%", cFormat3);
                                sheet.addCell(accomplishLv_s2);
                                int quan_Grade_12 = Integer.valueOf(sheet.getCell((4 * y) + 1, 6 + classCount).getContents()).intValue();
                                int quan_Grade_22 = Integer.valueOf(sheet.getCell((4 * y) + 2, 6 + classCount).getContents()).intValue();
                                int quan_Grade_32 = Integer.valueOf(sheet.getCell((4 * y) + 3, 6 + classCount).getContents()).intValue();
                                int numOfStudent2 = Integer.valueOf(String.valueOf(((Object[]) ((List) list.get(1)).get((aa * c) + y))[15])).intValue();
                                int mubiao2 = Integer.valueOf(String.valueOf(((Object[]) ((List) list.get(1)).get((aa * c) + y))[12])).intValue();
                                int wancheng2 = Integer.valueOf(String.valueOf(((Object[]) ((List) list.get(1)).get((aa * c) + y))[11])).intValue();
                                int all_count_student2 = quan_Grade_12 + numOfStudent2;
                                int all_count2 = quan_Grade_22 + mubiao2;
                                int all_count_wancheng2 = quan_Grade_32 + wancheng2;
                                Number all_student2 = new Number((4 * y) + 1, 6 + classCount, all_count_student2, cFormat2);
                                sheet.addCell(all_student2);
                                Number all2 = new Number((4 * y) + 2, 6 + classCount, all_count2, cFormat2);
                                sheet.addCell(all2);
                                Number all_22 = new Number((4 * y) + 3, 6 + classCount, all_count_wancheng2, cFormat2);
                                sheet.addCell(all_22);
                                Label all_lv2 = new Label((4 * y) + 4, 6 + classCount, df2.format(Math.round((Double.valueOf(all_count_wancheng2 + "").doubleValue() / all_count_student2) * 10000.0d) * 0.01d) + "%", cFormat2);
                                sheet.addCell(all_lv2);
                            }
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                wwBook.write();
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response = ServletActionContext.getResponse();
                            response.reset();
                            ServletOutputStream outputStream = response.getOutputStream();
                            String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName2 = loadFileName.replace("+", " ");
                            response.setContentType("Content-type: applicationnd.ms-excel");
                            response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xls");
                            response.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte = new byte[1024];
                            FileInputStream in = new FileInputStream(excelFile);
                            while (true) {
                                int n = in.read(tempByte);
                                if (n == -1) {
                                    break;
                                }
                                try {
                                    outputStream.write(tempByte, 0, n);
                                } catch (Exception e2) {
                                    this.log.error("保存未成功", e2);
                                }
                            }
                            outputStream.flush();
                            outputStream.close();
                            in.close();
                        }
                    } catch (WriteException e3) {
                        e3.printStackTrace();
                    }
                }
            } catch (Exception e4) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response2 = ServletActionContext.getResponse();
                            response2.reset();
                            ServletOutputStream outputStream2 = response2.getOutputStream();
                            String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName4 = loadFileName3.replace("+", " ");
                            response2.setContentType("Content-type: applicationnd.ms-excel");
                            response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xls");
                            response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte2 = new byte[1024];
                            FileInputStream in2 = new FileInputStream(excelFile);
                            while (true) {
                                int n2 = in2.read(tempByte2);
                                if (n2 == -1) {
                                    break;
                                }
                                try {
                                    outputStream2.write(tempByte2, 0, n2);
                                } catch (Exception e5) {
                                    this.log.error("保存未成功", e5);
                                }
                            }
                            outputStream2.flush();
                            outputStream2.close();
                            in2.close();
                        }
                    } catch (WriteException e6) {
                        e6.printStackTrace();
                    }
                }
            } catch (Throwable th) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response3 = ServletActionContext.getResponse();
                            response3.reset();
                            ServletOutputStream outputStream3 = response3.getOutputStream();
                            String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName6 = loadFileName5.replace("+", " ");
                            response3.setContentType("Content-type: applicationnd.ms-excel");
                            response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xls");
                            response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte3 = new byte[1024];
                            FileInputStream in3 = new FileInputStream(excelFile);
                            while (true) {
                                int n3 = in3.read(tempByte3);
                                if (n3 == -1) {
                                    break;
                                }
                                try {
                                    outputStream3.write(tempByte3, 0, n3);
                                } catch (Exception e7) {
                                    this.log.error("保存未成功", e7);
                                }
                            }
                            outputStream3.flush();
                            outputStream3.close();
                            in3.close();
                        }
                    } catch (WriteException e8) {
                        e8.printStackTrace();
                        throw th;
                    }
                }
                throw th;
            }
        } catch (Exception e9) {
            e9.printStackTrace();
        }
        return null;
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String upperLineAction_export(String examNum, String gradeNum, String teachUnit_s, String teachUnit, String studentType, String type, String source, String subCompose, String fufen, String rpt_name, String rptTitle, String dirPath, String userNum, String agent) {
        CellFormat cellFormat;
        CellFormat cellFormat2;
        CellFormat cellFormat3;
        CellFormat cellFormat4;
        String rptTitle2 = this.sp.getHeaderStr(examNum, "", gradeNum, teachUnit, "", "", studentType, true, true, true, true, false, true, true, true, false, true, true, true, true, true, false, "0", fufen);
        new ArrayList();
        List list = this.reportService.getUpperLineData2(examNum, gradeNum, teachUnit_s, teachUnit, studentType, type, source, subCompose, fufen);
        String folderPath = "ExportFolder/reportExcel" + userNum;
        String str = "reportExcel" + userNum;
        String str2 = "reportExcel" + userNum;
        String excelName = rpt_name + "_" + gradeNum;
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        try {
            WritableWorkbook wwBook = Workbook.createWorkbook(excelFile);
            WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
            biaotis1.setAlignment(Alignment.LEFT);
            biaotis1.setVerticalAlignment(VerticalAlignment.CENTRE);
            WritableFont titles = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat title = new WritableCellFormat(titles);
            title.setAlignment(Alignment.LEFT);
            title.setVerticalAlignment(VerticalAlignment.CENTRE);
            title.setWrap(true);
            DecimalFormat df01 = new DecimalFormat("0.0");
            DecimalFormat df02 = new DecimalFormat("0.00");
            DecimalFormat df03 = new DecimalFormat("0.000");
            df01.setRoundingMode(RoundingMode.HALF_UP);
            df02.setRoundingMode(RoundingMode.HALF_UP);
            df03.setRoundingMode(RoundingMode.HALF_UP);
            DateFormat df_0 = new DateFormat("0%");
            DateFormat df_1 = new DateFormat("0.0%");
            DateFormat df_2 = new DateFormat("0.00%");
            NumberFormat nf1 = new NumberFormat("0.0");
            WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            WritableCellFormat cFormat1 = new WritableCellFormat(font1);
            cFormat1.setAlignment(Alignment.CENTRE);
            cFormat1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1.setBackground(Const.titleBackground_color);
            cFormat1.setWrap(true);
            WritableCellFormat cFormat1_1 = new WritableCellFormat(font1, nf1);
            cFormat1_1.setAlignment(Alignment.CENTRE);
            cFormat1_1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1_1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1_1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1_1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1_1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1_1.setBackground(Const.titleBackground_color);
            cFormat1_1.setWrap(true);
            WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            CellFormat writableCellFormat = new WritableCellFormat(font2);
            writableCellFormat.setAlignment(Alignment.CENTRE);
            writableCellFormat.setVerticalAlignment(VerticalAlignment.CENTRE);
            writableCellFormat.setBackground(Const.textOuBackGround_color);
            writableCellFormat.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            writableCellFormat.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            writableCellFormat.setBorder(Border.LEFT, BorderLineStyle.THIN);
            writableCellFormat.setBorder(Border.TOP, BorderLineStyle.THIN);
            writableCellFormat.setWrap(true);
            CellFormat writableCellFormat2 = new WritableCellFormat(font2, df_0);
            writableCellFormat2.setAlignment(Alignment.CENTRE);
            writableCellFormat2.setVerticalAlignment(VerticalAlignment.CENTRE);
            writableCellFormat2.setBackground(Const.textOuBackGround_color);
            writableCellFormat2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            writableCellFormat2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            writableCellFormat2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            writableCellFormat2.setBorder(Border.TOP, BorderLineStyle.THIN);
            writableCellFormat2.setWrap(true);
            CellFormat writableCellFormat3 = new WritableCellFormat(font2, df_1);
            writableCellFormat3.setAlignment(Alignment.CENTRE);
            writableCellFormat3.setVerticalAlignment(VerticalAlignment.CENTRE);
            writableCellFormat3.setBackground(Const.textOuBackGround_color);
            writableCellFormat3.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            writableCellFormat3.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            writableCellFormat3.setBorder(Border.LEFT, BorderLineStyle.THIN);
            writableCellFormat3.setBorder(Border.TOP, BorderLineStyle.THIN);
            writableCellFormat3.setWrap(true);
            CellFormat writableCellFormat4 = new WritableCellFormat(font2, df_2);
            writableCellFormat4.setAlignment(Alignment.CENTRE);
            writableCellFormat4.setVerticalAlignment(VerticalAlignment.CENTRE);
            writableCellFormat4.setBackground(Const.textOuBackGround_color);
            writableCellFormat4.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            writableCellFormat4.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            writableCellFormat4.setBorder(Border.LEFT, BorderLineStyle.THIN);
            writableCellFormat4.setBorder(Border.TOP, BorderLineStyle.THIN);
            writableCellFormat4.setWrap(true);
            WritableFont font2_bold = new WritableFont(WritableFont.ARIAL, 10, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat2_bold = new WritableCellFormat(font2_bold);
            cFormat2_bold.setAlignment(Alignment.CENTRE);
            cFormat2_bold.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_bold.setBackground(Const.textOuBackGround_color);
            cFormat2_bold.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_bold.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_bold.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_bold.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_bold.setWrap(true);
            WritableCellFormat baifenbiFormat2_bold0 = new WritableCellFormat(font2_bold, df_0);
            baifenbiFormat2_bold0.setAlignment(Alignment.CENTRE);
            baifenbiFormat2_bold0.setVerticalAlignment(VerticalAlignment.CENTRE);
            baifenbiFormat2_bold0.setBackground(Const.textOuBackGround_color);
            baifenbiFormat2_bold0.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            baifenbiFormat2_bold0.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            baifenbiFormat2_bold0.setBorder(Border.LEFT, BorderLineStyle.THIN);
            baifenbiFormat2_bold0.setBorder(Border.TOP, BorderLineStyle.THIN);
            baifenbiFormat2_bold0.setWrap(true);
            WritableCellFormat baifenbiFormat2_bold1 = new WritableCellFormat(font2_bold, df_1);
            baifenbiFormat2_bold1.setAlignment(Alignment.CENTRE);
            baifenbiFormat2_bold1.setVerticalAlignment(VerticalAlignment.CENTRE);
            baifenbiFormat2_bold1.setBackground(Const.textOuBackGround_color);
            baifenbiFormat2_bold1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            baifenbiFormat2_bold1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            baifenbiFormat2_bold1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            baifenbiFormat2_bold1.setBorder(Border.TOP, BorderLineStyle.THIN);
            baifenbiFormat2_bold1.setWrap(true);
            WritableCellFormat baifenbiFormat2_bold2 = new WritableCellFormat(font2_bold, df_2);
            baifenbiFormat2_bold2.setAlignment(Alignment.CENTRE);
            baifenbiFormat2_bold2.setVerticalAlignment(VerticalAlignment.CENTRE);
            baifenbiFormat2_bold2.setBackground(Const.textOuBackGround_color);
            baifenbiFormat2_bold2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            baifenbiFormat2_bold2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            baifenbiFormat2_bold2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            baifenbiFormat2_bold2.setBorder(Border.TOP, BorderLineStyle.THIN);
            baifenbiFormat2_bold2.setWrap(true);
            WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            CellFormat writableCellFormat5 = new WritableCellFormat(font3);
            writableCellFormat5.setAlignment(Alignment.CENTRE);
            writableCellFormat5.setVerticalAlignment(VerticalAlignment.CENTRE);
            writableCellFormat5.setBackground(Const.textJiBackGround_color);
            writableCellFormat5.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            writableCellFormat5.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            writableCellFormat5.setBorder(Border.LEFT, BorderLineStyle.THIN);
            writableCellFormat5.setBorder(Border.TOP, BorderLineStyle.THIN);
            writableCellFormat5.setWrap(true);
            CellFormat writableCellFormat6 = new WritableCellFormat(font3, df_0);
            writableCellFormat6.setAlignment(Alignment.CENTRE);
            writableCellFormat6.setVerticalAlignment(VerticalAlignment.CENTRE);
            writableCellFormat6.setBackground(Const.textJiBackGround_color);
            writableCellFormat6.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            writableCellFormat6.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            writableCellFormat6.setBorder(Border.LEFT, BorderLineStyle.THIN);
            writableCellFormat6.setBorder(Border.TOP, BorderLineStyle.THIN);
            writableCellFormat6.setWrap(true);
            CellFormat writableCellFormat7 = new WritableCellFormat(font3, df_1);
            writableCellFormat7.setAlignment(Alignment.CENTRE);
            writableCellFormat7.setVerticalAlignment(VerticalAlignment.CENTRE);
            writableCellFormat7.setBackground(Const.textJiBackGround_color);
            writableCellFormat7.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            writableCellFormat7.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            writableCellFormat7.setBorder(Border.LEFT, BorderLineStyle.THIN);
            writableCellFormat7.setBorder(Border.TOP, BorderLineStyle.THIN);
            writableCellFormat7.setWrap(true);
            CellFormat writableCellFormat8 = new WritableCellFormat(font3, df_2);
            writableCellFormat8.setAlignment(Alignment.CENTRE);
            writableCellFormat8.setVerticalAlignment(VerticalAlignment.CENTRE);
            writableCellFormat8.setBackground(Const.textJiBackGround_color);
            writableCellFormat8.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            writableCellFormat8.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            writableCellFormat8.setBorder(Border.LEFT, BorderLineStyle.THIN);
            writableCellFormat8.setBorder(Border.TOP, BorderLineStyle.THIN);
            writableCellFormat8.setWrap(true);
            WritableFont font3_bold = new WritableFont(WritableFont.ARIAL, 10, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat3_bold = new WritableCellFormat(font3_bold);
            cFormat3_bold.setAlignment(Alignment.CENTRE);
            cFormat3_bold.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_bold.setBackground(Const.textJiBackGround_color);
            cFormat3_bold.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_bold.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_bold.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_bold.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_bold.setWrap(true);
            WritableCellFormat baifenbiFormat3_bold0 = new WritableCellFormat(font3_bold, df_0);
            baifenbiFormat3_bold0.setAlignment(Alignment.CENTRE);
            baifenbiFormat3_bold0.setVerticalAlignment(VerticalAlignment.CENTRE);
            baifenbiFormat3_bold0.setBackground(Const.textJiBackGround_color);
            baifenbiFormat3_bold0.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            baifenbiFormat3_bold0.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            baifenbiFormat3_bold0.setBorder(Border.LEFT, BorderLineStyle.THIN);
            baifenbiFormat3_bold0.setBorder(Border.TOP, BorderLineStyle.THIN);
            baifenbiFormat3_bold0.setWrap(true);
            WritableCellFormat baifenbiFormat3_bold1 = new WritableCellFormat(font3_bold, df_1);
            baifenbiFormat3_bold1.setAlignment(Alignment.CENTRE);
            baifenbiFormat3_bold1.setVerticalAlignment(VerticalAlignment.CENTRE);
            baifenbiFormat3_bold1.setBackground(Const.textJiBackGround_color);
            baifenbiFormat3_bold1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            baifenbiFormat3_bold1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            baifenbiFormat3_bold1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            baifenbiFormat3_bold1.setBorder(Border.TOP, BorderLineStyle.THIN);
            baifenbiFormat3_bold1.setWrap(true);
            WritableCellFormat baifenbiFormat3_bold2 = new WritableCellFormat(font3_bold, df_2);
            baifenbiFormat3_bold2.setAlignment(Alignment.CENTRE);
            baifenbiFormat3_bold2.setVerticalAlignment(VerticalAlignment.CENTRE);
            baifenbiFormat3_bold2.setBackground(Const.textJiBackGround_color);
            baifenbiFormat3_bold2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            baifenbiFormat3_bold2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            baifenbiFormat3_bold2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            baifenbiFormat3_bold2.setBorder(Border.TOP, BorderLineStyle.THIN);
            baifenbiFormat3_bold2.setWrap(true);
            try {
                WritableSheet sheet = wwBook.createSheet(rpt_name, 0);
                sheet.getSettings().setShowGridLines(false);
                try {
                    List allSubList = (List) list.get(0);
                    List hebingDataList = (List) list.get(1);
                    int list0Size = ((List) list.get(0)).size();
                    Label biaoti = new Label(0, 0, rpt_name, biaotis1);
                    sheet.addCell(biaoti);
                    sheet.mergeCells(0, 0, 17, 0);
                    new DecimalFormat("0.00");
                    Label xinxi = new Label(0, 1, rptTitle2, title);
                    sheet.addCell(xinxi);
                    sheet.setRowView(1, Const.height_500);
                    sheet.mergeCells(0, 1, 17, 1);
                    Label subject = new Label(0, 2, "学科", cFormat1);
                    sheet.addCell(subject);
                    sheet.mergeCells(0, 2, 1, 2);
                    Label batch = new Label(0, 3, "批次", cFormat1);
                    sheet.addCell(batch);
                    sheet.mergeCells(0, 3, 1, 3);
                    Label scoreThread = new Label(0, 4, "分数线", cFormat1);
                    sheet.addCell(scoreThread);
                    sheet.mergeCells(0, 4, 1, 4);
                    Label target = new Label(0, 5, "教学单位", cFormat1);
                    sheet.addCell(target);
                    sheet.mergeCells(0, 5, 1, 5);
                    for (int i = 0; i < list0Size; i++) {
                        List<Map<String, Object>> list1 = (List) allSubList.get(i);
                        Label subjects = new Label((i * 3 * list1.size()) + 2, 2, Convert.toStr(list1.get(0).get("subjectName")), cFormat1);
                        sheet.addCell(subjects);
                        sheet.mergeCells((i * 3 * list1.size()) + 2, 2, ((i + 1) * 3 * list1.size()) + 1, 2);
                        for (int j = 0; j < list1.size(); j++) {
                            Label batchs = new Label((i * 3 * list1.size()) + (3 * j) + 2, 3, Convert.toStr(list1.get(j).get("name")), cFormat1);
                            sheet.addCell(batchs);
                            sheet.mergeCells((i * 3 * list1.size()) + (3 * j) + 2, 3, (i * 3 * list1.size()) + (3 * j) + 4, 3);
                            String scStr = Convert.toStr(list1.get(j).get("score"));
                            if (null == scStr || scStr.equals("")) {
                                Label scoreThreads = new Label((i * 3 * list1.size()) + (3 * j) + 2, 4, "", cFormat1_1);
                                sheet.addCell(scoreThreads);
                            } else {
                                Number scoreThreads2 = new Number((i * 3 * list1.size()) + (3 * j) + 2, 4, Convert.toFloat(scStr).floatValue(), cFormat1_1);
                                sheet.addCell(scoreThreads2);
                            }
                            sheet.mergeCells((i * 3 * list1.size()) + (3 * j) + 2, 4, (i * 3 * list1.size()) + (3 * j) + 4, 4);
                            Label totalStudent = new Label((3 * i * list1.size()) + (3 * j) + 2, 5, "参考人数", cFormat1);
                            sheet.addCell(totalStudent);
                            Label accomplish = new Label((3 * i * list1.size()) + (3 * j) + 3, 5, "上线", cFormat1);
                            sheet.addCell(accomplish);
                            Label accomplishLv = new Label((3 * i * list1.size()) + (3 * j) + 4, 5, "上线率", cFormat1);
                            sheet.addCell(accomplishLv);
                            sheet.setColumnView((3 * i * list1.size()) + (3 * j) + 2, 10);
                            sheet.setColumnView((3 * i * list1.size()) + (3 * j) + 3, 10);
                            sheet.setColumnView((3 * i * list1.size()) + (3 * j) + 4, 10);
                            sheet.setColumnView(0, 20);
                            sheet.setColumnView(1, 20);
                        }
                    }
                    String sitemid1 = "";
                    int row = 0;
                    int clo = 1;
                    for (int h = 0; h < hebingDataList.size(); h++) {
                        String sitemid2 = Convert.toStr(((Object[]) hebingDataList.get(h))[0]);
                        int size = list0Size * ((List) allSubList.get(0)).size();
                        if (!sitemid1.equals(sitemid2)) {
                            sitemid1 = sitemid2;
                            row++;
                            clo = 1;
                        }
                        if (row % 2 == 0) {
                            cellFormat = writableCellFormat5;
                            cellFormat2 = writableCellFormat6;
                            cellFormat3 = writableCellFormat7;
                            cellFormat4 = writableCellFormat8;
                        } else {
                            cellFormat = writableCellFormat;
                            cellFormat2 = writableCellFormat2;
                            cellFormat3 = writableCellFormat3;
                            cellFormat4 = writableCellFormat4;
                        }
                        Label class_name = new Label(0, 5 + row, String.valueOf(((Object[]) hebingDataList.get(h))[1]), cellFormat);
                        sheet.addCell(class_name);
                        sheet.mergeCells(0, 5 + row, 1, 5 + row);
                        int cankaorenshu = Integer.valueOf(((Object[]) hebingDataList.get(h))[7].toString()).intValue();
                        if (cankaorenshu == 0) {
                            Label totalStudent_s = new Label(clo + 1, 5 + row, "", cellFormat);
                            sheet.addCell(totalStudent_s);
                            Label accomplish_s = new Label(clo + 2, 5 + row, "", cellFormat);
                            sheet.addCell(accomplish_s);
                            Label accomplishLv_s = new Label(clo + 3, 5 + row, "", cellFormat);
                            sheet.addCell(accomplishLv_s);
                        } else {
                            int shangxian = Integer.valueOf(((Object[]) hebingDataList.get(h))[8].toString()).intValue();
                            String shangxianlv = Convert.toStr(Double.valueOf(shangxian / cankaorenshu));
                            Number totalStudent_s2 = new Number(clo + 1, 5 + row, cankaorenshu, cellFormat);
                            sheet.addCell(totalStudent_s2);
                            if (shangxian == 0) {
                                Label accomplish_s2 = new Label(clo + 2, 5 + row, "", cellFormat);
                                sheet.addCell(accomplish_s2);
                                Label accomplishLv_s2 = new Label(clo + 3, 5 + row, "", cellFormat2);
                                sheet.addCell(accomplishLv_s2);
                            } else {
                                Number accomplish_s3 = new Number(clo + 2, 5 + row, shangxian, cellFormat);
                                sheet.addCell(accomplish_s3);
                                String fullscore = Convert.toBigDecimal(df02.format(Double.valueOf(shangxianlv).doubleValue() * 100.0d)).stripTrailingZeros().toPlainString();
                                fullscore.indexOf(".");
                                if (fullscore.indexOf(".") == -1) {
                                    Number accomplishLv_s3 = new Number(clo + 3, 5 + row, Convert.toDouble(fullscore).doubleValue() / 100.0d, cellFormat2);
                                    sheet.addCell(accomplishLv_s3);
                                } else {
                                    int i1 = fullscore.length() - (fullscore.indexOf(".") + 1);
                                    if (i1 == 1) {
                                        Number accomplishLv_s4 = new Number(clo + 3, 5 + row, Float.valueOf(fullscore).floatValue() / 100.0f, cellFormat3);
                                        sheet.addCell(accomplishLv_s4);
                                    } else {
                                        Number accomplishLv_s5 = new Number(clo + 3, 5 + row, Float.valueOf(Convert.toBigDecimal(df02.format(Double.valueOf(fullscore))).stripTrailingZeros().toPlainString()).floatValue() / 100.0f, cellFormat4);
                                        sheet.addCell(accomplishLv_s5);
                                    }
                                }
                            }
                        }
                        clo += 3;
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                wwBook.write();
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        HttpServletResponse response = ServletActionContext.getResponse();
                        response.reset();
                        ServletOutputStream outputStream = response.getOutputStream();
                        String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                        String loadFileName2 = loadFileName.replace("+", " ");
                        response.setContentType("Content-type: applicationnd.ms-excel");
                        response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xls");
                        response.setHeader("Content-length", String.valueOf(excelFile.length()));
                        byte[] tempByte = new byte[1024];
                        FileInputStream in = new FileInputStream(excelFile);
                        while (true) {
                            int n = in.read(tempByte);
                            if (n == -1) {
                                break;
                            }
                            try {
                                outputStream.write(tempByte, 0, n);
                            } catch (Exception e2) {
                                this.log.error("保存未成功", e2);
                            }
                        }
                        outputStream.flush();
                        outputStream.close();
                        in.close();
                    } catch (WriteException e3) {
                        e3.printStackTrace();
                    }
                }
            } catch (Exception e4) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        HttpServletResponse response2 = ServletActionContext.getResponse();
                        response2.reset();
                        ServletOutputStream outputStream2 = response2.getOutputStream();
                        String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                        String loadFileName4 = loadFileName3.replace("+", " ");
                        response2.setContentType("Content-type: applicationnd.ms-excel");
                        response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xls");
                        response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                        byte[] tempByte2 = new byte[1024];
                        FileInputStream in2 = new FileInputStream(excelFile);
                        while (true) {
                            int n2 = in2.read(tempByte2);
                            if (n2 == -1) {
                                break;
                            }
                            try {
                                outputStream2.write(tempByte2, 0, n2);
                            } catch (Exception e5) {
                                this.log.error("保存未成功", e5);
                            }
                        }
                        outputStream2.flush();
                        outputStream2.close();
                        in2.close();
                    } catch (WriteException e6) {
                        e6.printStackTrace();
                    }
                }
            } catch (Throwable th) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        HttpServletResponse response3 = ServletActionContext.getResponse();
                        response3.reset();
                        ServletOutputStream outputStream3 = response3.getOutputStream();
                        String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                        String loadFileName6 = loadFileName5.replace("+", " ");
                        response3.setContentType("Content-type: applicationnd.ms-excel");
                        response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xls");
                        response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                        byte[] tempByte3 = new byte[1024];
                        FileInputStream in3 = new FileInputStream(excelFile);
                        while (true) {
                            int n3 = in3.read(tempByte3);
                            if (n3 == -1) {
                                break;
                            }
                            try {
                                outputStream3.write(tempByte3, 0, n3);
                            } catch (Exception e7) {
                                this.log.error("保存未成功", e7);
                            }
                        }
                        outputStream3.flush();
                        outputStream3.close();
                        in3.close();
                    } catch (WriteException e8) {
                        e8.printStackTrace();
                        throw th;
                    }
                }
                throw th;
            }
        } catch (Exception e9) {
            e9.printStackTrace();
        }
        return null;
    }

    public File getSubChartImgFile_upperLineAction(String examNum, String sjt, String gradeNum, String schoolNum, String studentType, String type, String source, String claNum, String dirPath, String subPngFlag, String subNum, String lineType, List alldata, boolean fag, String userNum) {
        if (fag) {
            subjectLineImage_upperLineAction(examNum, sjt, gradeNum, schoolNum, studentType, type, source, claNum, "T", subNum, lineType, alldata, userNum);
        }
        File file = new File(dirPath + File.separator + "tmpLinePng" + File.separator + userNum + "u_" + subNum + "_" + lineType + ".png");
        return file;
    }

    public void subjectLineImage_upperLineAction(String examNum, String sjt, String gradeNum, String schoolNum, String studentType, String type, String source, String claNum, String subPngFlag, String subNum, String lineType, List alldata, String userNum) {
        List list1 = (List) alldata.get(0);
        List list2 = (List) alldata.get(1);
        List list3 = (List) alldata.get(2);
        int sjtCount = list1.size();
        int pcCount = list3.size();
        int pcSjtCount = sjtCount * pcCount;
        int claCount = list2.size() / (pcCount * sjtCount);
        for (int pci = 0; pci < pcCount; pci++) {
            Object[] objArr2 = (Object[]) list2.get(pci);
            String lineTp = String.valueOf(objArr2[10]);
            for (int si = 0; si < sjtCount; si++) {
                Object[] objArr3 = (Object[]) list2.get(si * pcCount);
                String sjtNum = String.valueOf(objArr3[7]);
                String xName = "";
                String[] columnKeys = new String[claCount];
                String[] rowKeys = {"目标", "完成"};
                double[][] data = new double[rowKeys.length][claCount];
                Double.valueOf(0.0d);
                Double.valueOf(0.0d);
                List list_data = new ArrayList();
                for (int ci = 0; ci < claCount; ci++) {
                    Object[] objArr = (Object[]) list2.get((si * pcCount) + (ci * pcSjtCount) + pci);
                    if (ci == 0) {
                        xName = String.valueOf(objArr[8]) + " 上线数-" + String.valueOf(objArr[9]);
                    }
                    columnKeys[ci] = String.valueOf(objArr[4]);
                    data[0][ci] = Double.parseDouble(String.valueOf(objArr[12]));
                    data[1][ci] = Double.parseDouble(String.valueOf(objArr[11]));
                    list_data.add(Double.valueOf(Double.parseDouble(String.valueOf(objArr[12]))));
                    list_data.add(Double.valueOf(Double.parseDouble(String.valueOf(objArr[11]))));
                }
                int i = claCount * 50;
                if (list_data.size() == 0) {
                    list_data.add(Double.valueOf(0.0d));
                }
                Double maxDesc = (Double) Collections.max(list_data);
                Double minDesc = (Double) Collections.min(list_data);
                Double count_unit = Double.valueOf((maxDesc.doubleValue() - minDesc.doubleValue()) / 5.0d);
                if (count_unit.doubleValue() < 1.0d) {
                    count_unit = Double.valueOf(maxDesc.doubleValue() / 5.0d);
                }
                try {
                    HttpServletResponse response = ServletActionContext.getResponse();
                    response.reset();
                    response.setContentType("image/jpeg");
                    JFreeChart chart = this.lc.getLineChar(data, rowKeys, columnKeys, xName, "", "", "#0", count_unit, Integer.valueOf(rowKeys.length), "Y", "##.#");
                    if (null != subPngFlag && "T".equals(subPngFlag)) {
                        getChartImageFolder(chart, "tmpLinePng", 600, 600, userNum + "u_" + sjtNum + "_" + lineTp);
                    } else {
                        ChartUtils.writeChartAsJPEG(response.getOutputStream(), chart, Const.height_400, Const.height_400);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }

    public File getClaChartImgFile_upperLineAction(String examNum, String sjt, String gradeNum, String schoolNum, String studentType, String type, String source, String subNum, String claStr, String lType, String dirPath, String claPngFlag, List alldata, boolean fag, String userNum) {
        if (fag) {
            classLineImage_upperLineAction(examNum, sjt, gradeNum, schoolNum, studentType, type, source, subNum, "T", claStr, lType, alldata, userNum);
        }
        File file = new File(dirPath + File.separator + "tmpLinePng" + File.separator + userNum + "u_" + claStr + "_" + lType + ".png");
        return file;
    }

    public void classLineImage_upperLineAction(String examNum, String sjt, String gradeNum, String schoolNum, String studentType, String type, String source, String subNum, String claPngFlag, String claNum, String lineType, List alldata, String userNum) {
        List list1 = (List) alldata.get(0);
        List list2 = (List) alldata.get(1);
        List list3 = (List) alldata.get(2);
        int sjtCount = list1.size();
        int pcCount = list3.size();
        int pcSjtCount = sjtCount * pcCount;
        int claCount = list2.size() / (pcCount * sjtCount);
        for (int pci = 0; pci < pcCount; pci++) {
            Object[] objArr2 = (Object[]) list2.get(pci);
            String lineTp = String.valueOf(objArr2[10]);
            for (int ci = 0; ci < claCount; ci++) {
                Object[] objArr3 = (Object[]) list2.get(ci * pcSjtCount);
                String claN = String.valueOf(objArr3[3]);
                String xName = "";
                String[] columnKeys = new String[sjtCount];
                String[] rowKeys = {"目标", "完成"};
                double[][] data = new double[rowKeys.length][sjtCount];
                Double.valueOf(0.0d);
                Double.valueOf(0.0d);
                List list_data = new ArrayList();
                for (int si = 0; si < sjtCount; si++) {
                    Object[] objArr = (Object[]) list2.get((ci * pcSjtCount) + (si * pcCount) + pci);
                    if (si == 0) {
                        xName = String.valueOf(objArr[4]) + " 上线数-" + String.valueOf(objArr[9]);
                    }
                    columnKeys[si] = String.valueOf(objArr[8]);
                    data[0][si] = Double.parseDouble(String.valueOf(objArr[12]));
                    data[1][si] = Double.parseDouble(String.valueOf(objArr[11]));
                    list_data.add(Double.valueOf(Double.parseDouble(String.valueOf(objArr[12]))));
                    list_data.add(Double.valueOf(Double.parseDouble(String.valueOf(objArr[11]))));
                }
                int i = sjtCount * 50;
                if (list_data.size() == 0) {
                    list_data.add(Double.valueOf(0.0d));
                }
                Double maxDesc = (Double) Collections.max(list_data);
                Double minDesc = (Double) Collections.min(list_data);
                Double count_unit = Double.valueOf((maxDesc.doubleValue() - minDesc.doubleValue()) / 5.0d);
                if (count_unit.doubleValue() < 1.0d) {
                    count_unit = Double.valueOf(maxDesc.doubleValue() / 5.0d);
                }
                try {
                    HttpServletResponse response = ServletActionContext.getResponse();
                    response.reset();
                    response.setContentType("image/jpeg");
                    JFreeChart chart = this.lc.getLineChar(data, rowKeys, columnKeys, xName, "", "", "#0", count_unit, Integer.valueOf(rowKeys.length), "Y", "##.#");
                    if (null != claPngFlag && "T".equals(claPngFlag)) {
                        getChartImageFolder(chart, "tmpLinePng", 600, 600, userNum + "u_" + claN + "_" + lineTp);
                    } else {
                        ChartUtils.writeChartAsJPEG(response.getOutputStream(), chart, Const.height_400, Const.height_400);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String doubleLineAction_exportData_old(String examNum, String sjt, String gradeNum, String schoolNum, String subjectNum, String classNum, String studentId, String studentType, String type, String source, String step, String sNum, String c_exam, String rpt_name, String isMoreSchool, String rptTitle, String isHistory, String isSaveWrite, String dirPath, String uri, String userNum, String schName, String gradeName, String className, String subjectName, String imgRoot, String agent) {
        WritableWorkbook writableWorkbook;
        int n;
        int i;
        String rptTitle2 = this.sp.getHeaderStr(examNum, subjectNum, gradeNum, schoolNum, classNum, studentId, studentType, true, true, false, false, false, true, false, true, false, false, false, true, false, true, false, "0", "0");
        String folderPath = "ExportFolder/reportExcel" + userNum;
        String str = "reportExcel" + userNum;
        String str2 = "reportExcel" + userNum;
        String excelName = (null == gradeName || "".equals(gradeName)) ? rpt_name + "_" + gradeNum : rpt_name + "_" + gradeName;
        if (null != classNum && !"".equals(classNum) && !classNum.contains(Const.STRING_SEPERATOR)) {
            excelName = (null == className || "".equals(className)) ? excelName + "_" + classNum : excelName + "_" + className;
        }
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        try {
            WritableWorkbook wwBook = Workbook.createWorkbook(excelFile);
            WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
            biaotis1.setAlignment(Alignment.LEFT);
            biaotis1.setVerticalAlignment(VerticalAlignment.CENTRE);
            WritableFont titles = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat title = new WritableCellFormat(titles);
            title.setAlignment(Alignment.LEFT);
            title.setVerticalAlignment(VerticalAlignment.CENTRE);
            title.setWrap(true);
            WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            WritableCellFormat cFormat1 = new WritableCellFormat(font1);
            cFormat1.setAlignment(Alignment.CENTRE);
            cFormat1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1.setBackground(Const.titleBackground_color);
            cFormat1.setWrap(true);
            WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat2 = new WritableCellFormat(font2);
            cFormat2.setAlignment(Alignment.CENTRE);
            cFormat2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2.setBackground(Const.textOuBackGround_color);
            cFormat2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2.setWrap(true);
            WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat3 = new WritableCellFormat(font3);
            cFormat3.setAlignment(Alignment.CENTRE);
            cFormat3.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3.setBackground(Const.textJiBackGround_color);
            cFormat3.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3.setWrap(true);
            DecimalFormat df0 = new DecimalFormat("0");
            new DecimalFormat("#.00");
            df0.setRoundingMode(RoundingMode.HALF_UP);
            try {
                if (!excelFile.exists()) {
                    excelFile.createNewFile();
                }
                wwBook = Workbook.createWorkbook(excelFile);
                wwBook.createSheet(gradeNum, 0);
            } catch (Exception e) {
                e.printStackTrace();
            }
            new ArrayList();
            List list = this.reportService.getDoubleLineData_old(examNum, sjt, gradeNum, schoolNum, studentType, type, source, "0", null, null, null, "F");
            List allSubList = (List) list.get(0);
            List claDataList = (List) list.get(1);
            int lineCount = ((List) list.get(2)).size();
            try {
                try {
                    WritableSheet sheet = wwBook.createSheet(rpt_name, 0);
                    sheet.getSettings().setShowGridLines(false);
                    Label biaoti = new Label(0, 0, rpt_name, biaotis1);
                    sheet.addCell(biaoti);
                    sheet.mergeCells(0, 0, allSubList.size() * lineCount * 2, 0);
                    new DecimalFormat("0");
                    Label xinxi = new Label(0, 1, rptTitle2, title);
                    sheet.addCell(xinxi);
                    sheet.setRowView(1, Const.height_500);
                    sheet.mergeCells(0, 1, allSubList.size() * lineCount * 2, 1);
                    if (null != allSubList && null != claDataList && allSubList.size() > 0) {
                        int claCount = claDataList.size() / (allSubList.size() * lineCount);
                        int lineMode = allSubList.size() * lineCount;
                        Label xueke = new Label(0, 2, "学科", cFormat1);
                        sheet.addCell(xueke);
                        Label pici = new Label(0, 3, "批次", cFormat1);
                        sheet.addCell(pici);
                        Label scoreLine = new Label(0, 4, "分数线", cFormat1);
                        sheet.addCell(scoreLine);
                        Label mubiao = new Label(0, 5, "目标/上线", cFormat1);
                        sheet.addCell(mubiao);
                        for (int a = 0; a < lineMode * 4; a++) {
                            if ((claCount + 1) % 2 == 0) {
                                Label allGrade = new Label(0, claCount + 6, "全年级", cFormat2);
                                sheet.addCell(allGrade);
                                Label target_s_allGrade = new Label(a + 1, claCount + 6, "0", cFormat2);
                                sheet.addCell(target_s_allGrade);
                            } else {
                                Label allGrade2 = new Label(0, claCount + 6, "全年级", cFormat3);
                                sheet.addCell(allGrade2);
                                Label target_s_allGrade2 = new Label(a + 1, claCount + 6, "0", cFormat3);
                                sheet.addCell(target_s_allGrade2);
                            }
                        }
                        if (null != this.showAnalyiseImage && this.showAnalyiseImage.equals("1")) {
                            getSubChartImgFile_doubleLineAction(examNum, sjt, gradeNum, schoolNum, studentType, type, source, null, null, null, imgRoot, "T", list, true, userNum);
                        }
                        for (int i2 = 0; i2 < allSubList.size(); i2++) {
                            List singleSubList = (List) allSubList.get(i2);
                            Label cSub = new Label((i2 * lineCount * 4) + 1, 2, String.valueOf(((Object[]) singleSubList.get(0))[0]), cFormat1);
                            sheet.addCell(cSub);
                            sheet.mergeCells((i2 * lineCount * 4) + 1, 2, (i2 + 1) * lineCount * 4, 2);
                            for (int j = 0; j < singleSubList.size(); j++) {
                                if (i2 == 0 && null != this.showAnalyiseImage && this.showAnalyiseImage.equals("1")) {
                                    for (int ii = 0; ii < allSubList.size(); ii++) {
                                        String subNum = String.valueOf(((Object[]) ((List) allSubList.get(ii)).get(0))[1]);
                                        String innerlineType = String.valueOf(((Object[]) singleSubList.get(j))[3]);
                                        File imgFile = getSubChartImgFile_doubleLineAction(examNum, sjt, gradeNum, schoolNum, studentType, type, source, null, subNum, innerlineType, imgRoot, "T", list, false, userNum);
                                        WritableImage image = new WritableImage(0.0d, claCount + 8 + (22 * ii) + (j * 22 * allSubList.size()), 10.0d, 20.0d, imgFile);
                                        sheet.addImage(image);
                                    }
                                }
                                Label lineTypes = new Label((i2 * lineCount * 4) + 1 + (j * 4), 3, String.valueOf(((Object[]) singleSubList.get(j))[6]), cFormat1);
                                sheet.addCell(lineTypes);
                                sheet.mergeCells((i2 * lineCount * 4) + 1 + (j * 4), 3, (i2 * lineCount * 4) + 1 + (j * 4) + 3, 3);
                                Number lineTypeScore = new Number((i2 * lineCount * 4) + 1 + (j * 4), 4, Integer.valueOf(df0.format(((Object[]) singleSubList.get(j))[5])).intValue(), cFormat1);
                                sheet.addCell(lineTypeScore);
                                sheet.mergeCells((i2 * lineCount * 4) + 1 + (j * 4), 4, (i2 * lineCount * 4) + 1 + (j * 4) + 3, 4);
                                Label totalStudent = new Label((i2 * lineCount * 4) + 1 + (j * 4), 5, "参考人数", cFormat1);
                                sheet.addCell(totalStudent);
                                Label goal = new Label((i2 * lineCount * 4) + 1 + (j * 4) + 1, 5, "目标", cFormat1);
                                sheet.addCell(goal);
                                Label finish = new Label((i2 * lineCount * 4) + 1 + (j * 4) + 2, 5, "上线", cFormat1);
                                sheet.addCell(finish);
                                Label finishLv = new Label((i2 * lineCount * 4) + 1 + (j * 4) + 3, 5, "上线率", cFormat1);
                                sheet.addCell(finishLv);
                                sheet.setColumnView((i2 * lineCount * 4) + 1 + (j * 4), 5);
                                sheet.setColumnView((i2 * lineCount * 4) + 1 + (j * 4) + 1, 5);
                                sheet.setColumnView((i2 * lineCount * 4) + 1 + (j * 4) + 2, 5);
                                sheet.setColumnView((i2 * lineCount * 4) + 1 + (j * 4) + 3, 5);
                            }
                        }
                        int line = 0;
                        if (null != this.showAnalyiseImage && this.showAnalyiseImage.equals("1")) {
                            getClaChartImgFile_doubleLineAction(examNum, sjt, gradeNum, schoolNum, studentType, type, source, null, null, null, imgRoot, "T", list, true, userNum);
                        }
                        for (int i3 = 0; i3 < claDataList.size(); i3++) {
                            if (i3 % lineMode < lineCount && i3 < lineMode && null != this.showAnalyiseImage && this.showAnalyiseImage.equals("1")) {
                                for (int cInt = 0; cInt < claCount; cInt++) {
                                    String claNum = String.valueOf(((Object[]) claDataList.get((cInt * lineMode) + (i3 % lineMode)))[2]);
                                    String innerlineType2 = String.valueOf(((Object[]) claDataList.get(i3))[10]);
                                    File imgFile2 = getClaChartImgFile_doubleLineAction(examNum, sjt, gradeNum, schoolNum, studentType, type, source, null, claNum, innerlineType2, imgRoot, "T", list, false, userNum);
                                    WritableImage image2 = new WritableImage(11.0d, claCount + 8 + (22 * cInt) + (i3 * 22 * claCount), 10.0d, 20.0d, imgFile2);
                                    sheet.addImage(image2);
                                }
                            }
                            if (i3 % lineMode == 0) {
                                line++;
                                int quan_Grade_1 = Integer.valueOf(sheet.getCell((i3 % lineMode) + 1, 6 + claCount).getContents()).intValue();
                                int quan_Grade_2 = Integer.valueOf(sheet.getCell((i3 % lineMode) + 2, 6 + claCount).getContents()).intValue();
                                int quan_Grade_3 = Integer.valueOf(sheet.getCell((i3 % lineMode) + 3, 6 + claCount).getContents()).intValue();
                                int numOfStudent1 = Integer.valueOf(String.valueOf(((Object[]) claDataList.get(i3))[18])).intValue();
                                int mubiao_1 = Integer.valueOf(String.valueOf(((Object[]) claDataList.get(i3))[16])).intValue();
                                int wancheng = Integer.valueOf(String.valueOf(((Object[]) claDataList.get(i3))[17])).intValue();
                                int all_count_student = quan_Grade_1 + numOfStudent1;
                                int all_count = quan_Grade_2 + mubiao_1;
                                int all_count_wancheng = quan_Grade_3 + wancheng;
                                if (line % 2 == 0) {
                                    Label claName = new Label(0, (i3 / lineMode) + 6, String.valueOf(((Object[]) claDataList.get(i3))[3]), cFormat2);
                                    sheet.addCell(claName);
                                    Number numOfStudent = new Number((i3 % lineMode) + 1, (i3 / lineMode) + 6, Integer.valueOf(df0.format(((Object[]) claDataList.get(i3))[18])).intValue(), cFormat2);
                                    sheet.addCell(numOfStudent);
                                    Number tarNum = new Number((i3 % lineMode) + 2, (i3 / lineMode) + 6, Integer.valueOf(df0.format(((Object[]) claDataList.get(i3))[16])).intValue(), cFormat2);
                                    sheet.addCell(tarNum);
                                    Number finishNum = new Number((i3 % lineMode) + 3, (i3 / lineMode) + 6, Integer.valueOf(df0.format(((Object[]) claDataList.get(i3))[17])).intValue(), cFormat2);
                                    sheet.addCell(finishNum);
                                    Label finishNumLv = new Label((i3 % lineMode) + 4, (i3 / lineMode) + 6, ((Object[]) claDataList.get(i3))[19] + "%", cFormat2);
                                    sheet.addCell(finishNumLv);
                                    Number all_student = new Number((i3 % lineMode) + 1, 6 + claCount, Integer.valueOf(all_count_student).intValue(), cFormat3);
                                    sheet.addCell(all_student);
                                    Number all = new Number((i3 % lineMode) + 2, 6 + claCount, Integer.valueOf(all_count).intValue(), cFormat3);
                                    sheet.addCell(all);
                                    Number all_2 = new Number((i3 % lineMode) + 3, 6 + claCount, Integer.valueOf(all_count_wancheng).intValue(), cFormat3);
                                    sheet.addCell(all_2);
                                    Label allLv_2 = new Label((i3 % lineMode) + 4, 6 + claCount, String.format("%.2f", Double.valueOf((all_count_wancheng / Double.valueOf(all_count_student + "").doubleValue()) * 100.0d)) + "%", cFormat3);
                                    sheet.addCell(allLv_2);
                                } else {
                                    Label claName2 = new Label(0, (i3 / lineMode) + 6, String.valueOf(((Object[]) claDataList.get(i3))[3]), cFormat3);
                                    sheet.addCell(claName2);
                                    Number numOfStudent2 = new Number((i3 % lineMode) + 1, (i3 / lineMode) + 6, Integer.valueOf(df0.format(((Object[]) claDataList.get(i3))[18])).intValue(), cFormat3);
                                    sheet.addCell(numOfStudent2);
                                    Number tarNum2 = new Number((i3 % lineMode) + 2, (i3 / lineMode) + 6, Integer.valueOf(df0.format(((Object[]) claDataList.get(i3))[16])).intValue(), cFormat3);
                                    sheet.addCell(tarNum2);
                                    Number finishNum2 = new Number((i3 % lineMode) + 3, (i3 / lineMode) + 6, Integer.valueOf(df0.format(((Object[]) claDataList.get(i3))[17])).intValue(), cFormat3);
                                    sheet.addCell(finishNum2);
                                    Label finishNumLv2 = new Label((i3 % lineMode) + 4, (i3 / lineMode) + 6, ((Object[]) claDataList.get(i3))[19] + "%", cFormat3);
                                    sheet.addCell(finishNumLv2);
                                    Number all_student2 = new Number((i3 % lineMode) + 1, 6 + claCount, Integer.valueOf(all_count_student).intValue(), cFormat2);
                                    sheet.addCell(all_student2);
                                    Number all2 = new Number((i3 % lineMode) + 2, 6 + claCount, Integer.valueOf(all_count).intValue(), cFormat2);
                                    sheet.addCell(all2);
                                    Number all_22 = new Number((i3 % lineMode) + 3, 6 + claCount, Integer.valueOf(all_count_wancheng).intValue(), cFormat2);
                                    sheet.addCell(all_22);
                                    Label allLv_22 = new Label((i3 % lineMode) + 4, 6 + claCount, String.format("%.2f", Double.valueOf((all_count_wancheng / Double.valueOf(all_count_student + "").doubleValue()) * 100.0d)) + "%", cFormat2);
                                    sheet.addCell(allLv_22);
                                }
                            } else {
                                int quan_Grade_12 = Integer.valueOf(sheet.getCell(((i3 % lineMode) * 4) + 1, 6 + claCount).getContents()).intValue();
                                int quan_Grade_22 = Integer.valueOf(sheet.getCell(((i3 % lineMode) * 4) + 1 + 1, 6 + claCount).getContents()).intValue();
                                int quan_Grade_32 = Integer.valueOf(sheet.getCell(((i3 % lineMode) * 4) + 1 + 2, 6 + claCount).getContents()).intValue();
                                int numOfStudent12 = Integer.valueOf(String.valueOf(((Object[]) claDataList.get(i3))[18])).intValue();
                                int mubiao_12 = Integer.valueOf(String.valueOf(((Object[]) claDataList.get(i3))[16])).intValue();
                                int wancheng2 = Integer.valueOf(String.valueOf(((Object[]) claDataList.get(i3))[17])).intValue();
                                int all_count_student2 = quan_Grade_12 + numOfStudent12;
                                int all_count2 = quan_Grade_22 + mubiao_12;
                                int all_count_wancheng2 = quan_Grade_32 + wancheng2;
                                if (line % 2 == 0) {
                                    Number numOfStudent3 = new Number(((i3 % lineMode) * 4) + 1, (i3 / lineMode) + 6, Integer.valueOf(df0.format(((Object[]) claDataList.get(i3))[18])).intValue(), cFormat2);
                                    sheet.addCell(numOfStudent3);
                                    Number tarNum3 = new Number(((i3 % lineMode) * 4) + 2, (i3 / lineMode) + 6, Integer.valueOf(df0.format(((Object[]) claDataList.get(i3))[16])).intValue(), cFormat2);
                                    sheet.addCell(tarNum3);
                                    Number finishNum3 = new Number(((i3 % lineMode) * 4) + 1 + 2, (i3 / lineMode) + 6, Integer.valueOf(df0.format(((Object[]) claDataList.get(i3))[17])).intValue(), cFormat2);
                                    sheet.addCell(finishNum3);
                                    Label finishNumLv3 = new Label(((i3 % lineMode) * 4) + 1 + 3, (i3 / lineMode) + 6, ((Object[]) claDataList.get(i3))[19] + "%", cFormat2);
                                    sheet.addCell(finishNumLv3);
                                    Number all_student3 = new Number(((i3 % lineMode) * 4) + 1, 6 + claCount, Integer.valueOf(all_count_student2).intValue(), cFormat3);
                                    sheet.addCell(all_student3);
                                    Number all3 = new Number(((i3 % lineMode) * 4) + 2, 6 + claCount, Integer.valueOf(all_count2).intValue(), cFormat3);
                                    sheet.addCell(all3);
                                    Number all_23 = new Number(((i3 % lineMode) * 4) + 1 + 2, 6 + claCount, Integer.valueOf(all_count_wancheng2).intValue(), cFormat3);
                                    sheet.addCell(all_23);
                                    Label allLv_23 = new Label(((i3 % lineMode) * 4) + 1 + 3, 6 + claCount, String.format("%.2f", Double.valueOf((all_count_wancheng2 / Double.valueOf(all_count_student2 + "").doubleValue()) * 100.0d)) + "%", cFormat3);
                                    sheet.addCell(allLv_23);
                                } else {
                                    Number numOfStudent4 = new Number(((i3 % lineMode) * 4) + 1, (i3 / lineMode) + 6, Integer.valueOf(df0.format(((Object[]) claDataList.get(i3))[18])).intValue(), cFormat3);
                                    sheet.addCell(numOfStudent4);
                                    Number tarNum4 = new Number(((i3 % lineMode) * 4) + 2, (i3 / lineMode) + 6, Integer.valueOf(df0.format(((Object[]) claDataList.get(i3))[16])).intValue(), cFormat3);
                                    sheet.addCell(tarNum4);
                                    Number finishNum4 = new Number(((i3 % lineMode) * 4) + 1 + 2, (i3 / lineMode) + 6, Integer.valueOf(df0.format(((Object[]) claDataList.get(i3))[17])).intValue(), cFormat3);
                                    sheet.addCell(finishNum4);
                                    Label finishNumLv4 = new Label(((i3 % lineMode) * 4) + 1 + 3, (i3 / lineMode) + 6, ((Object[]) claDataList.get(i3))[19] + "%", cFormat3);
                                    sheet.addCell(finishNumLv4);
                                    Number all_student4 = new Number(((i3 % lineMode) * 4) + 1, 6 + claCount, Integer.valueOf(all_count_student2).intValue(), cFormat2);
                                    sheet.addCell(all_student4);
                                    Number all4 = new Number(((i3 % lineMode) * 4) + 2, 6 + claCount, Integer.valueOf(all_count2).intValue(), cFormat2);
                                    sheet.addCell(all4);
                                    Number all_24 = new Number(((i3 % lineMode) * 4) + 1 + 2, 6 + claCount, Integer.valueOf(all_count_wancheng2).intValue(), cFormat2);
                                    sheet.addCell(all_24);
                                    Label allLv_24 = new Label(((i3 % lineMode) * 4) + 1 + 3, 6 + claCount, String.format("%.2f", Double.valueOf((all_count_wancheng2 / Double.valueOf(all_count_student2 + "").doubleValue()) * 100.0d)) + "%", cFormat2);
                                    sheet.addCell(allLv_24);
                                }
                            }
                        }
                        wwBook.write();
                    }
                    if (wwBook != null) {
                        try {
                            wwBook.close();
                            if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                                HttpServletResponse response = ServletActionContext.getResponse();
                                response.reset();
                                ServletOutputStream outputStream = response.getOutputStream();
                                String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                String loadFileName2 = loadFileName.replace("+", " ");
                                response.setContentType("Content-type: applicationnd.ms-excel");
                                response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xls");
                                response.setHeader("Content-length", String.valueOf(excelFile.length()));
                                byte[] tempByte = new byte[1024];
                                FileInputStream in = new FileInputStream(excelFile);
                                while (true) {
                                    int n2 = in.read(tempByte);
                                    if (n2 == -1) {
                                        break;
                                    }
                                    try {
                                        outputStream.write(tempByte, 0, n2);
                                    } catch (Exception e2) {
                                        this.log.error("保存未成功", e2);
                                    }
                                }
                                outputStream.flush();
                                outputStream.close();
                                in.close();
                            }
                        } catch (Exception e3) {
                            e3.printStackTrace();
                        }
                    }
                } catch (Exception e4) {
                    e4.printStackTrace();
                    if (wwBook != null) {
                        try {
                            wwBook.close();
                            if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                                HttpServletResponse response2 = ServletActionContext.getResponse();
                                response2.reset();
                                ServletOutputStream outputStream2 = response2.getOutputStream();
                                String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                String loadFileName4 = loadFileName3.replace("+", " ");
                                response2.setContentType("Content-type: applicationnd.ms-excel");
                                response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xls");
                                response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                                byte[] tempByte2 = new byte[1024];
                                FileInputStream in2 = new FileInputStream(excelFile);
                                while (true) {
                                    int n3 = in2.read(tempByte2);
                                    if (n3 == -1) {
                                        break;
                                    }
                                    try {
                                        outputStream2.write(tempByte2, 0, n3);
                                    } catch (Exception e5) {
                                        this.log.error("保存未成功", e5);
                                    }
                                }
                                outputStream2.flush();
                                outputStream2.close();
                                in2.close();
                            }
                        } catch (Exception e6) {
                            e6.printStackTrace();
                        }
                    }
                }
            } finally {
                if (writableWorkbook != null) {
                    try {
                        while (true) {
                            if (n == i) {
                                break;
                            }
                        }
                    } catch (Exception e7) {
                    }
                }
            }
        } catch (Exception e8) {
            e8.printStackTrace();
        }
        return null;
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String doubleLineAction_exportData(String examNum, String gradeNum, String teachUnit_s, String teachUnit, String studentType, String type, String source, String subCompose, String fufen, String rpt_name, String rptTitle, String dirPath, String userNum, String agent) {
        CellFormat cellFormat;
        CellFormat cellFormat2;
        CellFormat cellFormat3;
        CellFormat cellFormat4;
        String rptTitle2 = this.sp.getHeaderStr(examNum, "", gradeNum, teachUnit, "", "", studentType, true, true, true, true, false, true, true, true, false, true, true, true, true, true, false, "0", fufen);
        new ArrayList();
        List list = this.reportService.getDoubleLineData2(examNum, gradeNum, teachUnit_s, teachUnit, studentType, type, source, subCompose, fufen);
        String folderPath = "ExportFolder/reportExcel" + userNum;
        String str = "reportExcel" + userNum;
        String str2 = "reportExcel" + userNum;
        String excelName = rpt_name + "_" + gradeNum;
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        try {
            WritableWorkbook wwBook = Workbook.createWorkbook(excelFile);
            WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
            biaotis1.setAlignment(Alignment.LEFT);
            biaotis1.setVerticalAlignment(VerticalAlignment.CENTRE);
            WritableFont titles = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat title = new WritableCellFormat(titles);
            title.setAlignment(Alignment.LEFT);
            title.setVerticalAlignment(VerticalAlignment.CENTRE);
            title.setWrap(true);
            DecimalFormat df01 = new DecimalFormat("0.0");
            DecimalFormat df02 = new DecimalFormat("0.00");
            DecimalFormat df03 = new DecimalFormat("0.000");
            df01.setRoundingMode(RoundingMode.HALF_UP);
            df02.setRoundingMode(RoundingMode.HALF_UP);
            df03.setRoundingMode(RoundingMode.HALF_UP);
            DateFormat df_0 = new DateFormat("0%");
            DateFormat df_1 = new DateFormat("0.0%");
            DateFormat df_2 = new DateFormat("0.00%");
            NumberFormat nf1 = new NumberFormat("0.0");
            WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            WritableCellFormat cFormat1 = new WritableCellFormat(font1);
            cFormat1.setAlignment(Alignment.CENTRE);
            cFormat1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1.setBackground(Const.titleBackground_color);
            cFormat1.setWrap(true);
            WritableCellFormat cFormat1_1 = new WritableCellFormat(font1, nf1);
            cFormat1_1.setAlignment(Alignment.CENTRE);
            cFormat1_1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1_1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1_1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1_1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1_1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1_1.setBackground(Const.titleBackground_color);
            cFormat1_1.setWrap(true);
            WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            CellFormat writableCellFormat = new WritableCellFormat(font2);
            writableCellFormat.setAlignment(Alignment.CENTRE);
            writableCellFormat.setVerticalAlignment(VerticalAlignment.CENTRE);
            writableCellFormat.setBackground(Const.textOuBackGround_color);
            writableCellFormat.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            writableCellFormat.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            writableCellFormat.setBorder(Border.LEFT, BorderLineStyle.THIN);
            writableCellFormat.setBorder(Border.TOP, BorderLineStyle.THIN);
            writableCellFormat.setWrap(true);
            CellFormat writableCellFormat2 = new WritableCellFormat(font2, df_0);
            writableCellFormat2.setAlignment(Alignment.CENTRE);
            writableCellFormat2.setVerticalAlignment(VerticalAlignment.CENTRE);
            writableCellFormat2.setBackground(Const.textOuBackGround_color);
            writableCellFormat2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            writableCellFormat2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            writableCellFormat2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            writableCellFormat2.setBorder(Border.TOP, BorderLineStyle.THIN);
            writableCellFormat2.setWrap(true);
            CellFormat writableCellFormat3 = new WritableCellFormat(font2, df_1);
            writableCellFormat3.setAlignment(Alignment.CENTRE);
            writableCellFormat3.setVerticalAlignment(VerticalAlignment.CENTRE);
            writableCellFormat3.setBackground(Const.textOuBackGround_color);
            writableCellFormat3.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            writableCellFormat3.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            writableCellFormat3.setBorder(Border.LEFT, BorderLineStyle.THIN);
            writableCellFormat3.setBorder(Border.TOP, BorderLineStyle.THIN);
            writableCellFormat3.setWrap(true);
            CellFormat writableCellFormat4 = new WritableCellFormat(font2, df_2);
            writableCellFormat4.setAlignment(Alignment.CENTRE);
            writableCellFormat4.setVerticalAlignment(VerticalAlignment.CENTRE);
            writableCellFormat4.setBackground(Const.textOuBackGround_color);
            writableCellFormat4.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            writableCellFormat4.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            writableCellFormat4.setBorder(Border.LEFT, BorderLineStyle.THIN);
            writableCellFormat4.setBorder(Border.TOP, BorderLineStyle.THIN);
            writableCellFormat4.setWrap(true);
            WritableFont font2_bold = new WritableFont(WritableFont.ARIAL, 10, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            WritableCellFormat cFormat2_bold = new WritableCellFormat(font2_bold);
            cFormat2_bold.setAlignment(Alignment.CENTRE);
            cFormat2_bold.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_bold.setBackground(Const.textOuBackGround_color);
            cFormat2_bold.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_bold.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_bold.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_bold.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_bold.setWrap(true);
            WritableCellFormat baifenbiFormat2_bold0 = new WritableCellFormat(font2_bold, df_0);
            baifenbiFormat2_bold0.setAlignment(Alignment.CENTRE);
            baifenbiFormat2_bold0.setVerticalAlignment(VerticalAlignment.CENTRE);
            baifenbiFormat2_bold0.setBackground(Const.textOuBackGround_color);
            baifenbiFormat2_bold0.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            baifenbiFormat2_bold0.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            baifenbiFormat2_bold0.setBorder(Border.LEFT, BorderLineStyle.THIN);
            baifenbiFormat2_bold0.setBorder(Border.TOP, BorderLineStyle.THIN);
            baifenbiFormat2_bold0.setWrap(true);
            WritableCellFormat baifenbiFormat2_bold1 = new WritableCellFormat(font2_bold, df_1);
            baifenbiFormat2_bold1.setAlignment(Alignment.CENTRE);
            baifenbiFormat2_bold1.setVerticalAlignment(VerticalAlignment.CENTRE);
            baifenbiFormat2_bold1.setBackground(Const.textOuBackGround_color);
            baifenbiFormat2_bold1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            baifenbiFormat2_bold1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            baifenbiFormat2_bold1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            baifenbiFormat2_bold1.setBorder(Border.TOP, BorderLineStyle.THIN);
            baifenbiFormat2_bold1.setWrap(true);
            WritableCellFormat baifenbiFormat2_bold2 = new WritableCellFormat(font2_bold, df_2);
            baifenbiFormat2_bold2.setAlignment(Alignment.CENTRE);
            baifenbiFormat2_bold2.setVerticalAlignment(VerticalAlignment.CENTRE);
            baifenbiFormat2_bold2.setBackground(Const.textOuBackGround_color);
            baifenbiFormat2_bold2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            baifenbiFormat2_bold2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            baifenbiFormat2_bold2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            baifenbiFormat2_bold2.setBorder(Border.TOP, BorderLineStyle.THIN);
            baifenbiFormat2_bold2.setWrap(true);
            WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            CellFormat writableCellFormat5 = new WritableCellFormat(font3);
            writableCellFormat5.setAlignment(Alignment.CENTRE);
            writableCellFormat5.setVerticalAlignment(VerticalAlignment.CENTRE);
            writableCellFormat5.setBackground(Const.textJiBackGround_color);
            writableCellFormat5.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            writableCellFormat5.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            writableCellFormat5.setBorder(Border.LEFT, BorderLineStyle.THIN);
            writableCellFormat5.setBorder(Border.TOP, BorderLineStyle.THIN);
            writableCellFormat5.setWrap(true);
            CellFormat writableCellFormat6 = new WritableCellFormat(font3, df_0);
            writableCellFormat6.setAlignment(Alignment.CENTRE);
            writableCellFormat6.setVerticalAlignment(VerticalAlignment.CENTRE);
            writableCellFormat6.setBackground(Const.textJiBackGround_color);
            writableCellFormat6.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            writableCellFormat6.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            writableCellFormat6.setBorder(Border.LEFT, BorderLineStyle.THIN);
            writableCellFormat6.setBorder(Border.TOP, BorderLineStyle.THIN);
            writableCellFormat6.setWrap(true);
            CellFormat writableCellFormat7 = new WritableCellFormat(font3, df_1);
            writableCellFormat7.setAlignment(Alignment.CENTRE);
            writableCellFormat7.setVerticalAlignment(VerticalAlignment.CENTRE);
            writableCellFormat7.setBackground(Const.textJiBackGround_color);
            writableCellFormat7.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            writableCellFormat7.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            writableCellFormat7.setBorder(Border.LEFT, BorderLineStyle.THIN);
            writableCellFormat7.setBorder(Border.TOP, BorderLineStyle.THIN);
            writableCellFormat7.setWrap(true);
            CellFormat writableCellFormat8 = new WritableCellFormat(font3, df_2);
            writableCellFormat8.setAlignment(Alignment.CENTRE);
            writableCellFormat8.setVerticalAlignment(VerticalAlignment.CENTRE);
            writableCellFormat8.setBackground(Const.textJiBackGround_color);
            writableCellFormat8.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            writableCellFormat8.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            writableCellFormat8.setBorder(Border.LEFT, BorderLineStyle.THIN);
            writableCellFormat8.setBorder(Border.TOP, BorderLineStyle.THIN);
            writableCellFormat8.setWrap(true);
            WritableFont font3_bold = new WritableFont(WritableFont.ARIAL, 10, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            WritableCellFormat cFormat3_bold = new WritableCellFormat(font3_bold);
            cFormat3_bold.setAlignment(Alignment.CENTRE);
            cFormat3_bold.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_bold.setBackground(Const.textJiBackGround_color);
            cFormat3_bold.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_bold.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_bold.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_bold.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_bold.setWrap(true);
            WritableCellFormat baifenbiFormat3_bold0 = new WritableCellFormat(font3_bold, df_0);
            baifenbiFormat3_bold0.setAlignment(Alignment.CENTRE);
            baifenbiFormat3_bold0.setVerticalAlignment(VerticalAlignment.CENTRE);
            baifenbiFormat3_bold0.setBackground(Const.textJiBackGround_color);
            baifenbiFormat3_bold0.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            baifenbiFormat3_bold0.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            baifenbiFormat3_bold0.setBorder(Border.LEFT, BorderLineStyle.THIN);
            baifenbiFormat3_bold0.setBorder(Border.TOP, BorderLineStyle.THIN);
            baifenbiFormat3_bold0.setWrap(true);
            WritableCellFormat baifenbiFormat3_bold1 = new WritableCellFormat(font3_bold, df_1);
            baifenbiFormat3_bold1.setAlignment(Alignment.CENTRE);
            baifenbiFormat3_bold1.setVerticalAlignment(VerticalAlignment.CENTRE);
            baifenbiFormat3_bold1.setBackground(Const.textJiBackGround_color);
            baifenbiFormat3_bold1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            baifenbiFormat3_bold1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            baifenbiFormat3_bold1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            baifenbiFormat3_bold1.setBorder(Border.TOP, BorderLineStyle.THIN);
            baifenbiFormat3_bold1.setWrap(true);
            WritableCellFormat baifenbiFormat3_bold2 = new WritableCellFormat(font3_bold, df_2);
            baifenbiFormat3_bold2.setAlignment(Alignment.CENTRE);
            baifenbiFormat3_bold2.setVerticalAlignment(VerticalAlignment.CENTRE);
            baifenbiFormat3_bold2.setBackground(Const.textJiBackGround_color);
            baifenbiFormat3_bold2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            baifenbiFormat3_bold2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            baifenbiFormat3_bold2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            baifenbiFormat3_bold2.setBorder(Border.TOP, BorderLineStyle.THIN);
            baifenbiFormat3_bold2.setWrap(true);
            try {
                WritableSheet sheet = wwBook.createSheet(rpt_name, 0);
                sheet.getSettings().setShowGridLines(false);
                try {
                    List allSubList = (List) list.get(0);
                    List hebingDataList = (List) list.get(1);
                    int list0Size = ((List) list.get(0)).size();
                    Label biaoti = new Label(0, 0, rpt_name, biaotis1);
                    sheet.addCell(biaoti);
                    sheet.mergeCells(0, 0, 17, 0);
                    new DecimalFormat("0.00");
                    Label xinxi = new Label(0, 1, rptTitle2, title);
                    sheet.addCell(xinxi);
                    sheet.setRowView(1, Const.height_500);
                    sheet.mergeCells(0, 1, 17, 1);
                    Label subject = new Label(0, 2, "学科", cFormat1);
                    sheet.addCell(subject);
                    sheet.mergeCells(0, 2, 1, 2);
                    Label batch = new Label(0, 3, "批次", cFormat1);
                    sheet.addCell(batch);
                    sheet.mergeCells(0, 3, 1, 3);
                    Label scoreThread = new Label(0, 4, "分数线", cFormat1);
                    sheet.addCell(scoreThread);
                    sheet.mergeCells(0, 4, 1, 4);
                    Label target = new Label(0, 5, "教学单位", cFormat1);
                    sheet.addCell(target);
                    sheet.mergeCells(0, 5, 1, 5);
                    for (int i = 0; i < list0Size; i++) {
                        List<Map<String, Object>> list1 = (List) allSubList.get(i);
                        Label subjects = new Label((i * 3 * list1.size()) + 2, 2, Convert.toStr(list1.get(0).get("subjectName")), cFormat1);
                        sheet.addCell(subjects);
                        sheet.mergeCells((i * 3 * list1.size()) + 2, 2, ((i + 1) * 3 * list1.size()) + 1, 2);
                        for (int j = 0; j < list1.size(); j++) {
                            Label batchs = new Label((i * 3 * list1.size()) + (3 * j) + 2, 3, Convert.toStr(list1.get(j).get("name")), cFormat1);
                            sheet.addCell(batchs);
                            sheet.mergeCells((i * 3 * list1.size()) + (3 * j) + 2, 3, (i * 3 * list1.size()) + (3 * j) + 4, 3);
                            String scStr = Convert.toStr(list1.get(j).get("score"));
                            if (null == scStr || scStr.equals("")) {
                                Label scoreThreads = new Label((i * 3 * list1.size()) + (3 * j) + 2, 4, (String) null, cFormat1_1);
                                sheet.addCell(scoreThreads);
                                sheet.mergeCells((i * 3 * list1.size()) + (3 * j) + 2, 4, (i * 3 * list1.size()) + (3 * j) + 4, 4);
                            } else {
                                Number scoreThreads2 = new Number((i * 3 * list1.size()) + (3 * j) + 2, 4, Convert.toFloat(scStr).floatValue(), cFormat1_1);
                                sheet.addCell(scoreThreads2);
                                sheet.mergeCells((i * 3 * list1.size()) + (3 * j) + 2, 4, (i * 3 * list1.size()) + (3 * j) + 4, 4);
                            }
                            String iszonngfen = Convert.toStr(list1.get(0).get("isHidden"));
                            if (iszonngfen.equals("T")) {
                                Label totalStudent = new Label((3 * i * list1.size()) + (3 * j) + 2, 5, "参考人数", cFormat1);
                                sheet.addCell(totalStudent);
                                Label accomplish = new Label((3 * i * list1.size()) + (3 * j) + 3, 5, "上线", cFormat1);
                                sheet.addCell(accomplish);
                                Label accomplishLv = new Label((3 * i * list1.size()) + (3 * j) + 4, 5, "上线率", cFormat1);
                                sheet.addCell(accomplishLv);
                            } else {
                                Label totalStudent2 = new Label((3 * i * list1.size()) + (3 * j) + 2, 5, "参考人数", cFormat1);
                                sheet.addCell(totalStudent2);
                                Label accomplish2 = new Label((3 * i * list1.size()) + (3 * j) + 3, 5, "双上线", cFormat1);
                                sheet.addCell(accomplish2);
                                Label accomplishLv2 = new Label((3 * i * list1.size()) + (3 * j) + 4, 5, "双上线率", cFormat1);
                                sheet.addCell(accomplishLv2);
                            }
                            sheet.setColumnView((3 * i * list1.size()) + (3 * j) + 2, 10);
                            sheet.setColumnView((3 * i * list1.size()) + (3 * j) + 3, 10);
                            sheet.setColumnView((3 * i * list1.size()) + (3 * j) + 4, 10);
                            sheet.setColumnView(0, 20);
                            sheet.setColumnView(1, 20);
                        }
                    }
                    String sitemid1 = "";
                    int row = 0;
                    int clo = 1;
                    for (int h = 0; h < hebingDataList.size(); h++) {
                        String sitemid2 = Convert.toStr(((Object[]) hebingDataList.get(h))[0]);
                        int size = list0Size * ((List) allSubList.get(0)).size();
                        if (!sitemid1.equals(sitemid2)) {
                            sitemid1 = sitemid2;
                            row++;
                            clo = 1;
                        }
                        if (row % 2 == 0) {
                            cellFormat = writableCellFormat5;
                            cellFormat2 = writableCellFormat6;
                            cellFormat3 = writableCellFormat7;
                            cellFormat4 = writableCellFormat8;
                        } else {
                            cellFormat = writableCellFormat;
                            cellFormat2 = writableCellFormat2;
                            cellFormat3 = writableCellFormat3;
                            cellFormat4 = writableCellFormat4;
                        }
                        Label class_name = new Label(0, 5 + row, String.valueOf(((Object[]) hebingDataList.get(h))[1]), cellFormat);
                        sheet.addCell(class_name);
                        sheet.mergeCells(0, 5 + row, 1, 5 + row);
                        int cankaorenshu = Integer.valueOf(((Object[]) hebingDataList.get(h))[7].toString()).intValue();
                        if (cankaorenshu == 0) {
                            Label totalStudent_s = new Label(clo + 1, 5 + row, "", cellFormat);
                            sheet.addCell(totalStudent_s);
                            Label accomplish_s = new Label(clo + 2, 5 + row, "", cellFormat);
                            sheet.addCell(accomplish_s);
                            Label accomplishLv_s = new Label(clo + 3, 5 + row, "", cellFormat);
                            sheet.addCell(accomplishLv_s);
                        } else {
                            int shangxian = Integer.valueOf(((Object[]) hebingDataList.get(h))[8].toString()).intValue();
                            String shangxianlv = Convert.toStr(Double.valueOf(shangxian / cankaorenshu));
                            Number totalStudent_s2 = new Number(clo + 1, 5 + row, cankaorenshu, cellFormat);
                            sheet.addCell(totalStudent_s2);
                            if (shangxian == 0) {
                                Label accomplish_s2 = new Label(clo + 2, 5 + row, "", cellFormat);
                                sheet.addCell(accomplish_s2);
                                Label accomplishLv_s2 = new Label(clo + 3, 5 + row, "", cellFormat2);
                                sheet.addCell(accomplishLv_s2);
                            } else {
                                Number accomplish_s3 = new Number(clo + 2, 5 + row, shangxian, cellFormat);
                                sheet.addCell(accomplish_s3);
                                String fullscore = Convert.toBigDecimal(df02.format(Double.valueOf(shangxianlv).doubleValue() * 100.0d)).stripTrailingZeros().toPlainString();
                                fullscore.indexOf(".");
                                if (fullscore.indexOf(".") == -1) {
                                    Number accomplishLv_s3 = new Number(clo + 3, 5 + row, Convert.toDouble(fullscore).doubleValue() / 100.0d, cellFormat2);
                                    sheet.addCell(accomplishLv_s3);
                                } else {
                                    int i1 = fullscore.length() - (fullscore.indexOf(".") + 1);
                                    if (i1 == 1) {
                                        Number accomplishLv_s4 = new Number(clo + 3, 5 + row, Float.valueOf(fullscore).floatValue() / 100.0f, cellFormat3);
                                        sheet.addCell(accomplishLv_s4);
                                    } else {
                                        Number accomplishLv_s5 = new Number(clo + 3, 5 + row, Float.valueOf(Convert.toBigDecimal(df02.format(Double.valueOf(fullscore))).stripTrailingZeros().toPlainString()).floatValue() / 100.0f, cellFormat4);
                                        sheet.addCell(accomplishLv_s5);
                                    }
                                }
                            }
                        }
                        clo += 3;
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                wwBook.write();
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        HttpServletResponse response = ServletActionContext.getResponse();
                        response.reset();
                        ServletOutputStream outputStream = response.getOutputStream();
                        String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                        String loadFileName2 = loadFileName.replace("+", " ");
                        response.setContentType("Content-type: applicationnd.ms-excel");
                        response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xls");
                        response.setHeader("Content-length", String.valueOf(excelFile.length()));
                        byte[] tempByte = new byte[1024];
                        FileInputStream in = new FileInputStream(excelFile);
                        while (true) {
                            int n = in.read(tempByte);
                            if (n == -1) {
                                break;
                            }
                            try {
                                outputStream.write(tempByte, 0, n);
                            } catch (Exception e2) {
                                this.log.error("保存未成功", e2);
                            }
                        }
                        outputStream.flush();
                        outputStream.close();
                        in.close();
                    } catch (WriteException e3) {
                        e3.printStackTrace();
                    }
                }
            } catch (Exception e4) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        HttpServletResponse response2 = ServletActionContext.getResponse();
                        response2.reset();
                        ServletOutputStream outputStream2 = response2.getOutputStream();
                        String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                        String loadFileName4 = loadFileName3.replace("+", " ");
                        response2.setContentType("Content-type: applicationnd.ms-excel");
                        response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xls");
                        response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                        byte[] tempByte2 = new byte[1024];
                        FileInputStream in2 = new FileInputStream(excelFile);
                        while (true) {
                            int n2 = in2.read(tempByte2);
                            if (n2 == -1) {
                                break;
                            }
                            try {
                                outputStream2.write(tempByte2, 0, n2);
                            } catch (Exception e5) {
                                this.log.error("保存未成功", e5);
                            }
                        }
                        outputStream2.flush();
                        outputStream2.close();
                        in2.close();
                    } catch (WriteException e6) {
                        e6.printStackTrace();
                    }
                }
            } catch (Throwable th) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        HttpServletResponse response3 = ServletActionContext.getResponse();
                        response3.reset();
                        ServletOutputStream outputStream3 = response3.getOutputStream();
                        String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                        String loadFileName6 = loadFileName5.replace("+", " ");
                        response3.setContentType("Content-type: applicationnd.ms-excel");
                        response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xls");
                        response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                        byte[] tempByte3 = new byte[1024];
                        FileInputStream in3 = new FileInputStream(excelFile);
                        while (true) {
                            int n3 = in3.read(tempByte3);
                            if (n3 == -1) {
                                break;
                            }
                            try {
                                outputStream3.write(tempByte3, 0, n3);
                            } catch (Exception e7) {
                                this.log.error("保存未成功", e7);
                            }
                        }
                        outputStream3.flush();
                        outputStream3.close();
                        in3.close();
                    } catch (WriteException e8) {
                        e8.printStackTrace();
                        throw th;
                    }
                }
                throw th;
            }
        } catch (Exception e9) {
            e9.printStackTrace();
        }
        return null;
    }

    public File getSubChartImgFile_doubleLineAction(String examNum, String sjt, String gradeNum, String schoolNum, String studentType, String type, String source, String claNum, String subNum, String lineType, String dirPath, String subPngFlag, List alldata, boolean fag, String userNum) {
        if (fag) {
            subjectLineImage(examNum, sjt, gradeNum, schoolNum, studentType, type, source, claNum, subNum, lineType, "T", alldata, userNum);
        }
        File file = new File(dirPath + File.separator + "tmpLinePng" + File.separator + userNum + "d_" + subNum + "_" + lineType + ".png");
        return file;
    }

    public void subjectLineImage(String examNum, String sjt, String gradeNum, String schoolNum, String studentType, String type, String source, String claNum, String subNum, String lineType, String subPngFlag, List alldata, String userNum) {
        List list1 = (List) alldata.get(0);
        List list2 = (List) alldata.get(1);
        List list3 = (List) alldata.get(2);
        int sjtCount = list1.size();
        int pcCount = list3.size();
        int pcSjtCount = sjtCount * pcCount;
        int claCount = list2.size() / (pcCount * sjtCount);
        for (int pci = 0; pci < pcCount; pci++) {
            Object[] objArr2 = (Object[]) list2.get(pci);
            String lineTp = String.valueOf(objArr2[10]);
            for (int si = 0; si < sjtCount; si++) {
                Object[] objArr3 = (Object[]) list2.get(si * pcCount);
                String sjtNum = String.valueOf(objArr3[5]);
                String xName = "";
                String[] columnKeys = new String[claCount];
                String[] rowKeys = {"目标", "完成"};
                double[][] data = new double[rowKeys.length][claCount];
                Double.valueOf(0.0d);
                Double.valueOf(0.0d);
                List list_data = new ArrayList();
                for (int ci = 0; ci < claCount; ci++) {
                    Object[] objArr = (Object[]) list2.get((si * pcCount) + (ci * pcSjtCount) + pci);
                    if (ci == 0) {
                        xName = String.valueOf(objArr[8]) + " 双上线数-" + String.valueOf(objArr[10]);
                    }
                    columnKeys[ci] = String.valueOf(objArr[3]);
                    data[0][ci] = Double.parseDouble(String.valueOf(objArr[16]));
                    data[1][ci] = Double.parseDouble(String.valueOf(objArr[17]));
                    list_data.add(Double.valueOf(Double.parseDouble(String.valueOf(objArr[16]))));
                    list_data.add(Double.valueOf(Double.parseDouble(String.valueOf(objArr[17]))));
                }
                int i = claCount * 50;
                if (list_data.size() == 0) {
                    list_data.add(Double.valueOf(0.0d));
                }
                Double maxDesc = (Double) Collections.max(list_data);
                Double minDesc = (Double) Collections.min(list_data);
                Double count_unit = Double.valueOf((maxDesc.doubleValue() - minDesc.doubleValue()) / 5.0d);
                if (count_unit.doubleValue() < 1.0d) {
                    count_unit = Double.valueOf(maxDesc.doubleValue() / 5.0d);
                }
                try {
                    HttpServletResponse response = ServletActionContext.getResponse();
                    response.reset();
                    response.setContentType("image/jpeg");
                    JFreeChart chart = this.lc.getLineChar(data, rowKeys, columnKeys, xName, "", "", "#0", count_unit, Integer.valueOf(rowKeys.length), "Y", "##.#");
                    if (null != subPngFlag && "T".equals(subPngFlag)) {
                        getChartImageFolder(chart, "tmpLinePng", 600, 600, userNum + "d_" + sjtNum + "_" + lineTp);
                    } else {
                        ChartUtils.writeChartAsJPEG(response.getOutputStream(), chart, Const.height_400, Const.height_400);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }

    public File getClaChartImgFile_doubleLineAction(String examNum, String sjt, String gradeNum, String schoolNum, String studentType, String type, String source, String subNum, String claNum, String lineType, String dirPath, String claPngFlag, List alldata, boolean fag, String userNum) {
        if (fag) {
            classLineImage_doubleLineAction(examNum, sjt, gradeNum, schoolNum, studentType, type, source, subNum, lineType, claNum, "T", alldata, userNum);
        }
        File file = new File(dirPath + File.separator + "tmpLinePng" + File.separator + userNum + "d_" + claNum + "_" + lineType + ".png");
        return file;
    }

    public void classLineImage_doubleLineAction(String examNum, String sjt, String gradeNum, String schoolNum, String studentType, String type, String source, String subNum, String lineType, String claNum, String claPngFlag, List alldata, String userNum) {
        List list1 = (List) alldata.get(0);
        List list2 = (List) alldata.get(1);
        List list3 = (List) alldata.get(2);
        int sjtCount = list1.size();
        int pcCount = list3.size();
        int pcSjtCount = sjtCount * pcCount;
        int claCount = list2.size() / (pcCount * sjtCount);
        for (int pci = 0; pci < pcCount; pci++) {
            Object[] objArr2 = (Object[]) list2.get(pci);
            String lineTp = String.valueOf(objArr2[10]);
            for (int ci = 0; ci < claCount; ci++) {
                Object[] objArr3 = (Object[]) list2.get(ci * pcSjtCount);
                String claN = String.valueOf(objArr3[2]);
                String xName = "";
                String[] columnKeys = new String[sjtCount];
                String[] rowKeys = {"目标", "完成"};
                double[][] data = new double[rowKeys.length][sjtCount];
                Double.valueOf(0.0d);
                Double.valueOf(0.0d);
                List list_data = new ArrayList();
                for (int si = 0; si < sjtCount; si++) {
                    Object[] objArr = (Object[]) list2.get((ci * pcSjtCount) + (si * pcCount) + pci);
                    if (si == 0) {
                        xName = String.valueOf(objArr[3]) + " 双上线数-" + String.valueOf(objArr[9]);
                    }
                    columnKeys[si] = String.valueOf(objArr[8]);
                    data[0][si] = Double.parseDouble(String.valueOf(objArr[16]));
                    data[1][si] = Double.parseDouble(String.valueOf(objArr[17]));
                    list_data.add(Double.valueOf(Double.parseDouble(String.valueOf(objArr[16]))));
                    list_data.add(Double.valueOf(Double.parseDouble(String.valueOf(objArr[17]))));
                }
                int i = sjtCount * 50;
                if (list_data.size() == 0) {
                    list_data.add(Double.valueOf(0.0d));
                }
                Double maxDesc = (Double) Collections.max(list_data);
                Double minDesc = (Double) Collections.min(list_data);
                Double count_unit = Double.valueOf((maxDesc.doubleValue() - minDesc.doubleValue()) / 5.0d);
                if (count_unit.doubleValue() < 1.0d) {
                    count_unit = Double.valueOf(maxDesc.doubleValue() / 5.0d);
                }
                try {
                    HttpServletResponse response = ServletActionContext.getResponse();
                    response.reset();
                    response.setContentType("image/jpeg");
                    JFreeChart chart = this.lc.getLineChar(data, rowKeys, columnKeys, xName, "", "", "#0", count_unit, Integer.valueOf(rowKeys.length), "Y", "##.#");
                    if (null != claPngFlag && "T".equals(claPngFlag)) {
                        getChartImageFolder(chart, "tmpLinePng", 600, 600, userNum + "d_" + claN + "_" + lineTp);
                    } else {
                        ChartUtils.writeChartAsJPEG(response.getOutputStream(), chart, Const.height_400, Const.height_400);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String teaScoreAnaly_exportgetData(String examNum, String gradeNum, String schoolNum, String subjectNum, String classNum, String studentId, String studentType, String type, String source, String step, String sNum, String c_exam, String rpt_name, String isMoreSchool, String rptTitle, String isHistory, String isSaveWrite, String dirPath, String uri, String userNum, String schName, String gradeName, String className, String subjectName, String imgRoot, String agent, String rank, String fufen, String subCompose, String islevel, String teachUnit, String teachUnit_s) {
        String rptTitle2 = this.sp.getHeaderStr(examNum, subjectNum, gradeNum, schoolNum, classNum, studentId, studentType, true, true, false, false, false, true, false, true, false, false, false, false, false, false, false, subCompose, fufen);
        List quest = this.reportService.getTeacherScoreAnaly(examNum, gradeNum, schoolNum, subjectNum, studentType, type, source, c_exam, "0", rank, fufen, subCompose, islevel, teachUnit, teachUnit_s);
        String viewRankOfScoreInfo = Configuration.getInstance().getViewRankOfScoreInfo();
        String folderPath = "ExportFolder/reportExcel" + userNum;
        String str = "reportExcel" + userNum;
        String str2 = "reportExcel" + userNum;
        String excelName = (null == gradeName || "".equals(gradeName)) ? rpt_name + "_" + gradeNum : rpt_name + "_" + gradeName;
        if (null != classNum && !"".equals(classNum) && !classNum.contains(Const.STRING_SEPERATOR)) {
            excelName = (null == className || "".equals(className)) ? excelName + "_" + classNum : excelName + "_" + className;
        }
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        try {
            WritableWorkbook wwBook = Workbook.createWorkbook(excelFile);
            WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
            biaotis1.setAlignment(Alignment.LEFT);
            biaotis1.setVerticalAlignment(VerticalAlignment.CENTRE);
            WritableFont zhushiFont = new WritableFont(WritableFont.ARIAL, 11, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.jxl_red);
            WritableCellFormat zhushi1 = new WritableCellFormat(zhushiFont);
            zhushi1.setAlignment(Alignment.LEFT);
            zhushi1.setVerticalAlignment(VerticalAlignment.CENTRE);
            WritableFont titles = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat title = new WritableCellFormat(titles);
            title.setAlignment(Alignment.LEFT);
            title.setVerticalAlignment(VerticalAlignment.CENTRE);
            title.setWrap(true);
            WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            WritableCellFormat cFormat1 = new WritableCellFormat(font1);
            cFormat1.setAlignment(Alignment.CENTRE);
            cFormat1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1.setBackground(Const.titleBackground_color);
            cFormat1.setWrap(true);
            WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat2 = new WritableCellFormat(font2);
            cFormat2.setAlignment(Alignment.CENTRE);
            cFormat2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2.setBackground(Const.textOuBackGround_color);
            cFormat2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2.setWrap(true);
            DateFormat df1 = new DateFormat("0.0%");
            WritableCellFormat cFormat2_0 = new WritableCellFormat(font2, df1);
            cFormat2_0.setAlignment(Alignment.CENTRE);
            cFormat2_0.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_0.setBackground(Const.textOuBackGround_color);
            cFormat2_0.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_0.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_0.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_0.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_0.setWrap(true);
            NumberFormat nf1 = new NumberFormat("0.0");
            WritableCellFormat cFormat2_1 = new WritableCellFormat(font2, nf1);
            cFormat2_1.setAlignment(Alignment.CENTRE);
            cFormat2_1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_1.setBackground(Const.textOuBackGround_color);
            cFormat2_1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_1.setWrap(true);
            NumberFormat nf2 = new NumberFormat("0.00");
            WritableCellFormat cFormat2_2 = new WritableCellFormat(font2, nf2);
            cFormat2_2.setAlignment(Alignment.CENTRE);
            cFormat2_2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_2.setBackground(Const.textOuBackGround_color);
            cFormat2_2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_2.setWrap(true);
            WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat3 = new WritableCellFormat(font3);
            cFormat3.setAlignment(Alignment.CENTRE);
            cFormat3.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3.setBackground(Const.textJiBackGround_color);
            cFormat3.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3.setWrap(true);
            WritableCellFormat cFormat3_0 = new WritableCellFormat(font3, df1);
            cFormat3_0.setAlignment(Alignment.CENTRE);
            cFormat3_0.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_0.setBackground(Const.textJiBackGround_color);
            cFormat3_0.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_0.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_0.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_0.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_0.setWrap(true);
            WritableCellFormat cFormat3_1 = new WritableCellFormat(font3, nf1);
            cFormat3_1.setAlignment(Alignment.CENTRE);
            cFormat3_1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_1.setBackground(Const.textJiBackGround_color);
            cFormat3_1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_1.setWrap(true);
            WritableCellFormat cFormat3_2 = new WritableCellFormat(font3, nf2);
            cFormat3_2.setAlignment(Alignment.CENTRE);
            cFormat3_2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_2.setBackground(Const.textJiBackGround_color);
            cFormat3_2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_2.setWrap(true);
            WritableFont font4 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat4 = new WritableCellFormat(font4);
            cFormat4.setAlignment(Alignment.LEFT);
            cFormat4.setBackground(Const.subject_color);
            cFormat4.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat4.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat4.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat4.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat4.setWrap(true);
            try {
                try {
                    WritableSheet sheet = wwBook.createSheet(rpt_name, 0);
                    sheet.getSettings().setShowGridLines(false);
                    try {
                        Label biaotou = new Label(0, 0, rpt_name, biaotis1);
                        sheet.addCell(biaotou);
                        Label zhushi = new Label(3, 0, "注：单校参考群体无重大变化，可进行校内比较；多校统考，可进行跨校比较（联考一般不适用）。", zhushi1);
                        sheet.addCell(zhushi);
                        DecimalFormat df01 = new DecimalFormat("0.0");
                        DecimalFormat df02 = new DecimalFormat("0.00");
                        DecimalFormat df03 = new DecimalFormat("0.000");
                        df01.setRoundingMode(RoundingMode.HALF_UP);
                        df02.setRoundingMode(RoundingMode.HALF_UP);
                        df03.setRoundingMode(RoundingMode.HALF_UP);
                        int ii = 0;
                        int bb = 0;
                        Label xinxi = new Label(0, 1, rptTitle2, title);
                        sheet.addCell(xinxi);
                        sheet.setRowView(1, Const.height_500);
                        sheet.mergeCells(0, 0, 2, 0);
                        sheet.mergeCells(3, 0, 16, 0);
                        sheet.mergeCells(0, 1, 16, 1);
                        Label mingcheng = new Label(0, 2, "学科 ", cFormat1);
                        sheet.addCell(mingcheng);
                        sheet.mergeCells(0, 2, 0, 3);
                        if ("0".equals(rank) && "00".equals(teachUnit_s)) {
                            Label banren = new Label(1, 2, "学校", cFormat1);
                            sheet.addCell(banren);
                            sheet.mergeCells(1, 2, 1, 3);
                            Label banren2 = new Label(2, 2, "班级", cFormat1);
                            sheet.addCell(banren2);
                            sheet.mergeCells(2, 2, 2, 3);
                            bb = 0 + 1;
                        } else {
                            Label banren3 = new Label(1, 2, "教学单位", cFormat1);
                            sheet.addCell(banren3);
                            sheet.mergeCells(1, 2, 1, 3);
                        }
                        Label a7 = new Label(2 + bb, 2, "负责人", cFormat1);
                        sheet.addCell(a7);
                        sheet.mergeCells(2 + bb, 2, 2 + bb, 3);
                        Label cankao = new Label(3 + bb, 2, "参考人数", cFormat1);
                        sheet.addCell(cankao);
                        sheet.mergeCells(3 + bb, 2, 3 + bb, 3);
                        Label a3 = new Label(4 + bb, 2, "本次考试", cFormat1);
                        sheet.addCell(a3);
                        if (viewRankOfScoreInfo.equals("1")) {
                            sheet.mergeCells(4 + bb, 2, 6 + bb, 2);
                            ii = 1;
                        } else {
                            sheet.mergeCells(4 + bb, 2, 5 + bb, 2);
                        }
                        Label a3_1 = new Label(4 + bb, 3, "平均分", cFormat1);
                        sheet.addCell(a3_1);
                        if (viewRankOfScoreInfo.equals("1")) {
                            Label a3_2 = new Label(5 + bb, 3, "排名", cFormat1);
                            sheet.addCell(a3_2);
                        }
                        Label a3_3 = new Label(5 + ii + bb, 3, "标准分T", cFormat1);
                        sheet.addCell(a3_3);
                        Label a4_1 = new Label(6 + ii + bb, 3, "平均分", cFormat1);
                        sheet.addCell(a4_1);
                        if (viewRankOfScoreInfo.equals("1")) {
                            Label a4_2 = new Label(7 + ii + bb, 3, "排名", cFormat1);
                            sheet.addCell(a4_2);
                        }
                        Label a4 = new Label(6 + ii + bb, 2, "参照考试", cFormat1);
                        sheet.addCell(a4);
                        if (viewRankOfScoreInfo.equals("1")) {
                            sheet.mergeCells(7 + bb, 2, 9 + bb, 2);
                            ii = 2;
                        } else {
                            sheet.mergeCells(6 + bb, 2, 7 + bb, 2);
                        }
                        Label a4_3 = new Label(7 + ii + bb, 3, "标准分T", cFormat1);
                        sheet.addCell(a4_3);
                        Label a5 = new Label(8 + ii + bb, 2, "进步度", cFormat1);
                        sheet.addCell(a5);
                        sheet.mergeCells(8 + ii + bb, 2, 8 + ii + bb, 3);
                        Label a6 = new Label(9 + ii + bb, 2, "进步排名", cFormat1);
                        sheet.addCell(a6);
                        sheet.mergeCells(9 + ii + bb, 2, 9 + ii + bb, 3);
                        int q = 0;
                        int m = 0;
                        int e = -1;
                        for (int i = 0; i < quest.size(); i++) {
                            List list1 = (List) quest.get(i);
                            String cc = (String) ((Object[]) ((List) quest.get(i)).get(0))[1];
                            q += list1.size();
                            e += list1.size();
                            for (int k = 0; k < list1.size(); k++) {
                                if (k == 0) {
                                    Label c0 = new Label(0, 4 + m + k, cc, cFormat2);
                                    sheet.addCell(c0);
                                    sheet.mergeCells(0, 4 + m + k, 0, 4 + k + e);
                                }
                                if (k % 2 != 0) {
                                    if ("0".equals(rank) && "00".equals(teachUnit_s)) {
                                        Label c01 = new Label(1, 4 + m + k, null == ((Object[]) list1.get(k))[3] ? "" : ((Object[]) list1.get(k))[3].toString(), cFormat2);
                                        sheet.addCell(c01);
                                        Label c012 = new Label(2, 4 + m + k, null == ((Object[]) list1.get(k))[20] ? "" : ((Object[]) list1.get(k))[20].toString(), cFormat2);
                                        sheet.addCell(c012);
                                    } else {
                                        Label c013 = new Label(1, 4 + m + k, null == ((Object[]) list1.get(k))[3] ? "" : ((Object[]) list1.get(k))[3].toString(), cFormat2);
                                        sheet.addCell(c013);
                                    }
                                    Label c2 = new Label(2 + bb, 4 + m + k, ((Object[]) list1.get(k))[2] + "", cFormat2);
                                    sheet.addCell(c2);
                                    Label cankaoval = new Label(3 + bb, 4 + m + k, ((Object[]) list1.get(k))[4] + "", cFormat2);
                                    sheet.addCell(cankaoval);
                                    Double ca12 = Convert.toDouble(((Object[]) list1.get(k))[12]);
                                    Number c1 = new Number(4 + bb, 4 + m + k, ca12.doubleValue(), cFormat2_2);
                                    sheet.addCell(c1);
                                    if (viewRankOfScoreInfo.equals("1")) {
                                        Number c11 = new Number(5 + bb, 4 + m + k, Integer.valueOf(((Object[]) list1.get(k))[16] + "").intValue(), cFormat2);
                                        sheet.addCell(c11);
                                        ii = 1;
                                    }
                                    Double ca13 = Double.valueOf(Double.parseDouble(df01.format(Convert.toDouble(((Object[]) list1.get(k))[13]))));
                                    Number c12 = new Number(5 + ii + bb, 4 + m + k, ca13.doubleValue(), cFormat2_1);
                                    sheet.addCell(c12);
                                    if (null == ((Object[]) list1.get(k))[18] || "".equals(String.valueOf(((Object[]) list1.get(k))[18]))) {
                                        Label c18 = new Label(6 + ii + bb, 4 + m + k, "", cFormat2);
                                        sheet.addCell(c18);
                                        if (viewRankOfScoreInfo.equals("1")) {
                                            Label c19 = new Label(7 + ii + bb, 4 + m + k, "", cFormat2);
                                            sheet.addCell(c19);
                                            ii = 2;
                                        }
                                    } else {
                                        Double ca18 = Convert.toDouble(((Object[]) list1.get(k))[18] + "");
                                        Number c182 = new Number(6 + ii + bb, 4 + m + k, ca18.doubleValue(), cFormat2_2);
                                        sheet.addCell(c182);
                                        if (viewRankOfScoreInfo.equals("1")) {
                                            Number c192 = new Number(7 + ii + bb, 4 + m + k, Integer.valueOf(((Object[]) list1.get(k))[19] + "").intValue(), cFormat2);
                                            sheet.addCell(c192);
                                            ii = 2;
                                        }
                                    }
                                    Double ca14 = Double.valueOf(Double.parseDouble(df01.format(Convert.toDouble(((Object[]) list1.get(k))[14]))));
                                    Number c14 = new Number(7 + ii + bb, 4 + m + k, ca14.doubleValue(), cFormat2);
                                    sheet.addCell(c14);
                                    Double ca15 = Double.valueOf(Double.parseDouble(df02.format(Convert.toDouble(((Object[]) list1.get(k))[15]))));
                                    Number c15 = new Number(8 + ii + bb, 4 + m + k, ca15.doubleValue(), cFormat2_2);
                                    sheet.addCell(c15);
                                    Number c112 = new Number(9 + ii + bb, 4 + m + k, Integer.valueOf(((Object[]) list1.get(k))[17] + "").intValue(), cFormat2);
                                    sheet.addCell(c112);
                                } else {
                                    if ("00".equals(rank) && "00".equals(teachUnit_s)) {
                                        Label c014 = new Label(1, 4 + m + k, null == ((Object[]) list1.get(k))[3] ? "" : ((Object[]) list1.get(k))[3].toString(), cFormat3);
                                        sheet.addCell(c014);
                                        Label c0122 = new Label(2, 4 + m + k, null == ((Object[]) list1.get(k))[20] ? "" : ((Object[]) list1.get(k))[20].toString(), cFormat3);
                                        sheet.addCell(c0122);
                                    } else {
                                        Label c015 = new Label(1, 4 + m + k, null == ((Object[]) list1.get(k))[3] ? "" : ((Object[]) list1.get(k))[3].toString(), cFormat2);
                                        sheet.addCell(c015);
                                    }
                                    Label c22 = new Label(2 + bb, 4 + m + k, ((Object[]) list1.get(k))[2] + "", cFormat3);
                                    sheet.addCell(c22);
                                    Label cankaoval2 = new Label(3 + bb, 4 + m + k, ((Object[]) list1.get(k))[4] + "", cFormat3);
                                    sheet.addCell(cankaoval2);
                                    Double ca122 = Convert.toDouble(((Object[]) list1.get(k))[12]);
                                    Number c13 = new Number(4 + bb, 4 + m + k, ca122.doubleValue(), cFormat3_2);
                                    sheet.addCell(c13);
                                    if (viewRankOfScoreInfo.equals("1")) {
                                        Number c113 = new Number(5 + bb, 4 + m + k, Integer.valueOf(((Object[]) list1.get(k))[16] + "").intValue(), cFormat3);
                                        sheet.addCell(c113);
                                        ii = 1;
                                    }
                                    Double ca132 = Double.valueOf(Double.parseDouble(df01.format(Convert.toDouble(((Object[]) list1.get(k))[13]))));
                                    Number c122 = new Number(5 + ii + bb, 4 + m + k, ca132.doubleValue(), cFormat3_1);
                                    sheet.addCell(c122);
                                    if (null == ((Object[]) list1.get(k))[18] || "".equals(String.valueOf(((Object[]) list1.get(k))[18]))) {
                                        Label c183 = new Label(6 + ii + bb, 4 + m + k, "", cFormat3);
                                        sheet.addCell(c183);
                                        if (viewRankOfScoreInfo.equals("1")) {
                                            Label c193 = new Label(7 + ii + bb, 4 + m + k, "", cFormat3);
                                            sheet.addCell(c193);
                                            ii = 2;
                                        }
                                    } else {
                                        Double ca182 = Convert.toDouble(((Object[]) list1.get(k))[18] + "");
                                        Number c184 = new Number(6 + ii + bb, 4 + m + k, ca182.doubleValue(), cFormat3_2);
                                        sheet.addCell(c184);
                                        if (viewRankOfScoreInfo.equals("1")) {
                                            Number c194 = new Number(7 + ii + bb, 4 + m + k, Integer.valueOf(((Object[]) list1.get(k))[19] + "").intValue(), cFormat3);
                                            sheet.addCell(c194);
                                            ii = 2;
                                        }
                                    }
                                    Double ca142 = Double.valueOf(Double.parseDouble(df01.format(Convert.toDouble(((Object[]) list1.get(k))[14]))));
                                    Number c142 = new Number(7 + ii + bb, 4 + m + k, ca142.doubleValue(), cFormat3);
                                    sheet.addCell(c142);
                                    Double ca152 = Double.valueOf(Double.parseDouble(df02.format(Convert.toDouble(((Object[]) list1.get(k))[15]))));
                                    Number c152 = new Number(8 + ii + bb, 4 + m + k, ca152.doubleValue(), cFormat3_2);
                                    sheet.addCell(c152);
                                    Number c114 = new Number(9 + ii + bb, 4 + m + k, Integer.valueOf(((Object[]) list1.get(k))[17] + "").intValue(), cFormat3);
                                    sheet.addCell(c114);
                                }
                            }
                            m += list1.size();
                        }
                    } catch (Exception e2) {
                        e2.printStackTrace();
                    }
                    wwBook.write();
                    if (wwBook != null) {
                        try {
                            wwBook.close();
                            if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                                HttpServletResponse response = ServletActionContext.getResponse();
                                response.reset();
                                ServletOutputStream outputStream = response.getOutputStream();
                                String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                String loadFileName2 = loadFileName.replace("+", " ");
                                response.setContentType("Content-type: applicationnd.ms-excel");
                                response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xls");
                                response.setHeader("Content-length", String.valueOf(excelFile.length()));
                                byte[] tempByte = new byte[1024];
                                FileInputStream in = new FileInputStream(excelFile);
                                while (true) {
                                    int n = in.read(tempByte);
                                    if (n == -1) {
                                        break;
                                    }
                                    try {
                                        outputStream.write(tempByte, 0, n);
                                    } catch (Exception e3) {
                                        this.log.error("保存未成功", e3);
                                    }
                                }
                                outputStream.flush();
                                outputStream.close();
                                in.close();
                            }
                        } catch (WriteException e4) {
                            e4.printStackTrace();
                        }
                    }
                } catch (Exception e5) {
                    if (wwBook != null) {
                        try {
                            wwBook.close();
                            if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                                HttpServletResponse response2 = ServletActionContext.getResponse();
                                response2.reset();
                                ServletOutputStream outputStream2 = response2.getOutputStream();
                                String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                String loadFileName4 = loadFileName3.replace("+", " ");
                                response2.setContentType("Content-type: applicationnd.ms-excel");
                                response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xls");
                                response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                                byte[] tempByte2 = new byte[1024];
                                FileInputStream in2 = new FileInputStream(excelFile);
                                while (true) {
                                    int n2 = in2.read(tempByte2);
                                    if (n2 == -1) {
                                        break;
                                    }
                                    try {
                                        outputStream2.write(tempByte2, 0, n2);
                                    } catch (Exception e6) {
                                        this.log.error("保存未成功", e6);
                                    }
                                }
                                outputStream2.flush();
                                outputStream2.close();
                                in2.close();
                            }
                        } catch (WriteException e7) {
                            e7.printStackTrace();
                        }
                    }
                }
            } catch (Throwable th) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response3 = ServletActionContext.getResponse();
                            response3.reset();
                            ServletOutputStream outputStream3 = response3.getOutputStream();
                            String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName6 = loadFileName5.replace("+", " ");
                            response3.setContentType("Content-type: applicationnd.ms-excel");
                            response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xls");
                            response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte3 = new byte[1024];
                            FileInputStream in3 = new FileInputStream(excelFile);
                            while (true) {
                                int n3 = in3.read(tempByte3);
                                if (n3 == -1) {
                                    break;
                                }
                                try {
                                    outputStream3.write(tempByte3, 0, n3);
                                } catch (Exception e8) {
                                    this.log.error("保存未成功", e8);
                                }
                            }
                            outputStream3.flush();
                            outputStream3.close();
                            in3.close();
                        }
                    } catch (WriteException e9) {
                        e9.printStackTrace();
                        throw th;
                    }
                }
                throw th;
            }
        } catch (Exception e10) {
            e10.printStackTrace();
        }
        return null;
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String teaScoreAnaly_exportgetData2(String examNum, String gradeNum, String teachUnit, String subjectNum, String classNum, String studentId, String studentType, String type, String source, String step, String sNum, String c_exam, String rpt_name, String isMoreSchool, String rptTitle, String isHistory, String isSaveWrite, String dirPath, String uri, String userNum, String schName, String gradeName, String className, String subjectName, String imgRoot, String agent, String rank, String fufen, String teachUnit_s) {
        String rptTitle2 = this.sp.getHeaderStr(examNum, subjectNum, gradeNum, teachUnit, classNum, studentId, studentType, true, true, false, false, false, true, false, true, false, false, false, false, false, false, false, "0", fufen);
        List quest = this.reportService.getTeacherScoreAnaly2(examNum, gradeNum, teachUnit, subjectNum, studentType, type, source, c_exam, "0", rank, fufen, teachUnit_s);
        String folderPath = "ExportFolder/reportExcel" + userNum;
        String str = "reportExcel" + userNum;
        String str2 = "reportExcel" + userNum;
        String excelName = (null == gradeName || "".equals(gradeName)) ? rpt_name + "_" + gradeNum : rpt_name + "_" + gradeName;
        if (null != classNum && !"".equals(classNum) && !classNum.contains(Const.STRING_SEPERATOR)) {
            excelName = (null == className || "".equals(className)) ? excelName + "_" + classNum : excelName + "_" + className;
        }
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        try {
            WritableWorkbook wwBook = Workbook.createWorkbook(excelFile);
            WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
            biaotis1.setAlignment(Alignment.LEFT);
            biaotis1.setVerticalAlignment(VerticalAlignment.CENTRE);
            WritableFont titles = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat title = new WritableCellFormat(titles);
            title.setAlignment(Alignment.LEFT);
            title.setVerticalAlignment(VerticalAlignment.CENTRE);
            title.setWrap(true);
            WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            WritableCellFormat cFormat1 = new WritableCellFormat(font1);
            cFormat1.setAlignment(Alignment.CENTRE);
            cFormat1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1.setBackground(Const.titleBackground_color);
            cFormat1.setWrap(true);
            WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat2 = new WritableCellFormat(font2);
            cFormat2.setAlignment(Alignment.CENTRE);
            cFormat2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2.setBackground(Const.textOuBackGround_color);
            cFormat2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2.setWrap(true);
            DateFormat df1 = new DateFormat("0.0%");
            WritableCellFormat cFormat2_0 = new WritableCellFormat(font2, df1);
            cFormat2_0.setAlignment(Alignment.CENTRE);
            cFormat2_0.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_0.setBackground(Const.textOuBackGround_color);
            cFormat2_0.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_0.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_0.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_0.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_0.setWrap(true);
            NumberFormat nf1 = new NumberFormat("0.0");
            WritableCellFormat cFormat2_1 = new WritableCellFormat(font2, nf1);
            cFormat2_1.setAlignment(Alignment.CENTRE);
            cFormat2_1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_1.setBackground(Const.textOuBackGround_color);
            cFormat2_1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_1.setWrap(true);
            NumberFormat nf2 = new NumberFormat("0.00");
            WritableCellFormat cFormat2_2 = new WritableCellFormat(font2, nf2);
            cFormat2_2.setAlignment(Alignment.CENTRE);
            cFormat2_2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_2.setBackground(Const.textOuBackGround_color);
            cFormat2_2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_2.setWrap(true);
            WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat3 = new WritableCellFormat(font3);
            cFormat3.setAlignment(Alignment.CENTRE);
            cFormat3.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3.setBackground(Const.textJiBackGround_color);
            cFormat3.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3.setWrap(true);
            WritableCellFormat cFormat3_0 = new WritableCellFormat(font3, df1);
            cFormat3_0.setAlignment(Alignment.CENTRE);
            cFormat3_0.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_0.setBackground(Const.textJiBackGround_color);
            cFormat3_0.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_0.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_0.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_0.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_0.setWrap(true);
            WritableCellFormat cFormat3_1 = new WritableCellFormat(font3, nf1);
            cFormat3_1.setAlignment(Alignment.CENTRE);
            cFormat3_1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_1.setBackground(Const.textJiBackGround_color);
            cFormat3_1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_1.setWrap(true);
            WritableCellFormat cFormat3_2 = new WritableCellFormat(font3, nf2);
            cFormat3_2.setAlignment(Alignment.CENTRE);
            cFormat3_2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_2.setBackground(Const.textJiBackGround_color);
            cFormat3_2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_2.setWrap(true);
            WritableFont font4 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat4 = new WritableCellFormat(font4);
            cFormat4.setAlignment(Alignment.LEFT);
            cFormat4.setBackground(Const.subject_color);
            cFormat4.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat4.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat4.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat4.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat4.setWrap(true);
            try {
                WritableSheet sheet = wwBook.createSheet(rpt_name, 0);
                sheet.getSettings().setShowGridLines(false);
                try {
                    Label biaotou = new Label(0, 0, rpt_name, biaotis1);
                    sheet.addCell(biaotou);
                    DecimalFormat df01 = new DecimalFormat("0.0");
                    DecimalFormat df02 = new DecimalFormat("0.00");
                    DecimalFormat df03 = new DecimalFormat("0.000");
                    df01.setRoundingMode(RoundingMode.HALF_UP);
                    df02.setRoundingMode(RoundingMode.HALF_UP);
                    df03.setRoundingMode(RoundingMode.HALF_UP);
                    Label xinxi = new Label(0, 1, rptTitle2, title);
                    sheet.addCell(xinxi);
                    sheet.setRowView(1, Const.height_500);
                    sheet.mergeCells(0, 0, 16, 0);
                    sheet.mergeCells(0, 1, 16, 1);
                    Label mingcheng = new Label(0, 2, "学科 ", cFormat1);
                    sheet.addCell(mingcheng);
                    Label a3 = new Label(1, 2, "所教班级", cFormat1);
                    sheet.addCell(a3);
                    sheet.setColumnView(2, 18);
                    Label a4 = new Label(2, 2, "参考人数", cFormat1);
                    sheet.addCell(a4);
                    sheet.setColumnView(3, 10);
                    Label a5 = new Label(3, 2, "最高分", cFormat1);
                    sheet.addCell(a5);
                    Label a6 = new Label(4, 2, "高分人数", cFormat1);
                    sheet.addCell(a6);
                    sheet.setColumnView(5, 10);
                    Label a7 = new Label(5, 2, "高分率", cFormat1);
                    sheet.addCell(a7);
                    Label a8 = new Label(6, 2, "高优秀人数", cFormat1);
                    sheet.addCell(a8);
                    sheet.setColumnView(7, 10);
                    Label a9 = new Label(7, 2, "优秀率", cFormat1);
                    sheet.addCell(a9);
                    Label a10 = new Label(8, 2, "及格人数", cFormat1);
                    sheet.addCell(a10);
                    sheet.setColumnView(9, 10);
                    Label a11 = new Label(9, 2, "及格率", cFormat1);
                    sheet.addCell(a11);
                    Label a12 = new Label(10, 2, "平均分", cFormat1);
                    sheet.addCell(a12);
                    Label a13 = new Label(11, 2, "排名", cFormat1);
                    sheet.addCell(a13);
                    Label a14 = new Label(12, 2, "标准分T", cFormat1);
                    sheet.addCell(a14);
                    sheet.setColumnView(13, 10);
                    Label a15 = new Label(13, 2, "参照考试标准分T", cFormat1);
                    sheet.addCell(a15);
                    sheet.setColumnView(14, 12);
                    Label a16 = new Label(14, 2, "进步度", cFormat1);
                    sheet.addCell(a16);
                    Label a17 = new Label(15, 2, "进步排名", cFormat1);
                    sheet.addCell(a17);
                    sheet.setColumnView(15, 10);
                    int q = 0;
                    int m = 0;
                    for (int i = 0; i < quest.size(); i++) {
                        List list1 = (List) quest.get(i);
                        String cc = (String) ((Object[]) ((List) quest.get(i)).get(0))[1];
                        Label b1 = new Label(0, 3 + q + i, cc, cFormat4);
                        sheet.addCell(b1);
                        sheet.mergeCells(0, 3 + q + i, 15, 3 + q + i);
                        q += list1.size();
                        for (int k = 0; k < list1.size(); k++) {
                            if (k % 2 != 0) {
                                Label c0 = new Label(0, 4 + m + i + k, "", cFormat2);
                                sheet.addCell(c0);
                                Label c1 = new Label(1, 4 + m + i + k, (String) ((Object[]) list1.get(k))[3], cFormat2);
                                sheet.addCell(c1);
                                Number c2 = new Number(2, 4 + m + i + k, Integer.valueOf(((Object[]) list1.get(k))[4] + "").intValue(), cFormat2);
                                sheet.addCell(c2);
                                Double ca4 = Double.valueOf(Double.parseDouble(df01.format(((Object[]) list1.get(k))[5])));
                                Number c3 = new Number(3, 4 + m + i + k, ca4.doubleValue(), cFormat2_1);
                                sheet.addCell(c3);
                                Number c4 = new Number(4, 4 + m + i + k, Integer.valueOf(((Object[]) list1.get(k))[6] + "").intValue(), cFormat2);
                                sheet.addCell(c4);
                                Double ca7_val = Double.valueOf(df03.format(((Object[]) list1.get(k))[7]));
                                Number c5 = new Number(5, 4 + m + i + k, ca7_val.doubleValue(), cFormat2_0);
                                sheet.addCell(c5);
                                Number c6 = new Number(6, 4 + m + i + k, Integer.valueOf(((Object[]) list1.get(k))[10] + "").intValue(), cFormat2);
                                sheet.addCell(c6);
                                Double ca11_val = Double.valueOf(df03.format(((Object[]) list1.get(k))[11]));
                                Number c7 = new Number(7, 4 + m + i + k, ca11_val.doubleValue(), cFormat2_0);
                                sheet.addCell(c7);
                                Number c8 = new Number(8, 4 + m + i + k, Integer.valueOf(((Object[]) list1.get(k))[8] + "").intValue(), cFormat2);
                                sheet.addCell(c8);
                                Double ca_val = Double.valueOf(df03.format(((Object[]) list1.get(k))[9]));
                                Number c9 = new Number(9, 4 + m + i + k, ca_val.doubleValue(), cFormat2_0);
                                sheet.addCell(c9);
                                Double ca12 = Double.valueOf(Double.parseDouble(df01.format(((Object[]) list1.get(k))[12])));
                                Number c10 = new Number(10, 4 + m + i + k, ca12.doubleValue(), cFormat2_1);
                                sheet.addCell(c10);
                                Number c11 = new Number(11, 4 + m + i + k, Integer.valueOf(((Object[]) list1.get(k))[16] + "").intValue(), cFormat2);
                                sheet.addCell(c11);
                                Double ca13 = Double.valueOf(Double.parseDouble(df01.format(((Object[]) list1.get(k))[13])));
                                Number c12 = new Number(12, 4 + m + i + k, ca13.doubleValue(), cFormat2_1);
                                sheet.addCell(c12);
                                Double ca14 = Double.valueOf(Double.parseDouble(df01.format(((Object[]) list1.get(k))[14])));
                                Number c13 = new Number(13, 4 + m + i + k, ca14.doubleValue(), cFormat2_1);
                                sheet.addCell(c13);
                                Double ca15 = Double.valueOf(Double.parseDouble(df02.format(((Object[]) list1.get(k))[15])));
                                Number c15 = new Number(14, 4 + m + i + k, ca15.doubleValue(), cFormat2_2);
                                sheet.addCell(c15);
                                Number c16 = new Number(15, 4 + m + i + k, Integer.valueOf(((Object[]) list1.get(k))[17] + "").intValue(), cFormat2);
                                sheet.addCell(c16);
                            } else {
                                Label c02 = new Label(0, 4 + m + i + k, "", cFormat3);
                                sheet.addCell(c02);
                                Label c14 = new Label(1, 4 + m + i + k, (String) ((Object[]) list1.get(k))[3], cFormat3);
                                sheet.addCell(c14);
                                Number c22 = new Number(2, 4 + m + i + k, Integer.valueOf(((Object[]) list1.get(k))[4] + "").intValue(), cFormat3);
                                sheet.addCell(c22);
                                Double ca42 = Double.valueOf(Double.parseDouble(df01.format(((Object[]) list1.get(k))[5])));
                                Number c32 = new Number(3, 4 + m + i + k, ca42.doubleValue(), cFormat3_1);
                                sheet.addCell(c32);
                                Number c42 = new Number(4, 4 + m + i + k, Integer.valueOf(((Object[]) list1.get(k))[6] + "").intValue(), cFormat3);
                                sheet.addCell(c42);
                                Double ca7_val2 = Double.valueOf(df03.format(((Object[]) list1.get(k))[7]));
                                Number c52 = new Number(5, 4 + m + i + k, ca7_val2.doubleValue(), cFormat3_0);
                                sheet.addCell(c52);
                                Number c62 = new Number(6, 4 + m + i + k, Integer.valueOf(((Object[]) list1.get(k))[10] + "").intValue(), cFormat3);
                                sheet.addCell(c62);
                                Double ca11_val2 = Double.valueOf(df03.format(((Object[]) list1.get(k))[11]));
                                Number c72 = new Number(7, 4 + m + i + k, ca11_val2.doubleValue(), cFormat3_0);
                                sheet.addCell(c72);
                                Number c82 = new Number(8, 4 + m + i + k, Integer.valueOf(((Object[]) list1.get(k))[8] + "").intValue(), cFormat3);
                                sheet.addCell(c82);
                                Double ca_val2 = Double.valueOf(df03.format(((Object[]) list1.get(k))[9]));
                                Number c92 = new Number(9, 4 + m + i + k, ca_val2.doubleValue(), cFormat3_0);
                                sheet.addCell(c92);
                                Double ca122 = Double.valueOf(Double.parseDouble(df01.format(((Object[]) list1.get(k))[12])));
                                Number c102 = new Number(10, 4 + m + i + k, ca122.doubleValue(), cFormat3_1);
                                sheet.addCell(c102);
                                Number c112 = new Number(11, 4 + m + i + k, Integer.valueOf(((Object[]) list1.get(k))[16] + "").intValue(), cFormat3);
                                sheet.addCell(c112);
                                Double ca132 = Double.valueOf(Double.parseDouble(df01.format(((Object[]) list1.get(k))[13])));
                                Number c122 = new Number(12, 4 + m + i + k, ca132.doubleValue(), cFormat3_1);
                                sheet.addCell(c122);
                                Double ca142 = Double.valueOf(Double.parseDouble(df01.format(((Object[]) list1.get(k))[14])));
                                Number c132 = new Number(13, 4 + m + i + k, ca142.doubleValue(), cFormat3_1);
                                sheet.addCell(c132);
                                Double ca152 = Double.valueOf(Double.parseDouble(df02.format(((Object[]) list1.get(k))[15])));
                                Number c152 = new Number(14, 4 + m + i + k, ca152.doubleValue(), cFormat3_2);
                                sheet.addCell(c152);
                                Number c162 = new Number(15, 4 + m + i + k, Integer.valueOf(((Object[]) list1.get(k))[17] + "").intValue(), cFormat3);
                                sheet.addCell(c162);
                            }
                        }
                        m += list1.size();
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                wwBook.write();
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response = ServletActionContext.getResponse();
                            response.reset();
                            ServletOutputStream outputStream = response.getOutputStream();
                            String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName2 = loadFileName.replace("+", " ");
                            response.setContentType("Content-type: applicationnd.ms-excel");
                            response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xls");
                            response.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte = new byte[1024];
                            FileInputStream in = new FileInputStream(excelFile);
                            while (true) {
                                int n = in.read(tempByte);
                                if (n == -1) {
                                    break;
                                }
                                try {
                                    outputStream.write(tempByte, 0, n);
                                } catch (Exception e2) {
                                    this.log.error("保存未成功", e2);
                                }
                            }
                            outputStream.flush();
                            outputStream.close();
                            in.close();
                        }
                    } catch (WriteException e3) {
                        e3.printStackTrace();
                    }
                }
            } catch (Exception e4) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response2 = ServletActionContext.getResponse();
                            response2.reset();
                            ServletOutputStream outputStream2 = response2.getOutputStream();
                            String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName4 = loadFileName3.replace("+", " ");
                            response2.setContentType("Content-type: applicationnd.ms-excel");
                            response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xls");
                            response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte2 = new byte[1024];
                            FileInputStream in2 = new FileInputStream(excelFile);
                            while (true) {
                                int n2 = in2.read(tempByte2);
                                if (n2 == -1) {
                                    break;
                                }
                                try {
                                    outputStream2.write(tempByte2, 0, n2);
                                } catch (Exception e5) {
                                    this.log.error("保存未成功", e5);
                                }
                            }
                            outputStream2.flush();
                            outputStream2.close();
                            in2.close();
                        }
                    } catch (WriteException e6) {
                        e6.printStackTrace();
                    }
                }
            } catch (Throwable th) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response3 = ServletActionContext.getResponse();
                            response3.reset();
                            ServletOutputStream outputStream3 = response3.getOutputStream();
                            String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName6 = loadFileName5.replace("+", " ");
                            response3.setContentType("Content-type: applicationnd.ms-excel");
                            response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xls");
                            response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte3 = new byte[1024];
                            FileInputStream in3 = new FileInputStream(excelFile);
                            while (true) {
                                int n3 = in3.read(tempByte3);
                                if (n3 == -1) {
                                    break;
                                }
                                try {
                                    outputStream3.write(tempByte3, 0, n3);
                                } catch (Exception e7) {
                                    this.log.error("保存未成功", e7);
                                }
                            }
                            outputStream3.flush();
                            outputStream3.close();
                            in3.close();
                        }
                    } catch (WriteException e8) {
                        e8.printStackTrace();
                        throw th;
                    }
                }
                throw th;
            }
        } catch (Exception e9) {
            e9.printStackTrace();
        }
        return null;
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String c1_exportMethod(String examNum, String gradeNum, String schoolNum, String subjectNum, String classNum, String studentId, String studentType, String type, String source, String history, String isMoreSchool, String isSaveWrite, String rptTitle, String rpt_name, String dirPath, String uri, String useId, int tupiansize, String all_class, String agent, String show, String className, String studentName) {
        String folderPath = "reportExcel" + useId;
        String folderName = "reportExcel" + useId;
        String zipName = "reportExcel" + useId;
        String excelName = rpt_name + "_" + gradeNum;
        if (null != classNum && !"".equals(classNum) && !classNum.contains(Const.STRING_SEPERATOR)) {
            excelName = (null == className || "".equals(className)) ? excelName + "_" + classNum : excelName + "_" + className + "_" + studentName;
        }
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        String filePath = null;
        try {
            WritableWorkbook wwBook = Workbook.createWorkbook(excelFile);
            WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
            biaotis1.setAlignment(Alignment.LEFT);
            biaotis1.setVerticalAlignment(VerticalAlignment.CENTRE);
            WritableFont titles = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat title = new WritableCellFormat(titles);
            title.setAlignment(Alignment.LEFT);
            title.setVerticalAlignment(VerticalAlignment.CENTRE);
            title.setWrap(true);
            WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            WritableCellFormat cFormat1 = new WritableCellFormat(font1);
            cFormat1.setAlignment(Alignment.CENTRE);
            cFormat1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1.setBackground(Const.titleBackground_color);
            cFormat1.setWrap(true);
            WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat2 = new WritableCellFormat(font2);
            cFormat2.setAlignment(Alignment.CENTRE);
            cFormat2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2.setBackground(Const.textOuBackGround_color);
            cFormat2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2.setWrap(true);
            NumberFormat nf1 = new NumberFormat("0.0");
            WritableCellFormat cFormat2_1 = new WritableCellFormat(font2, nf1);
            cFormat2_1.setAlignment(Alignment.CENTRE);
            cFormat2_1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_1.setBackground(Const.textOuBackGround_color);
            cFormat2_1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_1.setWrap(true);
            WritableCellFormat cFormat2_2 = new WritableCellFormat(font2);
            cFormat2_2.setAlignment(Alignment.CENTRE);
            cFormat2_2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_2.setBackground(Const.textOuBackGround_color);
            cFormat2_2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_2.setWrap(true);
            WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat3 = new WritableCellFormat(font3);
            cFormat3.setAlignment(Alignment.CENTRE);
            cFormat3.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3.setBackground(Const.textJiBackGround_color);
            cFormat3.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3.setWrap(true);
            WritableCellFormat cFormat3_1 = new WritableCellFormat(font3, nf1);
            cFormat3_1.setAlignment(Alignment.CENTRE);
            cFormat3_1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_1.setBackground(Const.textJiBackGround_color);
            cFormat3_1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_1.setWrap(true);
            WritableCellFormat cFormat3_2 = new WritableCellFormat(font3);
            cFormat3_2.setAlignment(Alignment.CENTRE);
            cFormat3_2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_2.setBackground(Const.textJiBackGround_color);
            cFormat3_2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_2.setWrap(true);
            List list = this.c1.getStuMoreScore(examNum, gradeNum, schoolNum, classNum, studentId, type, studentType, source);
            try {
                try {
                    WritableSheet sheet = wwBook.createSheet(rpt_name, 0);
                    sheet.getSettings().setShowGridLines(false);
                    try {
                        new ArrayList();
                        new ArrayList();
                        new ArrayList();
                        List list3 = (List) list.get(0);
                        List list1 = (List) list.get(1);
                        List list2 = (List) list.get(2);
                        Label biaotou = new Label(0, 0, rpt_name, biaotis1);
                        sheet.addCell(biaotou);
                        DecimalFormat df1 = new DecimalFormat("0.0");
                        df1.setRoundingMode(RoundingMode.HALF_UP);
                        Label xinxi = new Label(0, 1, rptTitle, title);
                        sheet.addCell(xinxi);
                        sheet.setRowView(1, Const.height_500);
                        sheet.mergeCells(0, 0, list3.size() + 1, 0);
                        sheet.mergeCells(0, 1, list3.size() + 1, 1);
                        Label yuanshifen = new Label(0, 2, "原始分", biaotis1);
                        sheet.addCell(yuanshifen);
                        Label biaozhunfen = new Label(0, 5 + tupiansize + list2.size(), "标准分", biaotis1);
                        sheet.addCell(biaozhunfen);
                        Label raw_score_time = new Label(0, 3, "时间", cFormat1);
                        sheet.addCell(raw_score_time);
                        sheet.setColumnView(0, 15);
                        Label raw_score_examName = new Label(1, 3, "考试名称", cFormat1);
                        sheet.addCell(raw_score_examName);
                        sheet.setColumnView(1, 15);
                        Label standard_score_time = new Label(0, 6 + tupiansize + list2.size(), "时间", cFormat1);
                        sheet.addCell(standard_score_time);
                        sheet.setColumnView(0, 15);
                        Label standard_score_examName = new Label(1, 6 + tupiansize + list2.size(), "考试名称", cFormat1);
                        sheet.addCell(standard_score_examName);
                        sheet.setColumnView(1, 15);
                        String totalScore = "";
                        String stanScore = "";
                        String subjectName_len = "";
                        String examName_len = "";
                        for (int su = 0; su < list3.size(); su++) {
                            if (((Subject) list3.get(su)).getIsHidden().equals("F")) {
                                subjectName_len = subjectName_len + ((Subject) list3.get(su)).getSubjectName() + Const.STRING_SEPERATOR;
                            }
                        }
                        for (int ex = 0; ex < list2.size(); ex++) {
                            int p = 0;
                            if (ex % 2 != 0) {
                                Label raw_score_data = new Label(0, 4 + ex, ((Exam) list2.get(ex)).getExamDate(), cFormat2);
                                sheet.addCell(raw_score_data);
                                Label raw_score_examNames = new Label(1, 4 + ex, ((Exam) list2.get(ex)).getExamName(), cFormat2);
                                sheet.addCell(raw_score_examNames);
                                Label standard_score_data = new Label(0, 7 + tupiansize + list2.size() + ex, ((Exam) list2.get(ex)).getExamDate(), cFormat2);
                                sheet.addCell(standard_score_data);
                                Label standard_score_examNames = new Label(1, 7 + tupiansize + list2.size() + ex, ((Exam) list2.get(ex)).getExamName(), cFormat2);
                                sheet.addCell(standard_score_examNames);
                                examName_len = examName_len + ((Exam) list2.get(ex)).getExamName() + Const.STRING_SEPERATOR;
                                for (int su2 = 0; su2 < list3.size(); su2++) {
                                    Label raw_score_subjectName = new Label(2 + su2, 3, ((Subject) list3.get(su2)).getSubjectName() + "", cFormat1);
                                    sheet.addCell(raw_score_subjectName);
                                    Label standard_score_subjectName = new Label(2 + su2, 6 + tupiansize + list2.size(), ((Subject) list3.get(su2)).getSubjectName() + "", cFormat1);
                                    sheet.addCell(standard_score_subjectName);
                                    String su_subjectName = ((Subject) list3.get(su2)).getSubjectName();
                                    Integer ex_examNum = ((Exam) list2.get(ex)).getExamNum();
                                    String ex_examName = ((Exam) list2.get(ex)).getExamName();
                                    String exams = ex_examNum + ex_examName;
                                    int t = 0;
                                    for (int d = 0; d < list1.size(); d++) {
                                        if ((su_subjectName + exams).equals(((RptHeader) list1.get(d)).getSubjectName() + ((RptHeader) list1.get(d)).getExamNum() + ((RptHeader) list1.get(d)).getExamName())) {
                                            t = 1;
                                        }
                                    }
                                    if (t == 1) {
                                        for (int ds = 0; ds < list1.size(); ds++) {
                                            String ex_examNum_d = ((Exam) list2.get(ex)).getExamNum() + "";
                                            String su_subjectName_d = ((Subject) list3.get(su2)).getSubjectName();
                                            String ds_examNum = ((RptHeader) list1.get(ds)).getExamNum();
                                            String ds_subjectName = ((RptHeader) list1.get(ds)).getSubjectName();
                                            if (ex_examNum_d.equals(ds_examNum) && ds_subjectName.equals(su_subjectName_d)) {
                                                if (((RptHeader) list1.get(ds)).getSubjectNum().indexOf("Rank") == -1) {
                                                    String yuanshiscore = Convert.toBigDecimal(df1.format(((RptHeader) list1.get(ds)).getTotalScore())).stripTrailingZeros().toPlainString();
                                                    Number raw_score_totalScore = new Number(2 + p, 4 + ex, Double.valueOf(yuanshiscore).doubleValue(), cFormat2_2);
                                                    sheet.addCell(raw_score_totalScore);
                                                    Number standard_score_totalScore = new Number(2 + p, 7 + tupiansize + list2.size() + ex, Double.valueOf(df1.format(((RptHeader) list1.get(ds)).getStandardScore())).doubleValue(), cFormat2_1);
                                                    sheet.addCell(standard_score_totalScore);
                                                } else {
                                                    Number raw_score_totalScore2 = new Number(2 + p, 4 + ex, ((RptHeader) list1.get(ds)).getTotalScore(), cFormat2);
                                                    sheet.addCell(raw_score_totalScore2);
                                                    Number standard_score_totalScore2 = new Number(2 + p, 7 + tupiansize + list2.size() + ex, ((RptHeader) list1.get(ds)).getStandardScore(), cFormat2);
                                                    sheet.addCell(standard_score_totalScore2);
                                                }
                                                if (((Subject) list3.get(su2)).getIsHidden().equals("F")) {
                                                    totalScore = totalScore + df1.format(((RptHeader) list1.get(ds)).getTotalScore()) + Const.STRING_SEPERATOR;
                                                    stanScore = stanScore + df1.format(((RptHeader) list1.get(ds)).getStandardScore()) + Const.STRING_SEPERATOR;
                                                }
                                                p++;
                                            }
                                        }
                                    } else {
                                        Label raw_score_totalScore3 = new Label(2 + p, 4 + ex, "", cFormat2);
                                        sheet.addCell(raw_score_totalScore3);
                                        Label standard_score_totalScore3 = new Label(2 + p, 7 + tupiansize + list2.size() + ex, "", cFormat2);
                                        sheet.addCell(standard_score_totalScore3);
                                        if (((Subject) list3.get(su2)).getIsHidden().equals("F")) {
                                            totalScore = totalScore + "0,";
                                            stanScore = stanScore + "0,";
                                        }
                                        p++;
                                    }
                                }
                            } else {
                                Label raw_score_data2 = new Label(0, 4 + ex, ((Exam) list2.get(ex)).getExamDate(), cFormat3);
                                sheet.addCell(raw_score_data2);
                                Label raw_score_examNames2 = new Label(1, 4 + ex, ((Exam) list2.get(ex)).getExamName(), cFormat3);
                                sheet.addCell(raw_score_examNames2);
                                Label standard_score_data2 = new Label(0, 7 + tupiansize + list2.size() + ex, ((Exam) list2.get(ex)).getExamDate(), cFormat3);
                                sheet.addCell(standard_score_data2);
                                Label standard_score_examNames2 = new Label(1, 7 + tupiansize + list2.size() + ex, ((Exam) list2.get(ex)).getExamName(), cFormat3);
                                sheet.addCell(standard_score_examNames2);
                                examName_len = examName_len + ((Exam) list2.get(ex)).getExamName() + Const.STRING_SEPERATOR;
                                for (int su3 = 0; su3 < list3.size(); su3++) {
                                    Label raw_score_subjectName2 = new Label(2 + su3, 3, ((Subject) list3.get(su3)).getSubjectName() + "", cFormat1);
                                    sheet.addCell(raw_score_subjectName2);
                                    Label standard_score_subjectName2 = new Label(2 + su3, 6 + tupiansize + list2.size(), ((Subject) list3.get(su3)).getSubjectName() + "", cFormat1);
                                    sheet.addCell(standard_score_subjectName2);
                                    String su_subjectName2 = ((Subject) list3.get(su3)).getSubjectName();
                                    Integer ex_examNum2 = ((Exam) list2.get(ex)).getExamNum();
                                    String ex_examName2 = ((Exam) list2.get(ex)).getExamName();
                                    String exams2 = ex_examNum2 + ex_examName2;
                                    int t2 = 0;
                                    for (int d2 = 0; d2 < list1.size(); d2++) {
                                        if ((su_subjectName2 + exams2).equals(((RptHeader) list1.get(d2)).getSubjectName() + ((RptHeader) list1.get(d2)).getExamNum() + ((RptHeader) list1.get(d2)).getExamName())) {
                                            t2 = 1;
                                        }
                                    }
                                    if (t2 == 1) {
                                        for (int ds2 = 0; ds2 < list1.size(); ds2++) {
                                            String ex_examNum_d2 = ((Exam) list2.get(ex)).getExamNum() + "";
                                            String su_subjectName_d2 = ((Subject) list3.get(su3)).getSubjectName();
                                            String ds_examNum2 = ((RptHeader) list1.get(ds2)).getExamNum();
                                            String ds_subjectName2 = ((RptHeader) list1.get(ds2)).getSubjectName();
                                            if (ex_examNum_d2.equals(ds_examNum2) && ds_subjectName2.equals(su_subjectName_d2)) {
                                                if (((RptHeader) list1.get(ds2)).getSubjectNum().indexOf("Rank") == -1) {
                                                    String yuanshiscore2 = Convert.toBigDecimal(df1.format(((RptHeader) list1.get(ds2)).getTotalScore())).stripTrailingZeros().toPlainString();
                                                    Number raw_score_totalScore4 = new Number(2 + p, 4 + ex, Double.valueOf(yuanshiscore2).doubleValue(), cFormat3_2);
                                                    sheet.addCell(raw_score_totalScore4);
                                                    Number standard_score_totalScore4 = new Number(2 + p, 7 + tupiansize + list2.size() + ex, Double.valueOf(df1.format(((RptHeader) list1.get(ds2)).getStandardScore())).doubleValue(), cFormat3_1);
                                                    sheet.addCell(standard_score_totalScore4);
                                                } else {
                                                    Number raw_score_totalScore5 = new Number(2 + p, 4 + ex, ((RptHeader) list1.get(ds2)).getTotalScore(), cFormat3);
                                                    sheet.addCell(raw_score_totalScore5);
                                                    Number standard_score_totalScore5 = new Number(2 + p, 7 + tupiansize + list2.size() + ex, ((RptHeader) list1.get(ds2)).getStandardScore(), cFormat3);
                                                    sheet.addCell(standard_score_totalScore5);
                                                }
                                                if (((Subject) list3.get(su3)).getIsHidden().equals("F")) {
                                                    totalScore = totalScore + df1.format(((RptHeader) list1.get(ds2)).getTotalScore()) + Const.STRING_SEPERATOR;
                                                    stanScore = stanScore + df1.format(((RptHeader) list1.get(ds2)).getStandardScore()) + Const.STRING_SEPERATOR;
                                                }
                                                p++;
                                            }
                                        }
                                    } else {
                                        Label raw_score_totalScore6 = new Label(2 + p, 4 + ex, "", cFormat3);
                                        sheet.addCell(raw_score_totalScore6);
                                        Label standard_score_totalScore6 = new Label(2 + p, 7 + tupiansize + list2.size() + ex, "", cFormat3);
                                        sheet.addCell(standard_score_totalScore6);
                                        if (((Subject) list3.get(su3)).getIsHidden().equals("F")) {
                                            totalScore = totalScore + "0,";
                                            stanScore = stanScore + "0,";
                                        }
                                        p++;
                                    }
                                }
                            }
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    wwBook.write();
                    if (wwBook != null) {
                        try {
                            wwBook.close();
                            if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                                if (Integer.valueOf(all_class).intValue() == 1) {
                                    HttpServletResponse response = ServletActionContext.getResponse();
                                    response.reset();
                                    ServletOutputStream outputStream = response.getOutputStream();
                                    String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                    String loadFileName2 = loadFileName.replace("+", " ");
                                    response.setContentType("Content-type: applicationnd.ms-excel");
                                    response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xls");
                                    response.setHeader("Content-length", String.valueOf(excelFile.length()));
                                    byte[] tempByte = new byte[1024];
                                    FileInputStream in = new FileInputStream(excelFile);
                                    while (true) {
                                        int n = in.read(tempByte);
                                        if (n == -1) {
                                            break;
                                        }
                                        try {
                                            outputStream.write(tempByte, 0, n);
                                        } catch (Exception e2) {
                                            this.log.error("保存未成功", e2);
                                        }
                                    }
                                    outputStream.flush();
                                    outputStream.close();
                                    in.close();
                                } else {
                                    filePath = methodZipAll(uri, dirPath, folderName, zipName);
                                }
                            }
                        } catch (WriteException e3) {
                            e3.printStackTrace();
                        }
                    }
                } catch (Exception e4) {
                    if (wwBook != null) {
                        try {
                            wwBook.close();
                            if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                                if (Integer.valueOf(all_class).intValue() == 1) {
                                    HttpServletResponse response2 = ServletActionContext.getResponse();
                                    response2.reset();
                                    ServletOutputStream outputStream2 = response2.getOutputStream();
                                    String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                    String loadFileName4 = loadFileName3.replace("+", " ");
                                    response2.setContentType("Content-type: applicationnd.ms-excel");
                                    response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xls");
                                    response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                                    byte[] tempByte2 = new byte[1024];
                                    FileInputStream in2 = new FileInputStream(excelFile);
                                    while (true) {
                                        int n2 = in2.read(tempByte2);
                                        if (n2 == -1) {
                                            break;
                                        }
                                        try {
                                            outputStream2.write(tempByte2, 0, n2);
                                        } catch (Exception e5) {
                                            this.log.error("保存未成功", e5);
                                        }
                                    }
                                    outputStream2.flush();
                                    outputStream2.close();
                                    in2.close();
                                } else {
                                    filePath = methodZipAll(uri, dirPath, folderName, zipName);
                                }
                            }
                        } catch (WriteException e6) {
                            e6.printStackTrace();
                        }
                    }
                }
            } catch (Throwable th) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            if (Integer.valueOf(all_class).intValue() == 1) {
                                HttpServletResponse response3 = ServletActionContext.getResponse();
                                response3.reset();
                                ServletOutputStream outputStream3 = response3.getOutputStream();
                                String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                String loadFileName6 = loadFileName5.replace("+", " ");
                                response3.setContentType("Content-type: applicationnd.ms-excel");
                                response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xls");
                                response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                                byte[] tempByte3 = new byte[1024];
                                FileInputStream in3 = new FileInputStream(excelFile);
                                while (true) {
                                    int n3 = in3.read(tempByte3);
                                    if (n3 == -1) {
                                        break;
                                    }
                                    try {
                                        outputStream3.write(tempByte3, 0, n3);
                                    } catch (Exception e7) {
                                        this.log.error("保存未成功", e7);
                                    }
                                }
                                outputStream3.flush();
                                outputStream3.close();
                                in3.close();
                            } else {
                                methodZipAll(uri, dirPath, folderName, zipName);
                            }
                        }
                    } catch (WriteException e8) {
                        e8.printStackTrace();
                        throw th;
                    }
                }
                throw th;
            }
        } catch (Exception e9) {
            e9.printStackTrace();
        }
        return filePath;
    }

    public File getSubChartImgFile_c1(String userId, String rowKeys, Integer ii, String subs, String totalScore, String stanScore, String examNameStr1, String dirPath) {
        subjectLineImage_c1(userId, rowKeys, subs, totalScore, stanScore, examNameStr1);
        File file = new File(dirPath + File.separator + "tmpLinePng" + File.separator + userId + rowKeys + ".png");
        return file;
    }

    public void subjectLineImage_c1(String userId, String rowKey, String subs, String totalScore, String stanScore, String examNameStr1) {
        String[] rowKeys = subs.split(Const.STRING_SEPERATOR);
        String[] totalScores = totalScore.split(Const.STRING_SEPERATOR);
        String[] stanScores = stanScore.split(Const.STRING_SEPERATOR);
        String[] examNamestr = examNameStr1.split(Const.STRING_SEPERATOR);
        for (int i = 0; i < rowKeys.length; i++) {
            rowKeys[i] = rowKeys[i];
        }
        String[] tupianName = {"C1_totalScore", "C1_stanScore"};
        String[] titleName = {"学生成绩变化趋势（原始分）", "学生成绩变化趋势（标准分）"};
        String[] columnKeys = new String[examNamestr.length];
        double[][] data = new double[rowKeys.length][examNamestr.length];
        double[][] data_1 = new double[rowKeys.length][examNamestr.length];
        for (int i2 = 0; i2 < examNamestr.length; i2++) {
            columnKeys[i2] = examNamestr[i2];
        }
        Double.valueOf(0.0d);
        Double.valueOf(0.0d);
        List list_data = new ArrayList();
        Double.valueOf(0.0d);
        Double.valueOf(0.0d);
        List list_data_1 = new ArrayList();
        for (int x = 0; x < rowKeys.length; x++) {
            for (int i3 = 0; i3 < examNamestr.length; i3++) {
                data[x][i3] = Double.parseDouble(String.valueOf(totalScores[x + (i3 * rowKeys.length)]));
                data_1[x][i3] = Double.parseDouble(String.valueOf(stanScores[x + (i3 * rowKeys.length)]));
                list_data.add(Double.valueOf(Double.parseDouble(String.valueOf(totalScores[x + (i3 * rowKeys.length)]))));
                list_data_1.add(Double.valueOf(Double.parseDouble(String.valueOf(stanScores[x + (i3 * rowKeys.length)]))));
            }
        }
        Double maxDesc = (Double) Collections.max(list_data);
        Double minDesc = (Double) Collections.min(list_data);
        Double count_unit = Double.valueOf((maxDesc.doubleValue() - minDesc.doubleValue()) / 5.0d);
        Double maxDesc_1 = (Double) Collections.max(list_data_1);
        Double minDesc_1 = (Double) Collections.min(list_data_1);
        Double count_unit_1 = Double.valueOf((maxDesc_1.doubleValue() - minDesc_1.doubleValue()) / 5.0d);
        try {
            HttpServletResponse response = ServletActionContext.getResponse();
            response.reset();
            response.setContentType("image/jpeg");
            JFreeChart chart = this.lc.getLineChar(data, rowKeys, columnKeys, "", "", titleName[0], "#0", count_unit, Integer.valueOf(rowKeys.length), "Y", "##.#");
            getChartImageFolder(chart, "tmpLinePng", Const.width, 360, userId + tupianName[0]);
            JFreeChart chart_1 = this.lc.getLineChar(data_1, rowKeys, columnKeys, "", "", titleName[1], "#0", count_unit_1, Integer.valueOf(rowKeys.length), "Y", "##.#");
            getChartImageFolder(chart_1, "tmpLinePng", Const.width, 360, userId + tupianName[1]);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String c2_exportMethod(String examNum, String gradeNum, String schoolNum, String subjectNum, String classNum, String studentId, String studentType, String type, String source, String step, String sNum, String c_exam, String rpt_name, String isMoreSchool, String rptTitle, String isHistory, String isSaveWrite, String dirPath, String uri, String userNum, String schName, String gradeName, String className, String subjectName, String imgRoot, String agent, String show) {
        String folderPath = "ExportFolder/reportExcel" + userNum;
        String str = "reportExcel" + userNum;
        String str2 = "reportExcel" + userNum;
        String excelName = (null == gradeName || "".equals(gradeName)) ? rpt_name + "_" + gradeNum : rpt_name + "_" + gradeName;
        if (null != classNum && !"".equals(classNum) && !classNum.contains(Const.STRING_SEPERATOR)) {
            excelName = (null == className || "".equals(className)) ? excelName + "_" + classNum : excelName + "_" + className;
        }
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        try {
            WritableWorkbook wwBook = Workbook.createWorkbook(excelFile);
            WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
            biaotis1.setAlignment(Alignment.LEFT);
            biaotis1.setVerticalAlignment(VerticalAlignment.CENTRE);
            WritableFont titles = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat title = new WritableCellFormat(titles);
            title.setAlignment(Alignment.LEFT);
            title.setVerticalAlignment(VerticalAlignment.CENTRE);
            title.setWrap(true);
            WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            WritableCellFormat cFormat1 = new WritableCellFormat(font1);
            cFormat1.setAlignment(Alignment.CENTRE);
            cFormat1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1.setBackground(Const.titleBackground_color);
            cFormat1.setWrap(true);
            WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat2 = new WritableCellFormat(font2);
            cFormat2.setAlignment(Alignment.CENTRE);
            cFormat2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2.setBackground(Const.textOuBackGround_color);
            cFormat2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2.setWrap(true);
            NumberFormat nf1 = new NumberFormat("0.0");
            WritableCellFormat cFormat2_1 = new WritableCellFormat(font2, nf1);
            cFormat2_1.setAlignment(Alignment.CENTRE);
            cFormat2_1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_1.setBackground(Const.textOuBackGround_color);
            cFormat2_1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_1.setWrap(true);
            WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat3 = new WritableCellFormat(font3);
            cFormat3.setAlignment(Alignment.CENTRE);
            cFormat3.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3.setBackground(Const.textJiBackGround_color);
            cFormat3.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3.setWrap(true);
            WritableCellFormat cFormat3_1 = new WritableCellFormat(font3, nf1);
            cFormat3_1.setAlignment(Alignment.CENTRE);
            cFormat3_1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_1.setBackground(Const.textJiBackGround_color);
            cFormat3_1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_1.setWrap(true);
            List list1 = this.c2.getsingleSubQuestionScore(examNum, subjectNum, gradeNum, schoolNum, studentType, type, source, classNum);
            List<RptHeader> list = (List) list1.get(1);
            List<RptHeader> list0 = (List) list1.get(0);
            List<RptHeader> list2 = (List) list1.get(2);
            try {
                WritableSheet sheet = wwBook.createSheet(rpt_name, 0);
                sheet.getSettings().setShowGridLines(false);
                try {
                    Label biaotou = new Label(0, 0, rpt_name, biaotis1);
                    sheet.addCell(biaotou);
                    DecimalFormat df0 = new DecimalFormat("0");
                    DecimalFormat df1 = new DecimalFormat("0.0");
                    DecimalFormat df2 = new DecimalFormat("0.00");
                    df0.setRoundingMode(RoundingMode.HALF_UP);
                    df1.setRoundingMode(RoundingMode.HALF_UP);
                    df2.setRoundingMode(RoundingMode.HALF_UP);
                    Label xinxi = new Label(0, 1, rptTitle, title);
                    sheet.addCell(xinxi);
                    sheet.setRowView(1, Const.height_500);
                    sheet.mergeCells(0, 0, 14, 0);
                    sheet.mergeCells(0, 1, 14, 1);
                    if (schoolNum.indexOf(Const.STRING_SEPERATOR) == -1) {
                        Label className_title = new Label(0, 2, "班级", cFormat1);
                        sheet.addCell(className_title);
                    } else {
                        Label className_title2 = new Label(0, 2, "学校", cFormat1);
                        sheet.addCell(className_title2);
                    }
                    sheet.mergeCells(0, 2, 0, 3);
                    int cols1 = getCol(list0, "0");
                    int cols = getCol(list0, "1");
                    String clas1 = "";
                    String qtype1 = "";
                    String qtype2 = "";
                    String clasName = "";
                    String clas = "";
                    int typeCount = 0;
                    int ss = 0;
                    int ss0 = 0;
                    String cnums = "";
                    String qNums = "";
                    String qNums1 = "";
                    String cnum = "";
                    for (int i = 0; i < list0.size(); i++) {
                        if (list0.get(i).getQtype().equals("0")) {
                            ss++;
                        }
                        String qNum = list0.get(i).getQuestionNum();
                        String qTypeName = list0.get(i).getqTypeName();
                        String ext1 = list0.get(i).getExt1();
                        if ((list0.get(i).getQtype().equals("1") || list0.get(i).getQtype().equals("0")) && cnums.indexOf(qNum + qTypeName + ext1) == -1) {
                            Label questionNum = new Label(1 + ss0, 3, "T" + list0.get(i).getQuestionNum(), cFormat1);
                            sheet.addCell(questionNum);
                            cnums = cnums + qNum + qTypeName + ext1 + Const.STRING_SEPERATOR;
                            typeCount++;
                            ss0++;
                        }
                        if (list0.get(i).getQtype().equals("1") && cnum.indexOf(qNum + qTypeName + ext1) == -1) {
                            qNums = qNums + list0.get(i).getQuestionNum() + Const.STRING_SEPERATOR;
                            cnum = cnum + qNum + qTypeName + ext1 + Const.STRING_SEPERATOR;
                        }
                        if (list0.get(i).getQtype().equals("0") && cnum.indexOf(qNum + qTypeName + ext1) == -1) {
                            qNums1 = qNums1 + list0.get(i).getQuestionNum() + Const.STRING_SEPERATOR;
                            cnum = cnum + qNum + qTypeName + ext1 + Const.STRING_SEPERATOR;
                        }
                    }
                    for (int i2 = 0; i2 < list.size(); i2++) {
                        if (i2 == 0) {
                            clasName = list.get(i2).getClassName();
                        }
                        if (clasName.equals(list.get(i2).getClassName())) {
                            if (qtype1.indexOf(list.get(i2).getQtype()) == -1 && list.get(i2).getQtype().equals("1")) {
                                Label raw_score_subjectName = new Label(1 + ss, 2, list.get(i2).getqTypeName(), cFormat1);
                                sheet.addCell(raw_score_subjectName);
                                qtype1 = qtype1 + list.get(i2).getQtype() + Const.STRING_SEPERATOR;
                            } else if (qtype2.indexOf(list.get(i2).getQtype()) == -1 && list.get(i2).getQtype().equals("0")) {
                                Label raw_score_subjectName2 = new Label(1, 2, list.get(i2).getqTypeName(), cFormat1);
                                sheet.addCell(raw_score_subjectName2);
                                qtype2 = qtype2 + list.get(i2).getQtype() + Const.STRING_SEPERATOR;
                            } else if (!list.get(i2).getQtype().equals("1") && !list.get(i2).getQtype().equals("0")) {
                                Label raw_score_subjectName3 = new Label(1 + ss0, 2, list.get(i2).getqTypeName(), cFormat1);
                                sheet.addCell(raw_score_subjectName3);
                                sheet.mergeCells(1 + ss0, 2, 1 + ss0, 3);
                                typeCount++;
                                ss0++;
                            }
                        }
                        if (clas1.indexOf(list.get(i2).getExt() + list.get(i2).getClassName()) == -1) {
                            clas = clas + list.get(i2).getClassName() + Const.STRING_SEPERATOR;
                            clas1 = clas1 + list.get(i2).getExt() + list.get(i2).getClassName() + Const.STRING_SEPERATOR;
                        }
                    }
                    String[] cla = clas.split(Const.STRING_SEPERATOR);
                    String fullScore = "";
                    String fullScore1 = "";
                    String fullScore2 = "";
                    String fullScore3 = "";
                    int c = 0;
                    for (int j = 0; j < cla.length; j++) {
                        for (int i3 = 0; i3 < list0.size(); i3++) {
                            int t = gettrueorF(list2, cla[j], list0.get(i3).getQuestionNum());
                            if (t == 1) {
                                for (int d = 0; d < list.size(); d++) {
                                    if (cla[j].equals(list.get(d).getClassName()) && list.get(d).getQuestionNum().equals(list0.get(i3).getQuestionNum())) {
                                        if (j % 2 != 0) {
                                            Label classNames = new Label(0, 4 + j, cla[j], cFormat2);
                                            sheet.addCell(classNames);
                                            if (list.get(d).getqTypeName().equals("排名")) {
                                                Number average = new Number((1 + c) - (typeCount * j), 4 + j, Double.valueOf(df1.format(list.get(d).getAverage())).doubleValue(), cFormat2);
                                                sheet.addCell(average);
                                            } else {
                                                Number average2 = new Number((1 + c) - (typeCount * j), 4 + j, Double.valueOf(df1.format(list.get(d).getAverage())).doubleValue(), cFormat2_1);
                                                sheet.addCell(average2);
                                            }
                                        } else {
                                            Label classNames2 = new Label(0, 4 + j, cla[j], cFormat3);
                                            sheet.addCell(classNames2);
                                            if (list.get(d).getqTypeName().equals("排名")) {
                                                Number average3 = new Number((1 + c) - (typeCount * j), 4 + j, Double.valueOf(df0.format(list.get(d).getAverage())).doubleValue(), cFormat3);
                                                sheet.addCell(average3);
                                            } else {
                                                Number average4 = new Number((1 + c) - (typeCount * j), 4 + j, Double.valueOf(df1.format(list.get(d).getAverage())).doubleValue(), cFormat3_1);
                                                sheet.addCell(average4);
                                            }
                                        }
                                        if (list.get(d).getQtype().equals("1")) {
                                            fullScore = fullScore + df1.format(list.get(d).getFullScore()) + Const.STRING_SEPERATOR;
                                            fullScore2 = fullScore2 + df2.format(list.get(d).getFullScore()) + Const.STRING_SEPERATOR;
                                        }
                                        if (list.get(d).getQtype().equals("0")) {
                                            fullScore1 = fullScore1 + df1.format(list.get(d).getFullScore()) + Const.STRING_SEPERATOR;
                                            fullScore3 = fullScore3 + df2.format(list.get(d).getFullScore()) + Const.STRING_SEPERATOR;
                                        }
                                        c++;
                                    }
                                }
                            } else {
                                if (j % 2 != 0) {
                                    Label classNames3 = new Label(0, 4 + j, cla[j], cFormat2);
                                    sheet.addCell(classNames3);
                                    Label average5 = new Label((1 + c) - (typeCount * j), 4 + j, "", cFormat2_1);
                                    sheet.addCell(average5);
                                } else {
                                    Label classNames4 = new Label(0, 4 + j, cla[j], cFormat3);
                                    sheet.addCell(classNames4);
                                    Label average6 = new Label((1 + c) - (typeCount * j), 4 + j, "", cFormat3_1);
                                    sheet.addCell(average6);
                                }
                                if (list0.get(i3).getQtype().equals("1")) {
                                    fullScore = fullScore + "0.0,";
                                    fullScore2 = fullScore2 + "0.00,";
                                }
                                if (list0.get(i3).getQtype().equals("0")) {
                                    fullScore1 = fullScore1 + "0.0,";
                                    fullScore3 = fullScore3 + "0.00,";
                                }
                                c++;
                            }
                        }
                    }
                    fullScore.split(Const.STRING_SEPERATOR);
                    fullScore1.split(Const.STRING_SEPERATOR);
                    fullScore2.split(Const.STRING_SEPERATOR);
                    fullScore3.split(Const.STRING_SEPERATOR);
                    sheet.mergeCells(1, 2, cols1, 2);
                    sheet.mergeCells(cols1 + 1, 2, cols + cols1, 2);
                } catch (Exception e) {
                    e.printStackTrace();
                }
                wwBook.write();
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response = ServletActionContext.getResponse();
                            response.reset();
                            ServletOutputStream outputStream = response.getOutputStream();
                            String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName2 = loadFileName.replace("+", " ");
                            response.setContentType("Content-type: applicationnd.ms-excel");
                            response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xls");
                            response.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte = new byte[1024];
                            FileInputStream in = new FileInputStream(excelFile);
                            while (true) {
                                int n = in.read(tempByte);
                                if (n == -1) {
                                    break;
                                }
                                try {
                                    outputStream.write(tempByte, 0, n);
                                } catch (Exception e2) {
                                    this.log.error("保存未成功", e2);
                                }
                            }
                            outputStream.flush();
                            outputStream.close();
                            in.close();
                        }
                    } catch (WriteException e3) {
                        e3.printStackTrace();
                    }
                }
            } catch (Exception e4) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response2 = ServletActionContext.getResponse();
                            response2.reset();
                            ServletOutputStream outputStream2 = response2.getOutputStream();
                            String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName4 = loadFileName3.replace("+", " ");
                            response2.setContentType("Content-type: applicationnd.ms-excel");
                            response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xls");
                            response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte2 = new byte[1024];
                            FileInputStream in2 = new FileInputStream(excelFile);
                            while (true) {
                                int n2 = in2.read(tempByte2);
                                if (n2 == -1) {
                                    break;
                                }
                                try {
                                    outputStream2.write(tempByte2, 0, n2);
                                } catch (Exception e5) {
                                    this.log.error("保存未成功", e5);
                                }
                            }
                            outputStream2.flush();
                            outputStream2.close();
                            in2.close();
                        }
                    } catch (WriteException e6) {
                        e6.printStackTrace();
                    }
                }
            } catch (Throwable th) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response3 = ServletActionContext.getResponse();
                            response3.reset();
                            ServletOutputStream outputStream3 = response3.getOutputStream();
                            String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName6 = loadFileName5.replace("+", " ");
                            response3.setContentType("Content-type: applicationnd.ms-excel");
                            response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xls");
                            response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte3 = new byte[1024];
                            FileInputStream in3 = new FileInputStream(excelFile);
                            while (true) {
                                int n3 = in3.read(tempByte3);
                                if (n3 == -1) {
                                    break;
                                }
                                try {
                                    outputStream3.write(tempByte3, 0, n3);
                                } catch (Exception e7) {
                                    this.log.error("保存未成功", e7);
                                }
                            }
                            outputStream3.flush();
                            outputStream3.close();
                            in3.close();
                        }
                    } catch (WriteException e8) {
                        e8.printStackTrace();
                        throw th;
                    }
                }
                throw th;
            }
        } catch (Exception e9) {
            e9.printStackTrace();
        }
        return null;
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String c24_exportMethod(String examNum, String gradeNum, String teachUnit, String subjectNum, String classNum, String studentId, String studentType, String type, String source, String c_exam, String rpt_name, String rptTitle, String isHistory, String isSaveWrite, String dirPath, String uri, String userNum, String schName, String gradeName, String className, String subjectName, String imgRoot, String agent, String show, String teachUnit_s, String subCompose) {
        String folderPath = "ExportFolder/reportExcel" + userNum;
        String str = "reportExcel" + userNum;
        String str2 = "reportExcel" + userNum;
        String excelName = (null == gradeName || "".equals(gradeName)) ? rpt_name + "_" + gradeNum : rpt_name + "_" + gradeName;
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        try {
            WritableWorkbook wwBook = Workbook.createWorkbook(excelFile);
            WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
            biaotis1.setAlignment(Alignment.LEFT);
            biaotis1.setVerticalAlignment(VerticalAlignment.CENTRE);
            WritableFont titles = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat title = new WritableCellFormat(titles);
            title.setAlignment(Alignment.LEFT);
            title.setVerticalAlignment(VerticalAlignment.CENTRE);
            title.setWrap(true);
            WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            WritableCellFormat cFormat1 = new WritableCellFormat(font1);
            cFormat1.setAlignment(Alignment.CENTRE);
            cFormat1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1.setBackground(Const.titleBackground_color);
            cFormat1.setWrap(true);
            WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            CellFormat writableCellFormat = new WritableCellFormat(font2);
            writableCellFormat.setAlignment(Alignment.CENTRE);
            writableCellFormat.setVerticalAlignment(VerticalAlignment.CENTRE);
            writableCellFormat.setBackground(Const.textOuBackGround_color);
            writableCellFormat.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            writableCellFormat.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            writableCellFormat.setBorder(Border.LEFT, BorderLineStyle.THIN);
            writableCellFormat.setBorder(Border.TOP, BorderLineStyle.THIN);
            writableCellFormat.setWrap(true);
            NumberFormat nf1 = new NumberFormat("0.0");
            WritableCellFormat cFormat2_1 = new WritableCellFormat(font2, nf1);
            cFormat2_1.setAlignment(Alignment.CENTRE);
            cFormat2_1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_1.setBackground(Const.textOuBackGround_color);
            cFormat2_1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_1.setWrap(true);
            WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            CellFormat writableCellFormat2 = new WritableCellFormat(font3);
            writableCellFormat2.setAlignment(Alignment.CENTRE);
            writableCellFormat2.setVerticalAlignment(VerticalAlignment.CENTRE);
            writableCellFormat2.setBackground(Const.textJiBackGround_color);
            writableCellFormat2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            writableCellFormat2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            writableCellFormat2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            writableCellFormat2.setBorder(Border.TOP, BorderLineStyle.THIN);
            writableCellFormat2.setWrap(true);
            WritableCellFormat cFormat3_1 = new WritableCellFormat(font3, nf1);
            cFormat3_1.setAlignment(Alignment.CENTRE);
            cFormat3_1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_1.setBackground(Const.textJiBackGround_color);
            cFormat3_1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_1.setWrap(true);
            List<Map<String, Object>> list1 = this.c24.getsingleSubQuestionScore(examNum, subjectNum, gradeNum, teachUnit_s, teachUnit, studentType, source, type, subCompose);
            try {
                try {
                    WritableSheet sheet = wwBook.createSheet(rpt_name, 0);
                    sheet.getSettings().setShowGridLines(false);
                    try {
                        Label biaotou = new Label(0, 0, rpt_name, biaotis1);
                        sheet.addCell(biaotou);
                        DecimalFormat df0 = new DecimalFormat("0");
                        DecimalFormat df1 = new DecimalFormat("0.0");
                        DecimalFormat df2 = new DecimalFormat("0.00");
                        df0.setRoundingMode(RoundingMode.HALF_UP);
                        df1.setRoundingMode(RoundingMode.HALF_UP);
                        df2.setRoundingMode(RoundingMode.HALF_UP);
                        Label xinxi = new Label(0, 1, rptTitle, title);
                        sheet.addCell(xinxi);
                        sheet.setRowView(1, Const.height_500);
                        sheet.mergeCells(0, 0, 14, 0);
                        sheet.mergeCells(0, 1, 14, 1);
                        Label tikuai_head = new Label(0, 2, "题块", cFormat1);
                        sheet.addCell(tikuai_head);
                        Label zhukeguan_head = new Label(0, 3, "主客观", cFormat1);
                        sheet.addCell(zhukeguan_head);
                        Label tihao_head = new Label(0, 4, "题号", cFormat1);
                        sheet.addCell(tihao_head);
                        Label manfen_head = new Label(0, 5, "满分", cFormat1);
                        sheet.addCell(manfen_head);
                        String str3 = list1.get(0).get(Const.EXPORTREPORT_classNum) + "";
                        String[] qtypes = (list1.get(0).get("qtype") + "").split(Const.STRING_SEPERATOR);
                        String[] tikuais = (list1.get(0).get("tikuaiNum") + "").split(Const.STRING_SEPERATOR);
                        String[] tikuaiNames = (list1.get(0).get("tikuaiName") + "").split(Const.STRING_SEPERATOR);
                        String[] questionNames = (list1.get(0).get("questionName") + "").split(Const.STRING_SEPERATOR);
                        String[] fullScores = (list1.get(0).get("fullScore") + "").split(Const.STRING_SEPERATOR);
                        int qtypeCell = 0;
                        int tikuaiCell = 0;
                        int xiaojiTimes = 0;
                        String tikuai = "";
                        String tikuaiName = "";
                        String qtype = "";
                        double tikuaiHeji = 0.0d;
                        double qtypeHeji = 0.0d;
                        int qtypeIndex = 1;
                        int tikuaiIndex = 1;
                        int tihaoIndex = 1;
                        int manfenIndex = 1;
                        for (int i = 0; i < questionNames.length; i++) {
                            if (!questionNames[i].equals("-")) {
                                tikuaiCell++;
                                qtypeCell++;
                                if (tikuais[i].equals(tikuai) || tikuai.equals("-")) {
                                    tikuaiHeji += Double.parseDouble(fullScores[i]);
                                    if (qtypes[i].equals(qtype) || qtype.equals("6") || qtype.equals("5")) {
                                        qtypeHeji += Double.parseDouble(fullScores[i]);
                                    } else {
                                        Label qtypeName = new Label(qtypeIndex, 3, qtype.equals("0") ? "客观题" : "主观题", cFormat1);
                                        sheet.addCell(qtypeName);
                                        sheet.mergeCells(qtypeIndex, 3, (qtypeCell + qtypeIndex) - 1, 3);
                                        qtypeIndex = qtypeCell + qtypeIndex;
                                        qtypeCell = 1;
                                        Label tihao = new Label(tihaoIndex, 4, "小计", cFormat1);
                                        sheet.addCell(tihao);
                                        tihaoIndex++;
                                        xiaojiTimes++;
                                        Label manfen = new Label(manfenIndex, 5, df1.format(qtypeHeji), cFormat1);
                                        sheet.addCell(manfen);
                                        manfenIndex++;
                                        qtypeHeji = Double.parseDouble(fullScores[i]);
                                    }
                                } else {
                                    Label qtypeName2 = new Label(qtypeIndex, 3, qtype.equals("0") ? "客观题" : "主观题", cFormat1);
                                    sheet.addCell(qtypeName2);
                                    sheet.mergeCells(qtypeIndex, 3, (qtypeCell + qtypeIndex) - 1, 3);
                                    int qtypeIndex2 = qtypeCell + qtypeIndex;
                                    qtypeCell = 1;
                                    Label tihao2 = new Label(tihaoIndex, 4, "小计", cFormat1);
                                    sheet.addCell(tihao2);
                                    int xiaojiTimes2 = xiaojiTimes + 1;
                                    Label qtypeNameheji = new Label(qtypeIndex2, 3, "合计", cFormat1);
                                    sheet.addCell(qtypeNameheji);
                                    sheet.mergeCells(qtypeIndex2, 3, qtypeIndex2, 4);
                                    qtypeIndex = qtypeIndex2 + 1;
                                    tihaoIndex = tihaoIndex + 1 + 1;
                                    Label manfen2 = new Label(manfenIndex, 5, df1.format(qtypeHeji), cFormat1);
                                    sheet.addCell(manfen2);
                                    int manfenIndex2 = manfenIndex + 1;
                                    qtypeHeji = Double.parseDouble(fullScores[i]);
                                    Label manfenHeji = new Label(manfenIndex2, 5, df1.format(tikuaiHeji), cFormat1);
                                    sheet.addCell(manfenHeji);
                                    manfenIndex = manfenIndex2 + 1;
                                    tikuaiHeji = Double.parseDouble(fullScores[i]);
                                    Label tikuaiStr = new Label(tikuaiIndex, 2, tikuaiName, cFormat1);
                                    sheet.addCell(tikuaiStr);
                                    sheet.mergeCells(tikuaiIndex, 2, ((tikuaiIndex + tikuaiCell) + xiaojiTimes2) - 1, 2);
                                    tikuaiIndex = tikuaiIndex + tikuaiCell + xiaojiTimes2;
                                    tikuaiCell = 1;
                                    xiaojiTimes = 0;
                                }
                                if (i != questionNames.length - 1) {
                                    Label tihao3 = new Label(tihaoIndex, 4, "T" + questionNames[i], cFormat1);
                                    sheet.addCell(tihao3);
                                    tihaoIndex++;
                                    Label manfen3 = new Label(manfenIndex, 5, df1.format(Double.parseDouble(fullScores[i])), cFormat1);
                                    sheet.addCell(manfen3);
                                    manfenIndex++;
                                } else {
                                    Label tihaoLast = new Label(tihaoIndex, 4, "T" + questionNames[i], cFormat1);
                                    sheet.addCell(tihaoLast);
                                    int tihaoIndex2 = tihaoIndex + 1;
                                    Label manfenLast = new Label(manfenIndex, 5, df1.format(Double.parseDouble(fullScores[i])), cFormat1);
                                    sheet.addCell(manfenLast);
                                    int manfenIndex3 = manfenIndex + 1;
                                    int qtypeCell2 = qtypeCell + 1;
                                    tikuaiCell++;
                                    Label qtypeNameLast = new Label(qtypeIndex, 3, qtypes[i].equals("0") ? "客观题" : "主观题", cFormat1);
                                    sheet.addCell(qtypeNameLast);
                                    sheet.mergeCells(qtypeIndex, 3, (qtypeCell2 + qtypeIndex) - 1, 3);
                                    int qtypeIndex3 = qtypeCell2 + qtypeIndex;
                                    Label tihaoLast1 = new Label(tihaoIndex2, 4, "小计", cFormat1);
                                    sheet.addCell(tihaoLast1);
                                    xiaojiTimes++;
                                    Label qtypeNamehejiLast = new Label(qtypeIndex3, 3, "合计", cFormat1);
                                    sheet.addCell(qtypeNamehejiLast);
                                    sheet.mergeCells(qtypeIndex3, 3, qtypeIndex3, 4);
                                    qtypeCell = 1;
                                    qtypeIndex = qtypeIndex3 + 1;
                                    tihaoIndex = tihaoIndex2 + 1 + 1;
                                    Label manfenLast1 = new Label(manfenIndex3, 5, df1.format(qtypeHeji), cFormat1);
                                    sheet.addCell(manfenLast1);
                                    int manfenIndex4 = manfenIndex3 + 1;
                                    qtypeHeji = Double.parseDouble(fullScores[i]);
                                    Label manfenHejiLast = new Label(manfenIndex4, 5, df1.format(tikuaiHeji), cFormat1);
                                    sheet.addCell(manfenHejiLast);
                                    manfenIndex = manfenIndex4 + 1;
                                    tikuaiHeji = Double.parseDouble(fullScores[i]);
                                    Label tikuaiStrLast = new Label(tikuaiIndex, 2, tikuaiNames[i], cFormat1);
                                    sheet.addCell(tikuaiStrLast);
                                    sheet.mergeCells(tikuaiIndex, 2, ((tikuaiIndex + tikuaiCell) + xiaojiTimes) - 1, 2);
                                    tikuaiIndex = tikuaiIndex + tikuaiCell + xiaojiTimes;
                                }
                            }
                            tikuai = tikuais[i];
                            tikuaiName = tikuaiNames[i];
                            qtype = qtypes[i];
                        }
                        Label keguantiTotal = new Label(tikuaiIndex, 2, "客观题总分", cFormat1);
                        sheet.addCell(keguantiTotal);
                        sheet.mergeCells(tikuaiIndex, 2, tikuaiIndex, 5);
                        int tikuaiIndex2 = tikuaiIndex + 1;
                        Label zhuguantiTotal = new Label(tikuaiIndex2, 2, "主观题总分", cFormat1);
                        sheet.addCell(zhuguantiTotal);
                        sheet.mergeCells(tikuaiIndex2, 2, tikuaiIndex2, 5);
                        int tikuaiIndex3 = tikuaiIndex2 + 1;
                        Label averageTotal = new Label(tikuaiIndex3, 2, "平均分", cFormat1);
                        sheet.addCell(averageTotal);
                        sheet.mergeCells(tikuaiIndex3, 2, tikuaiIndex3, 5);
                        int tikuaiIndex4 = tikuaiIndex3 + 1;
                        Label ranktotal = new Label(tikuaiIndex4, 2, "排名", cFormat1);
                        sheet.addCell(ranktotal);
                        sheet.mergeCells(tikuaiIndex4, 2, tikuaiIndex4, 5);
                        int averageIndex = 1;
                        int length = questionNames.length;
                        int reset = manfenIndex;
                        for (int j = 0; j < list1.size(); j++) {
                            CellFormat cellFormat = j % 2 == 0 ? writableCellFormat2 : writableCellFormat;
                            Map<String, Object> map = list1.get(j);
                            String tAverage = map.get("Taverage") + "";
                            String[] tAverages = tAverage.split(Const.STRING_SEPERATOR);
                            double heji = 0.0d;
                            double xiaoji = 0.0d;
                            for (int k = 0; k < questionNames.length; k++) {
                                if (questionNames[k].equals("-")) {
                                    if (tAverages[k].equals(" ")) {
                                        Label hejiAverage = new Label(manfenIndex, 6 + j, tAverages[k], cellFormat);
                                        sheet.addCell(hejiAverage);
                                    } else {
                                        Number hejiAverage2 = new Number(manfenIndex, 6 + j, Double.parseDouble(tAverages[k]), cellFormat);
                                        sheet.addCell(hejiAverage2);
                                    }
                                    manfenIndex++;
                                } else {
                                    if (tikuais[k].equals(tikuai) || tikuai.equals("-")) {
                                        heji += Double.parseDouble(tAverages[k].equals(" ") ? "0" : tAverages[k]);
                                        if (qtypes[k].equals(qtype) || qtype.equals("6") || qtype.equals("5")) {
                                            xiaoji += Double.parseDouble(tAverages[k].equals(" ") ? "0" : tAverages[k]);
                                        } else {
                                            Number xiaojiAverage = new Number(averageIndex, 6 + j, xiaoji, cellFormat);
                                            sheet.addCell(xiaojiAverage);
                                            averageIndex++;
                                            xiaoji = Double.parseDouble(tAverages[k].equals(" ") ? "0" : tAverages[k]);
                                        }
                                    } else {
                                        Number xiaojiAverage2 = new Number(averageIndex, 6 + j, xiaoji, cellFormat);
                                        sheet.addCell(xiaojiAverage2);
                                        int averageIndex2 = averageIndex + 1;
                                        xiaoji = Double.parseDouble(tAverages[k].equals(" ") ? "0" : tAverages[k]);
                                        Number hejiAverage3 = new Number(averageIndex2, 6 + j, heji, cellFormat);
                                        sheet.addCell(hejiAverage3);
                                        averageIndex = averageIndex2 + 1;
                                        heji = Double.parseDouble(tAverages[k].equals(" ") ? "0" : tAverages[k]);
                                    }
                                    if (k != questionNames.length - 1) {
                                        if (tAverages[k].equals(" ")) {
                                            Label average = new Label(averageIndex, 6 + j, tAverages[k], cellFormat);
                                            sheet.addCell(average);
                                        } else {
                                            Number average2 = new Number(averageIndex, 6 + j, Double.parseDouble(tAverages[k]), cellFormat);
                                            sheet.addCell(average2);
                                        }
                                        averageIndex++;
                                    } else {
                                        if (tAverages[k].equals(" ")) {
                                            Label average3 = new Label(averageIndex, 6 + j, tAverages[k], cellFormat);
                                            sheet.addCell(average3);
                                        } else {
                                            Number average4 = new Number(averageIndex, 6 + j, Double.parseDouble(tAverages[k]), cellFormat);
                                            sheet.addCell(average4);
                                        }
                                        int averageIndex3 = averageIndex + 1;
                                        Number xiaojiAverageLast = new Number(averageIndex3, 6 + j, xiaoji, cellFormat);
                                        sheet.addCell(xiaojiAverageLast);
                                        int averageIndex4 = averageIndex3 + 1;
                                        Number hejiAverageLast = new Number(averageIndex4, 6 + j, heji, cellFormat);
                                        sheet.addCell(hejiAverageLast);
                                        averageIndex = averageIndex4 + 1;
                                        int length2 = questionNames.length;
                                    }
                                }
                                tikuai = tikuais[k];
                                qtype = qtypes[k];
                            }
                            Label classNameStr = new Label(0, 6 + j, map.get("className") + "", cellFormat);
                            sheet.addCell(classNameStr);
                            Number totalAverage = new Number(manfenIndex, 6 + j, Double.parseDouble(map.get("average") + ""), cellFormat);
                            sheet.addCell(totalAverage);
                            Label rank = new Label(manfenIndex + 1, 6 + j, map.get("rank") + "", cellFormat);
                            sheet.addCell(rank);
                            averageIndex = 1;
                            manfenIndex = reset;
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    wwBook.write();
                    if (wwBook != null) {
                        try {
                            wwBook.close();
                            if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                                HttpServletResponse response = ServletActionContext.getResponse();
                                response.reset();
                                ServletOutputStream outputStream = response.getOutputStream();
                                String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                String loadFileName2 = loadFileName.replace("+", " ");
                                response.setContentType("Content-type: applicationnd.ms-excel");
                                response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xls");
                                response.setHeader("Content-length", String.valueOf(excelFile.length()));
                                byte[] tempByte = new byte[1024];
                                FileInputStream in = new FileInputStream(excelFile);
                                while (true) {
                                    int n = in.read(tempByte);
                                    if (n == -1) {
                                        break;
                                    }
                                    try {
                                        outputStream.write(tempByte, 0, n);
                                    } catch (Exception e2) {
                                        this.log.error("保存未成功", e2);
                                    }
                                }
                                outputStream.flush();
                                outputStream.close();
                                in.close();
                            }
                        } catch (WriteException e3) {
                            e3.printStackTrace();
                        }
                    }
                } catch (Throwable th) {
                    if (wwBook != null) {
                        try {
                            wwBook.close();
                            if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                                HttpServletResponse response2 = ServletActionContext.getResponse();
                                response2.reset();
                                ServletOutputStream outputStream2 = response2.getOutputStream();
                                String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                String loadFileName4 = loadFileName3.replace("+", " ");
                                response2.setContentType("Content-type: applicationnd.ms-excel");
                                response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xls");
                                response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                                byte[] tempByte2 = new byte[1024];
                                FileInputStream in2 = new FileInputStream(excelFile);
                                while (true) {
                                    int n2 = in2.read(tempByte2);
                                    if (n2 == -1) {
                                        break;
                                    }
                                    try {
                                        outputStream2.write(tempByte2, 0, n2);
                                    } catch (Exception e4) {
                                        this.log.error("保存未成功", e4);
                                    }
                                }
                                outputStream2.flush();
                                outputStream2.close();
                                in2.close();
                            }
                        } catch (WriteException e5) {
                            e5.printStackTrace();
                            throw th;
                        }
                    }
                    throw th;
                }
            } catch (Exception e6) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response3 = ServletActionContext.getResponse();
                            response3.reset();
                            ServletOutputStream outputStream3 = response3.getOutputStream();
                            String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName6 = loadFileName5.replace("+", " ");
                            response3.setContentType("Content-type: applicationnd.ms-excel");
                            response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xls");
                            response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte3 = new byte[1024];
                            FileInputStream in3 = new FileInputStream(excelFile);
                            while (true) {
                                int n3 = in3.read(tempByte3);
                                if (n3 == -1) {
                                    break;
                                }
                                try {
                                    outputStream3.write(tempByte3, 0, n3);
                                } catch (Exception e7) {
                                    this.log.error("保存未成功", e7);
                                }
                            }
                            outputStream3.flush();
                            outputStream3.close();
                            in3.close();
                        }
                    } catch (WriteException e8) {
                        e8.printStackTrace();
                    }
                }
            }
        } catch (Exception e9) {
            e9.printStackTrace();
        }
        return null;
    }

    public int getCol(List<RptHeader> list, String val) {
        int count = 0;
        for (int i = 0; i < list.size(); i++) {
            if (list.get(i).getQtype().equals(val)) {
                count++;
            }
        }
        return count;
    }

    public int gettrueorF(List<RptHeader> list, String classNum, String qNum) {
        int t = 0;
        for (int i = 0; i < list.size(); i++) {
            if ((list.get(i).getClassName() + list.get(i).getQuestionNum()).equals(classNum + qNum)) {
                t = 1;
            }
        }
        return t;
    }

    public File getSubChartImgFile_c2(String userId, String rowKeys, String qtype1, String qtype2, String[] cla, String[] full, String[] full1, int typeCount, String dirPath) {
        subjectLineImage_c2(userId, rowKeys, cla, qtype1, qtype2, full, full1, typeCount);
        File file = new File(dirPath + File.separator + "tmpLinePng" + File.separator + userId + rowKeys + ".png");
        return file;
    }

    public void subjectLineImage_c2(String userId, String lType, String[] rowKeys, String qtype1, String qtype2, String[] full, String[] full1, int typeCount) {
        for (int i = 0; i < rowKeys.length; i++) {
            rowKeys[i] = rowKeys[i];
        }
        String[] q1 = qtype1.split(Const.STRING_SEPERATOR);
        String[] q0 = qtype2.split(Const.STRING_SEPERATOR);
        if (lType.equals("C2_fullScore_0")) {
            String[] tupianName = {"C2_fullScore_0"};
            String[] titleName = {"客观题得分率对比图"};
            String[] columnKeys = new String[q0.length];
            double[][] data = new double[rowKeys.length][q0.length];
            for (int i2 = 0; i2 < q0.length; i2++) {
                columnKeys[i2] = "T" + q0[i2];
            }
            int cc = 0;
            Double maxDesc = Double.valueOf(0.0d);
            Double minDesc = Double.valueOf(0.0d);
            List list_data = new ArrayList();
            if (!qtype2.equals("")) {
                for (int x = 0; x < rowKeys.length; x++) {
                    for (int i3 = 0; i3 < q0.length; i3++) {
                        data[x][i3] = Double.parseDouble(full1[cc]);
                        list_data.add(Double.valueOf(Double.parseDouble(full1[cc])));
                        cc++;
                    }
                }
                maxDesc = (Double) Collections.max(list_data);
                minDesc = (Double) Collections.min(list_data);
            }
            Double count_unit = Double.valueOf((maxDesc.doubleValue() - minDesc.doubleValue()) / 5.0d);
            HttpServletResponse response = ServletActionContext.getResponse();
            response.reset();
            response.setContentType("image/jpeg");
            JFreeChart chart = this.lc.getLineChar(data, rowKeys, columnKeys, "", "", titleName[0], "#0.0", count_unit, Integer.valueOf(rowKeys.length), "Y", "##.##");
            getChartImageFolder(chart, "tmpLinePng", Const.width_1100, Const.height_500, userId + tupianName[0]);
            return;
        }
        if (lType.equals("C2_fullScore_1")) {
            String[] tupianName2 = {"C2_fullScore_1"};
            String[] titleName2 = {"主观题得分率对比图"};
            String[] columnKeys2 = new String[q1.length];
            double[][] data2 = new double[rowKeys.length][q1.length];
            for (int i4 = 0; i4 < q1.length; i4++) {
                columnKeys2[i4] = "T" + q1[i4];
            }
            int cc2 = 0;
            Double maxDesc2 = Double.valueOf(0.0d);
            Double minDesc2 = Double.valueOf(0.0d);
            List list_data2 = new ArrayList();
            if (!qtype1.equals("")) {
                for (int x2 = 0; x2 < rowKeys.length; x2++) {
                    for (int i5 = 0; i5 < q1.length; i5++) {
                        data2[x2][i5] = Double.parseDouble(full[cc2]);
                        list_data2.add(Double.valueOf(Double.parseDouble(full[cc2])));
                        cc2++;
                    }
                }
                maxDesc2 = (Double) Collections.max(list_data2);
                minDesc2 = (Double) Collections.min(list_data2);
            }
            Double count_unit2 = Double.valueOf((maxDesc2.doubleValue() - minDesc2.doubleValue()) / 5.0d);
            HttpServletResponse response2 = ServletActionContext.getResponse();
            response2.reset();
            response2.setContentType("image/jpeg");
            JFreeChart chart2 = this.lc.getLineChar(data2, rowKeys, columnKeys2, "", "", titleName2[0], "#0.0", count_unit2, Integer.valueOf(rowKeys.length), "Y", "##.##");
            getChartImageFolder(chart2, "tmpLinePng", Const.width_1100, Const.height_500, userId + tupianName2[0]);
        }
    }

    public int getCol10(List list, String val) {
        int count = 0;
        for (int d = 0; d < list.size(); d++) {
            if (((RptHeader) list.get(d)).getqTypeName().equals(val)) {
                count++;
            }
        }
        return count;
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String c10_exportMethod(String examNum, String gradeNum, String schoolNum, String subjectNum, String classNum, String studentId, String studentType, String type, String source, String step, String sNum, String c_exam, String rpt_name, String isMoreSchool, String rptTitle, String isHistory, String isSaveWrite, String dirPath, String uri, String userNum, String schName, String gradeName, String className, String subjectName, String agent, String all_class, String viewRankInfo, String subCompose, String islevel) {
        String folderPath = "ExportFolder/reportExcel" + userNum;
        String folderName = "reportExcel" + userNum;
        String zipName = "reportExcel" + userNum;
        String excelName = (null == gradeName || "".equals(gradeName)) ? rpt_name + "_" + gradeNum : rpt_name + "_" + gradeName;
        if (null != classNum && !"".equals(classNum) && !classNum.contains(Const.STRING_SEPERATOR)) {
            excelName = (null == className || "".equals(className)) ? excelName + "_" + classNum : excelName + "_" + className;
        }
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        String filePath = null;
        try {
            WritableWorkbook wwBook = Workbook.createWorkbook(excelFile);
            WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
            biaotis1.setAlignment(Alignment.LEFT);
            biaotis1.setVerticalAlignment(VerticalAlignment.CENTRE);
            WritableFont titles = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat title = new WritableCellFormat(titles);
            title.setAlignment(Alignment.LEFT);
            title.setVerticalAlignment(VerticalAlignment.CENTRE);
            title.setWrap(true);
            WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            WritableCellFormat cFormat1 = new WritableCellFormat(font1);
            cFormat1.setAlignment(Alignment.CENTRE);
            cFormat1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1.setBackground(Const.titleBackground_color);
            cFormat1.setWrap(true);
            WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            CellFormat writableCellFormat = new WritableCellFormat(font2);
            writableCellFormat.setAlignment(Alignment.CENTRE);
            writableCellFormat.setVerticalAlignment(VerticalAlignment.CENTRE);
            writableCellFormat.setBackground(Const.textJiBackGround_color);
            writableCellFormat.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            writableCellFormat.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            writableCellFormat.setBorder(Border.LEFT, BorderLineStyle.THIN);
            writableCellFormat.setBorder(Border.TOP, BorderLineStyle.THIN);
            writableCellFormat.setWrap(true);
            NumberFormat nf1 = new NumberFormat("0.0");
            WritableCellFormat cFormat2_1 = new WritableCellFormat(font2, nf1);
            cFormat2_1.setAlignment(Alignment.CENTRE);
            cFormat2_1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_1.setBackground(Const.textJiBackGround_color);
            cFormat2_1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_1.setWrap(true);
            WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            CellFormat writableCellFormat2 = new WritableCellFormat(font3);
            writableCellFormat2.setAlignment(Alignment.CENTRE);
            writableCellFormat2.setVerticalAlignment(VerticalAlignment.CENTRE);
            writableCellFormat2.setBackground(Const.textOuBackGround_color);
            writableCellFormat2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            writableCellFormat2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            writableCellFormat2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            writableCellFormat2.setBorder(Border.TOP, BorderLineStyle.THIN);
            writableCellFormat2.setWrap(true);
            WritableCellFormat cFormat3_1 = new WritableCellFormat(font3, nf1);
            cFormat3_1.setAlignment(Alignment.CENTRE);
            cFormat3_1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_1.setBackground(Const.textOuBackGround_color);
            cFormat3_1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_1.setWrap(true);
            NumberFormat nf2 = new NumberFormat("0.00");
            WritableCellFormat cFormat3_2 = new WritableCellFormat(font3, nf2);
            cFormat3_2.setAlignment(Alignment.CENTRE);
            cFormat3_2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_2.setBackground(Const.textOuBackGround_color);
            cFormat3_2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_2.setWrap(true);
            List list = this.c10.getSingleSubjectStudentQuestionScore(examNum, subjectNum, gradeNum, schoolNum, classNum, studentType, type, source, viewRankInfo, subCompose, islevel);
            try {
                try {
                    WritableSheet sheet = wwBook.createSheet(rpt_name, 0);
                    sheet.getSettings().setShowGridLines(false);
                    try {
                        Label biaotou = new Label(0, 0, rpt_name, biaotis1);
                        sheet.addCell(biaotou);
                        DecimalFormat df1 = new DecimalFormat("0.0");
                        df1.setRoundingMode(RoundingMode.HALF_UP);
                        DecimalFormat df2 = new DecimalFormat("0.00");
                        df2.setRoundingMode(RoundingMode.HALF_UP);
                        List list0 = (List) list.get(0);
                        List list1 = (List) list.get(1);
                        List list2 = (List) list.get(2);
                        Integer jisuanType = Convert.toInt(list.get(3));
                        Label xinxi = new Label(0, 1, rptTitle, title);
                        sheet.addCell(xinxi);
                        sheet.setRowView(1, Const.height_500);
                        sheet.mergeCells(0, 0, 14, 0);
                        sheet.mergeCells(0, 1, 14, 1);
                        Label className_title = new Label(0, 2, "姓名", cFormat1);
                        sheet.addCell(className_title);
                        Label studentNum = new Label(1, 2, "考号", cFormat1);
                        sheet.addCell(studentNum);
                        sheet.mergeCells(0, 2, 0, 3);
                        sheet.mergeCells(1, 2, 1, 3);
                        int cols = getCol10(list0, "1");
                        int cols1 = getCol10(list0, "0");
                        String qtype1 = "";
                        String qtype2 = "";
                        int ss = 0;
                        int ii = 0;
                        String stuCount = "";
                        String stuCount1 = "";
                        for (int d = 0; d < list0.size(); d++) {
                            if (qtype1.indexOf(((RptHeader) list0.get(d)).getqTypeName()) == -1 && ((RptHeader) list0.get(d)).getqTypeName().equals("1")) {
                                Label raw_score_subjectName = new Label(2 + cols1, 2, "主观题", cFormat1);
                                sheet.addCell(raw_score_subjectName);
                                qtype1 = qtype1 + ((RptHeader) list0.get(d)).getqTypeName() + Const.STRING_SEPERATOR;
                            } else if (qtype2.indexOf(((RptHeader) list0.get(d)).getqTypeName()) == -1 && ((RptHeader) list0.get(d)).getqTypeName().equals("0")) {
                                Label raw_score_subjectName2 = new Label(2, 2, "客观题", cFormat1);
                                sheet.addCell(raw_score_subjectName2);
                                qtype2 = qtype2 + ((RptHeader) list0.get(d)).getqTypeName() + Const.STRING_SEPERATOR;
                            } else if (!((RptHeader) list0.get(d)).getqTypeName().equals("1") && !((RptHeader) list0.get(d)).getqTypeName().equals("0")) {
                                ii++;
                                Label raw_score_subjectName3 = new Label(2 + ss, 2, ((RptHeader) list0.get(d)).getQuestionNum(), cFormat1);
                                sheet.addCell(raw_score_subjectName3);
                                sheet.mergeCells(2 + ss, 2, 2 + ss, 3);
                            }
                            if (((RptHeader) list0.get(d)).getqTypeName().equals("1") || ((RptHeader) list0.get(d)).getqTypeName().equals("0")) {
                                Label questionNum = new Label(2 + ss, 3, "T" + ((RptHeader) list0.get(d)).getQuestionNum(), cFormat1);
                                sheet.addCell(questionNum);
                            }
                            ss++;
                        }
                        for (int dd = 0; dd < list2.size(); dd++) {
                            if (dd == 0) {
                                stuCount = ((RptHeader) list2.get(dd)).getNumOfStudent();
                            }
                            if (dd == 1) {
                                stuCount1 = ((RptHeader) list2.get(dd)).getNumOfStudent();
                            }
                            String ext2_1 = ((RptHeader) list2.get(dd)).getExt();
                            String ext2_2 = ext2_1.replace("<td>", "");
                            String ext2_3 = ext2_2.replace("</td>", " ");
                            String[] ext2_4 = ext2_3.split(Const.STRING_SEPERATOR);
                            for (int i = 0; i < ext2_4.length; i++) {
                                if (ext2_4[i].equals(" ") || ext2_4[i].equals("") || ext2_4[i].equals("--")) {
                                    Label ext2 = new Label(2 + i, 4 + list1.size() + dd, ext2_4[i], writableCellFormat2);
                                    sheet.addCell(ext2);
                                } else {
                                    Number ext22 = new Number(2 + i, 4 + list1.size() + dd, Double.valueOf(df2.format(Double.valueOf(ext2_4[i]))).doubleValue(), cFormat3_2);
                                    sheet.addCell(ext22);
                                }
                            }
                            Number coqts = new Number(2 + ext2_4.length, 4 + list1.size() + dd, Double.valueOf(df2.format(Double.valueOf(((RptHeader) list2.get(dd)).getC_oqts()))).doubleValue(), cFormat3_2);
                            sheet.addCell(coqts);
                            if (jisuanType.intValue() == 1) {
                                Number csqts = new Number(3 + ext2_4.length, 4 + list1.size() + dd, Double.valueOf(df2.format(Double.valueOf(((RptHeader) list2.get(dd)).getC_sqts()))).doubleValue(), cFormat3_2);
                                sheet.addCell(csqts);
                            } else {
                                Label csqts2 = new Label(3 + ext2_4.length, 4 + list1.size() + dd, "--", cFormat3_2);
                                sheet.addCell(csqts2);
                            }
                            Number cavg = new Number(4 + ext2_4.length, 4 + list1.size() + dd, Double.valueOf(df2.format(Double.valueOf(((RptHeader) list2.get(dd)).getC_avg()))).doubleValue(), cFormat3_2);
                            sheet.addCell(cavg);
                        }
                        Label a1 = new Label(0, 4 + list1.size(), "班级均分", writableCellFormat2);
                        sheet.addCell(a1);
                        sheet.mergeCells(0, 4 + list1.size(), 1, 4 + list1.size());
                        Label a2 = new Label(0, 4 + list1.size() + 1, "年级均分", writableCellFormat2);
                        sheet.addCell(a2);
                        sheet.mergeCells(0, 4 + list1.size() + 1, 1, 4 + list1.size() + 1);
                        Label average = new Label((ss - ii) + 5, 4 + list1.size(), "参考人数：" + stuCount, writableCellFormat2);
                        sheet.addCell(average);
                        sheet.mergeCells((ss - ii) + 5, 4 + list1.size(), ss + 1, 4 + list1.size());
                        Label averageq = new Label((ss - ii) + 5, 5 + list1.size(), "参考人数：" + stuCount1, writableCellFormat2);
                        sheet.addCell(averageq);
                        sheet.mergeCells((ss - ii) + 5, 5 + list1.size(), ss + 1, 5 + list1.size());
                        sheet.mergeCells(2 + ss, 2, 2 + ss, 3);
                        if (cols1 != 0) {
                            sheet.mergeCells(2, 2, cols1 + 1, 2);
                        }
                        if (cols + cols1 != 0) {
                            sheet.mergeCells(cols1 + 2, 2, cols + cols1 + 1, 2);
                        }
                        for (int stu = 0; stu < list1.size(); stu++) {
                            CellFormat cellFormat = stu % 2 != 0 ? writableCellFormat : writableCellFormat2;
                            Label stuName = new Label(0, 4 + stu, ((RptHeader) list1.get(stu)).getStudentName(), cellFormat);
                            sheet.addCell(stuName);
                            Label stuNum = new Label(1, 4 + stu, ((RptHeader) list1.get(stu)).getExamineeNum(), cellFormat);
                            sheet.addCell(stuNum);
                            String ext1_1 = ((RptHeader) list1.get(stu)).getExt1();
                            String ext1_2 = ext1_1.replace("<td>", "");
                            String ext1_3 = ext1_2.replace("</td>", " ");
                            String[] ext1_4 = ext1_3.split(Const.STRING_SEPERATOR);
                            if (ext1_4.length == 0) {
                                for (int i2 = 0; i2 < cols1; i2++) {
                                    Label ext23 = new Label(2 + i2, 4 + stu, "", cellFormat);
                                    sheet.addCell(ext23);
                                }
                            }
                            for (int i3 = 0; i3 < cols1; i3++) {
                                if (ext1_4.length < i3 + 1) {
                                    Label ext1 = new Label(2 + i3, 4 + stu, "", cellFormat);
                                    sheet.addCell(ext1);
                                } else if (ext1_4[i3].equals(" ") || ext1_4[i3].equals("")) {
                                    Label ext12 = new Label(2 + i3, 4 + stu, ext1_4[i3], cellFormat);
                                    sheet.addCell(ext12);
                                } else {
                                    Number ext13 = new Number(2 + i3, 4 + stu, Double.valueOf(df1.format(Double.valueOf(ext1_4[i3]))).doubleValue(), cellFormat);
                                    sheet.addCell(ext13);
                                }
                            }
                            String ext2_12 = ((RptHeader) list1.get(stu)).getExt2();
                            String ext2_22 = ext2_12.replace("<td>", "");
                            String ext2_32 = ext2_22.replace("</td>", "");
                            String[] ext2_42 = ext2_32.split(Const.STRING_SEPERATOR);
                            if (ext2_42.length == 0) {
                                for (int i4 = 0; i4 < cols; i4++) {
                                    Label ext24 = new Label(2 + cols1 + i4, 4 + stu, "", cellFormat);
                                    sheet.addCell(ext24);
                                }
                            }
                            for (int i5 = 0; i5 < cols; i5++) {
                                if (ext2_42.length < i5 + 1) {
                                    Label ext25 = new Label(2 + cols1 + i5, 4 + stu, "", cellFormat);
                                    sheet.addCell(ext25);
                                } else if (ext2_42[i5].equals(" ") || ext2_42[i5].equals("") || ext2_42[i5].equals("--")) {
                                    Label ext26 = new Label(2 + cols1 + i5, 4 + stu, ext2_42[i5], cellFormat);
                                    sheet.addCell(ext26);
                                } else {
                                    Number ext27 = new Number(2 + cols1 + i5, 4 + stu, Double.valueOf(df1.format(Double.valueOf(ext2_42[i5]))).doubleValue(), cellFormat);
                                    sheet.addCell(ext27);
                                }
                            }
                            Number oqts = new Number(2 + cols + cols1, 4 + stu, ((RptHeader) list1.get(stu)).getOqts(), cellFormat);
                            sheet.addCell(oqts);
                            if (jisuanType.intValue() == 1) {
                                Number sqts = new Number(3 + cols + cols1, 4 + stu, ((RptHeader) list1.get(stu)).getSqts(), cellFormat);
                                sheet.addCell(sqts);
                            } else {
                                Label sqts2 = new Label(3 + cols + cols1, 4 + stu, "--", cellFormat);
                                sheet.addCell(sqts2);
                            }
                            Number totalScore = new Number(4 + cols + cols1, 4 + stu, ((RptHeader) list1.get(stu)).getTotalScore(), cellFormat);
                            sheet.addCell(totalScore);
                            if ("1".equals(viewRankInfo)) {
                                if (((RptHeader) list1.get(stu)).getClassRanking() == null || ((RptHeader) list1.get(stu)).getClassRanking().equals("")) {
                                    Label classRanking = new Label(5 + cols + cols1, 4 + stu, "", cellFormat);
                                    sheet.addCell(classRanking);
                                } else {
                                    Number classRanking2 = new Number(5 + cols + cols1, 4 + stu, Integer.valueOf(((RptHeader) list1.get(stu)).getClassRanking()).intValue(), cellFormat);
                                    sheet.addCell(classRanking2);
                                }
                                if (((RptHeader) list1.get(stu)).getGradeRanking() == null || ((RptHeader) list1.get(stu)).getGradeRanking().equals("")) {
                                    Label gradeRanking = new Label(6 + cols + cols1, 4 + stu, "", cellFormat);
                                    sheet.addCell(gradeRanking);
                                } else {
                                    Number gradeRanking2 = new Number(6 + cols + cols1, 4 + stu, Integer.valueOf(((RptHeader) list1.get(stu)).getGradeRanking()).intValue(), cellFormat);
                                    sheet.addCell(gradeRanking2);
                                }
                                Label ext = ((RptHeader) list1.get(stu)).getExt().equals("0") ? new Label(7 + cols + cols1, 4 + stu, "缺考", cellFormat) : ((RptHeader) list1.get(stu)).getExt().equals("1") ? new Label(7 + cols + cols1, 4 + stu, "违纪", cellFormat) : new Label(7 + cols + cols1, 4 + stu, "", cellFormat);
                                sheet.addCell(ext);
                            } else {
                                Label ext3 = ((RptHeader) list1.get(stu)).getExt().equals("0") ? new Label(5 + cols + cols1, 4 + stu, "缺考", cellFormat) : ((RptHeader) list1.get(stu)).getExt().equals("1") ? new Label(5 + cols + cols1, 4 + stu, "违纪", cellFormat) : new Label(5 + cols + cols1, 4 + stu, "", cellFormat);
                                sheet.addCell(ext3);
                            }
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    wwBook.write();
                    if (wwBook != null) {
                        try {
                            wwBook.close();
                            if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                                if (Integer.valueOf(all_class).intValue() == 1) {
                                    HttpServletResponse response = ServletActionContext.getResponse();
                                    response.reset();
                                    ServletOutputStream outputStream = response.getOutputStream();
                                    String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                    String loadFileName2 = loadFileName.replace("+", " ");
                                    response.setContentType("Content-type: applicationnd.ms-excel");
                                    response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xls");
                                    response.setHeader("Content-length", String.valueOf(excelFile.length()));
                                    byte[] tempByte = new byte[1024];
                                    FileInputStream in = new FileInputStream(excelFile);
                                    while (true) {
                                        int n = in.read(tempByte);
                                        if (n == -1) {
                                            break;
                                        }
                                        try {
                                            outputStream.write(tempByte, 0, n);
                                        } catch (Exception e2) {
                                            this.log.error("保存未成功", e2);
                                        }
                                    }
                                    outputStream.flush();
                                    outputStream.close();
                                    in.close();
                                } else {
                                    filePath = methodZipAll(uri, dirPath + "ExportFolder/", folderName, zipName);
                                }
                            }
                        } catch (WriteException e3) {
                            e3.printStackTrace();
                        }
                    }
                } catch (Throwable th) {
                    if (wwBook != null) {
                        try {
                            wwBook.close();
                            if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                                if (Integer.valueOf(all_class).intValue() == 1) {
                                    HttpServletResponse response2 = ServletActionContext.getResponse();
                                    response2.reset();
                                    ServletOutputStream outputStream2 = response2.getOutputStream();
                                    String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                    String loadFileName4 = loadFileName3.replace("+", " ");
                                    response2.setContentType("Content-type: applicationnd.ms-excel");
                                    response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xls");
                                    response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                                    byte[] tempByte2 = new byte[1024];
                                    FileInputStream in2 = new FileInputStream(excelFile);
                                    while (true) {
                                        int n2 = in2.read(tempByte2);
                                        if (n2 == -1) {
                                            break;
                                        }
                                        try {
                                            outputStream2.write(tempByte2, 0, n2);
                                        } catch (Exception e4) {
                                            this.log.error("保存未成功", e4);
                                        }
                                    }
                                    outputStream2.flush();
                                    outputStream2.close();
                                    in2.close();
                                } else {
                                    methodZipAll(uri, dirPath + "ExportFolder/", folderName, zipName);
                                }
                            }
                        } catch (WriteException e5) {
                            e5.printStackTrace();
                            throw th;
                        }
                    }
                    throw th;
                }
            } catch (Exception e6) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            if (Integer.valueOf(all_class).intValue() == 1) {
                                HttpServletResponse response3 = ServletActionContext.getResponse();
                                response3.reset();
                                ServletOutputStream outputStream3 = response3.getOutputStream();
                                String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                String loadFileName6 = loadFileName5.replace("+", " ");
                                response3.setContentType("Content-type: applicationnd.ms-excel");
                                response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xls");
                                response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                                byte[] tempByte3 = new byte[1024];
                                FileInputStream in3 = new FileInputStream(excelFile);
                                while (true) {
                                    int n3 = in3.read(tempByte3);
                                    if (n3 == -1) {
                                        break;
                                    }
                                    try {
                                        outputStream3.write(tempByte3, 0, n3);
                                    } catch (Exception e7) {
                                        this.log.error("保存未成功", e7);
                                    }
                                }
                                outputStream3.flush();
                                outputStream3.close();
                                in3.close();
                            } else {
                                filePath = methodZipAll(uri, dirPath + "ExportFolder/", folderName, zipName);
                            }
                        }
                    } catch (WriteException e8) {
                        e8.printStackTrace();
                    }
                }
            }
        } catch (Exception e9) {
            e9.printStackTrace();
        }
        return filePath;
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String subScoreTeacherAction_ExportClaTotalRankData(String examNum, String gradeNum, String schoolNum, String subjectNum, String classNum, String studentId, String studentType, String type, String source, String step, String sNum, String c_exam, String rpt_name, String isMoreSchool, String rptTitle, String isHistory, String isSaveWrite, String dirPath, String uri, String userNum, String schName, String gradeName, String className, String subjectName, String imgRoot, String agent) {
        List list = this.reportService.getClaTotalRankList(examNum, gradeNum, schoolNum, studentType, type, source, isHistory, subjectNum);
        new ArrayList();
        int hebing = 0;
        String folderPath = "ExportFolder/reportExcel" + userNum;
        String str = "reportExcel" + userNum;
        String str2 = "reportExcel" + userNum;
        String excelName = (null == gradeName || "".equals(gradeName)) ? rpt_name + "_" + gradeNum : rpt_name + "_" + gradeName;
        if (null != classNum && !"".equals(classNum) && !classNum.contains(Const.STRING_SEPERATOR)) {
            excelName = (null == className || "".equals(className)) ? excelName + "_" + classNum : excelName + "_" + className;
        }
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        try {
            WritableWorkbook wwBook = Workbook.createWorkbook(excelFile);
            WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
            biaotis1.setAlignment(Alignment.LEFT);
            biaotis1.setVerticalAlignment(VerticalAlignment.CENTRE);
            WritableFont titles = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat title = new WritableCellFormat(titles);
            title.setAlignment(Alignment.LEFT);
            title.setVerticalAlignment(VerticalAlignment.CENTRE);
            title.setWrap(true);
            WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            WritableCellFormat cFormat1 = new WritableCellFormat(font1);
            cFormat1.setAlignment(Alignment.CENTRE);
            cFormat1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1.setBackground(Const.titleBackground_color);
            cFormat1.setWrap(true);
            WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat2 = new WritableCellFormat(font2);
            cFormat2.setAlignment(Alignment.CENTRE);
            cFormat2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2.setBackground(Const.textOuBackGround_color);
            cFormat2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2.setWrap(true);
            WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat3 = new WritableCellFormat(font3);
            cFormat3.setAlignment(Alignment.CENTRE);
            cFormat3.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3.setBackground(Const.textJiBackGround_color);
            cFormat3.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3.setWrap(true);
            try {
                try {
                    WritableSheet sheet = wwBook.createSheet(rpt_name, 0);
                    sheet.getSettings().setShowGridLines(false);
                    if (0 == 0) {
                        try {
                            List<Subject> list11 = (List) list.get(0);
                            if (null == list11 || list11.size() < 0) {
                            }
                            Label biaoti = new Label(0, 0, rpt_name, biaotis1);
                            sheet.addCell(biaoti);
                            Label xinxi = new Label(0, 1, rptTitle, title);
                            sheet.addCell(xinxi);
                            sheet.setRowView(1, Const.height_500);
                            if (schoolNum.equals("allschool")) {
                                sheet.setColumnView(0, 15);
                                Label classNum_tit = new Label(0, 2, "学校", cFormat1);
                                sheet.addCell(classNum_tit);
                                for (int i = 0; i < list11.size(); i++) {
                                    Label subjectName_tit = new Label(i + i + 1, 2, list11.get(i).getSubjectName(), cFormat1);
                                    sheet.addCell(subjectName_tit);
                                    Label rank = new Label(i + i + 2, 2, list11.get(i).getExt2(), cFormat1);
                                    sheet.addCell(rank);
                                }
                            } else {
                                sheet.setColumnView(0, 10);
                                Label classNum_tit2 = new Label(0, 2, "班级", cFormat1);
                                sheet.addCell(classNum_tit2);
                                for (int i2 = 0; i2 < list11.size(); i2++) {
                                    Label subjectName_tit2 = new Label(i2 + i2 + i2 + 1, 2, list11.get(i2).getSubjectName(), cFormat1);
                                    sheet.addCell(subjectName_tit2);
                                    Label pName = new Label(i2 + i2 + i2 + 2, 2, list11.get(i2).getExt1(), cFormat1);
                                    sheet.addCell(pName);
                                    Label rank2 = new Label(i2 + i2 + i2 + 3, 2, list11.get(i2).getExt2(), cFormat1);
                                    sheet.addCell(rank2);
                                }
                            }
                            List clasList2 = (List) list.get(1);
                            for (int j = 0; j < clasList2.size(); j++) {
                                if (j % 2 != 0) {
                                    Object[] ob = (Object[]) clasList2.get(j);
                                    Label class_name = new Label(0, j + 3, (String) ob[3], cFormat2);
                                    sheet.addCell(class_name);
                                    for (int x = 0; x < ob.length; x++) {
                                        if (x > 3) {
                                            if (null == ob[x]) {
                                                Label student_name = new Label(x - 3, j + 3, "", cFormat2);
                                                sheet.addCell(student_name);
                                            } else if (ob[x].toString().matches("\\d+(.\\d+)?[fF]?")) {
                                                Number student_name2 = new Number(x - 3, j + 3, Double.valueOf(ob[x] + "").doubleValue(), cFormat2);
                                                sheet.addCell(student_name2);
                                            } else {
                                                Label student_name3 = new Label(x - 3, j + 3, (String) ob[x], cFormat2);
                                                sheet.addCell(student_name3);
                                            }
                                        }
                                        hebing = x - 3;
                                    }
                                } else {
                                    Object[] ob2 = (Object[]) clasList2.get(j);
                                    Label class_name2 = new Label(0, j + 3, (String) ob2[3], cFormat3);
                                    sheet.addCell(class_name2);
                                    for (int x2 = 0; x2 < ob2.length; x2++) {
                                        if (x2 > 3) {
                                            if (null == ob2[x2]) {
                                                Label student_name4 = new Label(x2 - 3, j + 3, "", cFormat3);
                                                sheet.addCell(student_name4);
                                            } else if (ob2[x2].toString().matches("\\d+(.\\d+)?[fF]?")) {
                                                Number student_name5 = new Number(x2 - 3, j + 3, Double.valueOf(ob2[x2] + "").doubleValue(), cFormat3);
                                                sheet.addCell(student_name5);
                                            } else {
                                                Label student_name6 = new Label(x2 - 3, j + 3, (String) ob2[x2], cFormat3);
                                                sheet.addCell(student_name6);
                                            }
                                        }
                                        hebing = x2 - 3;
                                    }
                                }
                            }
                            sheet.mergeCells(0, 0, hebing, 0);
                            sheet.mergeCells(0, 1, hebing, 1);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                    wwBook.write();
                    if (wwBook != null) {
                        try {
                            wwBook.close();
                            if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                                HttpServletResponse response = ServletActionContext.getResponse();
                                response.reset();
                                ServletOutputStream outputStream = response.getOutputStream();
                                String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                String loadFileName2 = loadFileName.replace("+", " ");
                                response.setContentType("Content-type: applicationnd.ms-excel");
                                response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xls");
                                response.setHeader("Content-length", String.valueOf(excelFile.length()));
                                byte[] tempByte = new byte[1024];
                                FileInputStream in = new FileInputStream(excelFile);
                                while (true) {
                                    int n = in.read(tempByte);
                                    if (n == -1) {
                                        break;
                                    }
                                    try {
                                        outputStream.write(tempByte, 0, n);
                                    } catch (Exception e2) {
                                        this.log.error("保存未成功", e2);
                                    }
                                }
                                outputStream.flush();
                                outputStream.close();
                                in.close();
                            }
                        } catch (WriteException e3) {
                            e3.printStackTrace();
                        }
                    }
                } catch (Throwable th) {
                    if (wwBook != null) {
                        try {
                            wwBook.close();
                            if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                                HttpServletResponse response2 = ServletActionContext.getResponse();
                                response2.reset();
                                ServletOutputStream outputStream2 = response2.getOutputStream();
                                String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                String loadFileName4 = loadFileName3.replace("+", " ");
                                response2.setContentType("Content-type: applicationnd.ms-excel");
                                response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xls");
                                response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                                byte[] tempByte2 = new byte[1024];
                                FileInputStream in2 = new FileInputStream(excelFile);
                                while (true) {
                                    int n2 = in2.read(tempByte2);
                                    if (n2 == -1) {
                                        break;
                                    }
                                    try {
                                        outputStream2.write(tempByte2, 0, n2);
                                    } catch (Exception e4) {
                                        this.log.error("保存未成功", e4);
                                    }
                                }
                                outputStream2.flush();
                                outputStream2.close();
                                in2.close();
                            }
                        } catch (WriteException e5) {
                            e5.printStackTrace();
                            throw th;
                        }
                    }
                    throw th;
                }
            } catch (Exception e6) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response3 = ServletActionContext.getResponse();
                            response3.reset();
                            ServletOutputStream outputStream3 = response3.getOutputStream();
                            String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName6 = loadFileName5.replace("+", " ");
                            response3.setContentType("Content-type: applicationnd.ms-excel");
                            response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xls");
                            response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte3 = new byte[1024];
                            FileInputStream in3 = new FileInputStream(excelFile);
                            while (true) {
                                int n3 = in3.read(tempByte3);
                                if (n3 == -1) {
                                    break;
                                }
                                try {
                                    outputStream3.write(tempByte3, 0, n3);
                                } catch (Exception e7) {
                                    this.log.error("保存未成功", e7);
                                }
                            }
                            outputStream3.flush();
                            outputStream3.close();
                            in3.close();
                        }
                    } catch (WriteException e8) {
                        e8.printStackTrace();
                    }
                }
            }
        } catch (Exception e9) {
            e9.printStackTrace();
        }
        return null;
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String c4_exportMethod(String examNum, String gradeNum, String schoolNum, String subjectNum, String classNum, String studentId, String studentType, String type, String source, String step, String sNum, String c_exam, String rpt_name, String isMoreSchool, String rptTitle, String isHistory, String isSaveWrite, String dirPath, String uri, String userNum, String schName, String gradeName, String className, String subjectName, String imgRoot, String agent) {
        String folderPath = "ExportFolder/reportExcel" + userNum;
        String str = "reportExcel" + userNum;
        String str2 = "reportExcel" + userNum;
        String excelName = (null == gradeName || "".equals(gradeName)) ? rpt_name + "_" + gradeNum : rpt_name + "_" + gradeName;
        if (null != classNum && !"".equals(classNum) && !classNum.contains(Const.STRING_SEPERATOR)) {
            excelName = (null == className || "".equals(className)) ? excelName + "_" + classNum : excelName + "_" + className;
        }
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        try {
            WritableWorkbook wwBook = Workbook.createWorkbook(excelFile);
            WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
            biaotis1.setAlignment(Alignment.LEFT);
            biaotis1.setVerticalAlignment(VerticalAlignment.CENTRE);
            WritableFont titles = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat title = new WritableCellFormat(titles);
            title.setAlignment(Alignment.LEFT);
            title.setVerticalAlignment(VerticalAlignment.CENTRE);
            title.setWrap(true);
            WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            WritableCellFormat cFormat1 = new WritableCellFormat(font1);
            cFormat1.setAlignment(Alignment.CENTRE);
            cFormat1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1.setBackground(Const.titleBackground_color);
            cFormat1.setWrap(true);
            WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat2 = new WritableCellFormat(font2);
            cFormat2.setAlignment(Alignment.CENTRE);
            cFormat2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2.setBackground(Const.textOuBackGround_color);
            cFormat2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2.setWrap(true);
            NumberFormat nf1 = new NumberFormat("0.0");
            WritableCellFormat cFormat2_1 = new WritableCellFormat(font2, nf1);
            cFormat2_1.setAlignment(Alignment.CENTRE);
            cFormat2_1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_1.setBackground(Const.textOuBackGround_color);
            cFormat2_1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_1.setWrap(true);
            WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat3 = new WritableCellFormat(font3);
            cFormat3.setAlignment(Alignment.CENTRE);
            cFormat3.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3.setBackground(Const.textJiBackGround_color);
            cFormat3.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3.setWrap(true);
            WritableCellFormat cFormat3_1 = new WritableCellFormat(font3, nf1);
            cFormat3_1.setAlignment(Alignment.CENTRE);
            cFormat3_1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_1.setBackground(Const.textJiBackGround_color);
            cFormat3_1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_1.setWrap(true);
            List list = this.c4.getc4List(examNum, subjectNum, gradeNum, schoolNum, classNum, type, studentType, source);
            try {
                WritableSheet sheet = wwBook.createSheet(rpt_name, 0);
                sheet.getSettings().setShowGridLines(false);
                try {
                    new ArrayList();
                    new ArrayList();
                    new ArrayList();
                    List list0 = (List) list.get(0);
                    List list1 = (List) list.get(1);
                    List list2 = (List) list.get(2);
                    Label biaotou = new Label(0, 0, rpt_name, biaotis1);
                    sheet.addCell(biaotou);
                    Label xinxi = new Label(0, 1, rptTitle, title);
                    sheet.addCell(xinxi);
                    sheet.setRowView(1, Const.height_500);
                    sheet.mergeCells(0, 0, (list0.size() * 2) + 1, 0);
                    sheet.mergeCells(0, 1, (list0.size() * 2) + 1, 1);
                    Label typeTitle = new Label(0, 2, "类型", cFormat1);
                    sheet.addCell(typeTitle);
                    sheet.mergeCells(0, 2, 0, 3);
                    Label subjectTitle = new Label(1, 2, "科目", cFormat1);
                    sheet.addCell(subjectTitle);
                    if (schoolNum.equals("allschool")) {
                        Label classTitle = new Label(1, 3, "学校", cFormat1);
                        sheet.addCell(classTitle);
                    } else {
                        Label classTitle2 = new Label(1, 3, "班级", cFormat1);
                        sheet.addCell(classTitle2);
                    }
                    boolean flag = true;
                    for (int i = 0; i < list2.size(); i++) {
                        int count = 1;
                        String classtype = ((Class) list2.get(i)).getClassType();
                        for (int xx = i + 1; xx < list2.size() && classtype.equals(((Class) list2.get(xx)).getClassType()); xx++) {
                            count++;
                        }
                        if (flag) {
                            if (count > 1) {
                                Label names = new Label(0, 4 + i, ((Class) list2.get(i)).getClassType(), cFormat3);
                                sheet.addCell(names);
                                sheet.mergeCells(0, 4 + i, 0, 3 + i + count);
                                count--;
                                flag = false;
                            } else {
                                Label names2 = new Label(0, 4 + i, ((Class) list2.get(i)).getClassType(), cFormat3);
                                sheet.addCell(names2);
                                flag = true;
                            }
                        } else if (count > 0) {
                            count--;
                        }
                        if (count == 0) {
                            flag = true;
                        }
                        for (int ii = 0; ii < list0.size(); ii++) {
                            Label subjectName_title = new Label(2 + (ii * 2), 2, ((Subject) list0.get(ii)).getSubjectName(), cFormat1);
                            sheet.addCell(subjectName_title);
                            sheet.mergeCells(2 + (ii * 2), 2, 3 + (ii * 2), 2);
                            Label averageTitle = new Label(2 + (ii * 2), 3, "均分", cFormat1);
                            sheet.addCell(averageTitle);
                            Label rankingTitle = new Label(3 + (ii * 2), 3, "排名", cFormat1);
                            sheet.addCell(rankingTitle);
                            String ext1 = ((Subject) list0.get(ii)).getExt1();
                            String subjectName_su = ((Subject) list0.get(ii)).getSubjectName();
                            int t = 0;
                            for (int g = 0; g < list1.size(); g++) {
                                String ext1_c = ((Class) list2.get(i)).getExt1();
                                String className_c = ((Class) list2.get(i)).getClassName();
                                String ext1_g = ((RptHeader) list1.get(g)).getExt1();
                                String className_g = ((RptHeader) list1.get(g)).getClassName();
                                String subjectName_g = ((RptHeader) list1.get(g)).getSubjectName();
                                if ((ext1_c + className_c + subjectName_su).equals(ext1_g + className_g + subjectName_g)) {
                                    t = 1;
                                }
                            }
                            if (i % 2 == 0) {
                                if (t == 1) {
                                    Label className_title = new Label(1, 4 + i, ((Class) list2.get(i)).getClassName(), cFormat2);
                                    sheet.addCell(className_title);
                                    for (int j = 0; j < list1.size(); j++) {
                                        String classTypess = ((Class) list2.get(i)).getClassType();
                                        String classNamess = ((Class) list2.get(i)).getClassName();
                                        String clas = ((RptHeader) list1.get(j)).getClassName();
                                        String exts = ((RptHeader) list1.get(j)).getExt();
                                        String subjectNum_d = ((RptHeader) list1.get(j)).getSubjectNum();
                                        String subjectName_d = ((RptHeader) list1.get(j)).getSubjectName();
                                        if ((classTypess + classNamess).equals(exts + clas) && (ext1 + subjectName_su).equals(subjectNum_d + subjectName_d)) {
                                            String Average_o = ((RptHeader) list1.get(j)).getAverage() + "";
                                            Double Average_D = Double.valueOf(Average_o);
                                            DecimalFormat df = new DecimalFormat("0.0");
                                            df.setRoundingMode(RoundingMode.HALF_UP);
                                            Number average = new Number(2 + (ii * 2), 4 + i, Double.valueOf(Double.parseDouble(df.format(Average_D))).doubleValue(), cFormat2_1);
                                            sheet.addCell(average);
                                            if (((RptHeader) list1.get(j)).getRank().equals("")) {
                                                Label rank = new Label(3 + (ii * 2), 4 + i, ((RptHeader) list1.get(j)).getRank(), cFormat2);
                                                sheet.addCell(rank);
                                            } else {
                                                Number rank2 = new Number(3 + (ii * 2), 4 + i, Integer.valueOf(((RptHeader) list1.get(j)).getRank()).intValue(), cFormat2);
                                                sheet.addCell(rank2);
                                            }
                                        }
                                    }
                                } else {
                                    Label average2 = new Label(2 + (ii * 2), 4 + i, "", cFormat2);
                                    sheet.addCell(average2);
                                    Label rank3 = new Label(2 + (ii * 2) + 1, 4 + i, "", cFormat2);
                                    sheet.addCell(rank3);
                                }
                            } else if (t == 1) {
                                Label className_title2 = new Label(1, 4 + i, ((Class) list2.get(i)).getClassName(), cFormat3);
                                sheet.addCell(className_title2);
                                for (int j2 = 0; j2 < list1.size(); j2++) {
                                    String classTypess2 = ((Class) list2.get(i)).getClassType();
                                    String classNamess2 = ((Class) list2.get(i)).getClassName();
                                    String clas2 = ((RptHeader) list1.get(j2)).getClassName();
                                    String exts2 = ((RptHeader) list1.get(j2)).getExt();
                                    String subjectNum_d2 = ((RptHeader) list1.get(j2)).getSubjectNum();
                                    String subjectName_d2 = ((RptHeader) list1.get(j2)).getSubjectName();
                                    if ((classTypess2 + classNamess2).equals(exts2 + clas2) && (ext1 + subjectName_su).equals(subjectNum_d2 + subjectName_d2)) {
                                        String Average_o2 = ((RptHeader) list1.get(j2)).getAverage() + "";
                                        Double Average_D2 = Double.valueOf(Average_o2);
                                        Number average3 = new Number(2 + (ii * 2), 4 + i, Double.valueOf(Double.parseDouble(new DecimalFormat("0.0").format(Average_D2))).doubleValue(), cFormat3_1);
                                        sheet.addCell(average3);
                                        if (((RptHeader) list1.get(j2)).getRank().equals("")) {
                                            Label rank4 = new Label(2 + (ii * 2) + 1, 4 + i, ((RptHeader) list1.get(j2)).getRank(), cFormat3);
                                            sheet.addCell(rank4);
                                        } else {
                                            Number rank5 = new Number(2 + (ii * 2) + 1, 4 + i, Integer.valueOf(((RptHeader) list1.get(j2)).getRank()).intValue(), cFormat3);
                                            sheet.addCell(rank5);
                                        }
                                    }
                                }
                            } else {
                                Label average4 = new Label(2 + (ii * 2), 4 + i, "", cFormat3);
                                sheet.addCell(average4);
                                Label rank6 = new Label(2 + (ii * 2) + 1, 4 + i, "", cFormat3);
                                sheet.addCell(rank6);
                            }
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                wwBook.write();
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response = ServletActionContext.getResponse();
                            response.reset();
                            ServletOutputStream outputStream = response.getOutputStream();
                            String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName2 = loadFileName.replace("+", " ");
                            response.setContentType("Content-type: applicationnd.ms-excel");
                            response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xls");
                            response.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte = new byte[1024];
                            FileInputStream in = new FileInputStream(excelFile);
                            while (true) {
                                int n = in.read(tempByte);
                                if (n == -1) {
                                    break;
                                }
                                try {
                                    outputStream.write(tempByte, 0, n);
                                } catch (Exception e2) {
                                    this.log.error("保存未成功", e2);
                                }
                            }
                            outputStream.flush();
                            outputStream.close();
                            in.close();
                        }
                    } catch (WriteException e3) {
                        e3.printStackTrace();
                    }
                }
            } catch (Exception e4) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response2 = ServletActionContext.getResponse();
                            response2.reset();
                            ServletOutputStream outputStream2 = response2.getOutputStream();
                            String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName4 = loadFileName3.replace("+", " ");
                            response2.setContentType("Content-type: applicationnd.ms-excel");
                            response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xls");
                            response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte2 = new byte[1024];
                            FileInputStream in2 = new FileInputStream(excelFile);
                            while (true) {
                                int n2 = in2.read(tempByte2);
                                if (n2 == -1) {
                                    break;
                                }
                                try {
                                    outputStream2.write(tempByte2, 0, n2);
                                } catch (Exception e5) {
                                    this.log.error("保存未成功", e5);
                                }
                            }
                            outputStream2.flush();
                            outputStream2.close();
                            in2.close();
                        }
                    } catch (WriteException e6) {
                        e6.printStackTrace();
                    }
                }
            } catch (Throwable th) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response3 = ServletActionContext.getResponse();
                            response3.reset();
                            ServletOutputStream outputStream3 = response3.getOutputStream();
                            String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName6 = loadFileName5.replace("+", " ");
                            response3.setContentType("Content-type: applicationnd.ms-excel");
                            response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xls");
                            response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte3 = new byte[1024];
                            FileInputStream in3 = new FileInputStream(excelFile);
                            while (true) {
                                int n3 = in3.read(tempByte3);
                                if (n3 == -1) {
                                    break;
                                }
                                try {
                                    outputStream3.write(tempByte3, 0, n3);
                                } catch (Exception e7) {
                                    this.log.error("保存未成功", e7);
                                }
                            }
                            outputStream3.flush();
                            outputStream3.close();
                            in3.close();
                        }
                    } catch (WriteException e8) {
                        e8.printStackTrace();
                        throw th;
                    }
                }
                throw th;
            }
        } catch (Exception e9) {
            e9.printStackTrace();
        }
        return null;
    }

    private void size() {
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String c5_exportgetData(String examNum, String gradeNum, String schoolNum, String subjectNum, String classNum, String studentId, String studentType, String type, String source, String step, String sNum, String c_exam, String rpt_name, String isMoreSchool, String rptTitle, String isHistory, String isSaveWrite, String dirPath, String uri, String userNum, String schName, String gradeName, String className, String subjectName, String imgRoot, String agent) {
        String folderPath = "ExportFolder/reportExcel" + userNum;
        String str = "reportExcel" + userNum;
        String str2 = "reportExcel" + userNum;
        String excelName = (null == gradeName || "".equals(gradeName)) ? rpt_name + "_" + gradeNum : rpt_name + "_" + gradeName;
        if (null != classNum && !"".equals(classNum) && !classNum.contains(Const.STRING_SEPERATOR)) {
            excelName = (null == className || "".equals(className)) ? excelName + "_" + classNum : excelName + "_" + className;
        }
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        try {
            WritableWorkbook wwBook = Workbook.createWorkbook(excelFile);
            WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
            biaotis1.setAlignment(Alignment.LEFT);
            biaotis1.setVerticalAlignment(VerticalAlignment.CENTRE);
            WritableFont titles = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat title = new WritableCellFormat(titles);
            title.setAlignment(Alignment.LEFT);
            title.setVerticalAlignment(VerticalAlignment.CENTRE);
            title.setWrap(true);
            WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            WritableCellFormat cFormat1 = new WritableCellFormat(font1);
            cFormat1.setAlignment(Alignment.CENTRE);
            cFormat1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1.setBackground(Const.titleBackground_color);
            cFormat1.setWrap(true);
            WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat2 = new WritableCellFormat(font2);
            cFormat2.setAlignment(Alignment.CENTRE);
            cFormat2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2.setBackground(Const.textOuBackGround_color);
            cFormat2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2.setWrap(true);
            NumberFormat nf1 = new NumberFormat("0.0");
            WritableCellFormat cFormat2_1 = new WritableCellFormat(font2, nf1);
            cFormat2_1.setAlignment(Alignment.CENTRE);
            cFormat2_1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_1.setBackground(Const.textOuBackGround_color);
            cFormat2_1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_1.setWrap(true);
            WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat3 = new WritableCellFormat(font3);
            cFormat3.setAlignment(Alignment.CENTRE);
            cFormat3.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3.setBackground(Const.textJiBackGround_color);
            cFormat3.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3.setWrap(true);
            WritableCellFormat cFormat3_1 = new WritableCellFormat(font3, nf1);
            cFormat3_1.setAlignment(Alignment.CENTRE);
            cFormat3_1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_1.setBackground(Const.textJiBackGround_color);
            cFormat3_1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_1.setWrap(true);
            List quest = this.c5.getC5gradeTopScore(examNum, gradeNum, schoolNum, type, studentType, source);
            try {
                WritableSheet sheet = wwBook.createSheet(rpt_name, 0);
                sheet.getSettings().setShowGridLines(false);
                try {
                    Label biaotou = new Label(0, 0, rpt_name, biaotis1);
                    sheet.addCell(biaotou);
                    DecimalFormat df01 = new DecimalFormat("0.0");
                    df01.setRoundingMode(RoundingMode.HALF_UP);
                    Label xinxi = new Label(0, 1, rptTitle, title);
                    sheet.addCell(xinxi);
                    sheet.setRowView(1, Const.height_500);
                    sheet.mergeCells(0, 0, 5, 0);
                    sheet.mergeCells(0, 1, 5, 1);
                    sheet.setColumnView(2, 15);
                    sheet.setColumnView(5, 12);
                    List list = (List) quest.get(1);
                    Label a1 = new Label(0, 2, "科目", cFormat1);
                    sheet.addCell(a1);
                    Label a2 = new Label(1, 2, "得分", cFormat1);
                    sheet.addCell(a2);
                    Label a3 = new Label(2, 2, "学号", cFormat1);
                    sheet.addCell(a3);
                    Label a4 = new Label(3, 2, "姓名", cFormat1);
                    sheet.addCell(a4);
                    Label a5 = new Label(4, 2, "班级", cFormat1);
                    sheet.addCell(a5);
                    Label a6 = new Label(5, 2, "任课教师", cFormat1);
                    sheet.addCell(a6);
                    int q = 0;
                    for (int i = 0; i < list.size(); i++) {
                        if (i % 2 != 0) {
                            List list1 = (List) list.get(i);
                            for (int j = 0; j < list1.size(); j++) {
                                if (j == 0) {
                                    Label b1 = new Label(0, 3 + q, (String) ((Object[]) list1.get(j))[0], cFormat2);
                                    sheet.addCell(b1);
                                    sheet.mergeCells(0, 3 + q, 0, 2 + q + list1.size());
                                }
                                String b2str = Convert.toBigDecimal(df01.format(((Object[]) list1.get(j))[2])).stripTrailingZeros().toPlainString();
                                Number b2 = new Number(1, 3 + j + q, Double.valueOf(b2str).doubleValue(), cFormat2);
                                sheet.addCell(b2);
                                Label b3 = new Label(2, 3 + j + q, String.valueOf(((Object[]) list1.get(j))[5] == null ? "" : ((Object[]) list1.get(j))[5]), cFormat2);
                                sheet.addCell(b3);
                                Label b4 = new Label(3, 3 + j + q, String.valueOf(((Object[]) list1.get(j))[1] == null ? "" : ((Object[]) list1.get(j))[1]), cFormat2);
                                sheet.addCell(b4);
                                Label b5 = new Label(4, 3 + j + q, String.valueOf(((Object[]) list1.get(j))[6] + ""), cFormat2);
                                sheet.addCell(b5);
                                Label b6 = new Label(5, 3 + j + q, String.valueOf(((Object[]) list1.get(j))[10] == null ? "" : ((Object[]) list1.get(j))[10]), cFormat2);
                                sheet.addCell(b6);
                            }
                            q += list1.size();
                        } else {
                            List list12 = (List) list.get(i);
                            for (int j2 = 0; j2 < list12.size(); j2++) {
                                if (j2 == 0) {
                                    Label b12 = new Label(0, 3 + q, (String) ((Object[]) list12.get(j2))[0], cFormat3);
                                    sheet.addCell(b12);
                                    sheet.mergeCells(0, 3 + q, 0, 2 + q + list12.size());
                                }
                                String b2str2 = Convert.toBigDecimal(df01.format(((Object[]) list12.get(j2))[2])).stripTrailingZeros().toPlainString();
                                Number b22 = new Number(1, 3 + j2 + q, Double.valueOf(b2str2).doubleValue(), cFormat3);
                                sheet.addCell(b22);
                                Label b32 = new Label(2, 3 + j2 + q, String.valueOf(((Object[]) list12.get(j2))[5] == null ? "" : ((Object[]) list12.get(j2))[5]), cFormat3);
                                sheet.addCell(b32);
                                Label b42 = new Label(3, 3 + j2 + q, String.valueOf(((Object[]) list12.get(j2))[1] == null ? "" : ((Object[]) list12.get(j2))[1]), cFormat3);
                                sheet.addCell(b42);
                                Label b52 = new Label(4, 3 + j2 + q, String.valueOf(((Object[]) list12.get(j2))[6] + ""), cFormat3);
                                sheet.addCell(b52);
                                Label b62 = new Label(5, 3 + j2 + q, String.valueOf(((Object[]) list12.get(j2))[10] == null ? "" : ((Object[]) list12.get(j2))[10]), cFormat3);
                                sheet.addCell(b62);
                            }
                            q += list12.size();
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                wwBook.write();
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response = ServletActionContext.getResponse();
                            response.reset();
                            ServletOutputStream outputStream = response.getOutputStream();
                            String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName2 = loadFileName.replace("+", " ");
                            response.setContentType("Content-type: applicationnd.ms-excel");
                            response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xls");
                            response.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte = new byte[1024];
                            FileInputStream in = new FileInputStream(excelFile);
                            while (true) {
                                int n = in.read(tempByte);
                                if (n == -1) {
                                    break;
                                }
                                try {
                                    outputStream.write(tempByte, 0, n);
                                } catch (Exception e2) {
                                    this.log.error("保存未成功", e2);
                                }
                            }
                            outputStream.flush();
                            outputStream.close();
                            in.close();
                        }
                    } catch (WriteException e3) {
                        e3.printStackTrace();
                    }
                }
            } catch (Exception e4) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response2 = ServletActionContext.getResponse();
                            response2.reset();
                            ServletOutputStream outputStream2 = response2.getOutputStream();
                            String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName4 = loadFileName3.replace("+", " ");
                            response2.setContentType("Content-type: applicationnd.ms-excel");
                            response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xls");
                            response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte2 = new byte[1024];
                            FileInputStream in2 = new FileInputStream(excelFile);
                            while (true) {
                                int n2 = in2.read(tempByte2);
                                if (n2 == -1) {
                                    break;
                                }
                                try {
                                    outputStream2.write(tempByte2, 0, n2);
                                } catch (Exception e5) {
                                    this.log.error("保存未成功", e5);
                                }
                            }
                            outputStream2.flush();
                            outputStream2.close();
                            in2.close();
                        }
                    } catch (WriteException e6) {
                        e6.printStackTrace();
                    }
                }
            } catch (Throwable th) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response3 = ServletActionContext.getResponse();
                            response3.reset();
                            ServletOutputStream outputStream3 = response3.getOutputStream();
                            String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName6 = loadFileName5.replace("+", " ");
                            response3.setContentType("Content-type: applicationnd.ms-excel");
                            response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xls");
                            response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte3 = new byte[1024];
                            FileInputStream in3 = new FileInputStream(excelFile);
                            while (true) {
                                int n3 = in3.read(tempByte3);
                                if (n3 == -1) {
                                    break;
                                }
                                try {
                                    outputStream3.write(tempByte3, 0, n3);
                                } catch (Exception e7) {
                                    this.log.error("保存未成功", e7);
                                }
                            }
                            outputStream3.flush();
                            outputStream3.close();
                            in3.close();
                        }
                    } catch (WriteException e8) {
                        e8.printStackTrace();
                        throw th;
                    }
                }
                throw th;
            }
        } catch (Exception e9) {
            e9.printStackTrace();
        }
        return null;
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String c6_exportgetData(String examNum, String gradeNum, String schoolNum, String subjectNum, String classNum, String studentId, String studentType, String type, String source, String step, String sNum, String c_exam, String rpt_name, String isMoreSchool, String rptTitle, String isHistory, String isSaveWrite, String dirPath, String uri, String userNum, String schName, String gradeName, String className, String subjectName, String imgRoot, String agent) {
        String folderPath = "ExportFolder/reportExcel" + userNum;
        String str = "reportExcel" + userNum;
        String str2 = "reportExcel" + userNum;
        String excelName = (null == gradeName || "".equals(gradeName)) ? rpt_name + "_" + gradeNum : rpt_name + "_" + gradeName;
        if (null != classNum && !"".equals(classNum) && !classNum.contains(Const.STRING_SEPERATOR)) {
            excelName = (null == className || "".equals(className)) ? excelName + "_" + classNum : excelName + "_" + className;
        }
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        try {
            WritableWorkbook wwBook = Workbook.createWorkbook(excelFile);
            WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
            biaotis1.setAlignment(Alignment.LEFT);
            biaotis1.setVerticalAlignment(VerticalAlignment.CENTRE);
            WritableFont titles = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat title = new WritableCellFormat(titles);
            title.setAlignment(Alignment.LEFT);
            title.setVerticalAlignment(VerticalAlignment.CENTRE);
            title.setWrap(true);
            WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            WritableCellFormat cFormat1 = new WritableCellFormat(font1);
            cFormat1.setAlignment(Alignment.CENTRE);
            cFormat1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1.setBackground(Const.titleBackground_color);
            cFormat1.setWrap(true);
            WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat2 = new WritableCellFormat(font2);
            cFormat2.setAlignment(Alignment.CENTRE);
            cFormat2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2.setBackground(Const.textOuBackGround_color);
            cFormat2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2.setWrap(true);
            WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat3 = new WritableCellFormat(font3);
            cFormat3.setAlignment(Alignment.CENTRE);
            cFormat3.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3.setBackground(Const.textJiBackGround_color);
            cFormat3.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3.setWrap(true);
            List quest = this.c6.getTopScoreStudent(examNum, gradeNum, schoolNum, c_exam, sNum, type, studentType, source, subjectNum);
            try {
                WritableSheet sheet = wwBook.createSheet(rpt_name, 0);
                sheet.getSettings().setShowGridLines(false);
                try {
                    Label biaotou = new Label(0, 0, rpt_name, biaotis1);
                    sheet.addCell(biaotou);
                    List<Subject> list1 = (List) quest.get(0);
                    List<RptHeader> list2 = (List) quest.get(1);
                    List<Exam> list3 = (List) quest.get(2);
                    List<Class> list4 = (List) quest.get(3);
                    new DecimalFormat("0.0");
                    Label xinxi = new Label(0, 1, rptTitle, title);
                    sheet.addCell(xinxi);
                    sheet.setRowView(1, Const.height_500);
                    sheet.mergeCells(0, 0, list1.size() * list3.size(), 0);
                    sheet.mergeCells(0, 1, list1.size() * list3.size(), 1);
                    String substr = "";
                    int m = 0;
                    for (int i = 0; i < list1.size(); i++) {
                        if (i == 0) {
                            if (schoolNum.equals("allschool")) {
                                Label banji = new Label(0, 2, "学校", cFormat1);
                                sheet.addCell(banji);
                                sheet.mergeCells(0, 2, 0, 3);
                            } else {
                                Label banji2 = new Label(0, 2, "班级", cFormat1);
                                sheet.addCell(banji2);
                                sheet.mergeCells(0, 2, 0, 3);
                            }
                        }
                    }
                    for (int k = 0; k < list4.size(); k++) {
                        int p = 0;
                        if (k % 2 == 0) {
                            Label className_title = new Label(0, 4 + k, list4.get(k).getClassName(), cFormat2);
                            sheet.addCell(className_title);
                            for (int su = 0; su < list1.size(); su++) {
                                if (substr.indexOf(list1.get(su).getSubjectNum() + list1.get(su).getSubjectName()) == -1) {
                                    Label subjectName_title = new Label((list3.size() * su) + 1, 2, list1.get(su).getSubjectName(), cFormat1);
                                    sheet.addCell(subjectName_title);
                                    sheet.mergeCells((list3.size() * su) + 1, 2, (list3.size() * su) + list3.size(), 2);
                                    for (int ex = 0; ex < list3.size(); ex++) {
                                        m++;
                                        Label examName = new Label(m, 3, list3.get(ex).getExamName(), cFormat1);
                                        sheet.addCell(examName);
                                        sheet.setColumnView(m, 10);
                                    }
                                    substr = substr + list1.get(su).getSubjectNum() + list1.get(su).getSubjectName() + Const.STRING_SEPERATOR;
                                }
                                for (int exx = 0; exx < list3.size(); exx++) {
                                    String cl_classNum = list4.get(k).getClassNum();
                                    String cl_className = list4.get(k).getClassName();
                                    String cls = cl_classNum + cl_className;
                                    String su_subjectName = list1.get(su).getSubjectName();
                                    Integer ex_examNum = list3.get(exx).getExamNum();
                                    String ex_examName = list3.get(exx).getExamName();
                                    String exam = ex_examNum + ex_examName;
                                    int t = 0;
                                    for (int d = 0; d < list2.size(); d++) {
                                        String d_ext = list2.get(d).getExt();
                                        String d_className = list2.get(d).getClassName();
                                        String d_subjectName = list2.get(d).getSubjectName();
                                        String d_examNum = list2.get(d).getExamNum();
                                        String d_examName = list2.get(d).getExamName();
                                        if ((cls + su_subjectName + exam).equals(d_ext + d_className + d_subjectName + d_examNum + d_examName)) {
                                            t = 1;
                                        }
                                    }
                                    if (t == 1) {
                                        for (int ds = 0; ds < list2.size(); ds++) {
                                            String cl_className_d = list4.get(k).getClassName();
                                            String cl_classNum_d = list4.get(k).getClassNum();
                                            String su_ext1_d = list1.get(su).getExt1();
                                            String su_subjectName_d = list1.get(su).getSubjectName();
                                            Integer ex_examNum_d = list3.get(exx).getExamNum();
                                            String ex_examName_d = list3.get(exx).getExamName();
                                            if ((cl_className_d + cl_classNum_d).equals(list2.get(ds).getClassName() + list2.get(ds).getExt()) && (list2.get(ds).getSubjectNum() + list2.get(ds).getSubjectName()).equals(su_ext1_d + su_subjectName_d) && (ex_examNum_d + ex_examName_d).equals(list2.get(ds).getExamNum() + list2.get(ds).getExamName())) {
                                                p++;
                                                Number num = new Number(p, 4 + k, Double.valueOf(list2.get(ds).getA_num()).doubleValue(), cFormat2);
                                                sheet.addCell(num);
                                            }
                                        }
                                    } else {
                                        p++;
                                        Label num2 = new Label(p, 4 + k, "", cFormat2);
                                        sheet.addCell(num2);
                                    }
                                }
                            }
                        } else {
                            Label className_title2 = new Label(0, 4 + k, list4.get(k).getClassName(), cFormat3);
                            sheet.addCell(className_title2);
                            for (int su2 = 0; su2 < list1.size(); su2++) {
                                if (substr.indexOf(list1.get(su2).getSubjectNum() + list1.get(su2).getSubjectName()) == -1) {
                                    Label subjectName_title2 = new Label((list3.size() * su2) + 1, 2, list1.get(su2).getSubjectName(), cFormat1);
                                    sheet.addCell(subjectName_title2);
                                    sheet.mergeCells((list3.size() * su2) + 1, 2, (list3.size() * su2) + list3.size(), 2);
                                    for (int ex2 = 0; ex2 < list3.size(); ex2++) {
                                        m++;
                                        Label examName2 = new Label(m, 3, list3.get(ex2).getExamName(), cFormat1);
                                        sheet.addCell(examName2);
                                        sheet.setColumnView(m, 10);
                                    }
                                    substr = substr + list1.get(su2).getSubjectNum() + list1.get(su2).getSubjectName() + Const.STRING_SEPERATOR;
                                }
                                for (int exx2 = 0; exx2 < list3.size(); exx2++) {
                                    String cl_classNum2 = list4.get(k).getClassNum();
                                    String cl_className2 = list4.get(k).getClassName();
                                    String cls2 = cl_classNum2 + cl_className2;
                                    String su_subjectName2 = list1.get(su2).getSubjectName();
                                    Integer ex_examNum2 = list3.get(exx2).getExamNum();
                                    String ex_examName2 = list3.get(exx2).getExamName();
                                    String exam2 = ex_examNum2 + ex_examName2;
                                    int t2 = 0;
                                    for (int d2 = 0; d2 < list2.size(); d2++) {
                                        String d_ext2 = list2.get(d2).getExt();
                                        String d_className2 = list2.get(d2).getClassName();
                                        String d_subjectName2 = list2.get(d2).getSubjectName();
                                        String d_examNum2 = list2.get(d2).getExamNum();
                                        String d_examName2 = list2.get(d2).getExamName();
                                        if ((cls2 + su_subjectName2 + exam2).equals(d_ext2 + d_className2 + d_subjectName2 + d_examNum2 + d_examName2)) {
                                            t2 = 1;
                                        }
                                    }
                                    if (t2 == 1) {
                                        for (int ds2 = 0; ds2 < list2.size(); ds2++) {
                                            String cl_className_d2 = list4.get(k).getClassName();
                                            String cl_classNum_d2 = list4.get(k).getClassNum();
                                            String su_ext1_d2 = list1.get(su2).getExt1();
                                            String su_subjectName_d2 = list1.get(su2).getSubjectName();
                                            Integer ex_examNum_d2 = list3.get(exx2).getExamNum();
                                            String ex_examName_d2 = list3.get(exx2).getExamName();
                                            if ((cl_className_d2 + cl_classNum_d2).equals(list2.get(ds2).getClassName() + list2.get(ds2).getExt()) && (list2.get(ds2).getSubjectNum() + list2.get(ds2).getSubjectName()).equals(su_ext1_d2 + su_subjectName_d2) && (ex_examNum_d2 + ex_examName_d2).equals(list2.get(ds2).getExamNum() + list2.get(ds2).getExamName())) {
                                                p++;
                                                Number num3 = new Number(p, 4 + k, Double.valueOf(list2.get(ds2).getA_num()).doubleValue(), cFormat3);
                                                sheet.addCell(num3);
                                            }
                                        }
                                    } else {
                                        p++;
                                        Label num4 = new Label(p, 4 + k, "", cFormat3);
                                        sheet.addCell(num4);
                                    }
                                }
                            }
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                wwBook.write();
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response = ServletActionContext.getResponse();
                            response.reset();
                            ServletOutputStream outputStream = response.getOutputStream();
                            String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName2 = loadFileName.replace("+", " ");
                            response.setContentType("Content-type: applicationnd.ms-excel");
                            response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xls");
                            response.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte = new byte[1024];
                            FileInputStream in = new FileInputStream(excelFile);
                            while (true) {
                                int n = in.read(tempByte);
                                if (n == -1) {
                                    break;
                                }
                                try {
                                    outputStream.write(tempByte, 0, n);
                                } catch (Exception e2) {
                                    this.log.error("保存未成功", e2);
                                }
                            }
                            outputStream.flush();
                            outputStream.close();
                            in.close();
                        }
                    } catch (WriteException e3) {
                        e3.printStackTrace();
                    }
                }
            } catch (Exception e4) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response2 = ServletActionContext.getResponse();
                            response2.reset();
                            ServletOutputStream outputStream2 = response2.getOutputStream();
                            String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName4 = loadFileName3.replace("+", " ");
                            response2.setContentType("Content-type: applicationnd.ms-excel");
                            response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xls");
                            response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte2 = new byte[1024];
                            FileInputStream in2 = new FileInputStream(excelFile);
                            while (true) {
                                int n2 = in2.read(tempByte2);
                                if (n2 == -1) {
                                    break;
                                }
                                try {
                                    outputStream2.write(tempByte2, 0, n2);
                                } catch (Exception e5) {
                                    this.log.error("保存未成功", e5);
                                }
                            }
                            outputStream2.flush();
                            outputStream2.close();
                            in2.close();
                        }
                    } catch (WriteException e6) {
                        e6.printStackTrace();
                    }
                }
            } catch (Throwable th) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response3 = ServletActionContext.getResponse();
                            response3.reset();
                            ServletOutputStream outputStream3 = response3.getOutputStream();
                            String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName6 = loadFileName5.replace("+", " ");
                            response3.setContentType("Content-type: applicationnd.ms-excel");
                            response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xls");
                            response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte3 = new byte[1024];
                            FileInputStream in3 = new FileInputStream(excelFile);
                            while (true) {
                                int n3 = in3.read(tempByte3);
                                if (n3 == -1) {
                                    break;
                                }
                                try {
                                    outputStream3.write(tempByte3, 0, n3);
                                } catch (Exception e7) {
                                    this.log.error("保存未成功", e7);
                                }
                            }
                            outputStream3.flush();
                            outputStream3.close();
                            in3.close();
                        }
                    } catch (WriteException e8) {
                        e8.printStackTrace();
                        throw th;
                    }
                }
                throw th;
            }
        } catch (Exception e9) {
            e9.printStackTrace();
        }
        return null;
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String c15_exportgetData(String examNum, String gradeNum, String schoolNum, String subjectNum, String classNum, String studentId, String studentType, String type, String source, String step, String sNum, String c_exam, String rpt_name, String isMoreSchool, String rptTitle, String isHistory, String isSaveWrite, String dirPath, String uri, String userNum, String schName, String gradeName, String className, String subjectName, String imgRoot, String agent, String rangefrom, String rangeto) {
        String folderPath = "ExportFolder/reportExcel" + userNum;
        String str = "reportExcel" + userNum;
        String str2 = "reportExcel" + userNum;
        String excelName = (null == gradeName || "".equals(gradeName)) ? rpt_name + "_" + gradeNum : rpt_name + "_" + gradeName;
        if (null != classNum && !"".equals(classNum) && !classNum.contains(Const.STRING_SEPERATOR)) {
            excelName = (null == className || "".equals(className)) ? excelName + "_" + classNum : excelName + "_" + className;
        }
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        try {
            WritableWorkbook wwBook = Workbook.createWorkbook(excelFile);
            WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
            biaotis1.setAlignment(Alignment.LEFT);
            biaotis1.setVerticalAlignment(VerticalAlignment.CENTRE);
            WritableFont titles = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat title = new WritableCellFormat(titles);
            title.setAlignment(Alignment.LEFT);
            title.setVerticalAlignment(VerticalAlignment.CENTRE);
            title.setWrap(true);
            WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            WritableCellFormat cFormat1 = new WritableCellFormat(font1);
            cFormat1.setAlignment(Alignment.CENTRE);
            cFormat1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1.setBackground(Const.titleBackground_color);
            cFormat1.setWrap(true);
            WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat2 = new WritableCellFormat(font2);
            cFormat2.setAlignment(Alignment.CENTRE);
            cFormat2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2.setBackground(Const.textOuBackGround_color);
            cFormat2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2.setWrap(true);
            WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat3 = new WritableCellFormat(font3);
            cFormat3.setAlignment(Alignment.CENTRE);
            cFormat3.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3.setBackground(Const.textJiBackGround_color);
            cFormat3.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3.setWrap(true);
            List quest = this.c15.getAverageRange(examNum, gradeNum, schoolNum, classNum, type, studentType, source, rangefrom, rangeto, step);
            List quest2 = this.c15.getAverageRange_subject(examNum, gradeNum, schoolNum, classNum, type, studentType, source, rangefrom, rangeto, step);
            try {
                WritableSheet sheet = wwBook.createSheet(rpt_name, 0);
                sheet.getSettings().setShowGridLines(false);
                try {
                    Label biaotou = new Label(0, 0, rpt_name, biaotis1);
                    sheet.addCell(biaotou);
                    List<Subject> list1 = (List) quest.get(0);
                    List<Student> list2 = (List) quest.get(1);
                    List<AjaxData> list3 = (List) quest.get(2);
                    List<Class> list4 = (List) quest.get(3);
                    new DecimalFormat("0.0");
                    Label xinxi = new Label(0, 1, rptTitle, title);
                    sheet.addCell(xinxi);
                    int tableUseRowNum = 0;
                    Label classAverage = new Label(0, 2, "由" + rangefrom + "至" + rangeto + "名平均分（按班级维度）", cFormat1);
                    sheet.addCell(classAverage);
                    sheet.setRowView(1, Const.height_500);
                    sheet.mergeCells(0, 0, list1.size() + 1, 0);
                    sheet.mergeCells(0, 1, list1.size() + 1, 1);
                    sheet.mergeCells(0, 2, list1.size() + 1, 2);
                    Label banji = new Label(0, 3, "班级", cFormat1);
                    sheet.addCell(banji);
                    Label banjirank = new Label(1, 3, "班级名次", cFormat1);
                    sheet.addCell(banjirank);
                    for (int i = 0; i < list1.size(); i++) {
                        Label qishi = new Label(i + 2, 3, list1.get(i).getSubjectName(), cFormat1);
                        sheet.addCell(qishi);
                    }
                    for (int k = 0; k < list4.size(); k++) {
                        if (k % 2 == 0) {
                            Label className_title = new Label(0, (list3.size() * k) + 4, list4.get(k).getClassName(), cFormat3);
                            sheet.addCell(className_title);
                            sheet.mergeCells(0, (list3.size() * k) + 4, 0, (list3.size() * (k + 1)) + 3);
                            for (int l = 0; l < list3.size(); l++) {
                                Label duan = new Label(1, (list3.size() * k) + 4 + l, list3.get(l).getNum(), cFormat3);
                                sheet.addCell(duan);
                                for (int s = 0; s < list1.size(); s++) {
                                    for (int d = 0; d < list2.size(); d++) {
                                        if (list1.get(s).getSubjectName().equals(list2.get(d).getSubjectName()) && list1.get(s).getExt1().equals(list2.get(d).getExt2()) && list4.get(k).getClassNum().equals(String.valueOf(list2.get(d).getClassNum())) && list4.get(k).getClassName().equals(list2.get(d).getClassName()) && list3.get(l).getNum().equals(list2.get(d).getExt1())) {
                                            if (list2.get(d).getExt3() == "" || list2.get(d).getExt3() == null) {
                                                Blank averagedata = new Blank(s + 2, (list3.size() * k) + 4 + l, cFormat3);
                                                sheet.addCell(averagedata);
                                            } else {
                                                Number averagedata2 = new Number(s + 2, (list3.size() * k) + 4 + l, Double.parseDouble(list2.get(d).getExt3()), cFormat3);
                                                sheet.addCell(averagedata2);
                                            }
                                            tableUseRowNum = (list3.size() * k) + 4 + l;
                                        }
                                    }
                                }
                            }
                        } else {
                            Label className_title2 = new Label(0, (list3.size() * k) + 4, list4.get(k).getClassName(), cFormat2);
                            sheet.addCell(className_title2);
                            sheet.mergeCells(0, (list3.size() * k) + 4, 0, (list3.size() * (k + 1)) + 3);
                            for (int l2 = 0; l2 < list3.size(); l2++) {
                                Label duan2 = new Label(1, (list3.size() * k) + 4 + l2, list3.get(l2).getNum(), cFormat2);
                                sheet.addCell(duan2);
                                for (int s2 = 0; s2 < list1.size(); s2++) {
                                    for (int d2 = 0; d2 < list2.size(); d2++) {
                                        if (list1.get(s2).getSubjectName().equals(list2.get(d2).getSubjectName()) && list1.get(s2).getExt1().equals(list2.get(d2).getExt2()) && list4.get(k).getClassNum().equals(String.valueOf(list2.get(d2).getClassNum())) && list4.get(k).getClassName().equals(list2.get(d2).getClassName()) && list3.get(l2).getNum().equals(list2.get(d2).getExt1())) {
                                            if (list2.get(d2).getExt3() == "" || list2.get(d2).getExt3() == null) {
                                                Blank averagedata3 = new Blank(s2 + 2, (list3.size() * k) + 4 + l2, cFormat2);
                                                sheet.addCell(averagedata3);
                                            } else {
                                                Number averagedata4 = new Number(s2 + 2, (list3.size() * k) + 4 + l2, Double.parseDouble(list2.get(d2).getExt3()), cFormat2);
                                                sheet.addCell(averagedata4);
                                            }
                                            tableUseRowNum = (list3.size() * k) + 4 + l2;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    List<Subject> list12 = (List) quest2.get(0);
                    List<Student> list22 = (List) quest2.get(1);
                    List<AjaxData> list32 = (List) quest2.get(2);
                    List<Class> list42 = (List) quest2.get(3);
                    Label classAverage2 = new Label(0, tableUseRowNum + 2, "由" + rangefrom + "至" + rangeto + "名平均分（按科目维度）", cFormat1);
                    sheet.addCell(classAverage2);
                    sheet.mergeCells(0, tableUseRowNum + 2, list12.size() + 1, tableUseRowNum + 2);
                    Label banji2 = new Label(0, 3 + tableUseRowNum, "班级", cFormat1);
                    sheet.addCell(banji2);
                    Label banjirank2 = new Label(1, 3 + tableUseRowNum, "班级名次", cFormat1);
                    sheet.addCell(banjirank2);
                    for (int i2 = 0; i2 < list12.size(); i2++) {
                        Label qishi2 = new Label(i2 + 2, 3 + tableUseRowNum, list12.get(i2).getSubjectName(), cFormat1);
                        sheet.addCell(qishi2);
                    }
                    Label tishi = new Label(0, (list32.size() * list42.size()) + 4 + tableUseRowNum, "注：班级纬度的报表表示按总分排名的各名次段学生的各科平均分，学科纬度的报表表示按各学科排名的各名次段学生的各科平均分。 ", title);
                    sheet.addCell(tishi);
                    sheet.mergeCells(0, (list32.size() * list42.size()) + 4 + tableUseRowNum, list12.size() + 1, (list32.size() * list42.size()) + 4 + tableUseRowNum);
                    for (int k2 = 0; k2 < list42.size(); k2++) {
                        if (k2 % 2 == 0) {
                            Label className_title3 = new Label(0, (list32.size() * k2) + 4 + tableUseRowNum, list42.get(k2).getClassName(), cFormat3);
                            sheet.addCell(className_title3);
                            sheet.mergeCells(0, (list32.size() * k2) + 4 + tableUseRowNum, 0, (list32.size() * (k2 + 1)) + 3 + tableUseRowNum);
                            for (int l3 = 0; l3 < list32.size(); l3++) {
                                Label duan3 = new Label(1, (list32.size() * k2) + 4 + l3 + tableUseRowNum, list32.get(l3).getNum(), cFormat3);
                                sheet.addCell(duan3);
                                for (int s3 = 0; s3 < list12.size(); s3++) {
                                    for (int d3 = 0; d3 < list22.size(); d3++) {
                                        if (list12.get(s3).getSubjectName().equals(list22.get(d3).getSubjectName()) && list12.get(s3).getExt1().equals(list22.get(d3).getExt2()) && list42.get(k2).getClassNum().equals(String.valueOf(list22.get(d3).getClassNum())) && list42.get(k2).getClassName().equals(list22.get(d3).getClassName()) && list32.get(l3).getNum().equals(list22.get(d3).getExt1())) {
                                            if (list22.get(d3).getExt3() == "" || list22.get(d3).getExt3() == null) {
                                                Blank averagedata5 = new Blank(s3 + 2, (list32.size() * k2) + 4 + l3 + tableUseRowNum, cFormat3);
                                                sheet.addCell(averagedata5);
                                            } else {
                                                Number averagedata6 = new Number(s3 + 2, (list32.size() * k2) + 4 + l3 + tableUseRowNum, Double.parseDouble(list22.get(d3).getExt3()), cFormat3);
                                                sheet.addCell(averagedata6);
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            Label className_title4 = new Label(0, (list32.size() * k2) + 4 + tableUseRowNum, list42.get(k2).getClassName(), cFormat2);
                            sheet.addCell(className_title4);
                            sheet.mergeCells(0, (list32.size() * k2) + 4 + tableUseRowNum, 0, (list32.size() * (k2 + 1)) + 3 + tableUseRowNum);
                            for (int l4 = 0; l4 < list32.size(); l4++) {
                                Label duan4 = new Label(1, (list32.size() * k2) + 4 + l4 + tableUseRowNum, list32.get(l4).getNum(), cFormat2);
                                sheet.addCell(duan4);
                                for (int s4 = 0; s4 < list12.size(); s4++) {
                                    for (int d4 = 0; d4 < list22.size(); d4++) {
                                        if (list12.get(s4).getSubjectName().equals(list22.get(d4).getSubjectName()) && list12.get(s4).getExt1().equals(list22.get(d4).getExt2()) && list42.get(k2).getClassNum().equals(String.valueOf(list22.get(d4).getClassNum())) && list42.get(k2).getClassName().equals(list22.get(d4).getClassName()) && list32.get(l4).getNum().equals(list22.get(d4).getExt1())) {
                                            if (list22.get(d4).getExt3() == "" || list22.get(d4).getExt3() == null) {
                                                Blank averagedata7 = new Blank(s4 + 2, (list32.size() * k2) + 4 + l4 + tableUseRowNum, cFormat2);
                                                sheet.addCell(averagedata7);
                                            } else {
                                                Number averagedata8 = new Number(s4 + 2, (list32.size() * k2) + 4 + l4 + tableUseRowNum, Double.parseDouble(list22.get(d4).getExt3()), cFormat2);
                                                sheet.addCell(averagedata8);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                wwBook.write();
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response = ServletActionContext.getResponse();
                            response.reset();
                            ServletOutputStream outputStream = response.getOutputStream();
                            String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName2 = loadFileName.replace("+", " ");
                            response.setContentType("Content-type: applicationnd.ms-excel");
                            response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xls");
                            response.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte = new byte[1024];
                            FileInputStream in = new FileInputStream(excelFile);
                            while (true) {
                                int n = in.read(tempByte);
                                if (n == -1) {
                                    break;
                                }
                                try {
                                    outputStream.write(tempByte, 0, n);
                                } catch (Exception e2) {
                                    this.log.error("保存未成功", e2);
                                }
                            }
                            outputStream.flush();
                            outputStream.close();
                            in.close();
                        }
                    } catch (WriteException e3) {
                        e3.printStackTrace();
                    }
                }
            } catch (Exception e4) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response2 = ServletActionContext.getResponse();
                            response2.reset();
                            ServletOutputStream outputStream2 = response2.getOutputStream();
                            String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName4 = loadFileName3.replace("+", " ");
                            response2.setContentType("Content-type: applicationnd.ms-excel");
                            response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xls");
                            response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte2 = new byte[1024];
                            FileInputStream in2 = new FileInputStream(excelFile);
                            while (true) {
                                int n2 = in2.read(tempByte2);
                                if (n2 == -1) {
                                    break;
                                }
                                try {
                                    outputStream2.write(tempByte2, 0, n2);
                                } catch (Exception e5) {
                                    this.log.error("保存未成功", e5);
                                }
                            }
                            outputStream2.flush();
                            outputStream2.close();
                            in2.close();
                        }
                    } catch (WriteException e6) {
                        e6.printStackTrace();
                    }
                }
            } catch (Throwable th) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response3 = ServletActionContext.getResponse();
                            response3.reset();
                            ServletOutputStream outputStream3 = response3.getOutputStream();
                            String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName6 = loadFileName5.replace("+", " ");
                            response3.setContentType("Content-type: applicationnd.ms-excel");
                            response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xls");
                            response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte3 = new byte[1024];
                            FileInputStream in3 = new FileInputStream(excelFile);
                            while (true) {
                                int n3 = in3.read(tempByte3);
                                if (n3 == -1) {
                                    break;
                                }
                                try {
                                    outputStream3.write(tempByte3, 0, n3);
                                } catch (Exception e7) {
                                    this.log.error("保存未成功", e7);
                                }
                            }
                            outputStream3.flush();
                            outputStream3.close();
                            in3.close();
                        }
                    } catch (WriteException e8) {
                        e8.printStackTrace();
                        throw th;
                    }
                }
                throw th;
            }
        } catch (Exception e9) {
            e9.printStackTrace();
        }
        return null;
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String c16_exportgetData(String examNum, String gradeNum, String schoolNum, String subjectNum, String classNum, String studentId, String studentType, String type, String source, String step, String sNum, String c_exam, String rpt_name, String isMoreSchool, String rptTitle, String isHistory, String isSaveWrite, String dirPath, String uri, String userNum, String schName, String gradeName, String className, String subjectName, String imgRoot, String agent, String rangefrom, String rangeto, String qNum, String islevelclass) {
        String folderPath = "ExportFolder/reportExcel" + userNum;
        String str = "reportExcel" + userNum;
        String str2 = "reportExcel" + userNum;
        String excelName = (null == gradeName || "".equals(gradeName)) ? rpt_name + "_" + gradeNum : rpt_name + "_" + gradeName;
        if (null != classNum && !"".equals(classNum) && !classNum.contains(Const.STRING_SEPERATOR)) {
            excelName = (null == className || "".equals(className)) ? excelName + "_" + classNum : excelName + "_" + className;
        }
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        try {
            WritableWorkbook wwBook = Workbook.createWorkbook(excelFile);
            WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
            biaotis1.setAlignment(Alignment.LEFT);
            biaotis1.setVerticalAlignment(VerticalAlignment.CENTRE);
            WritableFont titles = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat title = new WritableCellFormat(titles);
            title.setAlignment(Alignment.LEFT);
            title.setVerticalAlignment(VerticalAlignment.CENTRE);
            title.setWrap(true);
            WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            WritableCellFormat cFormat1 = new WritableCellFormat(font1);
            cFormat1.setAlignment(Alignment.CENTRE);
            cFormat1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1.setBackground(Const.titleBackground_color);
            cFormat1.setWrap(true);
            WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            CellFormat writableCellFormat = new WritableCellFormat(font2);
            writableCellFormat.setAlignment(Alignment.CENTRE);
            writableCellFormat.setVerticalAlignment(VerticalAlignment.CENTRE);
            writableCellFormat.setBackground(Const.textOuBackGround_color);
            writableCellFormat.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            writableCellFormat.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            writableCellFormat.setBorder(Border.LEFT, BorderLineStyle.THIN);
            writableCellFormat.setBorder(Border.TOP, BorderLineStyle.THIN);
            writableCellFormat.setWrap(true);
            WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            CellFormat writableCellFormat2 = new WritableCellFormat(font3);
            writableCellFormat2.setAlignment(Alignment.CENTRE);
            writableCellFormat2.setVerticalAlignment(VerticalAlignment.CENTRE);
            writableCellFormat2.setBackground(Const.textJiBackGround_color);
            writableCellFormat2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            writableCellFormat2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            writableCellFormat2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            writableCellFormat2.setBorder(Border.TOP, BorderLineStyle.THIN);
            writableCellFormat2.setWrap(true);
            List quest = this.c16.getSubjectAllQuery(examNum, gradeNum, schoolNum, classNum, type, studentType, source, subjectNum, qNum, islevelclass);
            try {
                try {
                    WritableSheet sheet = wwBook.createSheet(rpt_name, 0);
                    sheet.getSettings().setShowGridLines(false);
                    try {
                        Label biaotou = new Label(0, 0, rpt_name, biaotis1);
                        sheet.addCell(biaotou);
                        Label xinxi = new Label(0, 1, rptTitle, title);
                        sheet.addCell(xinxi);
                        sheet.setRowView(1, Const.height_500);
                        sheet.mergeCells(0, 0, 10, 0);
                        sheet.mergeCells(0, 1, 10, 1);
                        String[] classList = classNum.split(Const.STRING_SEPERATOR);
                        int jiange = 3 + (1 * classList.length);
                        int tableHeader = 2;
                        for (int i = 0; i < quest.size(); i++) {
                            List<Gradelevel> tableList = (List) quest.get(i);
                            if (tableList.get(0).getNum() != null) {
                                sheet.mergeCells(0, tableHeader, 10, tableHeader);
                                Label classAverage = new Label(0, tableHeader, "T" + tableList.get(0).getNum(), cFormat1);
                                sheet.addCell(classAverage);
                                Label banji = new Label(0, tableHeader + 1, "班级", cFormat1);
                                sheet.addCell(banji);
                                Label teacherName = new Label(1, tableHeader + 1, "教师姓名", cFormat1);
                                sheet.addCell(teacherName);
                                Label numOfStudent = new Label(2, tableHeader + 1, "实考人数", cFormat1);
                                sheet.addCell(numOfStudent);
                                Label average = new Label(3, tableHeader + 1, "平均分", cFormat1);
                                sheet.addCell(average);
                                Label excellence = new Label(4, tableHeader + 1, "优秀人数", cFormat1);
                                sheet.addCell(excellence);
                                Label pass = new Label(5, tableHeader + 1, "及格人数", cFormat1);
                                sheet.addCell(pass);
                                Label lowScore = new Label(6, tableHeader + 1, "低分人数", cFormat1);
                                sheet.addCell(lowScore);
                                Label fronttwo = new Label(7, tableHeader + 1, "前20%人数", cFormat1);
                                sheet.addCell(fronttwo);
                                Label frontfour = new Label(8, tableHeader + 1, "前40%人数", cFormat1);
                                sheet.addCell(frontfour);
                                Label frontsix = new Label(9, tableHeader + 1, "前60%人数", cFormat1);
                                sheet.addCell(frontsix);
                                Label backtwo = new Label(10, tableHeader + 1, "后20%人数", cFormat1);
                                sheet.addCell(backtwo);
                                for (int j = 0; j < tableList.size(); j++) {
                                    CellFormat cellFormat = j % 2 == 0 ? writableCellFormat2 : writableCellFormat;
                                    Gradelevel gradelevel = tableList.get(j);
                                    Label banji1 = new Label(0, tableHeader + 2 + j, gradelevel.getClassName(), cellFormat);
                                    sheet.addCell(banji1);
                                    Label teacherName1 = new Label(1, tableHeader + 2 + j, gradelevel.getTeacherName(), cellFormat);
                                    sheet.addCell(teacherName1);
                                    Label numOfStudent1 = new Label(2, tableHeader + 2 + j, gradelevel.getNumOfStudent(), cellFormat);
                                    sheet.addCell(numOfStudent1);
                                    Label average1 = new Label(3, tableHeader + 2 + j, gradelevel.getAverage() + "", cellFormat);
                                    sheet.addCell(average1);
                                    Label excellence1 = new Label(4, tableHeader + 2 + j, gradelevel.getExcellence(), cellFormat);
                                    sheet.addCell(excellence1);
                                    Label pass1 = new Label(5, tableHeader + 2 + j, gradelevel.getPass(), cellFormat);
                                    sheet.addCell(pass1);
                                    Label lowScore1 = new Label(6, tableHeader + 2 + j, gradelevel.getLowscoreNum(), cellFormat);
                                    sheet.addCell(lowScore1);
                                    Label fronttwo1 = new Label(7, tableHeader + 2 + j, gradelevel.getExt1(), cellFormat);
                                    sheet.addCell(fronttwo1);
                                    Label frontfour1 = new Label(8, tableHeader + 2 + j, gradelevel.getExt2(), cellFormat);
                                    sheet.addCell(frontfour1);
                                    Label frontsix1 = new Label(9, tableHeader + 2 + j, gradelevel.getExt3(), cellFormat);
                                    sheet.addCell(frontsix1);
                                    Label backtwo1 = new Label(10, tableHeader + 2 + j, gradelevel.getExt4(), cellFormat);
                                    sheet.addCell(backtwo1);
                                }
                                tableHeader += jiange;
                            }
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    wwBook.write();
                    if (wwBook != null) {
                        try {
                            wwBook.close();
                            if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                                HttpServletResponse response = ServletActionContext.getResponse();
                                response.reset();
                                ServletOutputStream outputStream = response.getOutputStream();
                                String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                String loadFileName2 = loadFileName.replace("+", " ");
                                response.setContentType("Content-type: applicationnd.ms-excel");
                                response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xls");
                                response.setHeader("Content-length", String.valueOf(excelFile.length()));
                                byte[] tempByte = new byte[1024];
                                FileInputStream in = new FileInputStream(excelFile);
                                while (true) {
                                    int n = in.read(tempByte);
                                    if (n == -1) {
                                        break;
                                    }
                                    try {
                                        outputStream.write(tempByte, 0, n);
                                    } catch (Exception e2) {
                                        this.log.error("保存未成功", e2);
                                    }
                                }
                                outputStream.flush();
                                outputStream.close();
                                in.close();
                            }
                        } catch (WriteException e3) {
                            e3.printStackTrace();
                        }
                    }
                } catch (Throwable th) {
                    if (wwBook != null) {
                        try {
                            wwBook.close();
                            if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                                HttpServletResponse response2 = ServletActionContext.getResponse();
                                response2.reset();
                                ServletOutputStream outputStream2 = response2.getOutputStream();
                                String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                String loadFileName4 = loadFileName3.replace("+", " ");
                                response2.setContentType("Content-type: applicationnd.ms-excel");
                                response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xls");
                                response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                                byte[] tempByte2 = new byte[1024];
                                FileInputStream in2 = new FileInputStream(excelFile);
                                while (true) {
                                    int n2 = in2.read(tempByte2);
                                    if (n2 == -1) {
                                        break;
                                    }
                                    try {
                                        outputStream2.write(tempByte2, 0, n2);
                                    } catch (Exception e4) {
                                        this.log.error("保存未成功", e4);
                                    }
                                }
                                outputStream2.flush();
                                outputStream2.close();
                                in2.close();
                            }
                        } catch (WriteException e5) {
                            e5.printStackTrace();
                            throw th;
                        }
                    }
                    throw th;
                }
            } catch (Exception e6) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response3 = ServletActionContext.getResponse();
                            response3.reset();
                            ServletOutputStream outputStream3 = response3.getOutputStream();
                            String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName6 = loadFileName5.replace("+", " ");
                            response3.setContentType("Content-type: applicationnd.ms-excel");
                            response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xls");
                            response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte3 = new byte[1024];
                            FileInputStream in3 = new FileInputStream(excelFile);
                            while (true) {
                                int n3 = in3.read(tempByte3);
                                if (n3 == -1) {
                                    break;
                                }
                                try {
                                    outputStream3.write(tempByte3, 0, n3);
                                } catch (Exception e7) {
                                    this.log.error("保存未成功", e7);
                                }
                            }
                            outputStream3.flush();
                            outputStream3.close();
                            in3.close();
                        }
                    } catch (WriteException e8) {
                        e8.printStackTrace();
                    }
                }
            }
        } catch (Exception e9) {
            e9.printStackTrace();
        }
        return null;
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String c20_exportgetData(String examNum, String gradeNum, String schoolNum, String subjectNum, String classNum, String studentId, String studentType, String type, String source, String sNum, String c_exam, String rpt_name, String isMoreSchool, String rptTitle, String isHistory, String isSaveWrite, String dirPath, String uri, String userNum, String schName, String gradeName, String className, String subjectName, String imgRoot, String agent, String islevelclass) {
        String folderPath = "ExportFolder/reportExcel" + userNum;
        String str = "reportExcel" + userNum;
        String str2 = "reportExcel" + userNum;
        String excelName = (null == gradeName || "".equals(gradeName)) ? rpt_name + "_" + gradeNum : rpt_name + "_" + gradeName;
        if (null != classNum && !"".equals(classNum) && !classNum.contains(Const.STRING_SEPERATOR)) {
            excelName = (null == className || "".equals(className)) ? excelName + "_" + classNum : excelName + "_" + className;
        }
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        try {
            WritableWorkbook wwBook = Workbook.createWorkbook(excelFile);
            WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Colour.BLACK);
            WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
            biaotis1.setAlignment(Alignment.LEFT);
            biaotis1.setVerticalAlignment(VerticalAlignment.CENTRE);
            WritableFont titles = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Colour.BLACK);
            WritableCellFormat title = new WritableCellFormat(titles);
            title.setAlignment(Alignment.LEFT);
            title.setVerticalAlignment(VerticalAlignment.CENTRE);
            title.setWrap(true);
            WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Colour.BLACK);
            WritableCellFormat cFormat1 = new WritableCellFormat(font1);
            cFormat1.setAlignment(Alignment.CENTRE);
            cFormat1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1.setBackground(Const.jxl_head);
            cFormat1.setWrap(true);
            WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Colour.BLACK);
            CellFormat writableCellFormat = new WritableCellFormat(font2);
            writableCellFormat.setAlignment(Alignment.CENTRE);
            writableCellFormat.setVerticalAlignment(VerticalAlignment.CENTRE);
            writableCellFormat.setBackground(Const.jxlcolo_row2);
            writableCellFormat.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            writableCellFormat.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            writableCellFormat.setBorder(Border.LEFT, BorderLineStyle.THIN);
            writableCellFormat.setBorder(Border.TOP, BorderLineStyle.THIN);
            writableCellFormat.setWrap(true);
            WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Colour.BLACK);
            CellFormat writableCellFormat2 = new WritableCellFormat(font3);
            writableCellFormat2.setAlignment(Alignment.CENTRE);
            writableCellFormat2.setVerticalAlignment(VerticalAlignment.CENTRE);
            writableCellFormat2.setBackground(Const.jxlcolo_row1);
            writableCellFormat2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            writableCellFormat2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            writableCellFormat2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            writableCellFormat2.setBorder(Border.TOP, BorderLineStyle.THIN);
            writableCellFormat2.setWrap(true);
            List questAll = this.c20.getClassQualityAnalyze(examNum, gradeNum, schoolNum, type, studentType, source, islevelclass);
            try {
                WritableSheet sheet = wwBook.createSheet(rpt_name, 0);
                sheet.getSettings().setShowGridLines(false);
                try {
                    Label biaotou = new Label(0, 0, rpt_name, biaotis1);
                    sheet.addCell(biaotou);
                    Label xinxi = new Label(0, 1, rptTitle, title);
                    sheet.addCell(xinxi);
                    sheet.setRowView(1, Const.height_500);
                    sheet.mergeCells(0, 0, 10, 0);
                    sheet.mergeCells(0, 1, 10, 1);
                    int clabegin = 2 + 2;
                    int begin = 2 + 2;
                    sheet.mergeCells(0, 2, 10, 2);
                    Label classType = new Label(0, 2 + 1, "班级类型", cFormat1);
                    sheet.addCell(classType);
                    Label subject = new Label(1, 2 + 1, "科目", cFormat1);
                    sheet.addCell(subject);
                    Label banji = new Label(2, 2 + 1, "班级", cFormat1);
                    sheet.addCell(banji);
                    Label teacherName = new Label(3, 2 + 1, "教师", cFormat1);
                    sheet.addCell(teacherName);
                    Label numOfStudent = new Label(4, 2 + 1, "实考", cFormat1);
                    sheet.addCell(numOfStudent);
                    Label ninety = new Label(5, 2 + 1, "90%以上", cFormat1);
                    sheet.addCell(ninety);
                    Label eightNine = new Label(6, 2 + 1, "80%-90%", cFormat1);
                    sheet.addCell(eightNine);
                    Label sevenEight = new Label(7, 2 + 1, "70%-80%", cFormat1);
                    sheet.addCell(sevenEight);
                    Label sixSeven = new Label(8, 2 + 1, "60%-70%", cFormat1);
                    sheet.addCell(sixSeven);
                    Label six = new Label(9, 2 + 1, "不及格", cFormat1);
                    sheet.addCell(six);
                    Label maxScore = new Label(10, 2 + 1, "最高分", cFormat1);
                    sheet.addCell(maxScore);
                    Label maxName = new Label(11, 2 + 1, "最高分姓名", cFormat1);
                    sheet.addCell(maxName);
                    Label minScore = new Label(12, 2 + 1, "最低分", cFormat1);
                    sheet.addCell(minScore);
                    Label minName = new Label(13, 2 + 1, "最低分姓名", cFormat1);
                    sheet.addCell(minName);
                    Label pass = new Label(14, 2 + 1, "及格人数", cFormat1);
                    sheet.addCell(pass);
                    Label jigelv = new Label(15, 2 + 1, "及格率", cFormat1);
                    sheet.addCell(jigelv);
                    Label morejigelv = new Label(16, 2 + 1, "及格率超年级", cFormat1);
                    sheet.addCell(morejigelv);
                    Label avg = new Label(17, 2 + 1, "平均分", cFormat1);
                    sheet.addCell(avg);
                    Label moreavg = new Label(18, 2 + 1, "平均分超年级", cFormat1);
                    sheet.addCell(moreavg);
                    Label rank = new Label(19, 2 + 1, "平均分排名", cFormat1);
                    sheet.addCell(rank);
                    Label youfenlv = new Label(20, 2 + 1, "优分率", cFormat1);
                    sheet.addCell(youfenlv);
                    Label moreyoufenlv = new Label(21, 2 + 1, "优分率超年级", cFormat1);
                    sheet.addCell(moreyoufenlv);
                    Label topTen = new Label(22, 2 + 1, "前十名平均分", cFormat1);
                    sheet.addCell(topTen);
                    Label moretopTen = new Label(23, 2 + 1, "前十名平均分超年级", cFormat1);
                    sheet.addCell(moretopTen);
                    Label topRank = new Label(24, 2 + 1, "前十名平均分排名", cFormat1);
                    sheet.addCell(topRank);
                    Label behindTen = new Label(25, 2 + 1, "后十名平均分", cFormat1);
                    sheet.addCell(behindTen);
                    Label morebehindTen = new Label(26, 2 + 1, "后十名平均分超年级", cFormat1);
                    sheet.addCell(morebehindTen);
                    Label behindRank = new Label(27, 2 + 1, "后十名平均分排名", cFormat1);
                    sheet.addCell(behindRank);
                    Label hjf = new Label(28, 2 + 1, "合均分", cFormat1);
                    sheet.addCell(hjf);
                    Label hjfRank = new Label(29, 2 + 1, "合均分排名", cFormat1);
                    sheet.addCell(hjfRank);
                    Label morehjf = new Label(30, 2 + 1, "合均分超年级", cFormat1);
                    sheet.addCell(morehjf);
                    List temp = (List) questAll.get(questAll.size() - 1);
                    for (int a = 0; a < questAll.size() - 1; a++) {
                        List quest = (List) questAll.get(a);
                        int claend = (begin + Integer.parseInt(String.valueOf(temp.get(a)))) - 1;
                        sheet.mergeCells(0, clabegin, 0, claend);
                        for (int i = 0; i < quest.size(); i++) {
                            List tableList = (List) quest.get(i);
                            int end = (begin + tableList.size()) - 1;
                            sheet.mergeCells(1, begin, 1, end);
                            for (int j = 0; j < tableList.size(); j++) {
                                CellFormat cellFormat = j % 2 == 0 ? writableCellFormat2 : writableCellFormat;
                                Object[] obj = (Object[]) tableList.get(j);
                                if ("".equals(obj[4]) || null == obj[4]) {
                                    obj[4] = "";
                                }
                                if ("总分".equals(obj[1])) {
                                    obj[1] = "班主任";
                                }
                                Label classType1 = new Label(0, begin + j, obj[26] + "", cellFormat);
                                sheet.addCell(classType1);
                                Label subject1 = new Label(1, begin + j, obj[1] + "", cellFormat);
                                sheet.addCell(subject1);
                                Label banji1 = new Label(2, begin + j, obj[3] + "", cellFormat);
                                sheet.addCell(banji1);
                                Label teacherName1 = new Label(3, begin + j, obj[4] + "", cellFormat);
                                sheet.addCell(teacherName1);
                                Label numOfStudent1 = new Label(4, begin + j, obj[5] + "", cellFormat);
                                sheet.addCell(numOfStudent1);
                                Label ninety1 = new Label(5, begin + j, obj[6] + "", cellFormat);
                                sheet.addCell(ninety1);
                                Label eightNine1 = new Label(6, begin + j, obj[7] + "", cellFormat);
                                sheet.addCell(eightNine1);
                                Label sevenEight1 = new Label(7, begin + j, obj[8] + "", cellFormat);
                                sheet.addCell(sevenEight1);
                                Label sixSeven1 = new Label(8, begin + j, obj[9] + "", cellFormat);
                                sheet.addCell(sixSeven1);
                                Label six1 = new Label(9, begin + j, obj[10] + "", cellFormat);
                                sheet.addCell(six1);
                                Label maxScore1 = new Label(10, begin + j, obj[11] + "", cellFormat);
                                sheet.addCell(maxScore1);
                                Label maxName1 = new Label(11, begin + j, obj[12] + "", cellFormat);
                                sheet.addCell(maxName1);
                                Label minScore1 = new Label(12, begin + j, obj[13] + "", cellFormat);
                                sheet.addCell(minScore1);
                                Label minName1 = new Label(13, begin + j, obj[14] + "", cellFormat);
                                sheet.addCell(minName1);
                                Label pass1 = new Label(14, begin + j, obj[15] + "", cellFormat);
                                sheet.addCell(pass1);
                                Label jigelv1 = new Label(15, begin + j, obj[16] + "", cellFormat);
                                sheet.addCell(jigelv1);
                                Label morejigelv1 = new Label(16, begin + j, obj[28] + "", cellFormat);
                                sheet.addCell(morejigelv1);
                                Label avg1 = new Label(17, begin + j, obj[17] + "", cellFormat);
                                sheet.addCell(avg1);
                                Label moreavg1 = new Label(18, begin + j, obj[29] + "", cellFormat);
                                sheet.addCell(moreavg1);
                                Label rank1 = new Label(19, begin + j, obj[18] + "", cellFormat);
                                sheet.addCell(rank1);
                                Label youfenlv1 = new Label(20, begin + j, obj[19] + "", cellFormat);
                                sheet.addCell(youfenlv1);
                                Label moreyoufenlv1 = new Label(21, begin + j, obj[30] + "", cellFormat);
                                sheet.addCell(moreyoufenlv1);
                                Label topTen1 = new Label(22, begin + j, obj[20] + "", cellFormat);
                                sheet.addCell(topTen1);
                                Label moretopTen1 = new Label(23, begin + j, obj[31] + "", cellFormat);
                                sheet.addCell(moretopTen1);
                                Label topRank1 = new Label(24, begin + j, obj[21] + "", cellFormat);
                                sheet.addCell(topRank1);
                                Label behindTen1 = new Label(25, begin + j, obj[22] + "", cellFormat);
                                sheet.addCell(behindTen1);
                                Label morebehindTen1 = new Label(26, begin + j, obj[32] + "", cellFormat);
                                sheet.addCell(morebehindTen1);
                                Label behindRank1 = new Label(27, begin + j, obj[23] + "", cellFormat);
                                sheet.addCell(behindRank1);
                                Label hjf1 = new Label(28, begin + j, obj[24] + "", cellFormat);
                                sheet.addCell(hjf1);
                                Label hjfRank1 = new Label(29, begin + j, obj[25] + "", cellFormat);
                                sheet.addCell(hjfRank1);
                                Label morehjf1 = new Label(30, begin + j, obj[33] + "", cellFormat);
                                sheet.addCell(morehjf1);
                            }
                            begin += tableList.size();
                        }
                        clabegin = claend + 1;
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                wwBook.write();
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response = ServletActionContext.getResponse();
                            response.reset();
                            ServletOutputStream outputStream = response.getOutputStream();
                            String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName2 = loadFileName.replace("+", " ");
                            response.setContentType("Content-type: applicationnd.ms-excel");
                            response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xls");
                            response.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte = new byte[1024];
                            FileInputStream in = new FileInputStream(excelFile);
                            while (true) {
                                int n = in.read(tempByte);
                                if (n == -1) {
                                    break;
                                }
                                try {
                                    outputStream.write(tempByte, 0, n);
                                } catch (Exception e2) {
                                    this.log.error("保存未成功", e2);
                                }
                            }
                            outputStream.flush();
                            outputStream.close();
                            in.close();
                        }
                    } catch (WriteException e3) {
                        e3.printStackTrace();
                    }
                }
            } catch (Exception e4) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response2 = ServletActionContext.getResponse();
                            response2.reset();
                            ServletOutputStream outputStream2 = response2.getOutputStream();
                            String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName4 = loadFileName3.replace("+", " ");
                            response2.setContentType("Content-type: applicationnd.ms-excel");
                            response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xls");
                            response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte2 = new byte[1024];
                            FileInputStream in2 = new FileInputStream(excelFile);
                            while (true) {
                                int n2 = in2.read(tempByte2);
                                if (n2 == -1) {
                                    break;
                                }
                                try {
                                    outputStream2.write(tempByte2, 0, n2);
                                } catch (Exception e5) {
                                    this.log.error("保存未成功", e5);
                                }
                            }
                            outputStream2.flush();
                            outputStream2.close();
                            in2.close();
                        }
                    } catch (WriteException e6) {
                        e6.printStackTrace();
                    }
                }
            } catch (Throwable th) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response3 = ServletActionContext.getResponse();
                            response3.reset();
                            ServletOutputStream outputStream3 = response3.getOutputStream();
                            String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName6 = loadFileName5.replace("+", " ");
                            response3.setContentType("Content-type: applicationnd.ms-excel");
                            response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xls");
                            response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte3 = new byte[1024];
                            FileInputStream in3 = new FileInputStream(excelFile);
                            while (true) {
                                int n3 = in3.read(tempByte3);
                                if (n3 == -1) {
                                    break;
                                }
                                try {
                                    outputStream3.write(tempByte3, 0, n3);
                                } catch (Exception e7) {
                                    this.log.error("保存未成功", e7);
                                }
                            }
                            outputStream3.flush();
                            outputStream3.close();
                            in3.close();
                        }
                    } catch (WriteException e8) {
                        e8.printStackTrace();
                        throw th;
                    }
                }
                throw th;
            }
        } catch (Exception e9) {
            e9.printStackTrace();
        }
        return null;
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String c7_exportgetData(String examNum, String gradeNum, String schoolNum, String subjectNum, String classNum, String studentId, String studentType, String type, String source, String step, String sNum, String c_exam, String rpt_name, String isMoreSchool, String rptTitle, String isHistory, String isSaveWrite, String dirPath, String uri, String userNum, String schName, String gradeName, String className, String subjectName, String imgRoot, String agent, String show) {
        String folderPath = "ExportFolder/reportExcel" + userNum;
        String str = "reportExcel" + userNum;
        String str2 = "reportExcel" + userNum;
        String excelName = (null == gradeName || "".equals(gradeName)) ? rpt_name + "_" + gradeNum : rpt_name + "_" + gradeName;
        if (null != classNum && !"".equals(classNum) && !classNum.contains(Const.STRING_SEPERATOR)) {
            excelName = (null == className || "".equals(className)) ? excelName + "_" + classNum : excelName + "_" + className;
        }
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        try {
            WritableWorkbook wwBook = Workbook.createWorkbook(excelFile);
            WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
            biaotis1.setAlignment(Alignment.LEFT);
            biaotis1.setVerticalAlignment(VerticalAlignment.CENTRE);
            WritableFont titles = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat title = new WritableCellFormat(titles);
            title.setAlignment(Alignment.LEFT);
            title.setVerticalAlignment(VerticalAlignment.CENTRE);
            title.setWrap(true);
            WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            WritableCellFormat cFormat1 = new WritableCellFormat(font1);
            cFormat1.setAlignment(Alignment.CENTRE);
            cFormat1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1.setBackground(Const.titleBackground_color);
            cFormat1.setWrap(true);
            WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat2 = new WritableCellFormat(font2);
            cFormat2.setAlignment(Alignment.CENTRE);
            cFormat2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2.setBackground(Const.textOuBackGround_color);
            cFormat2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2.setWrap(true);
            DateFormat df1 = new DateFormat("0.00%");
            WritableCellFormat cFormat2_0 = new WritableCellFormat(font2, df1);
            cFormat2_0.setAlignment(Alignment.CENTRE);
            cFormat2_0.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_0.setBackground(Const.textOuBackGround_color);
            cFormat2_0.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_0.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_0.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_0.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_0.setWrap(true);
            WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat3 = new WritableCellFormat(font3);
            cFormat3.setAlignment(Alignment.CENTRE);
            cFormat3.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3.setBackground(Const.textJiBackGround_color);
            cFormat3.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3.setWrap(true);
            WritableCellFormat cFormat3_0 = new WritableCellFormat(font3, df1);
            cFormat3_0.setAlignment(Alignment.CENTRE);
            cFormat3_0.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_0.setBackground(Const.textJiBackGround_color);
            cFormat3_0.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_0.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_0.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_0.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_0.setWrap(true);
            List quest = this.c7.getAllSubScoreRankcompare(examNum, "-1", gradeNum, schoolNum, Integer.valueOf(step).intValue(), type, studentType, c_exam, source);
            List<RptHeader> list1 = (List) quest.get(0);
            List<RptHeader> list2 = (List) quest.get(1);
            List<Exam> list3 = (List) quest.get(2);
            try {
                WritableSheet sheet = wwBook.createSheet(rpt_name, 0);
                sheet.getSettings().setShowGridLines(false);
                try {
                    Label biaotou = new Label(0, 0, rpt_name, biaotis1);
                    sheet.addCell(biaotou);
                    Label xinxi = new Label(0, 1, rptTitle, title);
                    sheet.addCell(xinxi);
                    sheet.setRowView(1, Const.height_500);
                    sheet.mergeCells(0, 0, list3.size() * 2, 0);
                    sheet.mergeCells(0, 1, list3.size() * 2, 1);
                    for (int j = 0; j < list3.size(); j++) {
                        Label examName = new Label((2 * j) + 1, 2, list3.get(j).getExamName(), cFormat1);
                        sheet.addCell(examName);
                        sheet.mergeCells((2 * j) + 1, 2, (2 * j) + 2, 2);
                        if (j == 0) {
                            Label fenduan = new Label(0, 2, "分数段", cFormat1);
                            sheet.addCell(fenduan);
                            sheet.mergeCells(0, 2, 0, 3);
                        }
                    }
                    for (int j2 = 0; j2 < list1.size(); j2++) {
                        if (j2 % 2 != 0) {
                            Label aa = new Label(0, 4 + j2, list1.get(j2).getName(), cFormat2);
                            sheet.addCell(aa);
                            int m = 0;
                            for (int p = 0; p < list3.size(); p++) {
                                for (int n = 0; n < list2.size(); n++) {
                                    if (list1.get(j2).getName().equals(list2.get(n).getName()) && list3.get(p).getExt1().equals(list2.get(n).getExamNum())) {
                                        Label renshu = new Label((2 * m) + 1, 3, "人数", cFormat1);
                                        sheet.addCell(renshu);
                                        Label bili = new Label((2 * m) + 2, 3, "比例", cFormat1);
                                        sheet.addCell(bili);
                                        Number a1 = new Number((2 * m) + 1, j2 + 4, Integer.valueOf(list2.get(n).getNumOfStudent()).intValue(), cFormat2);
                                        sheet.addCell(a1);
                                        Number a2 = new Number((2 * m) + 2, j2 + 4, list2.get(n).getPercent(), cFormat2_0);
                                        sheet.addCell(a2);
                                        m++;
                                    }
                                }
                            }
                        } else {
                            Label aa2 = new Label(0, 4 + j2, list1.get(j2).getName(), cFormat3);
                            sheet.addCell(aa2);
                            int m2 = 0;
                            for (int p2 = 0; p2 < list3.size(); p2++) {
                                for (int n2 = 0; n2 < list2.size(); n2++) {
                                    if (list1.get(j2).getName().equals(list2.get(n2).getName()) && list3.get(p2).getExt1().equals(list2.get(n2).getExamNum())) {
                                        Label renshu2 = new Label((2 * m2) + 1, 3, "人数", cFormat1);
                                        sheet.addCell(renshu2);
                                        Label bili2 = new Label((2 * m2) + 2, 3, "比例", cFormat1);
                                        sheet.addCell(bili2);
                                        Number a12 = new Number((2 * m2) + 1, j2 + 4, Integer.valueOf(list2.get(n2).getNumOfStudent()).intValue(), cFormat3);
                                        sheet.addCell(a12);
                                        Number a22 = new Number((2 * m2) + 2, j2 + 4, list2.get(n2).getPercent(), cFormat3_0);
                                        sheet.addCell(a22);
                                        m2++;
                                    }
                                }
                            }
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                wwBook.write();
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response = ServletActionContext.getResponse();
                            response.reset();
                            ServletOutputStream outputStream = response.getOutputStream();
                            String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName2 = loadFileName.replace("+", " ");
                            response.setContentType("Content-type: applicationnd.ms-excel");
                            response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xls");
                            response.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte = new byte[1024];
                            FileInputStream in = new FileInputStream(excelFile);
                            while (true) {
                                int n3 = in.read(tempByte);
                                if (n3 == -1) {
                                    break;
                                }
                                try {
                                    outputStream.write(tempByte, 0, n3);
                                } catch (Exception e2) {
                                    this.log.error("保存未成功", e2);
                                }
                            }
                            outputStream.flush();
                            outputStream.close();
                            in.close();
                        }
                    } catch (WriteException e3) {
                        e3.printStackTrace();
                    }
                }
            } catch (Exception e4) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response2 = ServletActionContext.getResponse();
                            response2.reset();
                            ServletOutputStream outputStream2 = response2.getOutputStream();
                            String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName4 = loadFileName3.replace("+", " ");
                            response2.setContentType("Content-type: applicationnd.ms-excel");
                            response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xls");
                            response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte2 = new byte[1024];
                            FileInputStream in2 = new FileInputStream(excelFile);
                            while (true) {
                                int n4 = in2.read(tempByte2);
                                if (n4 == -1) {
                                    break;
                                }
                                try {
                                    outputStream2.write(tempByte2, 0, n4);
                                } catch (Exception e5) {
                                    this.log.error("保存未成功", e5);
                                }
                            }
                            outputStream2.flush();
                            outputStream2.close();
                            in2.close();
                        }
                    } catch (WriteException e6) {
                        e6.printStackTrace();
                    }
                }
            } catch (Throwable th) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response3 = ServletActionContext.getResponse();
                            response3.reset();
                            ServletOutputStream outputStream3 = response3.getOutputStream();
                            String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName6 = loadFileName5.replace("+", " ");
                            response3.setContentType("Content-type: applicationnd.ms-excel");
                            response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xls");
                            response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte3 = new byte[1024];
                            FileInputStream in3 = new FileInputStream(excelFile);
                            while (true) {
                                int n5 = in3.read(tempByte3);
                                if (n5 == -1) {
                                    break;
                                }
                                try {
                                    outputStream3.write(tempByte3, 0, n5);
                                } catch (Exception e7) {
                                    this.log.error("保存未成功", e7);
                                }
                            }
                            outputStream3.flush();
                            outputStream3.close();
                            in3.close();
                        }
                    } catch (WriteException e8) {
                        e8.printStackTrace();
                        throw th;
                    }
                }
                throw th;
            }
        } catch (Exception e9) {
            e9.printStackTrace();
        }
        return null;
    }

    public File getSubChartImgFile_c7(String insertUser, List list, String lType, String dirPath) {
        subjectLineImage_c7(list, lType, insertUser);
        File file = new File(dirPath + File.separator + "tmpLinePng" + File.separator + insertUser + lType + ".png");
        return file;
    }

    public void subjectLineImage_c7(List<Gradelevel> quest, String lType, String insertUser) {
        List<RptHeader> list1 = quest.get(0);
        List<RptHeader> list2 = quest.get(1);
        List<Exam> list3 = quest.get(2);
        if (lType.equals("g7highScoreNum")) {
            String xName1 = String.valueOf("总分分段分布(人数)");
            String[] columnKeys1 = new String[list1.size()];
            String[] rowKeys1 = new String[list3.size()];
            double[][] data = new double[list3.size()][list1.size()];
            for (int i = 0; i < list1.size(); i++) {
                columnKeys1[i] = list1.get(i).getName();
            }
            Double.valueOf(0.0d);
            Double.valueOf(0.0d);
            List list_data = new ArrayList();
            for (int j = 0; j < list3.size(); j++) {
                int m = 0;
                rowKeys1[j] = list3.get(j).getExamName();
                for (int k = 0; k < list2.size(); k++) {
                    if (list3.get(j).getExt1().equals(list2.get(k).getExamNum())) {
                        data[j][m] = Double.parseDouble(list2.get(k).getNumOfStudent());
                        list_data.add(Double.valueOf(Double.parseDouble(list2.get(k).getNumOfStudent())));
                        m++;
                    }
                }
            }
            Double maxDesc = (Double) Collections.max(list_data);
            Double minDesc = (Double) Collections.min(list_data);
            Double count_unit = Double.valueOf((maxDesc.doubleValue() - minDesc.doubleValue()) / 5.0d);
            HttpServletResponse response = ServletActionContext.getResponse();
            response.reset();
            response.setContentType("image/jpeg");
            JFreeChart chart = this.lc.getLineChar(data, rowKeys1, columnKeys1, "", "", xName1, "#0.0", count_unit, Integer.valueOf(rowKeys1.length), "Y", "##.#");
            getChartImageFolder(chart, "tmpLinePng", Const.width_1100, Const.height_400, insertUser + lType);
            return;
        }
        String xName12 = String.valueOf("总分分段分布(比例)");
        String[] columnKeys12 = new String[list1.size()];
        String[] rowKeys12 = new String[list3.size()];
        double[][] data2 = new double[list3.size()][list1.size()];
        for (int i2 = 0; i2 < list1.size(); i2++) {
            columnKeys12[i2] = list1.get(i2).getName();
        }
        Double.valueOf(0.0d);
        Double.valueOf(0.0d);
        List list_data2 = new ArrayList();
        for (int j2 = 0; j2 < list3.size(); j2++) {
            int m2 = 0;
            rowKeys12[j2] = list3.get(j2).getExamName();
            for (int k2 = 0; k2 < list2.size(); k2++) {
                if (list3.get(j2).getExt1().equals(list2.get(k2).getExamNum())) {
                    data2[j2][m2] = list2.get(k2).getPercent() * 100.0d;
                    list_data2.add(Double.valueOf(list2.get(k2).getPercent() * 100.0d));
                    m2++;
                }
            }
        }
        Double maxDesc2 = (Double) Collections.max(list_data2);
        Double minDesc2 = (Double) Collections.min(list_data2);
        Double count_unit2 = Double.valueOf((maxDesc2.doubleValue() - minDesc2.doubleValue()) / 5.0d);
        HttpServletResponse response2 = ServletActionContext.getResponse();
        response2.reset();
        response2.setContentType("image/jpeg");
        JFreeChart chart2 = this.lc.getLineChar(data2, rowKeys12, columnKeys12, "", "", xName12, "#0.00", count_unit2, Integer.valueOf(rowKeys12.length), "Y", "##.##");
        getChartImageFolder(chart2, "tmpLinePng", Const.width_1100, Const.height_400, insertUser + lType);
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String c8_exportgetData(String examNum, String gradeNum, String schoolNum, String subjectNum, String classNum, String studentId, String studentType, String type, String source, String step, String sNum, String c_exam, String rpt_name, String isMoreSchool, String rptTitle, String isHistory, String isSaveWrite, String dirPath, String uri, String userNum, String schName, String gradeName, String className, String subjectName, String imgRoot, String agent, String show, String subCompose) {
        String folderPath = "ExportFolder/reportExcel" + userNum;
        String str = "reportExcel" + userNum;
        String str2 = "reportExcel" + userNum;
        String excelName = (null == gradeName || "".equals(gradeName)) ? rpt_name + "_" + gradeNum : rpt_name + "_" + gradeName;
        if (null != classNum && !"".equals(classNum) && !classNum.contains(Const.STRING_SEPERATOR)) {
            excelName = (null == className || "".equals(className)) ? excelName + "_" + classNum : excelName + "_" + className;
        }
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        try {
            WritableWorkbook wwBook = Workbook.createWorkbook(excelFile);
            WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
            biaotis1.setAlignment(Alignment.LEFT);
            biaotis1.setVerticalAlignment(VerticalAlignment.CENTRE);
            WritableFont titles = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat title = new WritableCellFormat(titles);
            title.setAlignment(Alignment.LEFT);
            title.setVerticalAlignment(VerticalAlignment.CENTRE);
            title.setWrap(true);
            WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            WritableCellFormat cFormat1 = new WritableCellFormat(font1);
            cFormat1.setAlignment(Alignment.CENTRE);
            cFormat1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1.setBackground(Const.titleBackground_color);
            cFormat1.setWrap(true);
            WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat2 = new WritableCellFormat(font2);
            cFormat2.setAlignment(Alignment.CENTRE);
            cFormat2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2.setBackground(Const.textOuBackGround_color);
            cFormat2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2.setWrap(true);
            NumberFormat nf2 = new NumberFormat("0.00");
            WritableCellFormat cFormat2_2 = new WritableCellFormat(font2, nf2);
            cFormat2_2.setAlignment(Alignment.CENTRE);
            cFormat2_2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_2.setBackground(Const.textOuBackGround_color);
            cFormat2_2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_2.setWrap(true);
            WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat3 = new WritableCellFormat(font3);
            cFormat3.setAlignment(Alignment.CENTRE);
            cFormat3.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3.setBackground(Const.textJiBackGround_color);
            cFormat3.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3.setWrap(true);
            WritableCellFormat cFormat3_2 = new WritableCellFormat(font3, nf2);
            cFormat3_2.setAlignment(Alignment.CENTRE);
            cFormat3_2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_2.setBackground(Const.textJiBackGround_color);
            cFormat3_2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_2.setWrap(true);
            List quest = this.c8.getSubjectDifficuty(examNum, gradeNum, schoolNum, c_exam, type, studentType, source, subCompose);
            try {
                WritableSheet sheet = wwBook.createSheet(rpt_name, 0);
                sheet.getSettings().setShowGridLines(false);
                try {
                    Label biaotou = new Label(0, 0, rpt_name, biaotis1);
                    sheet.addCell(biaotou);
                    DecimalFormat df2 = new DecimalFormat("0.00");
                    df2.setRoundingMode(RoundingMode.HALF_UP);
                    Label xinxi = new Label(0, 1, rptTitle, title);
                    sheet.addCell(xinxi);
                    sheet.setRowView(1, Const.height_500);
                    sheet.mergeCells(0, 0, 11, 0);
                    sheet.mergeCells(0, 1, 11, 1);
                    List<RptHeader> list1 = (List) quest.get(0);
                    List<Exam> list2 = (List) quest.get(1);
                    List<Subject> list3 = (List) quest.get(2);
                    Label konge1 = new Label(0, 2, "考试", cFormat1);
                    sheet.addCell(konge1);
                    String subjectName_len = "";
                    String examName_len = "";
                    String data_len = "";
                    for (int su = 0; su < list3.size(); su++) {
                        Label subject = new Label(1 + su, 2, list3.get(su).getSubjectName(), cFormat1);
                        sheet.addCell(subject);
                        subjectName_len = subjectName_len + list3.get(su).getSubjectName() + Const.STRING_SEPERATOR;
                    }
                    for (int ex = 0; ex < list2.size(); ex++) {
                        int p = 0;
                        if (ex % 2 != 0) {
                            Label exam = new Label(0, 3 + ex, list2.get(ex).getExamName(), cFormat2);
                            sheet.addCell(exam);
                            examName_len = examName_len + list2.get(ex).getExamName() + Const.STRING_SEPERATOR;
                            for (int su2 = 0; su2 < list3.size(); su2++) {
                                String su_subjectName = list3.get(su2).getSubjectName();
                                Integer ex_examNum = list2.get(ex).getExamNum();
                                String ex_examName = list2.get(ex).getExamName();
                                String exams = ex_examNum + ex_examName;
                                int t = 0;
                                for (int d = 0; d < list1.size(); d++) {
                                    if ((su_subjectName + exams).equals(list1.get(d).getSubjectName() + list1.get(d).getExamNum() + list1.get(d).getExamName())) {
                                        t = 1;
                                    }
                                }
                                if (t == 1) {
                                    for (int ds = 0; ds < list1.size(); ds++) {
                                        String ex_examNum_d = list2.get(ex).getExamNum() + "";
                                        String su_subjectName_d = list3.get(su2).getSubjectName();
                                        String ds_examNum = list1.get(ds).getExamNum();
                                        String ds_subjectName = list1.get(ds).getSubjectName();
                                        if (ex_examNum_d.equals(ds_examNum) && ds_subjectName.equals(su_subjectName_d)) {
                                            Number avg = new Number(1 + p, 3 + ex, Double.valueOf(df2.format(list1.get(ds).getAverage())).doubleValue(), cFormat2_2);
                                            sheet.addCell(avg);
                                            data_len = data_len + df2.format(list1.get(ds).getAverage()) + Const.STRING_SEPERATOR;
                                            p++;
                                        }
                                    }
                                } else {
                                    Label avg2 = new Label(1 + p, 3 + ex, "", cFormat2);
                                    sheet.addCell(avg2);
                                    data_len = data_len + "0,";
                                    p++;
                                }
                            }
                        } else {
                            Label exam2 = new Label(0, 3 + ex, list2.get(ex).getExamName(), cFormat3);
                            sheet.addCell(exam2);
                            examName_len = examName_len + list2.get(ex).getExamName() + Const.STRING_SEPERATOR;
                            for (int su3 = 0; su3 < list3.size(); su3++) {
                                String su_subjectName2 = list3.get(su3).getSubjectName();
                                Integer ex_examNum2 = list2.get(ex).getExamNum();
                                String ex_examName2 = list2.get(ex).getExamName();
                                String exams2 = ex_examNum2 + ex_examName2;
                                int t2 = 0;
                                for (int d2 = 0; d2 < list1.size(); d2++) {
                                    if ((su_subjectName2 + exams2).equals(list1.get(d2).getSubjectName() + list1.get(d2).getExamNum() + list1.get(d2).getExamName())) {
                                        t2 = 1;
                                    }
                                }
                                if (t2 == 1) {
                                    for (int ds2 = 0; ds2 < list1.size(); ds2++) {
                                        String ex_examNum_d2 = list2.get(ex).getExamNum() + "";
                                        String su_subjectName_d2 = list3.get(su3).getSubjectName();
                                        String ds_examNum2 = list1.get(ds2).getExamNum();
                                        String ds_subjectName2 = list1.get(ds2).getSubjectName();
                                        if (ex_examNum_d2.equals(ds_examNum2) && ds_subjectName2.equals(su_subjectName_d2)) {
                                            Number avg3 = new Number(1 + p, 3 + ex, Double.valueOf(df2.format(list1.get(ds2).getAverage())).doubleValue(), cFormat3_2);
                                            sheet.addCell(avg3);
                                            data_len = data_len + df2.format(list1.get(ds2).getAverage()) + Const.STRING_SEPERATOR;
                                            p++;
                                        }
                                    }
                                } else {
                                    Label avg4 = new Label(1 + p, 3 + ex, "", cFormat3);
                                    sheet.addCell(avg4);
                                    data_len = data_len + "0,";
                                    p++;
                                }
                            }
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                wwBook.write();
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response = ServletActionContext.getResponse();
                            response.reset();
                            ServletOutputStream outputStream = response.getOutputStream();
                            String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName2 = loadFileName.replace("+", " ");
                            response.setContentType("Content-type: applicationnd.ms-excel");
                            response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xls");
                            response.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte = new byte[1024];
                            FileInputStream in = new FileInputStream(excelFile);
                            while (true) {
                                int n = in.read(tempByte);
                                if (n == -1) {
                                    break;
                                }
                                try {
                                    outputStream.write(tempByte, 0, n);
                                } catch (Exception e2) {
                                    this.log.error("保存未成功", e2);
                                }
                            }
                            outputStream.flush();
                            outputStream.close();
                            in.close();
                        }
                    } catch (WriteException e3) {
                        e3.printStackTrace();
                    }
                }
            } catch (Exception e4) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response2 = ServletActionContext.getResponse();
                            response2.reset();
                            ServletOutputStream outputStream2 = response2.getOutputStream();
                            String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName4 = loadFileName3.replace("+", " ");
                            response2.setContentType("Content-type: applicationnd.ms-excel");
                            response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xls");
                            response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte2 = new byte[1024];
                            FileInputStream in2 = new FileInputStream(excelFile);
                            while (true) {
                                int n2 = in2.read(tempByte2);
                                if (n2 == -1) {
                                    break;
                                }
                                try {
                                    outputStream2.write(tempByte2, 0, n2);
                                } catch (Exception e5) {
                                    this.log.error("保存未成功", e5);
                                }
                            }
                            outputStream2.flush();
                            outputStream2.close();
                            in2.close();
                        }
                    } catch (WriteException e6) {
                        e6.printStackTrace();
                    }
                }
            } catch (Throwable th) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response3 = ServletActionContext.getResponse();
                            response3.reset();
                            ServletOutputStream outputStream3 = response3.getOutputStream();
                            String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName6 = loadFileName5.replace("+", " ");
                            response3.setContentType("Content-type: applicationnd.ms-excel");
                            response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xls");
                            response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte3 = new byte[1024];
                            FileInputStream in3 = new FileInputStream(excelFile);
                            while (true) {
                                int n3 = in3.read(tempByte3);
                                if (n3 == -1) {
                                    break;
                                }
                                try {
                                    outputStream3.write(tempByte3, 0, n3);
                                } catch (Exception e7) {
                                    this.log.error("保存未成功", e7);
                                }
                            }
                            outputStream3.flush();
                            outputStream3.close();
                            in3.close();
                        }
                    } catch (WriteException e8) {
                        e8.printStackTrace();
                        throw th;
                    }
                }
                throw th;
            }
        } catch (Exception e9) {
            e9.printStackTrace();
        }
        return null;
    }

    public File getSubChartImgFile_c8(String insertUser, List list, String lType, String subjectName_len, String examName_len, String data_len, String dirPath) {
        subjectLineImage_c8(list, lType, insertUser, subjectName_len, examName_len, data_len);
        File file = new File(dirPath + File.separator + "tmpLinePng" + File.separator + insertUser + lType + ".png");
        return file;
    }

    public void subjectLineImage_c8(List<Gradelevel> quest, String lType, String insertUser, String subjectName_len, String examName_len, String data_len) {
        String[] rowKeys = subjectName_len.split(Const.STRING_SEPERATOR);
        String[] columnKey = examName_len.split(Const.STRING_SEPERATOR);
        String[] stanScores = data_len.split(Const.STRING_SEPERATOR);
        for (int i = 0; i < rowKeys.length; i++) {
            rowKeys[i] = rowKeys[i];
        }
        String[] columnKeys = new String[columnKey.length];
        for (int i2 = 0; i2 < columnKey.length; i2++) {
            columnKeys[i2] = columnKey[i2];
        }
        double[][] data = new double[rowKeys.length][columnKey.length];
        Double.valueOf(0.0d);
        Double.valueOf(0.0d);
        List list_data = new ArrayList();
        for (int x = 0; x < rowKeys.length; x++) {
            for (int i3 = 0; i3 < columnKey.length; i3++) {
                data[x][i3] = Double.parseDouble(String.valueOf(stanScores[(i3 * rowKeys.length) + x]));
                list_data.add(Double.valueOf(Double.parseDouble(String.valueOf(stanScores[(i3 * rowKeys.length) + x]))));
            }
        }
        Double maxDesc = (Double) Collections.max(list_data);
        Double minDesc = (Double) Collections.min(list_data);
        Double count_unit = Double.valueOf((maxDesc.doubleValue() - minDesc.doubleValue()) / 5.0d);
        HttpServletResponse response = ServletActionContext.getResponse();
        response.reset();
        response.setContentType("image/jpeg");
        JFreeChart chart = this.lc.getLineChar(data, rowKeys, columnKeys, "", "", "科目难度", "#0.0", count_unit, Integer.valueOf(rowKeys.length), "Y", "##.##");
        getChartImageFolder(chart, "tmpLinePng", Const.width, Const.height_500, insertUser + lType);
    }

    public String getChartImageFolder(JFreeChart chart, String tmpLinePng, int imgWidth, int imgHeight, String imgName) {
        String folderPath = ChangePassingScoreChartPath.createTempDir(tmpLinePng, imgName);
        try {
            ChangePassingScoreChartPath.saveChartAsPNG(new File(folderPath), chart, imgWidth, imgHeight);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return folderPath;
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String exportStudentPersonalSubjectScoreDate(List<Map> scorelist, Studentlevel studentlevel, String isSaveWrite, String rptTitle, String studentId, int xuankaoshu, String agent, String dirPath, String uri, String uid, int tupiansize, String all_class) {
        String folderPath = "ExportFolder/reportExcel" + uid;
        String folderName = "reportExcel" + uid;
        String zipName = "reportExcel" + uid;
        String rpt_name = studentlevel.getStudentName() + "成绩统计";
        File excelFile = getRptExcelFile(rpt_name, dirPath, folderPath);
        String filePath = null;
        String str = rpt_name + ".xls";
        try {
            HSSFWorkbook wb = new HSSFWorkbook();
            HSSFSheet sheet = wb.createSheet("new sheet");
            wb.getSheetAt(0).setDisplayGridlines(false);
            HSSFFont headfont = wb.createFont();
            HSSFCellStyle cellStyle1_2 = wb.createCellStyle();
            cellStyle1_2.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cellStyle1_2.setFillForegroundColor(Const.color_row2);
            cellStyle1_2.setAlignment(HorizontalAlignment.CENTER);
            cellStyle1_2.setBorderBottom(BorderStyle.THIN);
            cellStyle1_2.setBorderLeft(BorderStyle.THIN);
            cellStyle1_2.setBorderRight(BorderStyle.THIN);
            cellStyle1_2.setBorderTop(BorderStyle.THIN);
            headfont.setFontHeightInPoints((short) 10);
            cellStyle1_2.setFont(headfont);
            cellStyle1_2.setWrapText(true);
            HSSFCellStyle cellStyle1_2_1 = wb.createCellStyle();
            cellStyle1_2_1.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cellStyle1_2_1.setFillForegroundColor(Const.color_row2);
            cellStyle1_2_1.setAlignment(HorizontalAlignment.CENTER);
            cellStyle1_2_1.setAlignment(HorizontalAlignment.CENTER);
            cellStyle1_2_1.setBorderBottom(BorderStyle.THIN);
            cellStyle1_2_1.setBorderLeft(BorderStyle.THIN);
            cellStyle1_2_1.setBorderRight(BorderStyle.THIN);
            cellStyle1_2_1.setBorderTop(BorderStyle.THIN);
            headfont.setFontHeightInPoints((short) 10);
            cellStyle1_2_1.setFont(headfont);
            HSSFDataFormat hdf = wb.createDataFormat();
            cellStyle1_2_1.setDataFormat(hdf.getFormat("0.0"));
            cellStyle1_2_1.setWrapText(true);
            HSSFCellStyle cellStyle1_2_2 = wb.createCellStyle();
            cellStyle1_2_2.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cellStyle1_2_2.setFillForegroundColor(Const.color_row2);
            cellStyle1_2_2.setAlignment(HorizontalAlignment.CENTER);
            cellStyle1_2_2.setBorderBottom(BorderStyle.THIN);
            cellStyle1_2_2.setBorderLeft(BorderStyle.THIN);
            cellStyle1_2_2.setBorderRight(BorderStyle.THIN);
            cellStyle1_2_2.setBorderTop(BorderStyle.THIN);
            headfont.setFontHeightInPoints((short) 10);
            cellStyle1_2_2.setFont(headfont);
            cellStyle1_2_2.setDataFormat(hdf.getFormat("0.00"));
            cellStyle1_2_2.setWrapText(true);
            HSSFCellStyle cellStyle1_3 = wb.createCellStyle();
            cellStyle1_3.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cellStyle1_3.setFillForegroundColor(Const.color_row1);
            cellStyle1_3.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cellStyle1_3.setAlignment(HorizontalAlignment.CENTER);
            cellStyle1_3.setBorderBottom(BorderStyle.THIN);
            cellStyle1_3.setBorderLeft(BorderStyle.THIN);
            cellStyle1_3.setBorderRight(BorderStyle.THIN);
            cellStyle1_3.setBorderTop(BorderStyle.THIN);
            cellStyle1_3.setFont(headfont);
            cellStyle1_3.setBottomBorderColor(IndexedColors.BLACK.index);
            cellStyle1_3.setWrapText(true);
            HSSFCellStyle cellStyle1_3_1 = wb.createCellStyle();
            cellStyle1_3_1.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cellStyle1_3_1.setFillForegroundColor(Const.color_row1);
            cellStyle1_3_1.setAlignment(HorizontalAlignment.CENTER);
            cellStyle1_3_1.setBorderBottom(BorderStyle.THIN);
            cellStyle1_3_1.setBorderLeft(BorderStyle.THIN);
            cellStyle1_3_1.setBorderRight(BorderStyle.THIN);
            cellStyle1_3_1.setBorderTop(BorderStyle.THIN);
            cellStyle1_3_1.setFont(headfont);
            cellStyle1_3_1.setBottomBorderColor(IndexedColors.BLACK.index);
            cellStyle1_3_1.setDataFormat(hdf.getFormat("0.0"));
            cellStyle1_3_1.setWrapText(true);
            HSSFCellStyle cellStyle1_3_2 = wb.createCellStyle();
            cellStyle1_3_2.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cellStyle1_3_2.setFillForegroundColor(Const.color_row1);
            cellStyle1_3_2.setAlignment(HorizontalAlignment.CENTER);
            cellStyle1_3_2.setBorderBottom(BorderStyle.THIN);
            cellStyle1_3_2.setBorderLeft(BorderStyle.THIN);
            cellStyle1_3_2.setBorderRight(BorderStyle.THIN);
            cellStyle1_3_2.setBorderTop(BorderStyle.THIN);
            cellStyle1_3_2.setFont(headfont);
            cellStyle1_3_2.setBottomBorderColor(IndexedColors.BLACK.index);
            cellStyle1_3_2.setDataFormat(hdf.getFormat("0.00"));
            cellStyle1_3_2.setWrapText(true);
            HSSFCellStyle cellStyle1_2_left = wb.createCellStyle();
            cellStyle1_2_left.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cellStyle1_2_left.setFillForegroundColor(Const.color_row2);
            cellStyle1_2_left.setAlignment(HorizontalAlignment.LEFT);
            cellStyle1_2_left.setBorderBottom(BorderStyle.THIN);
            cellStyle1_2_left.setBorderLeft(BorderStyle.THIN);
            cellStyle1_2_left.setBorderRight(BorderStyle.THIN);
            cellStyle1_2_left.setBorderTop(BorderStyle.THIN);
            HSSFFont headfont_left = wb.createFont();
            headfont_left.setFontHeightInPoints((short) 10);
            cellStyle1_2_left.setFont(headfont_left);
            cellStyle1_2_left.setWrapText(true);
            HSSFCellStyle cellStyleRed = wb.createCellStyle();
            cellStyleRed.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cellStyleRed.setFillForegroundColor(IndexedColors.RED.index);
            cellStyleRed.setAlignment(HorizontalAlignment.CENTER);
            cellStyleRed.setBorderBottom(BorderStyle.THIN);
            cellStyleRed.setBorderLeft(BorderStyle.THIN);
            cellStyleRed.setBorderRight(BorderStyle.THIN);
            cellStyleRed.setBorderTop(BorderStyle.THIN);
            HSSFFont headfont_red = wb.createFont();
            headfont_red.setFontHeightInPoints((short) 10);
            cellStyleRed.setFont(headfont_left);
            cellStyleRed.setWrapText(true);
            HSSFCellStyle cellStyle1_3_left = wb.createCellStyle();
            cellStyle1_3_left.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cellStyle1_3_left.setFillForegroundColor(Const.color_row1);
            cellStyle1_3_left.setAlignment(HorizontalAlignment.CENTER);
            cellStyle1_3_left.setBorderBottom(BorderStyle.THIN);
            cellStyle1_3_left.setBorderLeft(BorderStyle.THIN);
            cellStyle1_3_left.setBorderRight(BorderStyle.THIN);
            cellStyle1_3_left.setBorderTop(BorderStyle.THIN);
            HSSFFont headfont3_left = wb.createFont();
            headfont3_left.setFontHeightInPoints((short) 10);
            cellStyle1_3_left.setFont(headfont3_left);
            cellStyle1_3_left.setWrapText(true);
            HSSFCellStyle cellStyle1_4 = wb.createCellStyle();
            cellStyle1_4.setBorderBottom(BorderStyle.NONE);
            cellStyle1_4.setBorderLeft(BorderStyle.NONE);
            cellStyle1_4.setBorderRight(BorderStyle.NONE);
            cellStyle1_4.setBorderTop(BorderStyle.NONE);
            cellStyle1_4.setAlignment(HorizontalAlignment.LEFT);
            cellStyle1_4.setBottomBorderColor(IndexedColors.BLACK.index);
            HSSFFont headfont4 = wb.createFont();
            headfont4.setFontHeightInPoints((short) 15);
            headfont4.setColor(IndexedColors.BLACK.index);
            headfont4.setBold(true);
            cellStyle1_4.setFont(headfont4);
            cellStyle1_4.setWrapText(true);
            HSSFCellStyle cellStyle1_5 = wb.createCellStyle();
            cellStyle1_5.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cellStyle1_5.setFillForegroundColor(IndexedColors.LIGHT_ORANGE.index);
            cellStyle1_5.setAlignment(HorizontalAlignment.CENTER);
            cellStyle1_5.setBottomBorderColor(IndexedColors.BLACK.index);
            cellStyle1_5.setBorderBottom(BorderStyle.THIN);
            cellStyle1_5.setBorderLeft(BorderStyle.THIN);
            cellStyle1_5.setBorderRight(BorderStyle.THIN);
            cellStyle1_5.setBorderTop(BorderStyle.THIN);
            HSSFFont headfont2 = wb.createFont();
            headfont2.setFontHeightInPoints((short) 10);
            cellStyle1_5.setFont(headfont2);
            cellStyle1_5.setWrapText(true);
            DecimalFormat df01 = new DecimalFormat("0.0");
            DecimalFormat df02 = new DecimalFormat("0.00");
            df01.setRoundingMode(RoundingMode.HALF_UP);
            df02.setRoundingMode(RoundingMode.HALF_UP);
            try {
                sheet.addMergedRegion(new CellRangeAddress(0, 1, 0, xuankaoshu + 3 + 1));
                HSSFRow title = sheet.createRow(0);
                HSSFCell titleCell = title.createCell(0);
                titleCell.setCellStyle(cellStyle1_4);
                titleCell.setCellValue(studentlevel.getStudentName() + "的成绩表");
                int rowCount = 0 + 2;
                sheet.addMergedRegion(new CellRangeAddress(2, 2, 0, xuankaoshu + 3 + 1));
                HSSFRow beizhu = sheet.createRow(rowCount);
                HSSFCell beizhuCell = beizhu.createCell(0);
                beizhuCell.setCellStyle(cellStyle1_3_left);
                beizhuCell.setCellValue("学校：" + studentlevel.getSchoolName() + "  年级：" + studentlevel.getGradeName() + "  班级：" + studentlevel.getClassName() + "  姓名：" + studentlevel.getStudentName());
                int rowCount2 = rowCount + 1;
                HSSFRow row = sheet.createRow(rowCount2);
                for (int j = 0; j < xuankaoshu + 3 + 2; j++) {
                    HSSFCell cell = row.createCell((short) j);
                    if (j == 0) {
                        cell.setCellValue("NO");
                    } else if (0 >= j || j >= xuankaoshu + 3 + 1) {
                        cell.setCellValue("总分");
                    } else {
                        cell.setCellValue("科目" + j);
                    }
                    cell.setCellStyle(cellStyle1_5);
                    sheet.autoSizeColumn(((short) j) + 1);
                    sheet.setColumnWidth(((short) j) + 1, 3500);
                }
                int rowCount3 = rowCount2 + 1;
                for (int i = 0; i < xuankaoshu + 3 + 2; i++) {
                    sheet.setColumnWidth((short) i, 3500);
                }
                sheet.setColumnWidth((short) (xuankaoshu + 3), 3500);
                for (int i2 = 0; i2 < scorelist.size(); i2++) {
                    HSSFRow row2 = sheet.createRow(rowCount3);
                    rowCount3++;
                    for (int j2 = 0; j2 < xuankaoshu + 3 + 2; j2++) {
                        HSSFCell cell2 = row2.createCell(j2);
                        if (scorelist.get(i2).get("isChoise").equals("1")) {
                            cell2.setCellStyle(cellStyleRed);
                        } else if (i2 % 2 > 0) {
                            cell2.setCellStyle(cellStyle1_2_left);
                        } else {
                            cell2.setCellStyle(cellStyle1_3_left);
                        }
                        if (j2 == 0) {
                            cell2.setCellValue(i2 + 1);
                        } else if (j2 < xuankaoshu + 3 + 1) {
                            cell2.setCellValue(scorelist.get(i2).get(String.valueOf(j2 - 1)) == null ? " " : scorelist.get(i2).get(String.valueOf(j2 - 1)) + "");
                        } else {
                            cell2.setCellValue(scorelist.get(i2).get("totalScore") == null ? " " : scorelist.get(i2).get("totalScore") + "");
                        }
                    }
                }
                FileOutputStream fileOut1 = new FileOutputStream(excelFile);
                wb.write(fileOut1);
                fileOut1.close();
                if (wb != null) {
                    if (null != isSaveWrite) {
                        try {
                            if (isSaveWrite.equals("F")) {
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                    if (Integer.valueOf(all_class).intValue() == 1) {
                        HttpServletResponse response = ServletActionContext.getResponse();
                        response.reset();
                        ServletOutputStream outputStream = response.getOutputStream();
                        String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(rpt_name, "UTF-8") : new String(rpt_name.getBytes("UTF-8"), "ISO8859-1");
                        String loadFileName2 = loadFileName.replace("+", " ");
                        response.setContentType("Content-type: applicationnd.ms-excel");
                        response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xls");
                        response.setHeader("Content-length", String.valueOf(excelFile.length()));
                        byte[] tempByte = new byte[1024];
                        FileInputStream in = new FileInputStream(excelFile);
                        while (true) {
                            int m = in.read(tempByte);
                            if (m == -1) {
                                break;
                            }
                            try {
                                outputStream.write(tempByte, 0, m);
                            } catch (Exception e2) {
                                this.log.error("保存未成功", e2);
                            }
                        }
                        outputStream.flush();
                        outputStream.close();
                        in.close();
                        if (excelFile.exists()) {
                            excelFile.delete();
                        }
                    } else {
                        filePath = methodZipAll(uri, dirPath, folderName, zipName);
                    }
                }
            } catch (Exception e3) {
                if (wb != null) {
                    if (null != isSaveWrite) {
                        try {
                            if (isSaveWrite.equals("F")) {
                            }
                        } catch (Exception e4) {
                            e4.printStackTrace();
                        }
                    }
                    if (Integer.valueOf(all_class).intValue() == 1) {
                        HttpServletResponse response2 = ServletActionContext.getResponse();
                        response2.reset();
                        ServletOutputStream outputStream2 = response2.getOutputStream();
                        String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(rpt_name, "UTF-8") : new String(rpt_name.getBytes("UTF-8"), "ISO8859-1");
                        String loadFileName4 = loadFileName3.replace("+", " ");
                        response2.setContentType("Content-type: applicationnd.ms-excel");
                        response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xls");
                        response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                        byte[] tempByte2 = new byte[1024];
                        FileInputStream in2 = new FileInputStream(excelFile);
                        while (true) {
                            int m2 = in2.read(tempByte2);
                            if (m2 == -1) {
                                break;
                            }
                            try {
                                outputStream2.write(tempByte2, 0, m2);
                            } catch (Exception e5) {
                                this.log.error("保存未成功", e5);
                            }
                        }
                        outputStream2.flush();
                        outputStream2.close();
                        in2.close();
                        if (excelFile.exists()) {
                            excelFile.delete();
                        }
                    } else {
                        filePath = methodZipAll(uri, dirPath, folderName, zipName);
                    }
                }
            } catch (Throwable th) {
                if (wb != null) {
                    if (null != isSaveWrite) {
                        try {
                            if (isSaveWrite.equals("F")) {
                            }
                        } catch (Exception e6) {
                            e6.printStackTrace();
                            throw th;
                        }
                    }
                    if (Integer.valueOf(all_class).intValue() == 1) {
                        HttpServletResponse response3 = ServletActionContext.getResponse();
                        response3.reset();
                        ServletOutputStream outputStream3 = response3.getOutputStream();
                        String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(rpt_name, "UTF-8") : new String(rpt_name.getBytes("UTF-8"), "ISO8859-1");
                        String loadFileName6 = loadFileName5.replace("+", " ");
                        response3.setContentType("Content-type: applicationnd.ms-excel");
                        response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xls");
                        response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                        byte[] tempByte3 = new byte[1024];
                        FileInputStream in3 = new FileInputStream(excelFile);
                        while (true) {
                            int m3 = in3.read(tempByte3);
                            if (m3 == -1) {
                                break;
                            }
                            try {
                                outputStream3.write(tempByte3, 0, m3);
                            } catch (Exception e7) {
                                this.log.error("保存未成功", e7);
                            }
                        }
                        outputStream3.flush();
                        outputStream3.close();
                        in3.close();
                        if (excelFile.exists()) {
                            excelFile.delete();
                        }
                    } else {
                        methodZipAll(uri, dirPath, folderName, zipName);
                    }
                }
                throw th;
            }
        } catch (Exception e8) {
            e8.printStackTrace();
        }
        return filePath;
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String s1(String examNum, String gradeNum, String schoolNum, String subjectNum, String classNum, String studentId, String studentName, String studentType, String type, String source, String history, String isMoreSchool, String isSaveWrite, String rptTitle, String rpt_name, String dirPath, String uri, String useId, int tupiansize, String all_class, String agent, String subPngFlag, String show, String fufen, String subCompose, String sPid, String studentReportShowItem) {
        String defenCellTitle;
        String pingjunfenCellTitle;
        String zuigaofenCellTitle;
        CellFormat cellFormat;
        CellFormat cellFormat2;
        CellFormat cellFormat3;
        Map<String, String> schoolpermissionMap = this.system.getschoolpermissionMap(schoolNum, useId);
        Integer classControl = Convert.toInt(schoolpermissionMap.get("classControl"));
        Integer gradeControl = Convert.toInt(schoolpermissionMap.get("gradeControl"));
        Integer quControl = Convert.toInt(schoolpermissionMap.get("quControl"));
        Integer rankControl = Convert.toInt(schoolpermissionMap.get("rankControl"));
        String folderPath = "reportExcel" + useId;
        String folderName = "reportExcel" + useId;
        String zipName = "reportExcel" + useId;
        String excelName = rpt_name + "_" + gradeNum;
        Double.valueOf(0.0d);
        Double.valueOf(0.0d);
        Double.valueOf(0.0d);
        String[][] strArr = new String[3][3];
        if (null != studentName && !"".equals(studentName) && !studentName.contains(Const.STRING_SEPERATOR)) {
            excelName = excelName + "_" + studentName;
        }
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        String filePath = null;
        try {
            WritableWorkbook wwBook = Workbook.createWorkbook(excelFile);
            WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
            biaotis1.setAlignment(Alignment.LEFT);
            biaotis1.setVerticalAlignment(VerticalAlignment.CENTRE);
            WritableFont titles = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat title = new WritableCellFormat(titles);
            title.setAlignment(Alignment.LEFT);
            title.setVerticalAlignment(VerticalAlignment.CENTRE);
            title.setWrap(true);
            WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            WritableCellFormat cFormat1 = new WritableCellFormat(font1);
            cFormat1.setAlignment(Alignment.CENTRE);
            cFormat1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1.setBackground(Const.titleBackground_color);
            cFormat1.setWrap(true);
            WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            CellFormat writableCellFormat = new WritableCellFormat(font2);
            writableCellFormat.setAlignment(Alignment.CENTRE);
            writableCellFormat.setVerticalAlignment(VerticalAlignment.CENTRE);
            writableCellFormat.setBackground(Const.textOuBackGround_color);
            writableCellFormat.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            writableCellFormat.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            writableCellFormat.setBorder(Border.LEFT, BorderLineStyle.THIN);
            writableCellFormat.setBorder(Border.TOP, BorderLineStyle.THIN);
            writableCellFormat.setWrap(true);
            NumberFormat nf1 = new NumberFormat("0.0");
            CellFormat writableCellFormat2 = new WritableCellFormat(font2, nf1);
            writableCellFormat2.setAlignment(Alignment.CENTRE);
            writableCellFormat2.setVerticalAlignment(VerticalAlignment.CENTRE);
            writableCellFormat2.setBackground(Const.textOuBackGround_color);
            writableCellFormat2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            writableCellFormat2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            writableCellFormat2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            writableCellFormat2.setBorder(Border.TOP, BorderLineStyle.THIN);
            writableCellFormat2.setWrap(true);
            CellFormat writableCellFormat3 = new WritableCellFormat(font2);
            writableCellFormat3.setAlignment(Alignment.CENTRE);
            writableCellFormat3.setVerticalAlignment(VerticalAlignment.CENTRE);
            writableCellFormat3.setBackground(Const.textOuBackGround_color);
            writableCellFormat3.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            writableCellFormat3.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            writableCellFormat3.setBorder(Border.LEFT, BorderLineStyle.THIN);
            writableCellFormat3.setBorder(Border.TOP, BorderLineStyle.THIN);
            writableCellFormat3.setWrap(true);
            WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            CellFormat writableCellFormat4 = new WritableCellFormat(font3);
            writableCellFormat4.setAlignment(Alignment.CENTRE);
            writableCellFormat4.setVerticalAlignment(VerticalAlignment.CENTRE);
            writableCellFormat4.setBackground(Const.textJiBackGround_color);
            writableCellFormat4.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            writableCellFormat4.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            writableCellFormat4.setBorder(Border.LEFT, BorderLineStyle.THIN);
            writableCellFormat4.setBorder(Border.TOP, BorderLineStyle.THIN);
            writableCellFormat4.setWrap(true);
            CellFormat writableCellFormat5 = new WritableCellFormat(font3, nf1);
            writableCellFormat5.setAlignment(Alignment.CENTRE);
            writableCellFormat5.setVerticalAlignment(VerticalAlignment.CENTRE);
            writableCellFormat5.setBackground(Const.textJiBackGround_color);
            writableCellFormat5.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            writableCellFormat5.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            writableCellFormat5.setBorder(Border.LEFT, BorderLineStyle.THIN);
            writableCellFormat5.setBorder(Border.TOP, BorderLineStyle.THIN);
            writableCellFormat5.setWrap(true);
            CellFormat writableCellFormat6 = new WritableCellFormat(font3);
            writableCellFormat6.setAlignment(Alignment.CENTRE);
            writableCellFormat6.setVerticalAlignment(VerticalAlignment.CENTRE);
            writableCellFormat6.setBackground(Const.textJiBackGround_color);
            writableCellFormat6.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            writableCellFormat6.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            writableCellFormat6.setBorder(Border.LEFT, BorderLineStyle.THIN);
            writableCellFormat6.setBorder(Border.TOP, BorderLineStyle.THIN);
            writableCellFormat6.setWrap(true);
            WritableFont font4 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textWUSubFont_color2);
            WritableCellFormat cFormat4 = new WritableCellFormat(font4);
            cFormat4.setAlignment(Alignment.CENTRE);
            cFormat4.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat4.setBackground(Const.textOuBackGround_color);
            cFormat4.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat4.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat4.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat4.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat4.setWrap(true);
            WritableFont font5 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textWUSubFont_color2);
            WritableCellFormat cFormat5 = new WritableCellFormat(font5);
            cFormat5.setAlignment(Alignment.CENTRE);
            cFormat5.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat5.setBackground(Const.textJiBackGround_color);
            cFormat5.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat5.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat5.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat5.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat5.setWrap(true);
            List<Studentlevel> list = this.sp.getStuPersonalScore(examNum, subjectNum, gradeNum, schoolNum, classNum, studentId, studentType, source, type, fufen, subCompose);
            String viewRankOfScoreInfo = Configuration.getInstance().getViewRankOfScoreInfo();
            try {
                WritableSheet sheet = wwBook.createSheet(rpt_name, 0);
                sheet.getSettings().setShowGridLines(false);
                try {
                    Label biaotou = new Label(0, 0, rpt_name, biaotis1);
                    sheet.addCell(biaotou);
                    Label xinxi = new Label(0, 1, rptTitle, title);
                    sheet.addCell(xinxi);
                    sheet.setRowView(1, Const.height_500);
                    DecimalFormat df = new DecimalFormat("0.0");
                    DecimalFormat df1 = new DecimalFormat("0.00");
                    df.setRoundingMode(RoundingMode.HALF_UP);
                    String signnl = this.userService.getRank("11");
                    int ClassAverage = Integer.parseInt(Configuration.getInstance().getClassAverage());
                    int GradeAverage = Integer.parseInt(Configuration.getInstance().getGradeAverage());
                    int AreaAverage = Integer.parseInt(Configuration.getInstance().getAreaAverage());
                    int pClass = classControl.intValue();
                    int pGrade = gradeControl.intValue();
                    int pArea = quControl.intValue();
                    int pClass_c = ClassAverage * classControl.intValue();
                    int pGrade_c = GradeAverage * gradeControl.intValue();
                    int pArea_c = AreaAverage * quControl.intValue();
                    int gradeOrScore = "0".equals(signnl) ? 1 : 2;
                    int ranks = isMoreSchool.equals("T") ? 1 : 0;
                    if ("2".equals(studentReportShowItem)) {
                        defenCellTitle = "等级";
                        pingjunfenCellTitle = "平均等级";
                        zuigaofenCellTitle = "最高等级";
                    } else if ("1".equals(studentReportShowItem)) {
                        defenCellTitle = "正确率";
                        pingjunfenCellTitle = "平均正确率";
                        zuigaofenCellTitle = "最高正确率";
                    } else {
                        defenCellTitle = "1".equals(fufen) ? "赋分" : "得分";
                        pingjunfenCellTitle = "平均分";
                        zuigaofenCellTitle = "最高分";
                    }
                    sheet.mergeCells(0, 0, 8, 0);
                    sheet.mergeCells(0, 1, 8, 1);
                    Label subject_title = new Label(0, 2, "科目", cFormat1);
                    sheet.addCell(subject_title);
                    sheet.mergeCells(0, 2, 0, 3);
                    Label subjectFull_title = new Label(1, 2, "满分值", cFormat1);
                    sheet.addCell(subjectFull_title);
                    sheet.mergeCells(1, 2, 1, 3);
                    Label rawScore_title = new Label(2, 2, defenCellTitle, cFormat1);
                    sheet.addCell(rawScore_title);
                    sheet.mergeCells(2, 2, 2, 3);
                    String rankName = subCompose.equals("0") ? "总体排名" : sPid.equals("0") ? "组内排名" : "首选排名";
                    int bei = 0;
                    if ("0".equals(signnl)) {
                        if (isMoreSchool.equals("T")) {
                            Label percent_title = new Label(3, 2, "百分等级分", cFormat1);
                            sheet.addCell(percent_title);
                            sheet.mergeCells(3, 2, 3 + ranks, 2);
                            Label schoolPercent = new Label(3, 3, "学校", cFormat1);
                            sheet.addCell(schoolPercent);
                            Label areaPercent = new Label(3 + ranks, 3, "全区", cFormat1);
                            sheet.addCell(areaPercent);
                        } else {
                            Label percent_title2 = new Label(3, 2, "百分等级分", cFormat1);
                            sheet.addCell(percent_title2);
                            sheet.mergeCells(3, 2, 3, 3);
                        }
                    } else if (!"1".equals(signnl) || rankControl.intValue() != 1) {
                        bei = isMoreSchool.equals("T") ? (0 - gradeOrScore) - ranks : 0 - gradeOrScore;
                    } else if (viewRankOfScoreInfo.equals("1")) {
                        Label schoolPercentRank_title = new Label(3, 2, rankName, cFormat1);
                        sheet.addCell(schoolPercentRank_title);
                        Label c_rank = new Label(3, 3, "班级排名", cFormat1);
                        sheet.addCell(c_rank);
                        Label s_rank = new Label(4, 3, "学校排名", cFormat1);
                        sheet.addCell(s_rank);
                        if (isMoreSchool.equals("T")) {
                            Label a_rank = new Label(4 + ranks, 3, "区县排名", cFormat1);
                            sheet.addCell(a_rank);
                        }
                        sheet.mergeCells(3, 2, 4 + ranks, 2);
                    }
                    if (isMoreSchool.equals("T")) {
                        Label standard_title = new Label(3 + gradeOrScore + ranks + bei, 2, "标准分T", cFormat1);
                        sheet.addCell(standard_title);
                        sheet.mergeCells(3 + gradeOrScore + ranks + bei, 2, 4 + gradeOrScore + ranks + bei, 2);
                        Label schoolStandard = new Label(3 + gradeOrScore + ranks + bei, 3, "学校", cFormat1);
                        sheet.addCell(schoolStandard);
                        Label areaStandard = new Label(4 + gradeOrScore + ranks + bei, 3, "全区", cFormat1);
                        sheet.addCell(areaStandard);
                    } else {
                        Label standard_title2 = new Label(3 + gradeOrScore + bei, 2, "标准分T", cFormat1);
                        sheet.addCell(standard_title2);
                        sheet.mergeCells(3 + gradeOrScore + bei, 2, 3 + gradeOrScore, 3);
                    }
                    if (1 == pClass_c) {
                        Label classAverage = new Label(4 + gradeOrScore + (ranks * 2) + bei, 3, "班级", cFormat1);
                        sheet.addCell(classAverage);
                    }
                    if (1 == pGrade_c) {
                        Label schoolAverage = new Label(4 + gradeOrScore + (ranks * 2) + pClass_c + bei, 3, "学校", cFormat1);
                        sheet.addCell(schoolAverage);
                    }
                    if (1 == pArea_c && isMoreSchool.equals("T")) {
                        Label areaAverage = new Label(4 + gradeOrScore + (ranks * 2) + pClass_c + pGrade_c + bei, 3, "全区", cFormat1);
                        sheet.addCell(areaAverage);
                    }
                    if (pClass_c == 1 || pGrade_c == 1 || pArea_c == 1) {
                        Label average_title = new Label(4 + gradeOrScore + (ranks * 2) + bei, 2, pingjunfenCellTitle, cFormat1);
                        sheet.addCell(average_title);
                        pArea_c = (1 == pArea_c && isMoreSchool.equals("T")) ? 1 : 0;
                        sheet.mergeCells(4 + gradeOrScore + (ranks * 2) + bei, 2, ((((((4 + gradeOrScore) + (ranks * 2)) + pClass_c) + pGrade_c) + pArea_c) - 1) + bei, 2);
                    }
                    if (isMoreSchool.equals("T")) {
                        if (pClass == 1 || pGrade == 1 || pArea == 1) {
                            Label average_title1 = new Label(4 + gradeOrScore + (ranks * 2) + pClass_c + pGrade_c + pArea_c + bei, 2, zuigaofenCellTitle, cFormat1);
                            sheet.addCell(average_title1);
                            sheet.mergeCells(4 + gradeOrScore + (ranks * 2) + pClass_c + pGrade_c + pArea_c + bei, 2, (((((((((4 + gradeOrScore) + (ranks * 2)) + bei) + pClass) + pGrade) + pArea) + pClass_c) + pGrade_c) + pArea_c) - 1, 2);
                        }
                        if (1 == pClass) {
                            Label classAverage2 = new Label(4 + gradeOrScore + (ranks * 2) + pClass_c + pGrade_c + pArea_c + bei, 3, "班级", cFormat1);
                            sheet.addCell(classAverage2);
                        }
                        if (1 == pGrade) {
                            Label schoolAverage2 = new Label(4 + gradeOrScore + (ranks * 2) + pClass + pClass_c + pGrade_c + pArea_c + bei, 3, "学校", cFormat1);
                            sheet.addCell(schoolAverage2);
                        }
                        if (1 == pArea) {
                            Label areaAverage2 = new Label(4 + gradeOrScore + (ranks * 2) + pClass + pGrade + pClass_c + pGrade_c + pArea_c + bei, 3, "全区", cFormat1);
                            sheet.addCell(areaAverage2);
                        }
                    } else {
                        Label average_title12 = new Label(4 + gradeOrScore + (ranks * 2) + pClass_c + pGrade_c + bei, 2, zuigaofenCellTitle, cFormat1);
                        sheet.addCell(average_title12);
                        sheet.mergeCells(4 + gradeOrScore + (ranks * 2) + pClass_c + pGrade_c + bei, 2, (((((((4 + gradeOrScore) + (ranks * 2)) + pClass_c) + pGrade_c) + pClass) + pGrade) - 1) + bei, 2);
                        if (1 == pClass) {
                            Label classAverage3 = new Label(4 + gradeOrScore + (ranks * 2) + pClass_c + pGrade_c + pArea_c + bei, 3, "班级", cFormat1);
                            sheet.addCell(classAverage3);
                        }
                        if (1 == pGrade) {
                            Label schoolAverage3 = new Label(4 + gradeOrScore + (ranks * 2) + pClass + pClass_c + pGrade_c + pArea_c + bei, 3, "学校", cFormat1);
                            sheet.addCell(schoolAverage3);
                        }
                    }
                    for (int i = 0; i < list.size(); i++) {
                        if (i % 2 != 0) {
                            cellFormat = writableCellFormat;
                            cellFormat2 = writableCellFormat2;
                            cellFormat3 = writableCellFormat3;
                        } else {
                            cellFormat = writableCellFormat4;
                            cellFormat2 = writableCellFormat5;
                            cellFormat3 = writableCellFormat6;
                        }
                        list.get(i).getIsSub();
                        list.get(i).getMainType();
                        String list0_subjectName = list.get(i).getSubjectName();
                        String list0_totalScore = "";
                        String list0_subjectNum = String.valueOf(list.get(i).getSubjectNum());
                        String insertDate = list.get(i).getInsertDate();
                        String appealDealDate = list.get(i).getExt3();
                        String illType = list.get(i).getType();
                        String examSubStatus = list.get(i).getSource();
                        if (null != insertDate || (!"0".equals(examSubStatus) && list0_subjectNum.length() >= 3)) {
                            if ("0".equals(list.get(i).getJisuanType())) {
                                list0_subjectName = list0_subjectName + "（选择题预发布）";
                            } else if (null != insertDate && null != appealDealDate && cn.hutool.core.date.DateUtil.parse(insertDate, "yyyy-MM-dd HH:mm:ss").before(cn.hutool.core.date.DateUtil.parse(appealDealDate + ":00:00", "yyyy-MM-dd HH:mm:ss"))) {
                                list0_subjectName = list0_subjectName + "（预发布）";
                            }
                            if (!"2".equals(illType) && list0_subjectNum.length() >= 3) {
                                list0_totalScore = "0".equals(illType) ? "填涂缺考" : "1".equals(illType) ? "违纪" : ("3".equals(illType) || "4".equals(illType)) ? "零分" : "未考";
                            }
                        } else {
                            list0_subjectName = list0_subjectName + "（未发布）";
                        }
                        Label subjectName = new Label(0, 4 + i, list0_subjectName, cellFormat);
                        sheet.addCell(subjectName);
                        sheet.setColumnView(0, 20);
                        if (null == list.get(i).getTotalScore()) {
                            Label subjectFull = new Label(1, 4 + i, "--", cellFormat);
                            sheet.addCell(subjectFull);
                            sheet.setColumnView(1, 15);
                            Convert.toBigDecimal(list0_totalScore, BigDecimal.valueOf(0L)).stripTrailingZeros().toPlainString();
                            Label rawScore = new Label(2, 4 + i, list0_totalScore, cellFormat);
                            sheet.addCell(rawScore);
                            sheet.setColumnView(2, 15);
                            if ("0".equals(signnl)) {
                                if (isMoreSchool.equals("T")) {
                                    Label schoolPercent2 = new Label(3, 4 + i, "--", cellFormat);
                                    sheet.addCell(schoolPercent2);
                                    sheet.setColumnView(3, 15);
                                    Label areaPercent2 = new Label(3 + ranks, 4 + i, "--", cellFormat);
                                    sheet.addCell(areaPercent2);
                                    sheet.setColumnView(3 + ranks, 15);
                                } else {
                                    Label schoolPercent3 = new Label(3, 4 + i, "--", cellFormat);
                                    sheet.addCell(schoolPercent3);
                                    sheet.setColumnView(3, 15);
                                }
                            } else if ("1".equals(signnl) && rankControl.intValue() == 1 && viewRankOfScoreInfo.equals("1")) {
                                Label c_rank2 = new Label(3, 4 + i, "--", cellFormat);
                                sheet.addCell(c_rank2);
                                sheet.setColumnView(3, 15);
                                Label s_rank2 = new Label(4, 4 + i, "--", cellFormat);
                                sheet.addCell(s_rank2);
                                sheet.setColumnView(4, 15);
                                if (isMoreSchool.equals("T")) {
                                    Label a_rank2 = new Label(4 + ranks, 4 + i, "--", cellFormat);
                                    sheet.addCell(a_rank2);
                                    sheet.setColumnView(4 + ranks, 15);
                                }
                            }
                            if (isMoreSchool.equals("T")) {
                                Label schoolStandard2 = new Label(3 + gradeOrScore + ranks + bei, 4 + i, "--", cellFormat);
                                sheet.addCell(schoolStandard2);
                                sheet.setColumnView(3 + gradeOrScore + ranks, 15);
                                Label areaStandard2 = new Label(4 + gradeOrScore + ranks + bei, 4 + i, "--", cellFormat);
                                sheet.addCell(areaStandard2);
                                sheet.setColumnView(4 + gradeOrScore + ranks + bei, 15);
                            } else {
                                Label schoolStandard3 = new Label(3 + gradeOrScore + ranks + bei, 4 + i, "--", cellFormat);
                                sheet.addCell(schoolStandard3);
                                sheet.setColumnView(3 + gradeOrScore + ranks, 15);
                            }
                            if (1 == pClass_c) {
                                Label classAverage4 = new Label(4 + gradeOrScore + (ranks * 2) + bei, 4 + i, "--", cellFormat);
                                sheet.addCell(classAverage4);
                                sheet.setColumnView(4 + gradeOrScore + (ranks * 2) + bei, 15);
                            }
                            if (1 == pGrade_c) {
                                Label schoolAverage4 = new Label(4 + gradeOrScore + (ranks * 2) + pClass_c + bei, 4 + i, "--", cellFormat);
                                sheet.addCell(schoolAverage4);
                                sheet.setColumnView(4 + gradeOrScore + (ranks * 2) + pClass_c + bei, 15);
                            }
                            if (1 == pArea_c && isMoreSchool.equals("T")) {
                                Label areaAverage3 = new Label(4 + gradeOrScore + (ranks * 2) + pClass_c + pGrade_c + bei, 4 + i, "--", cellFormat);
                                sheet.addCell(areaAverage3);
                                sheet.setColumnView(4 + gradeOrScore + (ranks * 2) + pClass + pGrade + bei, 15);
                            }
                            if (isMoreSchool.equals("T")) {
                                if (1 == pClass) {
                                    Label classMax = new Label(4 + gradeOrScore + (ranks * 2) + pClass_c + pGrade_c + pArea_c + bei, 4 + i, "--", cellFormat);
                                    sheet.addCell(classMax);
                                    sheet.setColumnView(4 + gradeOrScore + (ranks * 2) + pClass + pGrade + pArea + bei, 15);
                                }
                                if (1 == pGrade) {
                                    Label schoolMax = new Label(4 + gradeOrScore + (ranks * 2) + pClass_c + pGrade_c + pArea_c + pClass + bei, 4 + i, "--", cellFormat);
                                    sheet.addCell(schoolMax);
                                    sheet.setColumnView(4 + gradeOrScore + (ranks * 2) + pClass_c + pGrade_c + pArea_c + pClass + bei, 15);
                                }
                                if (1 == pArea) {
                                    Label areaMax = new Label(4 + gradeOrScore + (ranks * 2) + pClass_c + pGrade_c + pArea_c + pClass + pGrade + bei, 4 + i, "--", cellFormat);
                                    sheet.addCell(areaMax);
                                    sheet.setColumnView(4 + gradeOrScore + (ranks * 2) + pClass_c + pGrade_c + pArea_c + pClass + pGrade + bei, 15);
                                }
                            } else {
                                if (1 == pClass) {
                                    Label classMax2 = new Label(4 + gradeOrScore + (ranks * 2) + pClass_c + pGrade_c + pArea_c + bei, 4 + i, "--", cellFormat);
                                    sheet.addCell(classMax2);
                                    sheet.setColumnView(4 + gradeOrScore + (ranks * 2) + pClass_c + pGrade_c + pArea_c + bei, 15);
                                }
                                if (1 == pGrade) {
                                    Label schoolMax2 = new Label(4 + gradeOrScore + (ranks * 2) + pClass_c + pGrade_c + pArea_c + pClass + bei, 4 + i, "--", cellFormat);
                                    sheet.addCell(schoolMax2);
                                    sheet.setColumnView(4 + gradeOrScore + (ranks * 2) + pClass_c + pGrade_c + pArea_c + pClass + bei, 15);
                                }
                            }
                        } else {
                            Number subjectFull2 = new Number(1, 4 + i, list.get(i).getFullScore(), cellFormat);
                            sheet.addCell(subjectFull2);
                            sheet.setColumnView(1, 15);
                            if ("0".equals(signnl)) {
                                if (isMoreSchool.equals("T")) {
                                    Number schoolPercent4 = new Number(3, 4 + i, Double.parseDouble(df.format(list.get(i).getSchoolRank())), cellFormat2);
                                    sheet.addCell(schoolPercent4);
                                    sheet.setColumnView(3, 15);
                                    Number areaPercent3 = new Number(3 + ranks, 4 + i, Double.parseDouble(df.format(list.get(i).getAreaRank())), cellFormat2);
                                    sheet.addCell(areaPercent3);
                                    sheet.setColumnView(3 + ranks, 15);
                                } else {
                                    Number schoolPercent5 = new Number(3, 4 + i, Double.parseDouble(df.format(list.get(i).getSchoolRank())), cellFormat2);
                                    sheet.addCell(schoolPercent5);
                                    sheet.setColumnView(3, 15);
                                }
                            } else if ("1".equals(signnl) && rankControl.intValue() == 1 && viewRankOfScoreInfo.equals("1")) {
                                Number c_rank3 = new Number(3, 4 + i, Integer.parseInt(list.get(i).getExt1()), cellFormat2);
                                sheet.addCell(c_rank3);
                                sheet.setColumnView(3, 15);
                                Number s_rank3 = new Number(4, 4 + i, Integer.parseInt(list.get(i).getExt2()), cellFormat2);
                                sheet.addCell(s_rank3);
                                sheet.setColumnView(4, 15);
                                if (isMoreSchool.equals("T")) {
                                    Number a_rank3 = new Number(4 + ranks, 4 + i, list.get(i).getAreaRanking(), cellFormat2);
                                    sheet.addCell(a_rank3);
                                    sheet.setColumnView(4 + ranks, 15);
                                }
                            }
                            if (isMoreSchool.equals("T")) {
                                Number schoolStandard4 = new Number(3 + gradeOrScore + ranks + bei, 4 + i, Double.parseDouble(df.format(list.get(i).getSsdt())), cellFormat2);
                                sheet.addCell(schoolStandard4);
                                sheet.setColumnView(3 + gradeOrScore + ranks + bei, 15);
                                Number areaStandard3 = new Number(4 + gradeOrScore + ranks + bei, 4 + i, Double.parseDouble(df.format(list.get(i).getStandardScore_q())), cellFormat2);
                                sheet.addCell(areaStandard3);
                                sheet.setColumnView(4 + gradeOrScore + ranks + bei, 15);
                            } else {
                                Number schoolStandard5 = new Number(3 + gradeOrScore + ranks, 4 + i, Double.parseDouble(df.format(list.get(i).getSsdt())), cellFormat2);
                                sheet.addCell(schoolStandard5);
                                sheet.setColumnView(3 + gradeOrScore + ranks + bei, 15);
                            }
                            if ("2".equals(studentReportShowItem)) {
                                Label rawScore2 = new Label(2, 4 + i, list.get(i).getDengji(), cellFormat2);
                                sheet.addCell(rawScore2);
                                sheet.setColumnView(2, 15);
                                if (1 == pClass_c) {
                                    Label classAverage5 = new Label(4 + gradeOrScore + (ranks * 2) + bei, 4 + i, list.get(i).getClassAverageDengji(), cellFormat2);
                                    sheet.addCell(classAverage5);
                                    sheet.setColumnView(4 + gradeOrScore + (ranks * 2) + bei, 15);
                                }
                                if (1 == pGrade_c) {
                                    Label schoolAverage5 = new Label(4 + gradeOrScore + (ranks * 2) + pClass_c + bei, 4 + i, list.get(i).getGradeAverageDengji(), cellFormat2);
                                    sheet.addCell(schoolAverage5);
                                    sheet.setColumnView(4 + gradeOrScore + (ranks * 2) + pClass_c + bei, 15);
                                }
                                if (1 == pArea_c && isMoreSchool.equals("T")) {
                                    Label areaAverage4 = new Label(4 + gradeOrScore + (ranks * 2) + pClass_c + pGrade_c + bei, 4 + i, list.get(i).getAreaAvgDengji(), cellFormat2);
                                    sheet.addCell(areaAverage4);
                                    sheet.setColumnView(4 + gradeOrScore + (ranks * 2) + pClass_c + pGrade_c + bei, 15);
                                }
                                if (1 == pClass) {
                                    Label classMax3 = new Label(4 + gradeOrScore + (ranks * 2) + pClass_c + pGrade_c + pArea_c + bei, 4 + i, list.get(i).getClassMaxDengji(), cellFormat2);
                                    sheet.addCell(classMax3);
                                    sheet.setColumnView(4 + gradeOrScore + (ranks * 2) + pClass_c + pGrade_c + pArea_c + bei, 15);
                                }
                                if (1 == pGrade) {
                                    Label schoolMax3 = new Label(4 + gradeOrScore + (ranks * 2) + pClass + pClass_c + pGrade_c + pArea_c + bei, 4 + i, list.get(i).getGradeMaxDengji(), cellFormat2);
                                    sheet.addCell(schoolMax3);
                                    sheet.setColumnView(4 + gradeOrScore + (ranks * 2) + pClass + pClass_c + pGrade_c + pArea_c + bei, 15);
                                }
                                if (1 == pArea && isMoreSchool.equals("T")) {
                                    Label areaMax2 = new Label(4 + gradeOrScore + (ranks * 2) + pClass + pGrade + pClass_c + pGrade_c + pArea_c + bei, 4 + i, list.get(i).getAreaMaxDengji(), cellFormat2);
                                    sheet.addCell(areaMax2);
                                    sheet.setColumnView(4 + gradeOrScore + (ranks * 2) + pClass + pGrade + pClass_c + pGrade_c + pArea_c + bei, 15);
                                }
                            } else if ("1".equals(studentReportShowItem)) {
                                double fullScore = list.get(i).getFullScore();
                                Label rawScore3 = new Label(2, 4 + i, df1.format((list.get(i).getTotalScore().doubleValue() / fullScore) * 100.0d) + "%", cellFormat2);
                                sheet.addCell(rawScore3);
                                sheet.setColumnView(2, 15);
                                if (1 == pClass_c) {
                                    Label classAverage6 = new Label(4 + gradeOrScore + (ranks * 2) + bei, 4 + i, df1.format((list.get(i).getClassAverage() / fullScore) * 100.0d) + "%", cellFormat2);
                                    sheet.addCell(classAverage6);
                                    sheet.setColumnView(4 + gradeOrScore + (ranks * 2) + bei, 15);
                                }
                                if (1 == pGrade_c) {
                                    Label schoolAverage6 = new Label(4 + gradeOrScore + (ranks * 2) + pClass_c + bei, 4 + i, df1.format((list.get(i).getGradeAverage() / fullScore) * 100.0d) + "%", cellFormat2);
                                    sheet.addCell(schoolAverage6);
                                    sheet.setColumnView(4 + gradeOrScore + (ranks * 2) + pClass_c + bei, 15);
                                }
                                if (1 == pArea_c && isMoreSchool.equals("T")) {
                                    Label areaAverage5 = new Label(4 + gradeOrScore + (ranks * 2) + pClass_c + pGrade_c + bei, 4 + i, df1.format((list.get(i).getAreaAvg() / fullScore) * 100.0d) + "%", cellFormat2);
                                    sheet.addCell(areaAverage5);
                                    sheet.setColumnView(4 + gradeOrScore + (ranks * 2) + pClass_c + pGrade_c + bei, 15);
                                }
                                if (1 == pClass) {
                                    Label classMax4 = new Label(4 + gradeOrScore + (ranks * 2) + pClass_c + pGrade_c + pArea_c + bei, 4 + i, df1.format((list.get(i).getClassMax() / fullScore) * 100.0d) + "%", cellFormat2);
                                    sheet.addCell(classMax4);
                                    sheet.setColumnView(4 + gradeOrScore + (ranks * 2) + pClass_c + pGrade_c + pArea_c + bei, 15);
                                }
                                if (1 == pGrade) {
                                    Label schoolMax4 = new Label(4 + gradeOrScore + (ranks * 2) + pClass + pClass_c + pGrade_c + pArea_c + bei, 4 + i, df1.format((list.get(i).getGradeMax() / fullScore) * 100.0d) + "%", cellFormat2);
                                    sheet.addCell(schoolMax4);
                                    sheet.setColumnView(4 + gradeOrScore + (ranks * 2) + pClass + pClass_c + pGrade_c + pArea_c + bei, 15);
                                }
                                if (1 == pArea && isMoreSchool.equals("T")) {
                                    Label areaMax3 = new Label(4 + gradeOrScore + (ranks * 2) + pClass + pGrade + pClass_c + pGrade_c + pArea_c + bei, 4 + i, df1.format((list.get(i).getAreaMax() / fullScore) * 100.0d) + "%", cellFormat2);
                                    sheet.addCell(areaMax3);
                                    sheet.setColumnView(4 + gradeOrScore + (ranks * 2) + pClass + pGrade + pClass_c + pGrade_c + pArea_c + bei, 15);
                                }
                            } else {
                                String yuanshifen = Convert.toBigDecimal(df.format(list.get(i).getTotalScore())).stripTrailingZeros().toPlainString();
                                Number rawScore4 = new Number(2, 4 + i, Double.parseDouble(yuanshifen), cellFormat3);
                                sheet.addCell(rawScore4);
                                sheet.setColumnView(2, 15);
                                if (1 == pClass_c) {
                                    Number classAverage7 = new Number(4 + gradeOrScore + (ranks * 2) + bei, 4 + i, Double.parseDouble(df.format(list.get(i).getClassAverage())), cellFormat2);
                                    sheet.addCell(classAverage7);
                                    sheet.setColumnView(4 + gradeOrScore + (ranks * 2) + bei, 15);
                                }
                                if (1 == pGrade_c) {
                                    Number schoolAverage7 = new Number(4 + gradeOrScore + (ranks * 2) + pClass_c + bei, 4 + i, Double.parseDouble(df.format(list.get(i).getGradeAverage())), cellFormat2);
                                    sheet.addCell(schoolAverage7);
                                    sheet.setColumnView(4 + gradeOrScore + (ranks * 2) + pClass_c + bei, 15);
                                }
                                if (1 == pArea_c && isMoreSchool.equals("T")) {
                                    Number areaAverage6 = new Number(4 + gradeOrScore + (ranks * 2) + pClass_c + pGrade_c + bei, 4 + i, Double.parseDouble(df.format(list.get(i).getAreaAvg())), cellFormat2);
                                    sheet.addCell(areaAverage6);
                                    sheet.setColumnView(4 + gradeOrScore + (ranks * 2) + pClass_c + pGrade_c + bei, 15);
                                }
                                if (1 == pClass) {
                                    String classmax = Convert.toBigDecimal(df.format(list.get(i).getClassMax())).stripTrailingZeros().toPlainString();
                                    Number classMax5 = new Number(4 + gradeOrScore + (ranks * 2) + pClass_c + pGrade_c + pArea_c + bei, 4 + i, Double.parseDouble(classmax), cellFormat3);
                                    sheet.addCell(classMax5);
                                    sheet.setColumnView(4 + gradeOrScore + (ranks * 2) + pClass_c + pGrade_c + pArea_c + bei, 15);
                                }
                                if (1 == pGrade) {
                                    String grademax = Convert.toBigDecimal(df.format(list.get(i).getGradeMax())).stripTrailingZeros().toPlainString();
                                    Number schoolMax5 = new Number(4 + gradeOrScore + (ranks * 2) + pClass + pClass_c + pGrade_c + pArea_c + bei, 4 + i, Double.parseDouble(grademax), cellFormat3);
                                    sheet.addCell(schoolMax5);
                                    sheet.setColumnView(4 + gradeOrScore + (ranks * 2) + pClass + pClass_c + pGrade_c + pArea_c + bei, 15);
                                }
                                if (1 == pArea && isMoreSchool.equals("T")) {
                                    String areamax = Convert.toBigDecimal(df.format(list.get(i).getAreaMax())).stripTrailingZeros().toPlainString();
                                    Number areaMax4 = new Number(4 + gradeOrScore + (ranks * 2) + pClass_c + pGrade_c + pClass + pGrade + pArea_c + bei, 4 + i, Double.parseDouble(areamax), cellFormat3);
                                    sheet.addCell(areaMax4);
                                    sheet.setColumnView(4 + gradeOrScore + (ranks * 2) + pClass_c + pGrade_c + pClass + pGrade + pArea_c + bei, 15);
                                }
                            }
                        }
                    }
                    Label tishi = new Label(0, list.size() + 4, "注：①参加本次考试的班级人数 ：" + list.get(list.size() - 1).getExt4() + "，年级人数：" + list.get(list.size() - 1).getExt5() + "，区县人数：" + list.get(list.size() - 1).getExt6() + "。②百分等级分表明学生在全年级所处的位置。如X表示该生超越了全年级X%的学生。分值越高，学科水平越高。", title);
                    Label tishi1 = new Label(0, list.size() + 5, "③标准分用于不同学科之间的比较。一般位于17~83之间，群体（年级或区县）平均水平为50。标准分高的学科是你的相对优势学科，而标准分低的学科是你的相对劣势学科。", title);
                    sheet.addCell(tishi);
                    sheet.addCell(tishi1);
                    sheet.mergeCells(0, list.size() + 4, 12, list.size() + 4);
                    sheet.mergeCells(0, list.size() + 5, 12, list.size() + 5);
                    if (!"0".equals(studentReportShowItem)) {
                        sheet.removeColumn(1);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                wwBook.write();
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            if (Integer.valueOf(all_class).intValue() == 1) {
                                HttpServletResponse response = ServletActionContext.getResponse();
                                response.reset();
                                ServletOutputStream outputStream = response.getOutputStream();
                                String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                String loadFileName2 = loadFileName.replace("+", " ");
                                response.setContentType("Content-type: applicationnd.ms-excel");
                                response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xls");
                                response.setHeader("Content-length", String.valueOf(excelFile.length()));
                                byte[] tempByte = new byte[1024];
                                FileInputStream in = new FileInputStream(excelFile);
                                while (true) {
                                    int n = in.read(tempByte);
                                    if (n == -1) {
                                        break;
                                    }
                                    try {
                                        outputStream.write(tempByte, 0, n);
                                    } catch (Exception e2) {
                                        this.log.error("保存未成功", e2);
                                    }
                                }
                                outputStream.flush();
                                outputStream.close();
                                in.close();
                            } else {
                                filePath = methodZipAll(uri, dirPath, folderName, zipName);
                            }
                        }
                    } catch (WriteException e3) {
                        e3.printStackTrace();
                    }
                }
            } catch (Exception e4) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            if (Integer.valueOf(all_class).intValue() == 1) {
                                HttpServletResponse response2 = ServletActionContext.getResponse();
                                response2.reset();
                                ServletOutputStream outputStream2 = response2.getOutputStream();
                                String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                String loadFileName4 = loadFileName3.replace("+", " ");
                                response2.setContentType("Content-type: applicationnd.ms-excel");
                                response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xls");
                                response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                                byte[] tempByte2 = new byte[1024];
                                FileInputStream in2 = new FileInputStream(excelFile);
                                while (true) {
                                    int n2 = in2.read(tempByte2);
                                    if (n2 == -1) {
                                        break;
                                    }
                                    try {
                                        outputStream2.write(tempByte2, 0, n2);
                                    } catch (Exception e5) {
                                        this.log.error("保存未成功", e5);
                                    }
                                }
                                outputStream2.flush();
                                outputStream2.close();
                                in2.close();
                            } else {
                                filePath = methodZipAll(uri, dirPath, folderName, zipName);
                            }
                        }
                    } catch (WriteException e6) {
                        e6.printStackTrace();
                    }
                }
            } catch (Throwable th) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            if (Integer.valueOf(all_class).intValue() == 1) {
                                HttpServletResponse response3 = ServletActionContext.getResponse();
                                response3.reset();
                                ServletOutputStream outputStream3 = response3.getOutputStream();
                                String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                String loadFileName6 = loadFileName5.replace("+", " ");
                                response3.setContentType("Content-type: applicationnd.ms-excel");
                                response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xls");
                                response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                                byte[] tempByte3 = new byte[1024];
                                FileInputStream in3 = new FileInputStream(excelFile);
                                while (true) {
                                    int n3 = in3.read(tempByte3);
                                    if (n3 == -1) {
                                        break;
                                    }
                                    try {
                                        outputStream3.write(tempByte3, 0, n3);
                                    } catch (Exception e7) {
                                        this.log.error("保存未成功", e7);
                                    }
                                }
                                outputStream3.flush();
                                outputStream3.close();
                                in3.close();
                            } else {
                                methodZipAll(uri, dirPath, folderName, zipName);
                            }
                        }
                    } catch (WriteException e8) {
                        e8.printStackTrace();
                        throw th;
                    }
                }
                throw th;
            }
        } catch (Exception e9) {
            e9.printStackTrace();
        }
        return filePath;
    }

    public File getSubChartImgFile_s1(List<Studentlevel> list, String subStr, String lType, String insertUser, String subPngFlag, String dirPath) throws Exception {
        subjectLineImage_s1(list, subStr, lType, insertUser);
        File file = new File(dirPath + File.separator + "tmpLinePng" + File.separator + insertUser + subStr + lType + ".png");
        return file;
    }

    public void subjectLineImage_s1(List<Studentlevel> list, String subStr, String lType, String insertUser) throws Exception {
        String[] columnKeys1 = new String[list.size()];
        List classList = new ArrayList();
        new ArrayList();
        String[] rowKeys1 = new String[3];
        String[] row = {"1"};
        if (lType.equals("ssdt")) {
            int mm = 0;
            for (int i = 0; i < list.size(); i++) {
                String isSub = list.get(i).getIsSub();
                if ("F".equals(isSub)) {
                    mm++;
                    columnKeys1[i] = String.valueOf(list.get(i).getSubjectName());
                }
            }
            for (int j = 0; j < columnKeys1.length; j++) {
                String value = columnKeys1[j];
                if (value != null) {
                    classList.add(columnKeys1[j]);
                }
            }
            String[] columnKeys12 = (String[]) classList.toArray(new String[classList.size()]);
            double[][] data = new double[columnKeys12.length][1];
            for (int i2 = 0; i2 < mm; i2++) {
                for (int x = 0; x < 1; x++) {
                    data[i2][x] = list.get(i2).getSchoolRank();
                }
            }
            CategoryDataset dataset = this.lc.getBarData(data, columnKeys12, row);
            JFreeChart chart1 = this.lc.createBarChart(dataset, "", "", "学科水平及均衡性分析柱状图(百分等级分)--校");
            String ssdt = insertUser + subStr + lType;
            getChartImageFolder(chart1, "tmpLinePng", 1000, 608, ssdt);
            return;
        }
        if (lType.equals("areassdt")) {
            int mm2 = 0;
            for (int i3 = 0; i3 < list.size(); i3++) {
                String isSub2 = list.get(i3).getIsSub();
                if ("F".equals(isSub2)) {
                    mm2++;
                    columnKeys1[i3] = String.valueOf(list.get(i3).getSubjectName());
                }
            }
            for (int j2 = 0; j2 < columnKeys1.length; j2++) {
                String value2 = columnKeys1[j2];
                if (value2 != null) {
                    classList.add(columnKeys1[j2]);
                }
            }
            String[] columnKeys13 = (String[]) classList.toArray(new String[classList.size()]);
            double[][] data2 = new double[columnKeys13.length][1];
            for (int i4 = 0; i4 < mm2; i4++) {
                for (int x2 = 0; x2 < 1; x2++) {
                    data2[i4][x2] = list.get(i4).getAreaRank();
                }
            }
            CategoryDataset dataset2 = this.lc.getBarData(data2, columnKeys13, row);
            JFreeChart chart12 = this.lc.createBarChart(dataset2, "", "", "学科水平及均衡性分析柱状图(百分等级分)--区");
            String areassdt = insertUser + subStr + lType;
            getChartImageFolder(chart12, "tmpLinePng", 1000, 608, areassdt);
            return;
        }
        if (lType.equals("class")) {
            rowKeys1[0] = "本人原始分";
            rowKeys1[1] = "班级平均分";
            rowKeys1[2] = "班级最高分";
            String xName1 = String.valueOf("学生成绩与班级对比");
            int mm3 = 0;
            for (int i5 = 0; i5 < list.size(); i5++) {
                String isSub3 = list.get(i5).getIsSub();
                if (isSub3.equals("F")) {
                    mm3++;
                    columnKeys1[i5] = String.valueOf(list.get(i5).getSubjectName());
                }
            }
            double[][] data3 = new double[rowKeys1.length][mm3];
            List totalScore_list = new ArrayList();
            for (int i6 = 0; i6 < mm3; i6++) {
                data3[0][i6] = list.get(i6).getTotalScore().doubleValue();
                data3[1][i6] = list.get(i6).getClassAverage();
                data3[2][i6] = list.get(i6).getClassMax();
                totalScore_list.add(list.get(i6).getTotalScore());
                totalScore_list.add(Double.valueOf(list.get(i6).getClassAverage()));
                totalScore_list.add(Double.valueOf(list.get(i6).getClassMax()));
            }
            for (int j3 = 0; j3 < columnKeys1.length; j3++) {
                String value3 = columnKeys1[j3];
                if (value3 != null) {
                    classList.add(columnKeys1[j3]);
                }
            }
            Double.valueOf(0.0d);
            Double.valueOf(0.0d);
            Double maxDesc = (Double) Collections.max(totalScore_list);
            Double minDesc = (Double) Collections.min(totalScore_list);
            Double count_unit = Double.valueOf((maxDesc.doubleValue() - minDesc.doubleValue()) / 5.0d);
            columnKeys1 = (String[]) classList.toArray(new String[classList.size()]);
            int height = (int) (Const.width * 0.45d);
            HttpServletResponse response = ServletActionContext.getResponse();
            response.reset();
            response.setContentType("image/jpeg");
            JFreeChart chart = this.lc.getLineChar(data3, rowKeys1, columnKeys1, "", "", xName1, "#0", count_unit, Integer.valueOf(rowKeys1.length), "Y", "##.#");
            getChartImageFolder(chart, "tmpLinePng", Const.width, height + 300, insertUser + subStr + lType);
        }
        if (lType.equals("grade")) {
            rowKeys1[0] = "本人原始分";
            rowKeys1[1] = "年级平均分";
            rowKeys1[2] = "年级最高分";
            String xName12 = String.valueOf("学生成绩与年级对比");
            int mm4 = 0;
            for (int i7 = 0; i7 < list.size(); i7++) {
                String isSub4 = list.get(i7).getIsSub();
                if (isSub4.equals("F")) {
                    mm4++;
                    columnKeys1[i7] = String.valueOf(list.get(i7).getSubjectName());
                }
            }
            double[][] data4 = new double[rowKeys1.length][mm4];
            List totalScore_list2 = new ArrayList();
            for (int i8 = 0; i8 < mm4; i8++) {
                data4[0][i8] = list.get(i8).getTotalScore().doubleValue();
                data4[1][i8] = list.get(i8).getGradeAverage();
                data4[2][i8] = list.get(i8).getGradeMax();
                totalScore_list2.add(list.get(i8).getTotalScore());
                totalScore_list2.add(Double.valueOf(list.get(i8).getGradeAverage()));
                totalScore_list2.add(Double.valueOf(list.get(i8).getGradeMax()));
            }
            for (int j4 = 0; j4 < columnKeys1.length; j4++) {
                String value4 = columnKeys1[j4];
                if (value4 != null) {
                    classList.add(columnKeys1[j4]);
                }
            }
            Double.valueOf(0.0d);
            Double.valueOf(0.0d);
            Double maxDesc2 = (Double) Collections.max(totalScore_list2);
            Double minDesc2 = (Double) Collections.min(totalScore_list2);
            Double count_unit2 = Double.valueOf((maxDesc2.doubleValue() - minDesc2.doubleValue()) / 5.0d);
            columnKeys1 = (String[]) classList.toArray(new String[classList.size()]);
            int height2 = (int) (Const.width * 0.45d);
            HttpServletResponse response2 = ServletActionContext.getResponse();
            response2.reset();
            response2.setContentType("image/jpeg");
            JFreeChart chart2 = this.lc.getLineChar(data4, rowKeys1, columnKeys1, "", "", xName12, "#0", count_unit2, Integer.valueOf(rowKeys1.length), "Y", "##.#");
            getChartImageFolder(chart2, "tmpLinePng", Const.width, height2 + 300, insertUser + subStr + lType);
        }
        if (lType.equals("county")) {
            rowKeys1[0] = "本人原始分";
            rowKeys1[1] = "区县平均分";
            rowKeys1[2] = "区县最高分";
            String xName13 = String.valueOf("学生成绩与区县对比");
            int mm5 = 0;
            int pp = 0;
            for (int i9 = 0; i9 < list.size(); i9++) {
                String isSub5 = list.get(i9).getIsSub();
                if ("F".equals(isSub5)) {
                    mm5++;
                    columnKeys1[i9] = String.valueOf(list.get(i9).getSubjectName());
                } else {
                    pp++;
                }
            }
            double[][] data5 = new double[rowKeys1.length][mm5];
            List totalScore_list3 = new ArrayList();
            for (int i10 = 0; i10 < mm5; i10++) {
                data5[0][i10] = list.get(i10).getTotalScore().doubleValue();
                data5[2][i10] = list.get(i10).getAreaMax();
                data5[1][i10] = list.get(i10).getAreaAvg();
                totalScore_list3.add(list.get(i10).getTotalScore());
                totalScore_list3.add(Double.valueOf(list.get(i10).getAreaAvg()));
                totalScore_list3.add(Double.valueOf(list.get(i10).getAreaMax()));
            }
            for (int j5 = 0; j5 < columnKeys1.length; j5++) {
                String value5 = columnKeys1[j5];
                if (value5 != null) {
                    classList.add(columnKeys1[j5]);
                }
            }
            Double.valueOf(0.0d);
            Double.valueOf(0.0d);
            Double maxDesc3 = (Double) Collections.max(totalScore_list3);
            Double minDesc3 = (Double) Collections.min(totalScore_list3);
            Double count_unit3 = Double.valueOf((maxDesc3.doubleValue() - minDesc3.doubleValue()) / 5.0d);
            String[] columnKeys14 = (String[]) classList.toArray(new String[classList.size()]);
            int height3 = (int) (Const.width * 0.45d);
            HttpServletResponse response3 = ServletActionContext.getResponse();
            response3.reset();
            response3.setContentType("image/jpeg");
            JFreeChart chart3 = this.lc.getLineChar(data5, rowKeys1, columnKeys14, "", "", xName13, "#0", count_unit3, Integer.valueOf(rowKeys1.length), "Y", "##.#");
            getChartImageFolder(chart3, "tmpLinePng", Const.width, height3 + 300, insertUser + subStr + lType);
        }
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String s2(String examNum, String gradeNum, String schoolNum, String subjectNum, String classNum, String studentId, String studentName, String studentType, String type, String source, String history, String isMoreSchool, String isSaveWrite, String rptTitle, String rpt_name, String dirPath, String uri, String useId, int tupiansize, String all_class, String agent, String subPngFlag, String show, String subCompose, String studentReportShowItem) {
        String str;
        int intValue;
        int i;
        int n;
        int i2;
        Map<String, String> schoolpermissionMap = this.system.getschoolpermissionMap(schoolNum, useId);
        String classControl = schoolpermissionMap.get("classControl");
        String gradeControl = schoolpermissionMap.get("gradeControl");
        String quControl = schoolpermissionMap.get("quControl");
        int ClassAverage = Integer.parseInt(Configuration.getInstance().getClassAverage());
        int GradeAverage = Integer.parseInt(Configuration.getInstance().getGradeAverage());
        int AreaAverage = Integer.parseInt(Configuration.getInstance().getAreaAverage());
        String folderPath = "reportExcel" + useId;
        String folderName = "reportExcel" + useId;
        String zipName = "reportExcel" + useId;
        String excelName = rpt_name + "_" + gradeNum;
        if (null != studentName && !"".equals(studentName) && !studentName.contains(Const.STRING_SEPERATOR)) {
            excelName = excelName + "_" + studentName;
        }
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        String filePath = null;
        String str2 = rpt_name + ".xls";
        try {
            HSSFWorkbook wb = new HSSFWorkbook();
            HSSFSheet sheet = wb.createSheet("new sheet");
            wb.getSheetAt(0).setDisplayGridlines(false);
            HSSFFont headfont = wb.createFont();
            HSSFCellStyle cellStyle1_2 = wb.createCellStyle();
            cellStyle1_2.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cellStyle1_2.setFillForegroundColor(Const.fillForeground_color2);
            cellStyle1_2.setAlignment(HorizontalAlignment.CENTER);
            cellStyle1_2.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cellStyle1_2.setAlignment(HorizontalAlignment.CENTER);
            cellStyle1_2.setBorderBottom(BorderStyle.THIN);
            cellStyle1_2.setBorderLeft(BorderStyle.THIN);
            cellStyle1_2.setBorderRight(BorderStyle.THIN);
            cellStyle1_2.setBorderTop(BorderStyle.THIN);
            headfont.setFontHeightInPoints((short) 10);
            cellStyle1_2.setFont(headfont);
            cellStyle1_2.setWrapText(true);
            HSSFCellStyle cellStyle1_2_1 = wb.createCellStyle();
            cellStyle1_2_1.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cellStyle1_2_1.setFillForegroundColor(Const.fillForeground_color2);
            cellStyle1_2_1.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cellStyle1_2_1.setAlignment(HorizontalAlignment.CENTER);
            cellStyle1_2_1.setBorderBottom(BorderStyle.THIN);
            cellStyle1_2_1.setBorderLeft(BorderStyle.THIN);
            cellStyle1_2_1.setBorderRight(BorderStyle.THIN);
            cellStyle1_2_1.setBorderTop(BorderStyle.THIN);
            cellStyle1_2_1.setFont(headfont);
            HSSFDataFormat hdf = wb.createDataFormat();
            cellStyle1_2_1.setDataFormat(hdf.getFormat("0.0"));
            cellStyle1_2_1.setWrapText(true);
            HSSFCellStyle cellStyle1_2_3 = wb.createCellStyle();
            cellStyle1_2_3.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cellStyle1_2_3.setFillForegroundColor(Const.fillForeground_color2);
            cellStyle1_2_3.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cellStyle1_2_3.setAlignment(HorizontalAlignment.CENTER);
            cellStyle1_2_3.setBorderBottom(BorderStyle.THIN);
            cellStyle1_2_3.setBorderLeft(BorderStyle.THIN);
            cellStyle1_2_3.setBorderRight(BorderStyle.THIN);
            cellStyle1_2_3.setBorderTop(BorderStyle.THIN);
            cellStyle1_2_3.setFont(headfont);
            cellStyle1_2_3.setWrapText(true);
            HSSFCellStyle cellStyle1_2_2 = wb.createCellStyle();
            cellStyle1_2_2.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cellStyle1_2_2.setFillForegroundColor(Const.fillForeground_color2);
            cellStyle1_2_2.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cellStyle1_2_2.setAlignment(HorizontalAlignment.CENTER);
            cellStyle1_2_2.setBorderBottom(BorderStyle.THIN);
            cellStyle1_2_2.setBorderLeft(BorderStyle.THIN);
            cellStyle1_2_2.setBorderRight(BorderStyle.THIN);
            cellStyle1_2_2.setBorderTop(BorderStyle.THIN);
            headfont.setFontHeightInPoints((short) 10);
            cellStyle1_2_2.setFont(headfont);
            wb.createDataFormat();
            cellStyle1_2_2.setDataFormat(hdf.getFormat("0.00"));
            cellStyle1_2_2.setWrapText(true);
            HSSFCellStyle cellStyle1_3 = wb.createCellStyle();
            cellStyle1_3.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cellStyle1_3.setFillForegroundColor(Const.fillForeground_color3);
            cellStyle1_3.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cellStyle1_3.setAlignment(HorizontalAlignment.CENTER);
            cellStyle1_3.setBorderBottom(BorderStyle.THIN);
            cellStyle1_3.setBorderLeft(BorderStyle.THIN);
            cellStyle1_3.setBorderRight(BorderStyle.THIN);
            cellStyle1_3.setBorderTop(BorderStyle.THIN);
            cellStyle1_3.setFont(headfont);
            cellStyle1_3.setBottomBorderColor(Const.border_color);
            cellStyle1_3.setWrapText(true);
            HSSFCellStyle cellStyle1_3_1 = wb.createCellStyle();
            cellStyle1_3_1.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cellStyle1_3_1.setFillForegroundColor(Const.fillForeground_color3);
            cellStyle1_3_1.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cellStyle1_3_1.setAlignment(HorizontalAlignment.CENTER);
            cellStyle1_3_1.setBorderBottom(BorderStyle.THIN);
            cellStyle1_3_1.setBorderLeft(BorderStyle.THIN);
            cellStyle1_3_1.setBorderRight(BorderStyle.THIN);
            cellStyle1_3_1.setBorderTop(BorderStyle.THIN);
            cellStyle1_3_1.setFont(headfont);
            cellStyle1_3_1.setBottomBorderColor(Const.border_color);
            cellStyle1_3_1.setDataFormat(hdf.getFormat("0.0"));
            cellStyle1_3_1.setWrapText(true);
            HSSFCellStyle cellStyle1_3_3 = wb.createCellStyle();
            cellStyle1_3_3.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cellStyle1_3_3.setFillForegroundColor(Const.fillForeground_color3);
            cellStyle1_3_3.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cellStyle1_3_3.setAlignment(HorizontalAlignment.CENTER);
            cellStyle1_3_3.setBorderBottom(BorderStyle.THIN);
            cellStyle1_3_3.setBorderLeft(BorderStyle.THIN);
            cellStyle1_3_3.setBorderRight(BorderStyle.THIN);
            cellStyle1_3_3.setBorderTop(BorderStyle.THIN);
            cellStyle1_3_3.setFont(headfont);
            cellStyle1_3_3.setBottomBorderColor(Const.border_color);
            cellStyle1_3_3.setWrapText(true);
            HSSFCellStyle cellStyle1_3_2 = wb.createCellStyle();
            cellStyle1_3_2.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cellStyle1_3_2.setFillForegroundColor(Const.fillForeground_color3);
            cellStyle1_3_2.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cellStyle1_3_2.setAlignment(HorizontalAlignment.CENTER);
            cellStyle1_3_2.setBorderBottom(BorderStyle.THIN);
            cellStyle1_3_2.setBorderLeft(BorderStyle.THIN);
            cellStyle1_3_2.setBorderRight(BorderStyle.THIN);
            cellStyle1_3_2.setBorderTop(BorderStyle.THIN);
            cellStyle1_3_2.setFont(headfont);
            cellStyle1_3_2.setBottomBorderColor(Const.border_color);
            cellStyle1_3_2.setDataFormat(hdf.getFormat("0.00"));
            cellStyle1_3_2.setWrapText(true);
            HSSFCellStyle cellStyle1_4 = wb.createCellStyle();
            cellStyle1_4.setBorderBottom(BorderStyle.NONE);
            cellStyle1_4.setBorderLeft(BorderStyle.NONE);
            cellStyle1_4.setBorderRight(BorderStyle.NONE);
            cellStyle1_4.setBorderTop(BorderStyle.NONE);
            cellStyle1_4.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cellStyle1_4.setAlignment(HorizontalAlignment.LEFT);
            cellStyle1_4.setBottomBorderColor(Const.border_color);
            HSSFFont headfont4 = wb.createFont();
            headfont4.setFontHeightInPoints((short) 15);
            headfont4.setColor(Const.font_color);
            headfont4.setBold(true);
            cellStyle1_4.setFont(headfont4);
            cellStyle1_4.setWrapText(true);
            HSSFCellStyle cellStyle1_5 = wb.createCellStyle();
            cellStyle1_5.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cellStyle1_5.setFillForegroundColor(Const.fillForeground_color);
            cellStyle1_5.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cellStyle1_5.setAlignment(HorizontalAlignment.CENTER);
            cellStyle1_5.setBottomBorderColor(Const.border_color);
            cellStyle1_5.setBorderBottom(BorderStyle.THIN);
            cellStyle1_5.setBorderLeft(BorderStyle.THIN);
            cellStyle1_5.setBorderRight(BorderStyle.THIN);
            cellStyle1_5.setBorderTop(BorderStyle.THIN);
            HSSFFont headfont2 = wb.createFont();
            headfont2.setFontHeightInPoints((short) 10);
            cellStyle1_5.setFont(headfont2);
            cellStyle1_5.setWrapText(true);
            HSSFRow row0 = sheet.createRow(0);
            row0.setHeightInPoints(18.0f);
            HSSFCell cell0 = row0.createCell(0);
            cell0.setCellStyle(cellStyle1_4);
            cell0.setCellValue(new HSSFRichTextString(rpt_name));
            cell0.setCellStyle(cellStyle1_4);
            new ArrayList();
            try {
                try {
                    List<RptHeader> list = this.sp.getStuQuestionScore(examNum, subjectNum, gradeNum, schoolNum, classNum, studentId, studentType, source, type, subCompose);
                    DecimalFormat df01 = new DecimalFormat("0.0");
                    DecimalFormat df02 = new DecimalFormat("0.00");
                    df01.setRoundingMode(RoundingMode.HALF_UP);
                    df02.setRoundingMode(RoundingMode.HALF_UP);
                    String[] strtitile = (isMoreSchool == null || isMoreSchool.equals("T")) ? "0".equals(studentReportShowItem) ? new String[]{"小题", "题型", "满分值", "得分", "班级最高分", "班级平均分", "年级最高分", "年级平均分", "全区最高分", "全区平均分"} : new String[]{"小题", "题型", "正确率", "班级最高正确率", "班级平均正确率", "年级最高正确率", "年级平均正确率", "全区最高正确率", "全区平均正确率"} : "0".equals(studentReportShowItem) ? new String[]{"小题", "题型", "满分值", "得分", "班级最高分", "班级平均分", "年级最高分", "年级平均分"} : new String[]{"小题", "题型", "正确率", "班级最高正确率", "班级平均正确率", "年级最高正确率", "年级平均正确率"};
                    sheet.addMergedRegion(new CellRangeAddress(0, 0, 0, strtitile.length - 1));
                    int createrowNum = ExportTitleAdmanger(strtitile.length - 1, sheet, rptTitle, wb);
                    HSSFRow row = sheet.createRow(createrowNum);
                    int col = 0;
                    for (int j = 0; j < strtitile.length; j++) {
                        if ((ClassAverage == 1 || !strtitile[j].equals("班级平均分")) && ((GradeAverage == 1 || !strtitile[j].equals("年级平均分")) && (AreaAverage == 1 || !strtitile[j].equals("全区平均分")))) {
                            HSSFCell cell = row.createCell((short) col);
                            cell.setCellValue(strtitile[j]);
                            cell.setCellStyle(cellStyle1_5);
                            sheet.autoSizeColumn((short) col);
                            sheet.setColumnWidth((short) col, 4000);
                            col++;
                        }
                    }
                    for (int i3 = 0; i3 < list.size(); i3++) {
                        HSSFRow row2 = sheet.createRow(i3 + createrowNum + 1);
                        HSSFCell cell2 = row2.createCell(0);
                        cell2.setCellValue(list.get(i3).getQuestionNum() == null ? " " : list.get(i3).getQuestionNum() + "");
                        if (i3 % 2 > 0) {
                            cell2.setCellStyle(cellStyle1_2);
                        } else {
                            cell2.setCellStyle(cellStyle1_3);
                        }
                        short x = (short) (0 + 1);
                        HSSFCell cell3 = row2.createCell(x);
                        cell3.setCellValue(list.get(i3).getQtype() == null ? " " : list.get(i3).getQtype() + "");
                        if (i3 % 2 > 0) {
                            cell3.setCellStyle(cellStyle1_2);
                        } else {
                            cell3.setCellStyle(cellStyle1_3);
                        }
                        if ("0".equals(studentReportShowItem)) {
                            x = (short) (x + 1);
                            HSSFCell cell4 = row2.createCell(x);
                            String fullscore = Convert.toBigDecimal(df01.format(list.get(i3).getFullScore())).stripTrailingZeros().toPlainString();
                            cell4.setCellValue(String.valueOf(list.get(i3).getFullScore()) == null ? " " : fullscore);
                            if (i3 % 2 > 0) {
                                cell4.setCellStyle(cellStyle1_2_2);
                            } else {
                                cell4.setCellStyle(cellStyle1_3_2);
                            }
                        }
                        if ("0".equals(studentReportShowItem)) {
                            short x2 = (short) (x + 1);
                            HSSFCell cell5 = row2.createCell(x2);
                            String score = Convert.toBigDecimal(df01.format(list.get(i3).getQuestionScore())).stripTrailingZeros().toPlainString();
                            cell5.setCellValue(String.valueOf(list.get(i3).getQuestionScore()) == null ? " " : score);
                            if (i3 % 2 > 0) {
                                cell5.setCellStyle(cellStyle1_2_3);
                            } else {
                                cell5.setCellStyle(cellStyle1_3_3);
                            }
                            short x3 = (short) (x2 + 1);
                            HSSFCell cell6 = row2.createCell(x3);
                            String cmax = Convert.toBigDecimal(df01.format(list.get(i3).getC_max())).stripTrailingZeros().toPlainString();
                            if (classControl.equals("1") || !(null == list.get(i3).getQuestionNum() || list.get(i3).getQuestionNum().equals("整卷"))) {
                                cell6.setCellValue(String.valueOf(list.get(i3).getC_max()) == null ? " " : cmax);
                            } else {
                                cell6.setCellValue("");
                            }
                            if (i3 % 2 > 0) {
                                cell6.setCellStyle(cellStyle1_2_3);
                            } else {
                                cell6.setCellStyle(cellStyle1_3_3);
                            }
                            if (ClassAverage == 1) {
                                x3 = (short) (x3 + 1);
                                cell6 = row2.createCell(x3);
                                if (classControl.equals("1") || !(null == list.get(i3).getQuestionNum() || list.get(i3).getQuestionNum().equals("整卷"))) {
                                    cell6.setCellValue(((Double) (String.valueOf(list.get(i3).getCavg()) == null ? " " : Double.valueOf(df02.format(list.get(i3).getCavg())))).doubleValue());
                                } else {
                                    cell6.setCellValue("");
                                }
                            }
                            if (i3 % 2 > 0) {
                                cell6.setCellStyle(cellStyle1_2_2);
                            } else {
                                cell6.setCellStyle(cellStyle1_3_2);
                            }
                            short x4 = (short) (x3 + 1);
                            HSSFCell cell7 = row2.createCell(x4);
                            String gmax = Convert.toBigDecimal(df01.format(list.get(i3).getG_max())).stripTrailingZeros().toPlainString();
                            if (gradeControl.equals("1") || !(null == list.get(i3).getQuestionNum() || list.get(i3).getQuestionNum().equals("整卷"))) {
                                cell7.setCellValue(new StringBuilder().append(list.get(i3).getG_max()).append("").toString() == null ? " " : gmax);
                            } else {
                                cell7.setCellValue("");
                            }
                            if (i3 % 2 > 0) {
                                cell7.setCellStyle(cellStyle1_2_3);
                            } else {
                                cell7.setCellStyle(cellStyle1_3_3);
                            }
                            if (GradeAverage == 1) {
                                x4 = (short) (x4 + 1);
                                cell7 = row2.createCell(x4);
                                if (gradeControl.equals("1") || !(null == list.get(i3).getQuestionNum() || list.get(i3).getQuestionNum().equals("整卷"))) {
                                    cell7.setCellValue(((Double) (String.valueOf(list.get(i3).getGavg()) == null ? " " : Double.valueOf(df02.format(list.get(i3).getGavg())))).doubleValue());
                                } else {
                                    cell7.setCellValue("");
                                }
                            }
                            if (i3 % 2 > 0) {
                                cell7.setCellStyle(cellStyle1_2_2);
                            } else {
                                cell7.setCellStyle(cellStyle1_3_2);
                            }
                            if ("T".equals(isMoreSchool)) {
                                short x5 = (short) (x4 + 1);
                                HSSFCell cell8 = row2.createCell(x5);
                                String armax = Convert.toBigDecimal(df01.format(list.get(i3).getAr_max())).stripTrailingZeros().toPlainString();
                                if (quControl.equals("1") || !(null == list.get(i3).getQuestionNum() || list.get(i3).getQuestionNum().equals("整卷"))) {
                                    cell8.setCellValue(Double.valueOf(list.get(i3).getAr_max()) == null ? " " : armax);
                                } else {
                                    cell8.setCellValue("");
                                }
                                if (i3 % 2 > 0) {
                                    cell8.setCellStyle(cellStyle1_2_3);
                                } else {
                                    cell8.setCellStyle(cellStyle1_3_3);
                                }
                                if (AreaAverage == 1) {
                                    cell8 = row2.createCell((short) (x5 + 1));
                                    if (quControl.equals("1") || !(null == list.get(i3).getQuestionNum() || list.get(i3).getQuestionNum().equals("整卷"))) {
                                        cell8.setCellValue(((Double) (String.valueOf(list.get(i3).getAravg()) == null ? " " : Double.valueOf(df02.format(list.get(i3).getAravg())))).doubleValue());
                                    } else {
                                        cell8.setCellValue("");
                                    }
                                }
                                if (i3 % 2 > 0) {
                                    cell8.setCellStyle(cellStyle1_2_2);
                                } else {
                                    cell8.setCellStyle(cellStyle1_3_2);
                                }
                            }
                        } else {
                            double fullScore = list.get(i3).getFullScore();
                            short x6 = (short) (x + 1);
                            HSSFCell cell9 = row2.createCell(x6);
                            cell9.setCellValue(ExcelHelper.formatPercent(Double.valueOf(list.get(i3).getQuestionScore()), Double.valueOf(fullScore), df02, "--"));
                            if (i3 % 2 > 0) {
                                cell9.setCellStyle(cellStyle1_2_1);
                            } else {
                                cell9.setCellStyle(cellStyle1_3_1);
                            }
                            short x7 = (short) (x6 + 1);
                            HSSFCell cell10 = row2.createCell(x7);
                            if (classControl.equals("1") || (null != list.get(i3).getQuestionNum() && list.get(i3).getQuestionNum().equals("整卷"))) {
                                cell10.setCellValue(ExcelHelper.formatPercent(Double.valueOf(list.get(i3).getC_max()), Double.valueOf(fullScore), df02, "--"));
                            } else {
                                cell10.setCellValue("");
                            }
                            if (i3 % 2 > 0) {
                                cell10.setCellStyle(cellStyle1_2_1);
                            } else {
                                cell10.setCellStyle(cellStyle1_3_1);
                            }
                            short x8 = (short) (x7 + 1);
                            HSSFCell cell11 = row2.createCell(x8);
                            if (classControl.equals("1") || (null != list.get(i3).getQuestionNum() && list.get(i3).getQuestionNum().equals("整卷"))) {
                                cell11.setCellValue(ExcelHelper.formatPercent(Double.valueOf(list.get(i3).getCavg()), Double.valueOf(fullScore), df02, "--"));
                            } else {
                                cell11.setCellValue("");
                            }
                            if (i3 % 2 > 0) {
                                cell11.setCellStyle(cellStyle1_2_2);
                            } else {
                                cell11.setCellStyle(cellStyle1_3_2);
                            }
                            short x9 = (short) (x8 + 1);
                            HSSFCell cell12 = row2.createCell(x9);
                            if (gradeControl.equals("1") || (null != list.get(i3).getQuestionNum() && list.get(i3).getQuestionNum().equals("整卷"))) {
                                cell12.setCellValue(ExcelHelper.formatPercent(Double.valueOf(list.get(i3).getG_max()), Double.valueOf(fullScore), df02, "--"));
                            } else {
                                cell12.setCellValue("");
                            }
                            if (i3 % 2 > 0) {
                                cell12.setCellStyle(cellStyle1_2_1);
                            } else {
                                cell12.setCellStyle(cellStyle1_3_1);
                            }
                            short x10 = (short) (x9 + 1);
                            HSSFCell cell13 = row2.createCell(x10);
                            if (gradeControl.equals("1") || (null != list.get(i3).getQuestionNum() && list.get(i3).getQuestionNum().equals("整卷"))) {
                                cell13.setCellValue(ExcelHelper.formatPercent(Double.valueOf(list.get(i3).getGavg()), Double.valueOf(fullScore), df02, "--"));
                            } else {
                                cell13.setCellValue("");
                            }
                            if (i3 % 2 > 0) {
                                cell13.setCellStyle(cellStyle1_2_2);
                            } else {
                                cell13.setCellStyle(cellStyle1_3_2);
                            }
                            if ("T".equals(isMoreSchool)) {
                                short x11 = (short) (x10 + 1);
                                HSSFCell cell14 = row2.createCell(x11);
                                if (quControl.equals("1") || (null != list.get(i3).getQuestionNum() && list.get(i3).getQuestionNum().equals("整卷"))) {
                                    cell14.setCellValue(ExcelHelper.formatPercent(Double.valueOf(list.get(i3).getAr_max()), Double.valueOf(fullScore), df02, "--"));
                                } else {
                                    cell14.setCellValue("");
                                }
                                if (i3 % 2 > 0) {
                                    cell14.setCellStyle(cellStyle1_2_1);
                                } else {
                                    cell14.setCellStyle(cellStyle1_3_1);
                                }
                                HSSFCell cell15 = row2.createCell((short) (x11 + 1));
                                if (quControl.equals("1") || (null != list.get(i3).getQuestionNum() && list.get(i3).getQuestionNum().equals("整卷"))) {
                                    cell15.setCellValue(ExcelHelper.formatPercent(Double.valueOf(list.get(i3).getAravg()), Double.valueOf(fullScore), df02, "--"));
                                } else {
                                    cell15.setCellValue("");
                                }
                                if (i3 % 2 > 0) {
                                    cell15.setCellStyle(cellStyle1_2_2);
                                } else {
                                    cell15.setCellStyle(cellStyle1_3_2);
                                }
                            }
                        }
                    }
                    FileOutputStream fileOut1 = new FileOutputStream(excelFile);
                    wb.write(fileOut1);
                    fileOut1.close();
                    if (wb != null) {
                        if (null != isSaveWrite) {
                            try {
                                if (isSaveWrite.equals("F")) {
                                }
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }
                        if (Integer.valueOf(all_class).intValue() == 1) {
                            HttpServletResponse response = ServletActionContext.getResponse();
                            response.reset();
                            ServletOutputStream outputStream = response.getOutputStream();
                            String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName2 = loadFileName.replace("+", " ");
                            response.setContentType("Content-type: applicationnd.ms-excel");
                            response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xls");
                            response.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte = new byte[1024];
                            FileInputStream in = new FileInputStream(excelFile);
                            while (true) {
                                int n2 = in.read(tempByte);
                                if (n2 == -1) {
                                    break;
                                }
                                try {
                                    outputStream.write(tempByte, 0, n2);
                                } catch (Exception e2) {
                                    this.log.error("保存未成功", e2);
                                }
                            }
                            outputStream.flush();
                            outputStream.close();
                            in.close();
                        } else {
                            filePath = methodZipAll(uri, dirPath, folderName, zipName);
                        }
                    }
                } catch (Exception e3) {
                    if (wb != null) {
                        if (null != isSaveWrite) {
                            try {
                                if (isSaveWrite.equals("F")) {
                                }
                            } catch (Exception e4) {
                                e4.printStackTrace();
                            }
                        }
                        if (Integer.valueOf(all_class).intValue() == 1) {
                            HttpServletResponse response2 = ServletActionContext.getResponse();
                            response2.reset();
                            ServletOutputStream outputStream2 = response2.getOutputStream();
                            String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName4 = loadFileName3.replace("+", " ");
                            response2.setContentType("Content-type: applicationnd.ms-excel");
                            response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xls");
                            response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte2 = new byte[1024];
                            FileInputStream in2 = new FileInputStream(excelFile);
                            while (true) {
                                int n3 = in2.read(tempByte2);
                                if (n3 == -1) {
                                    break;
                                }
                                try {
                                    outputStream2.write(tempByte2, 0, n3);
                                } catch (Exception e5) {
                                    this.log.error("保存未成功", e5);
                                }
                            }
                            outputStream2.flush();
                            outputStream2.close();
                            in2.close();
                        } else {
                            filePath = methodZipAll(uri, dirPath, folderName, zipName);
                        }
                    }
                }
            } finally {
                if (wb != null) {
                    if (str != isSaveWrite) {
                        try {
                        } catch (Exception e6) {
                        }
                    }
                    if (intValue == i) {
                        while (true) {
                            if (n == i2) {
                                break;
                            }
                        }
                    }
                }
            }
        } catch (Exception e7) {
            e7.printStackTrace();
        }
        return filePath;
    }

    public File getSubChartImgFileQuestionNum(List<RptHeader> list, String subStr, String lType, String insertUser, String dirPath, String subPngFlag) {
        try {
            subjectLineImageQuestionNum(list, subStr, lType, insertUser);
            File file = new File(dirPath + File.separator + "tmpLinePng" + File.separator + insertUser + subStr + lType + ".png");
            return file;
        } catch (SQLException e) {
            e.printStackTrace();
            return null;
        }
    }

    public void subjectLineImageQuestionNum(List<RptHeader> list, String subStr, String lType, String insertUser) throws SQLException {
        int count = 0;
        for (int x = 0; x < list.size(); x++) {
            if (!list.get(x).getQuestionNum().equals("整卷")) {
                count++;
            }
        }
        String xName1 = "";
        String[] columnKeys1 = new String[count];
        new ArrayList();
        new ArrayList();
        String[] rowKeys1 = new String[2];
        if (lType.equals("questionfilec")) {
            rowKeys1[0] = "学生本人";
            rowKeys1[1] = "班级平均";
            xName1 = String.valueOf("小题得分率(%)折线图(班)");
        } else if (lType.equals("questionfileg")) {
            rowKeys1[0] = "学生本人";
            rowKeys1[1] = "年级平均";
            xName1 = String.valueOf("小题得分率(%)折线图(校)");
        } else if (lType.equals("questionfileq")) {
            rowKeys1[0] = "学生本人";
            rowKeys1[1] = "区县平均";
            xName1 = String.valueOf("小题得分率(%)折线图(区)");
        }
        double[][] data = new double[rowKeys1.length][count];
        List list_data = new ArrayList();
        for (int i = 0; i < list.size(); i++) {
            if (!list.get(i).getQuestionNum().equals("整卷")) {
                data[0][i] = Double.parseDouble(list.get(i).getRate()) * 100.0d;
                list_data.add(Double.valueOf(Double.parseDouble(list.get(i).getRate()) * 100.0d));
                if (lType.equals("questionfilec")) {
                    data[1][i] = Double.parseDouble(list.get(i).getC_avg()) * 100.0d;
                    list_data.add(Double.valueOf(Double.parseDouble(list.get(i).getC_avg()) * 100.0d));
                } else if (lType.equals("questionfileg")) {
                    data[1][i] = Double.parseDouble(list.get(i).getG_avg()) * 100.0d;
                    list_data.add(Double.valueOf(Double.parseDouble(list.get(i).getG_avg()) * 100.0d));
                } else if (lType.equals("questionfileq")) {
                    data[1][i] = Double.parseDouble(list.get(i).getAr_avg()) * 100.0d;
                    list_data.add(Double.valueOf(Double.parseDouble(list.get(i).getAr_avg()) * 100.0d));
                }
                columnKeys1[i] = String.valueOf(list.get(i).getQuestionNum());
            }
        }
        Double.valueOf(0.0d);
        Double.valueOf(0.0d);
        Double maxDesc = (Double) Collections.max(list_data);
        Double minDesc = (Double) Collections.min(list_data);
        Double count_unit = Double.valueOf((maxDesc.doubleValue() - minDesc.doubleValue()) / 5.0d);
        int height = (int) (1200 * 0.45d);
        HttpServletResponse response = ServletActionContext.getResponse();
        response.reset();
        response.setContentType("image/jpeg");
        JFreeChart chart = this.lc.getLineChar(data, rowKeys1, columnKeys1, "", "", xName1, "#0", count_unit, Integer.valueOf(rowKeys1.length), "Y", "##.##");
        getChartImageFolder(chart, "tmpLinePng", 1200, height, insertUser + subStr + lType);
    }

    public int ExportTitleAdmanger(int maxcell, HSSFSheet st, String str, HSSFWorkbook wb) {
        short i = 1;
        if (str != null) {
            HSSFRow row = st.createRow(1);
            CellRangeAddress region = new CellRangeAddress(1, 1, 0, maxcell);
            st.addMergedRegion(region);
            HSSFCell cell = row.createCell(0);
            cell.setCellValue(str);
            i = (short) (1 + 1);
        }
        return i;
    }

    /* JADX WARN: Removed duplicated region for block: B:155:0x0e4d  */
    /* JADX WARN: Removed duplicated region for block: B:24:0x0751 A[Catch: Exception -> 0x0f6f, all -> 0x1098, Exception -> 0x11c4, LOOP:0: B:22:0x0749->B:24:0x0751, LOOP_END, TryCatch #9 {Exception -> 0x0f6f, all -> 0x1098, blocks: (B:257:0x05fd, B:259:0x0608, B:261:0x0613, B:21:0x0719, B:22:0x0749, B:24:0x0751, B:26:0x0785, B:27:0x07ad, B:29:0x07b9, B:32:0x080e, B:34:0x0818, B:35:0x0829, B:38:0x0877, B:40:0x0881, B:41:0x0892, B:43:0x089d, B:46:0x08eb, B:48:0x08f5, B:49:0x08ff, B:51:0x0906, B:53:0x0911, B:56:0x095f, B:58:0x0969, B:59:0x097a, B:62:0x09c8, B:64:0x09d2, B:65:0x09e3, B:68:0x0a27, B:70:0x0a3a, B:71:0x0a4b, B:74:0x0a99, B:76:0x0aa3, B:77:0x0ab4, B:80:0x0af8, B:82:0x0b0b, B:83:0x0b1c, B:85:0x0b27, B:88:0x0b75, B:90:0x0b7f, B:91:0x0b90, B:94:0x0bd4, B:96:0x0be7, B:97:0x0bf1, B:98:0x0bbd, B:99:0x0b89, B:103:0x0e2b, B:104:0x0b15, B:105:0x0ae1, B:106:0x0aad, B:108:0x0a44, B:109:0x0a10, B:110:0x09dc, B:112:0x0973, B:114:0x0bfb, B:116:0x0c47, B:117:0x0c58, B:119:0x0c93, B:120:0x0ca4, B:122:0x0cdf, B:123:0x0cf0, B:125:0x0d2b, B:126:0x0d3c, B:128:0x0d77, B:129:0x0d88, B:131:0x0d93, B:133:0x0dce, B:134:0x0ddf, B:136:0x0e1a, B:138:0x0e24, B:140:0x0dd8, B:142:0x0d81, B:143:0x0d35, B:144:0x0ce9, B:145:0x0c9d, B:146:0x0c51, B:147:0x088b, B:148:0x0856, B:149:0x0822, B:150:0x07ed, B:152:0x0e31, B:262:0x064f, B:18:0x0684, B:20:0x068f, B:255:0x06d9), top: B:256:0x05fd, outer: #6 }] */
    /* JADX WARN: Removed duplicated region for block: B:29:0x07b9 A[Catch: Exception -> 0x0f6f, all -> 0x1098, Exception -> 0x11c4, TryCatch #9 {Exception -> 0x0f6f, all -> 0x1098, blocks: (B:257:0x05fd, B:259:0x0608, B:261:0x0613, B:21:0x0719, B:22:0x0749, B:24:0x0751, B:26:0x0785, B:27:0x07ad, B:29:0x07b9, B:32:0x080e, B:34:0x0818, B:35:0x0829, B:38:0x0877, B:40:0x0881, B:41:0x0892, B:43:0x089d, B:46:0x08eb, B:48:0x08f5, B:49:0x08ff, B:51:0x0906, B:53:0x0911, B:56:0x095f, B:58:0x0969, B:59:0x097a, B:62:0x09c8, B:64:0x09d2, B:65:0x09e3, B:68:0x0a27, B:70:0x0a3a, B:71:0x0a4b, B:74:0x0a99, B:76:0x0aa3, B:77:0x0ab4, B:80:0x0af8, B:82:0x0b0b, B:83:0x0b1c, B:85:0x0b27, B:88:0x0b75, B:90:0x0b7f, B:91:0x0b90, B:94:0x0bd4, B:96:0x0be7, B:97:0x0bf1, B:98:0x0bbd, B:99:0x0b89, B:103:0x0e2b, B:104:0x0b15, B:105:0x0ae1, B:106:0x0aad, B:108:0x0a44, B:109:0x0a10, B:110:0x09dc, B:112:0x0973, B:114:0x0bfb, B:116:0x0c47, B:117:0x0c58, B:119:0x0c93, B:120:0x0ca4, B:122:0x0cdf, B:123:0x0cf0, B:125:0x0d2b, B:126:0x0d3c, B:128:0x0d77, B:129:0x0d88, B:131:0x0d93, B:133:0x0dce, B:134:0x0ddf, B:136:0x0e1a, B:138:0x0e24, B:140:0x0dd8, B:142:0x0d81, B:143:0x0d35, B:144:0x0ce9, B:145:0x0c9d, B:146:0x0c51, B:147:0x088b, B:148:0x0856, B:149:0x0822, B:150:0x07ed, B:152:0x0e31, B:262:0x064f, B:18:0x0684, B:20:0x068f, B:255:0x06d9), top: B:256:0x05fd, outer: #6 }] */
    @Override // com.dmj.service.reportManagement.ReportExportService
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct code enable 'Show inconsistent code' option in preferences
    */
    public java.lang.String s3(java.lang.String r13, java.lang.String r14, java.lang.String r15, java.lang.String r16, java.lang.String r17, java.lang.String r18, java.lang.String r19, java.lang.String r20, java.lang.String r21, java.lang.String r22, java.lang.String r23, java.lang.String r24, java.lang.String r25, java.lang.String r26, java.lang.String r27, java.lang.String r28, java.lang.String r29, java.lang.String r30, int r31, java.lang.String r32, java.lang.String r33, java.lang.String r34, java.lang.String r35, java.lang.String r36, java.lang.String r37) {
        /*
            Method dump skipped, instructions count: 4558
            To view this dump change 'Code comments level' option to 'DEBUG'
        */
        throw new UnsupportedOperationException("Method not decompiled: com.dmj.serviceimpl.reportManagement.ReportExportServiceimpl.s3(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String):java.lang.String");
    }

    public File getSubChartImgFileQuestionNum(String subStr, String lType, String insertUser, List list, String dirPath) {
        try {
            subjectLineImageknowledgeability(subStr, lType, insertUser, list);
            File file = new File(dirPath + File.separator + "tmpLinePng" + File.separator + insertUser + subStr + lType + ".png");
            return file;
        } catch (SQLException e) {
            e.printStackTrace();
            return null;
        }
    }

    public void subjectLineImageknowledgeability(String subStr, String lType, String insertUser, List<RptHeader> list) throws SQLException {
        String xName1 = "";
        String[] columnKeys1 = new String[list.size()];
        new ArrayList();
        new ArrayList();
        String[] rowKeys1 = new String[2];
        if (lType.equals("knoC")) {
            rowKeys1[0] = "学生本人";
            rowKeys1[1] = "班级平均";
            xName1 = String.valueOf("知识点得分率(%)折线图(班)");
        } else if (lType.equals("knoG")) {
            rowKeys1[0] = "学生本人";
            rowKeys1[1] = "年级平均";
            xName1 = String.valueOf("知识点得分率(%)折线图(校)");
        } else if (lType.equals("knoQ")) {
            rowKeys1[0] = "学生本人";
            rowKeys1[1] = "区县平均";
            xName1 = String.valueOf("知识点得分率(%)折线图(区)");
        }
        double[][] data = new double[rowKeys1.length][list.size()];
        Double.valueOf(0.0d);
        Double.valueOf(0.0d);
        List list_data = new ArrayList();
        for (int i = 0; i < list.size(); i++) {
            data[0][i] = Double.parseDouble(list.get(i).getRate()) * 100.0d;
            list_data.add(Double.valueOf(Double.parseDouble(list.get(i).getRate()) * 100.0d));
            if (lType.equals("knoC")) {
                data[1][i] = Double.parseDouble(list.get(i).getC_rate()) * 100.0d;
                list_data.add(Double.valueOf(Double.parseDouble(list.get(i).getC_rate()) * 100.0d));
            } else if (lType.equals("knoG")) {
                data[1][i] = Double.parseDouble(list.get(i).getG_rate()) * 100.0d;
                list_data.add(Double.valueOf(Double.parseDouble(list.get(i).getG_rate()) * 100.0d));
            } else if (lType.equals("knoQ")) {
                data[1][i] = Double.parseDouble(list.get(i).getAr_avg()) * 100.0d;
                list_data.add(Double.valueOf(Double.parseDouble(list.get(i).getAr_avg()) * 100.0d));
            }
            columnKeys1[i] = String.valueOf(list.get(i).getKonwNum());
        }
        Double maxDesc = (Double) Collections.max(list_data);
        Double minDesc = (Double) Collections.min(list_data);
        Double count_unit = Double.valueOf((maxDesc.doubleValue() - minDesc.doubleValue()) / 5.0d);
        HttpServletResponse response = ServletActionContext.getResponse();
        response.reset();
        response.setContentType("image/jpeg");
        JFreeChart chart = this.lc.getLineChar(data, rowKeys1, columnKeys1, "", "", xName1, "#0.0", count_unit, Integer.valueOf(rowKeys1.length), "Y", "##.#");
        getChartImageFolder(chart, "tmpLinePng", Const.width_1100, 300, insertUser + subStr + lType);
    }

    public int ExportTitleAdmanger(int maxcell, HSSFSheet st, String str) {
        short i = 1;
        if (str != null) {
            HSSFRow row = st.createRow(1);
            HSSFCell cell = row.createCell(0);
            cell.setCellValue(str);
            i = (short) (1 + 1);
        }
        return i;
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String s4(String examNum, String gradeNum, String schoolNum, String subjectNum, String classNum, String studentId, String studentName, String studentType, String type, String source, String history, String isMoreSchool, String isSaveWrite, String rptTitle, String rpt_name, String dirPath, String uri, String useId, int tupiansize, String all_class, String agent, String subPngFlag, String show, String subCompose, String studentReportShowItem) {
        String folderPath = "reportExcel" + useId;
        String folderName = "reportExcel" + useId;
        String zipName = "reportExcel" + useId;
        String excelName = rpt_name + "_" + gradeNum;
        if (null != studentName && !"".equals(studentName) && !studentName.contains(Const.STRING_SEPERATOR)) {
            excelName = excelName + "_" + studentName;
        }
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        String filePath = null;
        String str = rpt_name + ".xls";
        try {
            HSSFWorkbook wb = new HSSFWorkbook();
            HSSFSheet sheet = wb.createSheet("new sheet");
            wb.getSheetAt(0).setDisplayGridlines(false);
            HSSFFont headfont = wb.createFont();
            HSSFCellStyle cellStyle1_2 = wb.createCellStyle();
            cellStyle1_2.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cellStyle1_2.setFillForegroundColor(Const.fillForeground_color2);
            cellStyle1_2.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cellStyle1_2.setAlignment(HorizontalAlignment.CENTER);
            cellStyle1_2.setBorderBottom(BorderStyle.THIN);
            cellStyle1_2.setBorderLeft(BorderStyle.THIN);
            cellStyle1_2.setBorderRight(BorderStyle.THIN);
            cellStyle1_2.setBorderTop(BorderStyle.THIN);
            headfont.setFontHeightInPoints((short) 10);
            cellStyle1_2.setFont(headfont);
            cellStyle1_2.setWrapText(true);
            HSSFCellStyle cellStyle1_2_1 = wb.createCellStyle();
            cellStyle1_2_1.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cellStyle1_2_1.setFillForegroundColor(Const.fillForeground_color2);
            cellStyle1_2_1.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cellStyle1_2_1.setAlignment(HorizontalAlignment.CENTER);
            cellStyle1_2_1.setBorderBottom(BorderStyle.THIN);
            cellStyle1_2_1.setBorderLeft(BorderStyle.THIN);
            cellStyle1_2_1.setBorderRight(BorderStyle.THIN);
            cellStyle1_2_1.setBorderTop(BorderStyle.THIN);
            headfont.setFontHeightInPoints((short) 10);
            cellStyle1_2_1.setFont(headfont);
            HSSFDataFormat hdf = wb.createDataFormat();
            cellStyle1_2_1.setDataFormat(hdf.getFormat("0.0"));
            cellStyle1_2_1.setWrapText(true);
            HSSFCellStyle cellStyle1_2_3 = wb.createCellStyle();
            cellStyle1_2_3.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cellStyle1_2_3.setFillForegroundColor(Const.fillForeground_color2);
            cellStyle1_2_3.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cellStyle1_2_3.setAlignment(HorizontalAlignment.CENTER);
            cellStyle1_2_3.setBorderBottom(BorderStyle.THIN);
            cellStyle1_2_3.setBorderLeft(BorderStyle.THIN);
            cellStyle1_2_3.setBorderRight(BorderStyle.THIN);
            cellStyle1_2_3.setBorderTop(BorderStyle.THIN);
            cellStyle1_2_3.setFont(headfont);
            cellStyle1_2_3.setWrapText(true);
            HSSFCellStyle cellStyle1_2_2 = wb.createCellStyle();
            cellStyle1_2_2.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cellStyle1_2_2.setFillForegroundColor(Const.fillForeground_color2);
            cellStyle1_2_2.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cellStyle1_2_2.setAlignment(HorizontalAlignment.CENTER);
            cellStyle1_2_2.setBorderBottom(BorderStyle.THIN);
            cellStyle1_2_2.setBorderLeft(BorderStyle.THIN);
            cellStyle1_2_2.setBorderRight(BorderStyle.THIN);
            cellStyle1_2_2.setBorderTop(BorderStyle.THIN);
            headfont.setFontHeightInPoints((short) 10);
            cellStyle1_2_2.setFont(headfont);
            cellStyle1_2_2.setDataFormat(hdf.getFormat("0.00"));
            cellStyle1_2_2.setWrapText(true);
            HSSFCellStyle cellStyle1_3 = wb.createCellStyle();
            cellStyle1_3.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cellStyle1_3.setFillForegroundColor(Const.fillForeground_color3);
            cellStyle1_3.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cellStyle1_3.setAlignment(HorizontalAlignment.CENTER);
            cellStyle1_3.setBorderBottom(BorderStyle.THIN);
            cellStyle1_3.setBorderLeft(BorderStyle.THIN);
            cellStyle1_3.setBorderRight(BorderStyle.THIN);
            cellStyle1_3.setBorderTop(BorderStyle.THIN);
            cellStyle1_3.setFont(headfont);
            cellStyle1_3.setBottomBorderColor(Const.border_color);
            cellStyle1_3.setWrapText(true);
            HSSFCellStyle cellStyle1_3_1 = wb.createCellStyle();
            cellStyle1_3_1.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cellStyle1_3_1.setFillForegroundColor(Const.fillForeground_color3);
            cellStyle1_3_1.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cellStyle1_3_1.setAlignment(HorizontalAlignment.CENTER);
            cellStyle1_3_1.setBorderBottom(BorderStyle.THIN);
            cellStyle1_3_1.setBorderLeft(BorderStyle.THIN);
            cellStyle1_3_1.setBorderRight(BorderStyle.THIN);
            cellStyle1_3_1.setBorderTop(BorderStyle.THIN);
            cellStyle1_3_1.setFont(headfont);
            cellStyle1_3_1.setBottomBorderColor(Const.border_color);
            cellStyle1_3_1.setDataFormat(hdf.getFormat("0.0"));
            cellStyle1_3_1.setWrapText(true);
            HSSFCellStyle cellStyle1_3_3 = wb.createCellStyle();
            cellStyle1_3_3.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cellStyle1_3_3.setFillForegroundColor(Const.fillForeground_color3);
            cellStyle1_3_3.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cellStyle1_3_3.setAlignment(HorizontalAlignment.CENTER);
            cellStyle1_3_3.setBorderBottom(BorderStyle.THIN);
            cellStyle1_3_3.setBorderLeft(BorderStyle.THIN);
            cellStyle1_3_3.setBorderRight(BorderStyle.THIN);
            cellStyle1_3_3.setBorderTop(BorderStyle.THIN);
            cellStyle1_3_3.setFont(headfont);
            cellStyle1_3_3.setWrapText(true);
            HSSFCellStyle cellStyle1_3_2 = wb.createCellStyle();
            cellStyle1_3_2.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cellStyle1_3_2.setFillForegroundColor(Const.fillForeground_color3);
            cellStyle1_3_2.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cellStyle1_3_2.setAlignment(HorizontalAlignment.CENTER);
            cellStyle1_3_2.setBorderBottom(BorderStyle.THIN);
            cellStyle1_3_2.setBorderLeft(BorderStyle.THIN);
            cellStyle1_3_2.setBorderRight(BorderStyle.THIN);
            cellStyle1_3_2.setBorderTop(BorderStyle.THIN);
            cellStyle1_3_2.setFont(headfont);
            cellStyle1_3_2.setBottomBorderColor(Const.border_color);
            cellStyle1_3_2.setDataFormat(hdf.getFormat("0.00"));
            cellStyle1_3_2.setWrapText(true);
            HSSFCellStyle cellStyle1_4 = wb.createCellStyle();
            cellStyle1_4.setBorderBottom(BorderStyle.NONE);
            cellStyle1_4.setBorderLeft(BorderStyle.NONE);
            cellStyle1_4.setBorderRight(BorderStyle.NONE);
            cellStyle1_4.setBorderTop(BorderStyle.NONE);
            cellStyle1_4.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cellStyle1_4.setAlignment(HorizontalAlignment.LEFT);
            cellStyle1_4.setBottomBorderColor(Const.border_color);
            HSSFFont headfont4 = wb.createFont();
            headfont4.setFontHeightInPoints((short) 15);
            headfont4.setColor(Const.font_color);
            headfont4.setBold(true);
            cellStyle1_4.setFont(headfont4);
            cellStyle1_4.setWrapText(true);
            HSSFCellStyle cellStyle1_5 = wb.createCellStyle();
            cellStyle1_5.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cellStyle1_5.setFillForegroundColor(Const.fillForeground_color);
            cellStyle1_5.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cellStyle1_5.setAlignment(HorizontalAlignment.CENTER);
            cellStyle1_5.setBottomBorderColor(Const.border_color);
            cellStyle1_5.setBorderBottom(BorderStyle.THIN);
            cellStyle1_5.setBorderLeft(BorderStyle.THIN);
            cellStyle1_5.setBorderRight(BorderStyle.THIN);
            cellStyle1_5.setBorderTop(BorderStyle.THIN);
            HSSFFont headfont2 = wb.createFont();
            headfont2.setFontHeightInPoints((short) 10);
            cellStyle1_5.setFont(headfont2);
            cellStyle1_5.setWrapText(true);
            HSSFRow row0 = sheet.createRow(0);
            row0.setHeightInPoints(18.0f);
            HSSFCell cell0 = row0.createCell(0);
            cell0.setCellStyle(cellStyle1_4);
            HSSFCellStyle cellStyle1_2_left = wb.createCellStyle();
            cellStyle1_2_left.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cellStyle1_2_left.setFillForegroundColor(Const.fillForeground_color2);
            cellStyle1_2_left.setAlignment(HorizontalAlignment.LEFT);
            cellStyle1_2_left.setBorderBottom(BorderStyle.THIN);
            cellStyle1_2_left.setBorderLeft(BorderStyle.THIN);
            cellStyle1_2_left.setBorderRight(BorderStyle.THIN);
            cellStyle1_2_left.setBorderTop(BorderStyle.THIN);
            HSSFFont headfont_left = wb.createFont();
            headfont_left.setFontHeightInPoints((short) 10);
            cellStyle1_2_left.setFont(headfont_left);
            cellStyle1_2_left.setWrapText(true);
            HSSFCellStyle cellStyle1_3_left = wb.createCellStyle();
            cellStyle1_3_left.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cellStyle1_3_left.setFillForegroundColor(Const.fillForeground_color3);
            cellStyle1_3_left.setAlignment(HorizontalAlignment.LEFT);
            cellStyle1_3_left.setBorderBottom(BorderStyle.THIN);
            cellStyle1_3_left.setBorderLeft(BorderStyle.THIN);
            cellStyle1_3_left.setBorderRight(BorderStyle.THIN);
            cellStyle1_3_left.setBorderTop(BorderStyle.THIN);
            HSSFFont headfont3_left = wb.createFont();
            headfont3_left.setFontHeightInPoints((short) 10);
            cellStyle1_3_left.setFont(headfont3_left);
            cellStyle1_3_left.setWrapText(true);
            DecimalFormat df01 = new DecimalFormat("0.0");
            DecimalFormat df02 = new DecimalFormat("0.00");
            df01.setRoundingMode(RoundingMode.HALF_UP);
            df02.setRoundingMode(RoundingMode.HALF_UP);
            try {
                cell0.setCellValue(new HSSFRichTextString("S4 学生能力点得分情况"));
                cell0.setCellStyle(cellStyle1_4);
                new ArrayList();
                String[] strtitile = (isMoreSchool == null || isMoreSchool.equals("T")) ? "0".equals(studentReportShowItem) ? new String[]{"能力点编号", "能力点名称", "满分值", "得分", "班级最高分", "班级平均分", "年级最高分", "年级平均分", "全区最高分", "全区平均分"} : new String[]{"能力点编号", "能力点名称", "正确率", "班级最高正确率", "班级平均正确率", "年级最高正确率", "年级平均正确率", "全区最高正确率", "全区平均正确率"} : "0".equals(studentReportShowItem) ? new String[]{"能力点编号", "能力点名称", "满分值", "得分", "班级最高分", "班级平均分", "年级最高分", "年级平均分"} : new String[]{"能力点编号", "能力点名称", "正确率", "班级最高正确率", "班级平均正确率", "年级最高正确率", "年级平均正确率"};
                sheet.addMergedRegion(new CellRangeAddress(0, 0, 0, strtitile.length - 1));
                int createrowNum = ExportTitleAdmanger(strtitile.length - 1, sheet, rptTitle);
                HSSFRow row = sheet.createRow(createrowNum);
                for (int j = 0; j < strtitile.length; j++) {
                    HSSFCell cell = row.createCell((short) j);
                    cell.setCellValue(strtitile[j]);
                    cell.setCellStyle(cellStyle1_5);
                    sheet.autoSizeColumn((short) j);
                    sheet.setColumnWidth((short) j, 3500);
                }
                sheet.setColumnWidth(1, 8000);
                List<RptHeader> list = this.ska.getStuAbilityScore(examNum, subjectNum, gradeNum, schoolNum, classNum, studentId, type, studentType, source, subCompose);
                for (int i = 0; i < list.size(); i++) {
                    HSSFRow row2 = sheet.createRow(i + createrowNum + 1);
                    HSSFCell cell2 = row2.createCell(0);
                    cell2.setCellValue(list.get(i).getAbilityPointNum() == null ? " " : list.get(i).getAbilityPointNum() + "");
                    if (i % 2 > 0) {
                        cell2.setCellStyle(cellStyle1_2_left);
                    } else {
                        cell2.setCellStyle(cellStyle1_3_left);
                    }
                    short x = (short) (0 + 1);
                    HSSFCell cell3 = row2.createCell(x);
                    cell3.setCellValue(String.valueOf(list.get(i).getName()) == null ? " " : list.get(i).getName() + "");
                    if (i % 2 > 0) {
                        cell3.setCellStyle(cellStyle1_2_left);
                    } else {
                        cell3.setCellStyle(cellStyle1_3_left);
                    }
                    if ("0".equals(studentReportShowItem)) {
                        x = (short) (x + 1);
                        HSSFCell cell4 = row2.createCell(x);
                        String fullscore = Convert.toBigDecimal(df01.format(list.get(i).getTotalScore())).stripTrailingZeros().toPlainString();
                        cell4.setCellValue(Double.valueOf(list.get(i).getTotalScore()) == null ? " " : fullscore);
                        if (i % 2 > 0) {
                            cell4.setCellStyle(cellStyle1_2_3);
                        } else {
                            cell4.setCellStyle(cellStyle1_3_3);
                        }
                    }
                    if ("0".equals(studentReportShowItem)) {
                        short x2 = (short) (x + 1);
                        HSSFCell cell5 = row2.createCell(x2);
                        String score = Convert.toBigDecimal(df01.format(list.get(i).getScore())).stripTrailingZeros().toPlainString();
                        cell5.setCellValue(Double.valueOf(list.get(i).getScore()) == null ? " " : score);
                        if (i % 2 > 0) {
                            cell5.setCellStyle(cellStyle1_2_3);
                        } else {
                            cell5.setCellStyle(cellStyle1_3_3);
                        }
                        short x3 = (short) (x2 + 1);
                        HSSFCell cell6 = row2.createCell(x3);
                        String cmax = Convert.toBigDecimal(df01.format(list.get(i).getCm())).stripTrailingZeros().toPlainString();
                        cell6.setCellValue(Double.valueOf(list.get(i).getCm()) == null ? " " : cmax);
                        if (i % 2 > 0) {
                            cell6.setCellStyle(cellStyle1_2_3);
                        } else {
                            cell6.setCellStyle(cellStyle1_3_3);
                        }
                        short x4 = (short) (x3 + 1);
                        HSSFCell cell7 = row2.createCell(x4);
                        cell7.setCellValue(((Double) (Double.valueOf(list.get(i).getCavg()) == null ? " " : Double.valueOf(df02.format(list.get(i).getCavg())))).doubleValue());
                        if (i % 2 > 0) {
                            cell7.setCellStyle(cellStyle1_2_2);
                        } else {
                            cell7.setCellStyle(cellStyle1_3_2);
                        }
                        short x5 = (short) (x4 + 1);
                        HSSFCell cell8 = row2.createCell(x5);
                        String gmax = Convert.toBigDecimal(df01.format(list.get(i).getGm())).stripTrailingZeros().toPlainString();
                        cell8.setCellValue(Double.valueOf(list.get(i).getGm()) == null ? " " : gmax);
                        if (i % 2 > 0) {
                            cell8.setCellStyle(cellStyle1_2_3);
                        } else {
                            cell8.setCellStyle(cellStyle1_3_3);
                        }
                        short x6 = (short) (x5 + 1);
                        HSSFCell cell9 = row2.createCell(x6);
                        cell9.setCellValue(((Double) (Double.valueOf(list.get(i).getGavg()) == null ? " " : Double.valueOf(df02.format(list.get(i).getGavg())))).doubleValue());
                        if (i % 2 > 0) {
                            cell9.setCellStyle(cellStyle1_2_2);
                        } else {
                            cell9.setCellStyle(cellStyle1_3_2);
                        }
                        if ("T".equals(isMoreSchool)) {
                            short x7 = (short) (x6 + 1);
                            HSSFCell cell10 = row2.createCell(x7);
                            String armax = Convert.toBigDecimal(df01.format(list.get(i).getAr_max())).stripTrailingZeros().toPlainString();
                            cell10.setCellValue(Double.valueOf(list.get(i).getAr_max()) == null ? " " : armax);
                            if (i % 2 > 0) {
                                cell10.setCellStyle(cellStyle1_2_3);
                            } else {
                                cell10.setCellStyle(cellStyle1_3_3);
                            }
                            HSSFCell cell11 = row2.createCell((short) (x7 + 1));
                            cell11.setCellValue(((Double) (Double.valueOf(list.get(i).getAravg()) == null ? " " : Double.valueOf(df02.format(list.get(i).getAravg())))).doubleValue());
                            if (i % 2 > 0) {
                                cell11.setCellStyle(cellStyle1_2_2);
                            } else {
                                cell11.setCellStyle(cellStyle1_3_2);
                            }
                        }
                    } else {
                        double fullScore = list.get(i).getTotalScore();
                        short x8 = (short) (x + 1);
                        HSSFCell cell12 = row2.createCell(x8);
                        cell12.setCellValue(ExcelHelper.formatPercent(Double.valueOf(list.get(i).getScore()), Double.valueOf(fullScore), df02, "--"));
                        if (i % 2 > 0) {
                            cell12.setCellStyle(cellStyle1_2_1);
                        } else {
                            cell12.setCellStyle(cellStyle1_3_1);
                        }
                        short x9 = (short) (x8 + 1);
                        HSSFCell cell13 = row2.createCell(x9);
                        cell13.setCellValue(ExcelHelper.formatPercent(Double.valueOf(list.get(i).getCm()), Double.valueOf(fullScore), df02, "--"));
                        if (i % 2 > 0) {
                            cell13.setCellStyle(cellStyle1_2_1);
                        } else {
                            cell13.setCellStyle(cellStyle1_3_1);
                        }
                        short x10 = (short) (x9 + 1);
                        HSSFCell cell14 = row2.createCell(x10);
                        cell14.setCellValue(ExcelHelper.formatPercent(Double.valueOf(list.get(i).getCavg()), Double.valueOf(fullScore), df02, "--"));
                        if (i % 2 > 0) {
                            cell14.setCellStyle(cellStyle1_2_2);
                        } else {
                            cell14.setCellStyle(cellStyle1_3_2);
                        }
                        short x11 = (short) (x10 + 1);
                        HSSFCell cell15 = row2.createCell(x11);
                        cell15.setCellValue(ExcelHelper.formatPercent(Double.valueOf(list.get(i).getGm()), Double.valueOf(fullScore), df02, "--"));
                        if (i % 2 > 0) {
                            cell15.setCellStyle(cellStyle1_2_1);
                        } else {
                            cell15.setCellStyle(cellStyle1_3_1);
                        }
                        short x12 = (short) (x11 + 1);
                        HSSFCell cell16 = row2.createCell(x12);
                        cell16.setCellValue(ExcelHelper.formatPercent(Double.valueOf(list.get(i).getGavg()), Double.valueOf(fullScore), df02, "--"));
                        if (i % 2 > 0) {
                            cell16.setCellStyle(cellStyle1_2_2);
                        } else {
                            cell16.setCellStyle(cellStyle1_3_2);
                        }
                        if ("T".equals(isMoreSchool)) {
                            short x13 = (short) (x12 + 1);
                            HSSFCell cell17 = row2.createCell(x13);
                            cell17.setCellValue(ExcelHelper.formatPercent(Double.valueOf(list.get(i).getAr_max()), Double.valueOf(fullScore), df02, "--"));
                            if (i % 2 > 0) {
                                cell17.setCellStyle(cellStyle1_2_1);
                            } else {
                                cell17.setCellStyle(cellStyle1_3_1);
                            }
                            HSSFCell cell18 = row2.createCell((short) (x13 + 1));
                            cell18.setCellValue(ExcelHelper.formatPercent(Double.valueOf(list.get(i).getAravg()), Double.valueOf(fullScore), df02, "--"));
                            if (i % 2 > 0) {
                                cell18.setCellStyle(cellStyle1_2_2);
                            } else {
                                cell18.setCellStyle(cellStyle1_3_2);
                            }
                        }
                    }
                }
                FileOutputStream fileOut1 = new FileOutputStream(excelFile);
                wb.write(fileOut1);
                fileOut1.close();
                if (wb != null) {
                    if (null != isSaveWrite) {
                        try {
                            if (isSaveWrite.equals("F")) {
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                    if (Integer.valueOf(all_class).intValue() == 1) {
                        HttpServletResponse response = ServletActionContext.getResponse();
                        response.reset();
                        ServletOutputStream outputStream = response.getOutputStream();
                        String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                        String loadFileName2 = loadFileName.replace("+", " ");
                        response.setContentType("Content-type: applicationnd.ms-excel");
                        response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xls");
                        response.setHeader("Content-length", String.valueOf(excelFile.length()));
                        byte[] tempByte = new byte[1024];
                        FileInputStream in = new FileInputStream(excelFile);
                        while (true) {
                            int n = in.read(tempByte);
                            if (n == -1) {
                                break;
                            }
                            try {
                                outputStream.write(tempByte, 0, n);
                            } catch (Exception e2) {
                                this.log.error("保存未成功", e2);
                            }
                        }
                        outputStream.flush();
                        outputStream.close();
                        in.close();
                    } else {
                        filePath = methodZipAll(uri, dirPath, folderName, zipName);
                    }
                }
            } catch (IOException e3) {
                if (wb != null) {
                    if (null != isSaveWrite) {
                        try {
                            if (isSaveWrite.equals("F")) {
                            }
                        } catch (Exception e4) {
                            e4.printStackTrace();
                        }
                    }
                    if (Integer.valueOf(all_class).intValue() == 1) {
                        HttpServletResponse response2 = ServletActionContext.getResponse();
                        response2.reset();
                        ServletOutputStream outputStream2 = response2.getOutputStream();
                        String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                        String loadFileName4 = loadFileName3.replace("+", " ");
                        response2.setContentType("Content-type: applicationnd.ms-excel");
                        response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xls");
                        response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                        byte[] tempByte2 = new byte[1024];
                        FileInputStream in2 = new FileInputStream(excelFile);
                        while (true) {
                            int n2 = in2.read(tempByte2);
                            if (n2 == -1) {
                                break;
                            }
                            try {
                                outputStream2.write(tempByte2, 0, n2);
                            } catch (Exception e5) {
                                this.log.error("保存未成功", e5);
                            }
                        }
                        outputStream2.flush();
                        outputStream2.close();
                        in2.close();
                    } else {
                        filePath = methodZipAll(uri, dirPath, folderName, zipName);
                    }
                }
            } catch (Throwable th) {
                if (wb != null) {
                    if (null != isSaveWrite) {
                        try {
                            if (isSaveWrite.equals("F")) {
                            }
                        } catch (Exception e6) {
                            e6.printStackTrace();
                            throw th;
                        }
                    }
                    if (Integer.valueOf(all_class).intValue() == 1) {
                        HttpServletResponse response3 = ServletActionContext.getResponse();
                        response3.reset();
                        ServletOutputStream outputStream3 = response3.getOutputStream();
                        String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                        String loadFileName6 = loadFileName5.replace("+", " ");
                        response3.setContentType("Content-type: applicationnd.ms-excel");
                        response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xls");
                        response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                        byte[] tempByte3 = new byte[1024];
                        FileInputStream in3 = new FileInputStream(excelFile);
                        while (true) {
                            int n3 = in3.read(tempByte3);
                            if (n3 == -1) {
                                break;
                            }
                            try {
                                outputStream3.write(tempByte3, 0, n3);
                            } catch (Exception e7) {
                                this.log.error("保存未成功", e7);
                            }
                        }
                        outputStream3.flush();
                        outputStream3.close();
                        in3.close();
                    } else {
                        methodZipAll(uri, dirPath, folderName, zipName);
                    }
                }
                throw th;
            }
        } catch (Exception e8) {
            e8.printStackTrace();
        }
        return filePath;
    }

    public File getSubChartImgFileKnowledge_s4(String subStr, String lType, String insertUser, List list, String dirPath) {
        try {
            subjectLineImageknowledge_s4(subStr, lType, insertUser, list);
            File file = new File(dirPath + File.separator + "tmpLinePng" + File.separator + insertUser + subStr + lType + ".png");
            return file;
        } catch (SQLException e) {
            e.printStackTrace();
            return null;
        }
    }

    public void subjectLineImageknowledge_s4(String subStr, String lType, String insertUser, List<RptHeader> list) throws SQLException {
        String xName1 = "";
        String[] columnKeys1 = new String[list.size()];
        new ArrayList();
        new ArrayList();
        String[] rowKeys1 = new String[2];
        if (lType.equals("abilityknoC")) {
            rowKeys1[0] = "学生本人";
            rowKeys1[1] = "班级平均";
            xName1 = String.valueOf("能力点得分率(%)折线图(班)");
        } else if (lType.equals("abilityknoG")) {
            rowKeys1[0] = "学生本人";
            rowKeys1[1] = "年级平均";
            xName1 = String.valueOf("能力点得分率(%)折线图(校)");
        } else if (lType.equals("abilityknoQ")) {
            rowKeys1[0] = "学生本人";
            rowKeys1[1] = "区县平均";
            xName1 = String.valueOf("能力点得分率(%)折线图(区)");
        }
        double[][] data = new double[rowKeys1.length][list.size()];
        List list_data = new ArrayList();
        Double.valueOf(0.0d);
        Double.valueOf(0.0d);
        for (int i = 0; i < list.size(); i++) {
            data[0][i] = Double.parseDouble(list.get(i).getRate()) * 100.0d;
            list_data.add(Double.valueOf(Double.parseDouble(list.get(i).getRate()) * 100.0d));
            if (lType.equals("abilityknoC")) {
                data[1][i] = Double.parseDouble(list.get(i).getC_rate()) * 100.0d;
                list_data.add(Double.valueOf(Double.parseDouble(list.get(i).getC_rate()) * 100.0d));
            } else if (lType.equals("abilityknoG")) {
                data[1][i] = Double.parseDouble(list.get(i).getG_rate()) * 100.0d;
                list_data.add(Double.valueOf(Double.parseDouble(list.get(i).getG_rate()) * 100.0d));
            } else if (lType.equals("abilityknoQ")) {
                data[1][i] = Double.parseDouble(list.get(i).getAr_avg()) * 100.0d;
                list_data.add(Double.valueOf(Double.parseDouble(list.get(i).getAr_avg()) * 100.0d));
            }
            columnKeys1[i] = String.valueOf(list.get(i).getAbilityPointNum());
        }
        Double maxDesc = (Double) Collections.max(list_data);
        Double minDesc = (Double) Collections.min(list_data);
        Double count_unit = Double.valueOf((maxDesc.doubleValue() - minDesc.doubleValue()) / 5.0d);
        HttpServletResponse response = ServletActionContext.getResponse();
        response.reset();
        response.setContentType("image/jpeg");
        JFreeChart chart = this.lc.getLineChar(data, rowKeys1, columnKeys1, "", "", xName1, "#0.0", count_unit, Integer.valueOf(rowKeys1.length), "Y", "##.#");
        getChartImageFolder(chart, "tmpLinePng", Const.width_1100, 300, insertUser + subStr + lType);
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String s6(String examNum, String gradeNum, String schoolNum, String subjectNum, String classNum, String studentId, String studentName, String studentType, String type, String source, String history, String isMoreSchool, String isSaveWrite, String rptTitle, String rpt_name, String dirPath, String uri, String useId, String all_class, String agent, String show, String fufen, String subCompose, String studentReportShowItem) {
        String str;
        int intValue;
        int i;
        int n;
        int i2;
        CellRangeAddress region;
        String defenCellTitle;
        String folderPath = "reportExcel" + useId;
        String folderName = "reportExcel" + useId;
        String zipName = "reportExcel" + useId;
        String excelName = rpt_name + "_" + gradeNum;
        if (null != studentName && !"".equals(studentName) && !studentName.contains(Const.STRING_SEPERATOR)) {
            excelName = excelName + "_" + studentName;
        }
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        String filePath = null;
        String str2 = rpt_name + ".xls";
        try {
            HSSFWorkbook wb = new HSSFWorkbook();
            HSSFSheet sheet = wb.createSheet("new sheet");
            wb.getSheetAt(0).setDisplayGridlines(false);
            HSSFFont headfont = wb.createFont();
            HSSFCellStyle cellStyle1_2 = wb.createCellStyle();
            cellStyle1_2.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cellStyle1_2.setFillForegroundColor(Const.fillForeground_color2);
            cellStyle1_2.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cellStyle1_2.setAlignment(HorizontalAlignment.CENTER);
            cellStyle1_2.setBorderBottom(BorderStyle.THIN);
            cellStyle1_2.setBorderLeft(BorderStyle.THIN);
            cellStyle1_2.setBorderRight(BorderStyle.THIN);
            cellStyle1_2.setBorderTop(BorderStyle.THIN);
            headfont.setFontHeightInPoints((short) 10);
            cellStyle1_2.setFont(headfont);
            cellStyle1_2.setWrapText(true);
            HSSFCellStyle cellStyle1_2_1 = wb.createCellStyle();
            cellStyle1_2_1.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cellStyle1_2_1.setFillForegroundColor(Const.fillForeground_color2);
            cellStyle1_2_1.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cellStyle1_2_1.setAlignment(HorizontalAlignment.CENTER);
            cellStyle1_2_1.setBorderBottom(BorderStyle.THIN);
            cellStyle1_2_1.setBorderLeft(BorderStyle.THIN);
            cellStyle1_2_1.setBorderRight(BorderStyle.THIN);
            cellStyle1_2_1.setBorderTop(BorderStyle.THIN);
            headfont.setFontHeightInPoints((short) 10);
            cellStyle1_2_1.setFont(headfont);
            HSSFDataFormat hdf = wb.createDataFormat();
            cellStyle1_2_1.setDataFormat(hdf.getFormat("0.0"));
            cellStyle1_2_1.setWrapText(true);
            HSSFCellStyle cellStyle1_2_2 = wb.createCellStyle();
            cellStyle1_2_2.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cellStyle1_2_2.setFillForegroundColor(Const.fillForeground_color2);
            cellStyle1_2_2.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cellStyle1_2_2.setAlignment(HorizontalAlignment.CENTER);
            cellStyle1_2_2.setBorderBottom(BorderStyle.THIN);
            cellStyle1_2_2.setBorderLeft(BorderStyle.THIN);
            cellStyle1_2_2.setBorderRight(BorderStyle.THIN);
            cellStyle1_2_2.setBorderTop(BorderStyle.THIN);
            headfont.setFontHeightInPoints((short) 10);
            cellStyle1_2_2.setFont(headfont);
            cellStyle1_2_2.setDataFormat(hdf.getFormat("0.00"));
            cellStyle1_2_2.setWrapText(true);
            HSSFCellStyle cellStyle1_3 = wb.createCellStyle();
            cellStyle1_3.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cellStyle1_3.setFillForegroundColor(Const.fillForeground_color3);
            cellStyle1_3.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cellStyle1_3.setAlignment(HorizontalAlignment.CENTER);
            cellStyle1_3.setBorderBottom(BorderStyle.THIN);
            cellStyle1_3.setBorderLeft(BorderStyle.THIN);
            cellStyle1_3.setBorderRight(BorderStyle.THIN);
            cellStyle1_3.setBorderTop(BorderStyle.THIN);
            cellStyle1_3.setFont(headfont);
            cellStyle1_3.setBottomBorderColor(Const.border_color);
            cellStyle1_3.setWrapText(true);
            HSSFCellStyle cellStyle1_3_1 = wb.createCellStyle();
            cellStyle1_3_1.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cellStyle1_3_1.setFillForegroundColor(Const.fillForeground_color3);
            cellStyle1_3_1.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cellStyle1_3_1.setAlignment(HorizontalAlignment.CENTER);
            cellStyle1_3_1.setBorderBottom(BorderStyle.THIN);
            cellStyle1_3_1.setBorderLeft(BorderStyle.THIN);
            cellStyle1_3_1.setBorderRight(BorderStyle.THIN);
            cellStyle1_3_1.setBorderTop(BorderStyle.THIN);
            cellStyle1_3_1.setFont(headfont);
            cellStyle1_3_1.setBottomBorderColor(Const.border_color);
            cellStyle1_3_1.setDataFormat(hdf.getFormat("0.0"));
            cellStyle1_3_1.setWrapText(true);
            HSSFCellStyle cellStyle1_3_2 = wb.createCellStyle();
            cellStyle1_3_2.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cellStyle1_3_2.setFillForegroundColor(Const.fillForeground_color3);
            cellStyle1_3_2.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cellStyle1_3_2.setAlignment(HorizontalAlignment.CENTER);
            cellStyle1_3_2.setBorderBottom(BorderStyle.THIN);
            cellStyle1_3_2.setBorderLeft(BorderStyle.THIN);
            cellStyle1_3_2.setBorderRight(BorderStyle.THIN);
            cellStyle1_3_2.setBorderTop(BorderStyle.THIN);
            cellStyle1_3_2.setFont(headfont);
            cellStyle1_3_2.setBottomBorderColor(Const.border_color);
            cellStyle1_3_2.setDataFormat(hdf.getFormat("0.00"));
            cellStyle1_3_2.setWrapText(true);
            HSSFCellStyle cellStyle1_4 = wb.createCellStyle();
            cellStyle1_4.setBorderBottom(BorderStyle.NONE);
            cellStyle1_4.setBorderLeft(BorderStyle.NONE);
            cellStyle1_4.setBorderRight(BorderStyle.NONE);
            cellStyle1_4.setBorderTop(BorderStyle.NONE);
            cellStyle1_4.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cellStyle1_4.setAlignment(HorizontalAlignment.LEFT);
            cellStyle1_4.setBottomBorderColor(Const.border_color);
            HSSFFont headfont4 = wb.createFont();
            headfont4.setFontHeightInPoints((short) 15);
            headfont4.setColor(Const.font_color);
            headfont4.setBold(true);
            cellStyle1_4.setFont(headfont4);
            cellStyle1_4.setWrapText(true);
            HSSFCellStyle cellStyle1_5 = wb.createCellStyle();
            cellStyle1_5.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cellStyle1_5.setFillForegroundColor(Const.fillForeground_color3);
            cellStyle1_5.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cellStyle1_5.setAlignment(HorizontalAlignment.CENTER);
            cellStyle1_5.setBottomBorderColor(Const.border_color);
            cellStyle1_5.setBorderBottom(BorderStyle.THIN);
            cellStyle1_5.setBorderLeft(BorderStyle.THIN);
            cellStyle1_5.setBorderRight(BorderStyle.THIN);
            cellStyle1_5.setBorderTop(BorderStyle.THIN);
            HSSFFont headfont2 = wb.createFont();
            headfont2.setFontHeightInPoints((short) 10);
            cellStyle1_5.setFont(headfont2);
            cellStyle1_5.setWrapText(true);
            HSSFRow row0 = sheet.createRow(0);
            row0.setHeightInPoints(18.0f);
            HSSFCell cell0 = row0.createCell(0);
            cell0.setCellStyle(cellStyle1_4);
            DecimalFormat df01 = new DecimalFormat("0.0");
            DecimalFormat df02 = new DecimalFormat("0.00");
            df01.setRoundingMode(RoundingMode.HALF_UP);
            df02.setRoundingMode(RoundingMode.HALF_UP);
            try {
                try {
                    new ArrayList();
                    List<RptHeader> list = this.sm.getStuMoreExamScoreList(examNum, studentId, gradeNum, schoolNum, classNum, type, source, studentType, subjectNum, fufen, subCompose);
                    List<Subject> allSubList = (List) list.get(0);
                    List<Studentlevel> claDataList = (List) list.get(1);
                    List<Studentlevel> examDataList = (List) list.get(2);
                    examDataList.size();
                    int subjectsize = allSubList.size();
                    cell0.setCellValue(new HSSFRichTextString(rpt_name));
                    cell0.setCellStyle(cellStyle1_4);
                    String title = "";
                    HSSFRow row3 = sheet.createRow(2);
                    HSSFRow row4 = sheet.createRow(3);
                    sheet.createRow(4);
                    HSSFCell cell3 = row3.createCell(0);
                    for (int k = 0; k < allSubList.size(); k++) {
                        title = title.equals("") ? allSubList.get(k).getSubjectName() : title + Const.STRING_SEPERATOR + allSubList.get(k).getSubjectName();
                    }
                    String[] strtitile = title.split(Const.STRING_SEPERATOR);
                    if (isMoreSchool == null || !isMoreSchool.equals("T")) {
                        sheet.addMergedRegion(new CellRangeAddress(0, 0, 0, subjectsize * 2));
                        CellRangeAddress region2 = new CellRangeAddress(0, 0, 0, subjectsize * 2);
                        setRegionStyle(sheet, region2, cellStyle1_4);
                        ExportTitleAdmanger(subjectsize * 2, sheet, rptTitle);
                        sheet.addMergedRegion(new CellRangeAddress(1, 1, 0, subjectsize * 2));
                        sheet.addMergedRegion(new CellRangeAddress(2, 3, 0, 0));
                    } else {
                        sheet.addMergedRegion(new CellRangeAddress(0, 0, 0, subjectsize * 3));
                        CellRangeAddress region3 = new CellRangeAddress(0, 0, 0, subjectsize * 3);
                        setRegionStyle(sheet, region3, cellStyle1_4);
                        ExportTitleAdmanger(subjectsize * 3, sheet, rptTitle);
                        sheet.addMergedRegion(new CellRangeAddress(1, 1, 0, subjectsize * 2));
                        sheet.addMergedRegion(new CellRangeAddress(2, 3, 0, 0));
                    }
                    sheet.setColumnWidth(0, 4000);
                    int count_q_title = 0;
                    for (int j = 0; j < strtitile.length; j++) {
                        if (j == 0) {
                            cell3.setCellValue("考试名称");
                            cell3.setCellStyle(cellStyle1_5);
                        }
                        if (isMoreSchool == null || !isMoreSchool.equals("T")) {
                            sheet.addMergedRegion(new CellRangeAddress(2, 2, (2 * j) + 1, (2 * j) + 2));
                            region = new CellRangeAddress(2, 2, (2 * j) + 1, (2 * j) + 2);
                        } else {
                            sheet.addMergedRegion(new CellRangeAddress(2, 2, (2 * j) + 1 + count_q_title, (2 * j) + 3 + count_q_title));
                            region = new CellRangeAddress(2, 2, (2 * j) + 1 + count_q_title, (2 * j) + 3 + count_q_title);
                        }
                        cell3 = row3.createCell((j * 2) + 1 + count_q_title);
                        cell3.setCellValue(strtitile[j]);
                        setRegionStyle(sheet, region, cellStyle1_5);
                        if ("2".equals(studentReportShowItem)) {
                            defenCellTitle = "等级";
                        } else if ("1".equals(studentReportShowItem)) {
                            defenCellTitle = "正确率";
                        } else {
                            defenCellTitle = "1".equals(fufen) ? "赋分" : "得分";
                        }
                        HSSFCell cell4 = row4.createCell(((short) ((2 * j) + 1)) + count_q_title);
                        cell4.setCellValue(defenCellTitle);
                        cell4.setCellStyle(cellStyle1_5);
                        sheet.setColumnWidth(((short) ((2 * j) + 1)) + count_q_title, 3000);
                        if (isMoreSchool == null || !isMoreSchool.equals("T")) {
                            HSSFCell cell5 = row4.createCell((short) ((2 * j) + 2));
                            cell5.setCellStyle(cellStyle1_5);
                            cell5.setCellValue("标准分(校)");
                            sheet.setColumnWidth((short) ((2 * j) + 2), 3000);
                        } else {
                            HSSFCell cell52 = row4.createCell(((short) ((2 * j) + 2)) + count_q_title);
                            HSSFCell cell6 = row4.createCell(((short) ((2 * j) + 3)) + count_q_title);
                            cell52.setCellValue("标准分(校)");
                            cell6.setCellValue("标准分(区)");
                            cell52.setCellStyle(cellStyle1_5);
                            cell6.setCellStyle(cellStyle1_5);
                            sheet.setColumnWidth(((short) ((2 * j) + 2)) + count_q_title, 3000);
                            sheet.setColumnWidth(((short) ((2 * j) + 3)) + count_q_title, 3000);
                            count_q_title++;
                        }
                    }
                    String subStrs = "";
                    for (int i3 = 0; i3 < examDataList.size(); i3++) {
                        int count_q = 0;
                        HSSFRow row = sheet.createRow(i3 + 4);
                        HSSFCell cell = row.createCell(0);
                        cell.setCellValue(examDataList.get(i3).getExt2() == null ? " " : examDataList.get(i3).getExt2());
                        if (i3 % 2 > 0) {
                            cell.setCellStyle(cellStyle1_2);
                        } else {
                            cell.setCellStyle(cellStyle1_3);
                        }
                        for (int su = 0; su < allSubList.size(); su++) {
                            if (subStrs.indexOf(allSubList.get(su).getSubjectName() + allSubList.get(su).getExt1()) == -1) {
                                subStrs = subStrs + allSubList.get(su).getSubjectName() + allSubList.get(su).getExt1() + Const.STRING_SEPERATOR;
                            }
                            int t = 0;
                            for (int d = 0; d < claDataList.size(); d++) {
                                String subjectName = allSubList.get(su).getSubjectName();
                                String exam_e = examDataList.get(i3).getExamDate();
                                String ext1_e = examDataList.get(i3).getExt1();
                                if ((subjectName + exam_e + ext1_e).equals(claDataList.get(d).getSubjectName() + claDataList.get(d).getExamDate() + claDataList.get(d).getExt1())) {
                                    t = 1;
                                }
                            }
                            if (t == 1) {
                                for (int cd = 0; cd < claDataList.size(); cd++) {
                                    String ext1 = examDataList.get(i3).getExt1();
                                    String ext2 = examDataList.get(i3).getExt2();
                                    String subName = allSubList.get(su).getSubjectName();
                                    if ((ext1 + ext2 + subName).equals(claDataList.get(cd).getExt1() + claDataList.get(cd).getExt2() + claDataList.get(cd).getSubjectName())) {
                                        HSSFCell cell2 = row.createCell((2 * su) + 1 + count_q);
                                        if ("2".equals(studentReportShowItem)) {
                                            cell2.setCellValue(claDataList.get(cd).getDengji());
                                        } else if ("1".equals(studentReportShowItem)) {
                                            cell2.setCellValue(df02.format((claDataList.get(cd).getTotalScore().doubleValue() / claDataList.get(cd).getFullScore()) * 100.0d) + "%");
                                        } else {
                                            String score = Convert.toBigDecimal(df01.format(claDataList.get(cd).getTotalScore())).stripTrailingZeros().toPlainString();
                                            cell2.setCellValue(score);
                                        }
                                        if (i3 % 2 > 0) {
                                            cell2.setCellStyle(cellStyle1_2_1);
                                        } else {
                                            cell2.setCellStyle(cellStyle1_3_1);
                                        }
                                        HSSFCell cell7 = row.createCell((2 * su) + 2 + count_q);
                                        HSSFCell cell1 = row.createCell((2 * su) + 3 + count_q);
                                        cell7.setCellValue(((Double) (String.valueOf(claDataList.get(cd).getStandardScore()) == null ? " " : Double.valueOf(Double.parseDouble(df02.format(claDataList.get(cd).getStandardScore()))))).doubleValue());
                                        if (i3 % 2 > 0) {
                                            cell7.setCellStyle(cellStyle1_2_2);
                                        } else {
                                            cell7.setCellStyle(cellStyle1_3_2);
                                        }
                                        if (isMoreSchool != null && isMoreSchool.equals("T")) {
                                            if (claDataList.get(cd).getStandardScore_q() == 0.0d) {
                                                cell1.setCellValue("");
                                            } else {
                                                cell1.setCellValue(((Double) (String.valueOf(claDataList.get(cd).getStandardScore_q()) == null ? " " : Double.valueOf(Double.parseDouble(df02.format(claDataList.get(cd).getStandardScore_q()))))).doubleValue());
                                            }
                                            if (i3 % 2 > 0) {
                                                cell1.setCellStyle(cellStyle1_2_2);
                                            } else {
                                                cell1.setCellStyle(cellStyle1_3_2);
                                            }
                                            count_q++;
                                        }
                                    }
                                }
                            } else {
                                HSSFCell cell8 = row.createCell((2 * su) + 1 + count_q);
                                cell8.setCellValue("");
                                if (i3 % 2 > 0) {
                                    cell8.setCellStyle(cellStyle1_2);
                                } else {
                                    cell8.setCellStyle(cellStyle1_3);
                                }
                                HSSFCell cell9 = row.createCell((2 * su) + 2 + count_q);
                                HSSFCell cell12 = row.createCell((2 * su) + 3 + count_q);
                                cell9.setCellValue("");
                                if (i3 % 2 > 0) {
                                    cell9.setCellStyle(cellStyle1_2);
                                } else {
                                    cell9.setCellStyle(cellStyle1_3);
                                }
                                if (isMoreSchool != null && isMoreSchool.equals("T")) {
                                    cell12.setCellValue("");
                                    if (i3 % 2 > 0) {
                                        cell12.setCellStyle(cellStyle1_2);
                                    } else {
                                        cell12.setCellStyle(cellStyle1_3);
                                    }
                                    count_q++;
                                }
                            }
                        }
                    }
                    FileOutputStream fileOut1 = new FileOutputStream(excelFile);
                    wb.write(fileOut1);
                    fileOut1.close();
                    if (wb != null) {
                        if (null != isSaveWrite) {
                            try {
                                if (isSaveWrite.equals("F")) {
                                }
                            } catch (IOException e1) {
                                e1.printStackTrace();
                            }
                        }
                        if (Integer.valueOf(all_class).intValue() == 1) {
                            HttpServletResponse response = ServletActionContext.getResponse();
                            response.reset();
                            ServletOutputStream outputStream = response.getOutputStream();
                            String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName2 = loadFileName.replace("+", " ");
                            response.setContentType("Content-type: applicationnd.ms-excel");
                            response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xls");
                            response.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte = new byte[1024];
                            FileInputStream in = new FileInputStream(excelFile);
                            while (true) {
                                int n2 = in.read(tempByte);
                                if (n2 == -1) {
                                    break;
                                }
                                try {
                                    outputStream.write(tempByte, 0, n2);
                                } catch (Exception e) {
                                    this.log.error("保存未成功", e);
                                }
                            }
                            outputStream.flush();
                            outputStream.close();
                            in.close();
                        } else {
                            filePath = methodZipAll(uri, dirPath, folderName, zipName);
                        }
                    }
                } finally {
                    if (wb != null) {
                        if (str != isSaveWrite) {
                            try {
                            } catch (IOException e12) {
                            }
                        }
                        if (intValue == i) {
                            while (true) {
                                if (n == i2) {
                                    break;
                                }
                            }
                        }
                    }
                }
            } catch (Exception e2) {
                e2.printStackTrace();
                if (wb != null) {
                    if (null != isSaveWrite) {
                        try {
                            if (isSaveWrite.equals("F")) {
                            }
                        } catch (IOException e13) {
                            e13.printStackTrace();
                        }
                    }
                    if (Integer.valueOf(all_class).intValue() == 1) {
                        HttpServletResponse response2 = ServletActionContext.getResponse();
                        response2.reset();
                        ServletOutputStream outputStream2 = response2.getOutputStream();
                        String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                        String loadFileName4 = loadFileName3.replace("+", " ");
                        response2.setContentType("Content-type: applicationnd.ms-excel");
                        response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xls");
                        response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                        byte[] tempByte2 = new byte[1024];
                        FileInputStream in2 = new FileInputStream(excelFile);
                        while (true) {
                            int n3 = in2.read(tempByte2);
                            if (n3 == -1) {
                                break;
                            }
                            try {
                                outputStream2.write(tempByte2, 0, n3);
                            } catch (Exception e3) {
                                this.log.error("保存未成功", e3);
                            }
                        }
                        outputStream2.flush();
                        outputStream2.close();
                        in2.close();
                    } else {
                        filePath = methodZipAll(uri, dirPath, folderName, zipName);
                    }
                }
            }
        } catch (Exception e4) {
            e4.printStackTrace();
        }
        return filePath;
    }

    public File getSubChartImgFileKnowledge_s6(String subStr, String lType, String insertUser, List list, String dirPath) {
        try {
            subjectLineImageknowledge_s6(subStr, lType, insertUser, list);
            File file = new File(dirPath + File.separator + "tmpLinePng" + File.separator + insertUser + subStr + lType + ".png");
            return file;
        } catch (SQLException e) {
            e.printStackTrace();
            return null;
        }
    }

    public void subjectLineImageknowledge_s6(String subStr, String lType, String insertUser, List list) throws SQLException {
        List<Subject> listsubject = (List) list.get(0);
        List<Studentlevel> claDataList = (List) list.get(1);
        List<Studentlevel> examDataList = (List) list.get(2);
        String[] rowKeys1 = new String[listsubject.size()];
        int examsize = 0;
        for (int x = 0; x < examDataList.size(); x++) {
            if (lType.equals("standardArea")) {
                if (examDataList.get(x).getExt3().equals("1")) {
                    examsize++;
                }
            } else {
                examsize++;
            }
        }
        double[][] data = new double[listsubject.size()][examsize];
        String[] columnKeys1 = new String[examsize];
        Double.valueOf(0.0d);
        Double.valueOf(0.0d);
        List list_data = new ArrayList();
        double[] list_da = new double[listsubject.size() * examsize];
        int c = 0;
        int cc = 0;
        int ls = 0;
        for (int j = 0; j < listsubject.size(); j++) {
            rowKeys1[j] = listsubject.get(j).getSubjectName();
            int m = 0;
            int mm = 0;
            for (int k = 0; k < claDataList.size(); k++) {
                if (listsubject.get(j).getSubjectName().equals(claDataList.get(k).getSubjectName())) {
                    if (lType.equals("standardSch")) {
                        for (int x2 = 0; x2 < examDataList.size(); x2++) {
                            if (claDataList.get(k).getExt1().equals(examDataList.get(x2).getExt1())) {
                                m = x2;
                            }
                        }
                        data[j][m] = claDataList.get(k).getStandardScore();
                        list_da[c] = claDataList.get(k).getStandardScore();
                        c++;
                    } else if (lType.equals("standardArea") && claDataList.get(k).getExt3().equals("1")) {
                        for (int x3 = 0; x3 < examDataList.size(); x3++) {
                            if (claDataList.get(k).getExt1().equals(examDataList.get(x3).getExt1())) {
                                mm = x3;
                            }
                        }
                        data[j][mm] = claDataList.get(k).getStandardScore_q();
                        list_da[cc] = claDataList.get(k).getStandardScore_q();
                        cc++;
                        ls++;
                    }
                }
            }
        }
        for (double d : list_da) {
            list_data.add(Double.valueOf(d));
        }
        int ex = 0;
        for (int i = 0; i < examDataList.size(); i++) {
            if (lType.equals("standardArea")) {
                if (examDataList.get(i).getExt3().equals("1")) {
                    columnKeys1[ex] = examDataList.get(i).getExt2();
                    ex++;
                }
            } else {
                columnKeys1[i] = examDataList.get(i).getExt2();
            }
        }
        String xName1 = "";
        if (lType.equals("standardSch")) {
            xName1 = String.valueOf("个人多次考试成绩变化趋势-标准分（校）");
        } else if (lType.equals("standardArea")) {
            xName1 = String.valueOf("个人多次考试成绩变化趋势-标准分（区）");
        }
        Double maxDesc = (Double) Collections.max(list_data);
        Double minDesc = (Double) Collections.min(list_data);
        Double count_unit = Double.valueOf((maxDesc.doubleValue() - minDesc.doubleValue()) / 5.0d);
        HttpServletResponse response = ServletActionContext.getResponse();
        response.reset();
        response.setContentType("image/jpeg");
        JFreeChart chart = this.lc.getLineChar(data, rowKeys1, columnKeys1, "", "", xName1, "#0", count_unit, Integer.valueOf(rowKeys1.length), "Y", "##.##");
        getChartImageFolder(chart, "tmpLinePng", 1600, 900, insertUser + subStr + lType);
    }

    public static void setRegionStyle(HSSFSheet sheet, CellRangeAddress region, HSSFCellStyle cs) {
        for (int i = region.getFirstRow(); i <= region.getLastRow(); i++) {
            Row row = CellUtil.getRow(i, sheet);
            for (int j = region.getFirstColumn(); j <= region.getLastColumn(); j++) {
                Cell cell = CellUtil.getCell(row, j);
                cell.setCellStyle(cs);
            }
        }
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String s5(String examNum, String gradeNum, String schoolNum, String subjectNum, String classNum, String studentId, String studentName, String studentType, String type, String source, String history, String isMoreSchool, String isSaveWrite, String rptTitle, String rpt_name, String dirPath, String uri, String useId, String all_class, String agent, String show, String subCompose, String studentReportShowItem) {
        String folderPath = "reportExcel" + useId;
        String folderName = "reportExcel" + useId;
        String zipName = "reportExcel" + useId;
        String excelName = rpt_name + "_" + gradeNum;
        if (null != studentName && !"".equals(studentName) && !studentName.contains(Const.STRING_SEPERATOR)) {
            excelName = excelName + "_" + studentName;
        }
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        String filePath = null;
        String str = rpt_name + ".xls";
        try {
            HSSFWorkbook wb = new HSSFWorkbook();
            HSSFSheet sheet = wb.createSheet("new sheet");
            wb.getSheetAt(0).setDisplayGridlines(false);
            HSSFFont headfont = wb.createFont();
            HSSFCellStyle cellStyle1_2 = wb.createCellStyle();
            cellStyle1_2.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cellStyle1_2.setFillForegroundColor(Const.fillForeground_color2);
            cellStyle1_2.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cellStyle1_2.setAlignment(HorizontalAlignment.CENTER);
            cellStyle1_2.setBorderBottom(BorderStyle.THIN);
            cellStyle1_2.setBorderLeft(BorderStyle.THIN);
            cellStyle1_2.setBorderRight(BorderStyle.THIN);
            cellStyle1_2.setBorderTop(BorderStyle.THIN);
            headfont.setFontHeightInPoints((short) 10);
            cellStyle1_2.setFont(headfont);
            cellStyle1_2.setWrapText(true);
            HSSFCellStyle cellStyle1_2_1 = wb.createCellStyle();
            cellStyle1_2_1.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cellStyle1_2_1.setFillForegroundColor(Const.fillForeground_color2);
            cellStyle1_2_1.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cellStyle1_2_1.setAlignment(HorizontalAlignment.CENTER);
            cellStyle1_2_1.setBorderBottom(BorderStyle.THIN);
            cellStyle1_2_1.setBorderLeft(BorderStyle.THIN);
            cellStyle1_2_1.setBorderRight(BorderStyle.THIN);
            cellStyle1_2_1.setBorderTop(BorderStyle.THIN);
            headfont.setFontHeightInPoints((short) 10);
            cellStyle1_2_1.setFont(headfont);
            HSSFDataFormat hdf = wb.createDataFormat();
            cellStyle1_2_1.setDataFormat(hdf.getFormat("0.0"));
            cellStyle1_2_1.setWrapText(true);
            HSSFCellStyle cellStyle1_2_2 = wb.createCellStyle();
            cellStyle1_2_2.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cellStyle1_2_2.setFillForegroundColor(Const.fillForeground_color2);
            cellStyle1_2_2.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cellStyle1_2_2.setAlignment(HorizontalAlignment.CENTER);
            cellStyle1_2_2.setBorderBottom(BorderStyle.THIN);
            cellStyle1_2_2.setBorderLeft(BorderStyle.THIN);
            cellStyle1_2_2.setBorderRight(BorderStyle.THIN);
            cellStyle1_2_2.setBorderTop(BorderStyle.THIN);
            headfont.setFontHeightInPoints((short) 10);
            cellStyle1_2_2.setFont(headfont);
            cellStyle1_2_2.setDataFormat(hdf.getFormat("0.00"));
            cellStyle1_2_2.setWrapText(true);
            HSSFCellStyle cellStyle1_2_3 = wb.createCellStyle();
            cellStyle1_2_3.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cellStyle1_2_3.setFillForegroundColor(Const.fillForeground_color2);
            cellStyle1_2_3.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cellStyle1_2_3.setAlignment(HorizontalAlignment.CENTER);
            cellStyle1_2_3.setBorderBottom(BorderStyle.THIN);
            cellStyle1_2_3.setBorderLeft(BorderStyle.THIN);
            cellStyle1_2_3.setBorderRight(BorderStyle.THIN);
            cellStyle1_2_3.setBorderTop(BorderStyle.THIN);
            cellStyle1_2_3.setFont(headfont);
            cellStyle1_2_3.setWrapText(true);
            HSSFCellStyle cellStyle1_3 = wb.createCellStyle();
            cellStyle1_3.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cellStyle1_3.setFillForegroundColor(Const.fillForeground_color3);
            cellStyle1_3.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cellStyle1_3.setAlignment(HorizontalAlignment.CENTER);
            cellStyle1_3.setBorderBottom(BorderStyle.THIN);
            cellStyle1_3.setBorderLeft(BorderStyle.THIN);
            cellStyle1_3.setBorderRight(BorderStyle.THIN);
            cellStyle1_3.setBorderTop(BorderStyle.THIN);
            cellStyle1_3.setFont(headfont);
            cellStyle1_3.setBottomBorderColor(Const.border_color);
            cellStyle1_3.setWrapText(true);
            HSSFCellStyle cellStyle1_3_1 = wb.createCellStyle();
            cellStyle1_3_1.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cellStyle1_3_1.setFillForegroundColor(Const.fillForeground_color3);
            cellStyle1_3_1.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cellStyle1_3_1.setAlignment(HorizontalAlignment.CENTER);
            cellStyle1_3_1.setBorderBottom(BorderStyle.THIN);
            cellStyle1_3_1.setBorderLeft(BorderStyle.THIN);
            cellStyle1_3_1.setBorderRight(BorderStyle.THIN);
            cellStyle1_3_1.setBorderTop(BorderStyle.THIN);
            cellStyle1_3_1.setFont(headfont);
            cellStyle1_3_1.setBottomBorderColor(Const.border_color);
            cellStyle1_3_1.setDataFormat(hdf.getFormat("0.0"));
            cellStyle1_3_1.setWrapText(true);
            HSSFCellStyle cellStyle1_3_2 = wb.createCellStyle();
            cellStyle1_3_2.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cellStyle1_3_2.setFillForegroundColor(Const.fillForeground_color3);
            cellStyle1_3_2.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cellStyle1_3_2.setAlignment(HorizontalAlignment.CENTER);
            cellStyle1_3_2.setBorderBottom(BorderStyle.THIN);
            cellStyle1_3_2.setBorderLeft(BorderStyle.THIN);
            cellStyle1_3_2.setBorderRight(BorderStyle.THIN);
            cellStyle1_3_2.setBorderTop(BorderStyle.THIN);
            cellStyle1_3_2.setFont(headfont);
            cellStyle1_3_2.setBottomBorderColor(Const.border_color);
            cellStyle1_3_2.setDataFormat(hdf.getFormat("0.00"));
            cellStyle1_3_2.setWrapText(true);
            HSSFCellStyle cellStyle1_3_3 = wb.createCellStyle();
            cellStyle1_3_3.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cellStyle1_3_3.setFillForegroundColor(Const.fillForeground_color3);
            cellStyle1_3_3.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cellStyle1_3_3.setAlignment(HorizontalAlignment.CENTER);
            cellStyle1_3_3.setBorderBottom(BorderStyle.THIN);
            cellStyle1_3_3.setBorderLeft(BorderStyle.THIN);
            cellStyle1_3_3.setBorderRight(BorderStyle.THIN);
            cellStyle1_3_3.setBorderTop(BorderStyle.THIN);
            cellStyle1_3_3.setFont(headfont);
            cellStyle1_3_3.setWrapText(true);
            HSSFCellStyle cellStyle1_4 = wb.createCellStyle();
            cellStyle1_4.setBorderBottom(BorderStyle.NONE);
            cellStyle1_4.setBorderLeft(BorderStyle.NONE);
            cellStyle1_4.setBorderRight(BorderStyle.NONE);
            cellStyle1_4.setBorderTop(BorderStyle.NONE);
            cellStyle1_4.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cellStyle1_4.setAlignment(HorizontalAlignment.LEFT);
            cellStyle1_4.setBottomBorderColor(Const.border_color);
            HSSFFont headfont4 = wb.createFont();
            headfont4.setFontHeightInPoints((short) 15);
            headfont4.setColor(Const.font_color);
            headfont4.setBold(true);
            cellStyle1_4.setFont(headfont4);
            cellStyle1_4.setWrapText(true);
            HSSFCellStyle cellStyle1_5 = wb.createCellStyle();
            cellStyle1_5.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cellStyle1_5.setFillForegroundColor(Const.fillForeground_color);
            cellStyle1_5.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cellStyle1_5.setAlignment(HorizontalAlignment.CENTER);
            cellStyle1_5.setBottomBorderColor(Const.border_color);
            cellStyle1_5.setBorderBottom(BorderStyle.THIN);
            cellStyle1_5.setBorderLeft(BorderStyle.THIN);
            cellStyle1_5.setBorderRight(BorderStyle.THIN);
            cellStyle1_5.setBorderTop(BorderStyle.THIN);
            HSSFFont headfont2 = wb.createFont();
            headfont2.setFontHeightInPoints((short) 10);
            cellStyle1_5.setFont(headfont2);
            cellStyle1_5.setWrapText(true);
            HSSFCellStyle cellStyle1_2_left = wb.createCellStyle();
            cellStyle1_2_left.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cellStyle1_2_left.setFillForegroundColor(Const.fillForeground_color2);
            cellStyle1_2_left.setAlignment(HorizontalAlignment.LEFT);
            cellStyle1_2_left.setBorderBottom(BorderStyle.THIN);
            cellStyle1_2_left.setBorderLeft(BorderStyle.THIN);
            cellStyle1_2_left.setBorderRight(BorderStyle.THIN);
            cellStyle1_2_left.setBorderTop(BorderStyle.THIN);
            HSSFFont headfont_left = wb.createFont();
            headfont_left.setFontHeightInPoints((short) 10);
            cellStyle1_2_left.setFont(headfont_left);
            cellStyle1_2_left.setWrapText(true);
            HSSFCellStyle cellStyle1_3_left = wb.createCellStyle();
            cellStyle1_3_left.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cellStyle1_3_left.setFillForegroundColor(Const.fillForeground_color3);
            cellStyle1_3_left.setAlignment(HorizontalAlignment.LEFT);
            cellStyle1_3_left.setBorderBottom(BorderStyle.THIN);
            cellStyle1_3_left.setBorderLeft(BorderStyle.THIN);
            cellStyle1_3_left.setBorderRight(BorderStyle.THIN);
            cellStyle1_3_left.setBorderTop(BorderStyle.THIN);
            HSSFFont headfont3_left = wb.createFont();
            headfont3_left.setFontHeightInPoints((short) 10);
            cellStyle1_3_left.setFont(headfont3_left);
            cellStyle1_3_left.setWrapText(true);
            HSSFRow row0 = sheet.createRow(0);
            row0.setHeightInPoints(18.0f);
            HSSFCell cell0 = row0.createCell(0);
            cell0.setCellStyle(cellStyle1_4);
            DecimalFormat df01 = new DecimalFormat("0.0");
            DecimalFormat df02 = new DecimalFormat("0.00");
            df01.setRoundingMode(RoundingMode.HALF_UP);
            df02.setRoundingMode(RoundingMode.HALF_UP);
            try {
                cell0.setCellValue(new HSSFRichTextString(rpt_name));
                cell0.setCellStyle(cellStyle1_4);
                new ArrayList();
                String[] strtitile = (isMoreSchool == null || isMoreSchool.equals("T")) ? "0".equals(studentReportShowItem) ? new String[]{"题型编号", "题型", "满分值", "得分", "班级最高分", "班级平均分", "年级最高分", "年级平均分", "全区最高分", "全区平均分"} : new String[]{"题型编号", "题型", "正确率", "班级最高正确率", "班级平均正确率", "年级最高正确率", "年级平均正确率", "全区最高正确率", "全区平均正确率"} : "0".equals(studentReportShowItem) ? new String[]{"题型编号", "题型", "满分值", "得分", "班级最高分", "班级平均分", "年级最高分", "年级平均分"} : new String[]{"题型编号", "题型", "正确率", "班级最高正确率", "班级平均正确率", "年级最高正确率", "年级平均正确率"};
                sheet.addMergedRegion(new CellRangeAddress(0, 0, 0, strtitile.length - 1));
                int createrowNum = ExportTitleAdmanger(strtitile.length - 1, sheet, rptTitle);
                HSSFRow row = sheet.createRow(createrowNum);
                for (int j = 0; j < strtitile.length; j++) {
                    HSSFCell cell = row.createCell((short) j);
                    cell.setCellValue(strtitile[j]);
                    cell.setCellStyle(cellStyle1_5);
                    sheet.autoSizeColumn((short) j);
                    sheet.setColumnWidth((short) j, 3500);
                }
                sheet.setColumnWidth(1, 6000);
                List<RptHeader> list = this.sq.getStuQtypeScore(examNum, subjectNum, gradeNum, schoolNum, classNum, studentId, type, studentType, source, subCompose);
                for (int i = 0; i < list.size(); i++) {
                    HSSFRow row2 = sheet.createRow(i + createrowNum + 1);
                    HSSFCell cell2 = row2.createCell(0);
                    cell2.setCellValue(list.get(i).getAbilityPointNum() == null ? " " : list.get(i).getAbilityPointNum() + "");
                    if (i % 2 > 0) {
                        cell2.setCellStyle(cellStyle1_2_left);
                    } else {
                        cell2.setCellStyle(cellStyle1_3_left);
                    }
                    short x = (short) (0 + 1);
                    HSSFCell cell3 = row2.createCell(x);
                    cell3.setCellValue(String.valueOf(list.get(i).getName()) == null ? " " : list.get(i).getName() + "");
                    if (i % 2 > 0) {
                        cell3.setCellStyle(cellStyle1_2_left);
                    } else {
                        cell3.setCellStyle(cellStyle1_3_left);
                    }
                    if ("0".equals(studentReportShowItem)) {
                        x = (short) (x + 1);
                        HSSFCell cell4 = row2.createCell(x);
                        String fullscore = Convert.toBigDecimal(df01.format(list.get(i).getTotalScore())).stripTrailingZeros().toPlainString();
                        cell4.setCellValue(Double.valueOf(list.get(i).getTotalScore()) == null ? " " : fullscore);
                        if (i % 2 > 0) {
                            cell4.setCellStyle(cellStyle1_2_3);
                        } else {
                            cell4.setCellStyle(cellStyle1_3_3);
                        }
                    }
                    if ("0".equals(studentReportShowItem)) {
                        short x2 = (short) (x + 1);
                        HSSFCell cell5 = row2.createCell(x2);
                        String score = Convert.toBigDecimal(df01.format(list.get(i).getScore())).stripTrailingZeros().toPlainString();
                        cell5.setCellValue(Double.valueOf(list.get(i).getScore()) == null ? " " : score);
                        if (i % 2 > 0) {
                            cell5.setCellStyle(cellStyle1_2_3);
                        } else {
                            cell5.setCellStyle(cellStyle1_3_3);
                        }
                        short x3 = (short) (x2 + 1);
                        HSSFCell cell6 = row2.createCell(x3);
                        String cmax = Convert.toBigDecimal(df01.format(list.get(i).getCm())).stripTrailingZeros().toPlainString();
                        cell6.setCellValue(Double.valueOf(list.get(i).getCm()) == null ? " " : cmax);
                        if (i % 2 > 0) {
                            cell6.setCellStyle(cellStyle1_2_3);
                        } else {
                            cell6.setCellStyle(cellStyle1_3_3);
                        }
                        short x4 = (short) (x3 + 1);
                        HSSFCell cell7 = row2.createCell(x4);
                        cell7.setCellValue(((Double) (Double.valueOf(list.get(i).getCavg()) == null ? " " : Double.valueOf(df02.format(list.get(i).getCavg())))).doubleValue());
                        if (i % 2 > 0) {
                            cell7.setCellStyle(cellStyle1_2_2);
                        } else {
                            cell7.setCellStyle(cellStyle1_3_2);
                        }
                        short x5 = (short) (x4 + 1);
                        HSSFCell cell8 = row2.createCell(x5);
                        String gmax = Convert.toBigDecimal(df01.format(list.get(i).getGm())).stripTrailingZeros().toPlainString();
                        cell8.setCellValue(Double.valueOf(list.get(i).getGm()) == null ? " " : gmax);
                        if (i % 2 > 0) {
                            cell8.setCellStyle(cellStyle1_2_3);
                        } else {
                            cell8.setCellStyle(cellStyle1_3_3);
                        }
                        short x6 = (short) (x5 + 1);
                        HSSFCell cell9 = row2.createCell(x6);
                        cell9.setCellValue(((Double) (Double.valueOf(list.get(i).getGavg()) == null ? " " : Double.valueOf(df02.format(list.get(i).getGavg())))).doubleValue());
                        if (i % 2 > 0) {
                            cell9.setCellStyle(cellStyle1_2_2);
                        } else {
                            cell9.setCellStyle(cellStyle1_3_2);
                        }
                        if ("T".equals(isMoreSchool)) {
                            short x7 = (short) (x6 + 1);
                            HSSFCell cell10 = row2.createCell(x7);
                            String armax = Convert.toBigDecimal(df01.format(list.get(i).getAr_max())).stripTrailingZeros().toPlainString();
                            cell10.setCellValue(Double.valueOf(list.get(i).getAr_max()) == null ? " " : armax);
                            if (i % 2 > 0) {
                                cell10.setCellStyle(cellStyle1_2_3);
                            } else {
                                cell10.setCellStyle(cellStyle1_3_3);
                            }
                            HSSFCell cell11 = row2.createCell((short) (x7 + 1));
                            cell11.setCellValue(((Double) (Double.valueOf(list.get(i).getAravg()) == null ? " " : Double.valueOf(df02.format(list.get(i).getAravg())))).doubleValue());
                            if (i % 2 > 0) {
                                cell11.setCellStyle(cellStyle1_2_2);
                            } else {
                                cell11.setCellStyle(cellStyle1_3_2);
                            }
                        }
                    } else {
                        double fullScore = list.get(i).getTotalScore();
                        short x8 = (short) (x + 1);
                        HSSFCell cell12 = row2.createCell(x8);
                        cell12.setCellValue(ExcelHelper.formatPercent(Double.valueOf(list.get(i).getScore()), Double.valueOf(fullScore), df02, "--"));
                        if (i % 2 > 0) {
                            cell12.setCellStyle(cellStyle1_2_1);
                        } else {
                            cell12.setCellStyle(cellStyle1_3_1);
                        }
                        short x9 = (short) (x8 + 1);
                        HSSFCell cell13 = row2.createCell(x9);
                        cell13.setCellValue(ExcelHelper.formatPercent(Double.valueOf(list.get(i).getCm()), Double.valueOf(fullScore), df02, "--"));
                        if (i % 2 > 0) {
                            cell13.setCellStyle(cellStyle1_2_1);
                        } else {
                            cell13.setCellStyle(cellStyle1_3_1);
                        }
                        short x10 = (short) (x9 + 1);
                        HSSFCell cell14 = row2.createCell(x10);
                        cell14.setCellValue(ExcelHelper.formatPercent(Double.valueOf(list.get(i).getCavg()), Double.valueOf(fullScore), df02, "--"));
                        if (i % 2 > 0) {
                            cell14.setCellStyle(cellStyle1_2_2);
                        } else {
                            cell14.setCellStyle(cellStyle1_3_2);
                        }
                        short x11 = (short) (x10 + 1);
                        HSSFCell cell15 = row2.createCell(x11);
                        cell15.setCellValue(ExcelHelper.formatPercent(Double.valueOf(list.get(i).getGm()), Double.valueOf(fullScore), df02, "--"));
                        if (i % 2 > 0) {
                            cell15.setCellStyle(cellStyle1_2_1);
                        } else {
                            cell15.setCellStyle(cellStyle1_3_1);
                        }
                        short x12 = (short) (x11 + 1);
                        HSSFCell cell16 = row2.createCell(x12);
                        cell16.setCellValue(ExcelHelper.formatPercent(Double.valueOf(list.get(i).getGavg()), Double.valueOf(fullScore), df02, "--"));
                        if (i % 2 > 0) {
                            cell16.setCellStyle(cellStyle1_2_2);
                        } else {
                            cell16.setCellStyle(cellStyle1_3_2);
                        }
                        if ("T".equals(isMoreSchool)) {
                            short x13 = (short) (x12 + 1);
                            HSSFCell cell17 = row2.createCell(x13);
                            cell17.setCellValue(ExcelHelper.formatPercent(Double.valueOf(list.get(i).getAr_max()), Double.valueOf(fullScore), df02, "--"));
                            if (i % 2 > 0) {
                                cell17.setCellStyle(cellStyle1_2_1);
                            } else {
                                cell17.setCellStyle(cellStyle1_3_1);
                            }
                            HSSFCell cell18 = row2.createCell((short) (x13 + 1));
                            cell18.setCellValue(ExcelHelper.formatPercent(Double.valueOf(list.get(i).getAravg()), Double.valueOf(fullScore), df02, "--"));
                            if (i % 2 > 0) {
                                cell18.setCellStyle(cellStyle1_2_2);
                            } else {
                                cell18.setCellStyle(cellStyle1_3_2);
                            }
                        }
                    }
                }
                FileOutputStream fileOut1 = new FileOutputStream(excelFile);
                wb.write(fileOut1);
                fileOut1.close();
                if (wb != null) {
                    if (null != isSaveWrite) {
                        try {
                            if (isSaveWrite.equals("F")) {
                            }
                        } catch (IOException e1) {
                            e1.printStackTrace();
                        }
                    }
                    if (Integer.valueOf(all_class).intValue() == 1) {
                        HttpServletResponse response = ServletActionContext.getResponse();
                        response.reset();
                        ServletOutputStream outputStream = response.getOutputStream();
                        String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                        String loadFileName2 = loadFileName.replace("+", " ");
                        response.setContentType("Content-type: applicationnd.ms-excel");
                        response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xls");
                        response.setHeader("Content-length", String.valueOf(excelFile.length()));
                        byte[] tempByte = new byte[1024];
                        FileInputStream in = new FileInputStream(excelFile);
                        while (true) {
                            int n = in.read(tempByte);
                            if (n == -1) {
                                break;
                            }
                            try {
                                outputStream.write(tempByte, 0, n);
                            } catch (Exception e) {
                                this.log.error("保存未成功", e);
                            }
                        }
                        outputStream.flush();
                        outputStream.close();
                        in.close();
                    } else {
                        filePath = methodZipAll(uri, dirPath, folderName, zipName);
                    }
                }
            } catch (IOException e2) {
                if (wb != null) {
                    if (null != isSaveWrite) {
                        try {
                            if (isSaveWrite.equals("F")) {
                            }
                        } catch (IOException e12) {
                            e12.printStackTrace();
                        }
                    }
                    if (Integer.valueOf(all_class).intValue() == 1) {
                        HttpServletResponse response2 = ServletActionContext.getResponse();
                        response2.reset();
                        ServletOutputStream outputStream2 = response2.getOutputStream();
                        String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                        String loadFileName4 = loadFileName3.replace("+", " ");
                        response2.setContentType("Content-type: applicationnd.ms-excel");
                        response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xls");
                        response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                        byte[] tempByte2 = new byte[1024];
                        FileInputStream in2 = new FileInputStream(excelFile);
                        while (true) {
                            int n2 = in2.read(tempByte2);
                            if (n2 == -1) {
                                break;
                            }
                            try {
                                outputStream2.write(tempByte2, 0, n2);
                            } catch (Exception e3) {
                                this.log.error("保存未成功", e3);
                            }
                        }
                        outputStream2.flush();
                        outputStream2.close();
                        in2.close();
                    } else {
                        filePath = methodZipAll(uri, dirPath, folderName, zipName);
                    }
                }
            } catch (Throwable th) {
                if (wb != null) {
                    if (null != isSaveWrite) {
                        try {
                            if (isSaveWrite.equals("F")) {
                            }
                        } catch (IOException e13) {
                            e13.printStackTrace();
                            throw th;
                        }
                    }
                    if (Integer.valueOf(all_class).intValue() == 1) {
                        HttpServletResponse response3 = ServletActionContext.getResponse();
                        response3.reset();
                        ServletOutputStream outputStream3 = response3.getOutputStream();
                        String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                        String loadFileName6 = loadFileName5.replace("+", " ");
                        response3.setContentType("Content-type: applicationnd.ms-excel");
                        response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xls");
                        response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                        byte[] tempByte3 = new byte[1024];
                        FileInputStream in3 = new FileInputStream(excelFile);
                        while (true) {
                            int n3 = in3.read(tempByte3);
                            if (n3 == -1) {
                                break;
                            }
                            try {
                                outputStream3.write(tempByte3, 0, n3);
                            } catch (Exception e4) {
                                this.log.error("保存未成功", e4);
                            }
                        }
                        outputStream3.flush();
                        outputStream3.close();
                        in3.close();
                    } else {
                        methodZipAll(uri, dirPath, folderName, zipName);
                    }
                }
                throw th;
            }
        } catch (Exception e5) {
            e5.printStackTrace();
        }
        return filePath;
    }

    public File getSubChartQuestionType_s5(String subStr, String lType, String insertUser, List list, String dirPath) {
        try {
            subjectLineImageQuestionType_s5(subStr, lType, insertUser, list);
            File file = new File(dirPath + File.separator + "tmpLinePng" + File.separator + insertUser + subStr + lType + ".png");
            return file;
        } catch (SQLException e) {
            e.printStackTrace();
            return null;
        }
    }

    public void subjectLineImageQuestionType_s5(String subStr, String lType, String insertUser, List<RptHeader> list) throws SQLException {
        String xName1 = "";
        String[] columnKeys1 = new String[list.size()];
        new ArrayList();
        new ArrayList();
        String[] rowKeys1 = new String[2];
        if (lType.equals("qtypeC")) {
            rowKeys1[0] = "学生本人";
            rowKeys1[1] = "班级平均";
            xName1 = String.valueOf("题型得分率(%)折线图(班)");
        } else if (lType.equals("qtypeG")) {
            rowKeys1[0] = "学生本人";
            rowKeys1[1] = "年级平均";
            xName1 = String.valueOf("题型得分率(%)折线图(校)");
        } else if (lType.equals("qtypeQ")) {
            rowKeys1[0] = "学生本人";
            rowKeys1[1] = "区县平均";
            xName1 = String.valueOf("题型得分率(%)折线图(区)");
        }
        double[][] data = new double[rowKeys1.length][list.size()];
        Double.valueOf(0.0d);
        Double.valueOf(0.0d);
        List list_data = new ArrayList();
        for (int i = 0; i < list.size(); i++) {
            data[0][i] = Double.parseDouble(list.get(i).getRate()) * 100.0d;
            list_data.add(Double.valueOf(Double.parseDouble(list.get(i).getRate()) * 100.0d));
            if (lType.equals("qtypeC")) {
                data[1][i] = Double.parseDouble(list.get(i).getC_rate()) * 100.0d;
                list_data.add(Double.valueOf(Double.parseDouble(list.get(i).getC_rate()) * 100.0d));
            } else if (lType.equals("qtypeG")) {
                data[1][i] = Double.parseDouble(list.get(i).getG_rate()) * 100.0d;
                list_data.add(Double.valueOf(Double.parseDouble(list.get(i).getG_rate()) * 100.0d));
            } else if (lType.equals("qtypeQ")) {
                data[1][i] = Double.parseDouble(list.get(i).getAr_avg()) * 100.0d;
                list_data.add(Double.valueOf(Double.parseDouble(list.get(i).getAr_avg()) * 100.0d));
            }
            columnKeys1[i] = String.valueOf(list.get(i).getAbilityPointNum());
        }
        Double maxDesc = (Double) Collections.max(list_data);
        Double minDesc = (Double) Collections.min(list_data);
        Double count_unit = Double.valueOf((maxDesc.doubleValue() - minDesc.doubleValue()) / 5.0d);
        HttpServletResponse response = ServletActionContext.getResponse();
        response.reset();
        response.setContentType("image/jpeg");
        JFreeChart chart = this.lc.getLineChar(data, rowKeys1, columnKeys1, "", "", xName1, "#0.0", count_unit, Integer.valueOf(rowKeys1.length), "Y", "##.#");
        getChartImageFolder(chart, "tmpLinePng", Const.width_1100, 300, insertUser + subStr + lType);
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String s1_6(String examNum, String gradeNum, String schoolNum, String subjectNum, String classNum, String studentId, String studentName, String studentType, String type, String source, String history, String isMoreSchool, String isSaveWrite, String rptTitle, String rpt_name, String dirPath, String uri, String useId, int tupiansize, String all_class, String agent, String subPngFlag, String show, String fufen, String subCompose) {
        List li;
        String row;
        String row2;
        String rptTitle2 = this.sp.getHeaderStr(examNum, subjectNum, gradeNum, schoolNum, classNum, studentId, studentType, true, true, false, false, true, true, true, true, false, true, true, true, true, true, false, subCompose, fufen);
        String classname = this.sp.getNameStr(examNum, subjectNum, gradeNum, schoolNum, classNum, studentId, studentType, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, subCompose, fufen);
        String gradename = this.sp.getNameStr(examNum, subjectNum, gradeNum, schoolNum, classNum, studentId, studentType, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, subCompose, fufen);
        String schoolname1 = this.sp.getNameStr(examNum, subjectNum, gradeNum, schoolNum, classNum, studentId, studentType, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, subCompose, fufen);
        String folderPath = "reportExcel" + useId + "/" + schoolname1 + "/" + gradename + "/" + classname;
        String str = "reportExcel" + useId;
        String str2 = "reportExcel" + useId;
        String excelName = "学生评价表_" + gradeNum + classNum;
        if (null != studentName && !"".equals(studentName) && !studentName.contains(Const.STRING_SEPERATOR)) {
            String str3 = excelName + "_" + studentName;
        }
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        String excelName2 = this.sp.getNameStr(examNum, subjectNum, gradeNum, schoolNum, classNum, studentId, studentType, true, true, true, false, false, true, false, true, false, false, false, false, false, false, false, false, subCompose, fufen);
        File excelFile = getRptExcelFile(excelName2, dirPath, folderPath);
        try {
            WritableWorkbook wwBook = Workbook.createWorkbook(excelFile);
            WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Colour.BLACK);
            WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
            biaotis1.setAlignment(Alignment.CENTRE);
            biaotis1.setVerticalAlignment(VerticalAlignment.CENTRE);
            WritableFont titles = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Colour.BLACK);
            WritableCellFormat title = new WritableCellFormat(titles);
            title.setAlignment(Alignment.LEFT);
            title.setVerticalAlignment(VerticalAlignment.CENTRE);
            title.setWrap(true);
            WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Colour.BLACK);
            WritableCellFormat cFormat1 = new WritableCellFormat(font1);
            cFormat1.setAlignment(Alignment.CENTRE);
            cFormat1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1.setBackground(Const.jxl_head);
            cFormat1.setWrap(true);
            WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Colour.BLACK);
            WritableCellFormat cFormat2 = new WritableCellFormat(font2);
            cFormat2.setAlignment(Alignment.CENTRE);
            cFormat2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2.setBackground(Const.jxlcolo_row2);
            cFormat2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2.setWrap(true);
            WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Colour.BLACK);
            WritableCellFormat cFormat3 = new WritableCellFormat(font3);
            cFormat3.setAlignment(Alignment.CENTRE);
            cFormat3.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3.setBackground(Const.jxlcolo_row1);
            cFormat3.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3.setWrap(true);
            WritableFont fontq = new WritableFont(WritableFont.ARIAL, 14, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Colour.BLACK);
            WritableCellFormat cFormatq = new WritableCellFormat(fontq);
            cFormatq.setAlignment(Alignment.CENTRE);
            cFormatq.setBorder(Border.BOTTOM, BorderLineStyle.NONE);
            cFormatq.setBorder(Border.RIGHT, BorderLineStyle.NONE);
            cFormatq.setBorder(Border.LEFT, BorderLineStyle.NONE);
            cFormatq.setBorder(Border.TOP, BorderLineStyle.NONE);
            cFormatq.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormatq.setWrap(true);
            WritableFont fontq2 = new WritableFont(WritableFont.ARIAL, 12, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Colour.BLACK);
            WritableCellFormat cFormatq2 = new WritableCellFormat(fontq2);
            cFormatq2.setAlignment(Alignment.CENTRE);
            cFormatq2.setBorder(Border.BOTTOM, BorderLineStyle.NONE);
            cFormatq2.setBorder(Border.RIGHT, BorderLineStyle.NONE);
            cFormatq2.setBorder(Border.LEFT, BorderLineStyle.NONE);
            cFormatq2.setBorder(Border.TOP, BorderLineStyle.NONE);
            cFormatq2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormatq2.setWrap(true);
            List<Studentlevel> list = this.sp.getStuPersonalScore(examNum, subjectNum, gradeNum, schoolNum, classNum, studentId, studentType, source, type, fufen, subCompose);
            try {
                try {
                    WritableSheet sheet = wwBook.createSheet("学生评价表", 0);
                    sheet.getSettings().setShowGridLines(false);
                    try {
                        Label biaotou = new Label(0, 0, "学生评价表", biaotis1);
                        sheet.addCell(biaotou);
                        sheet.setRowView(0, Const.height_500);
                        Label xinxi = new Label(0, 1, rptTitle2, title);
                        sheet.addCell(xinxi);
                        sheet.setRowView(1, Const.height_500);
                        DecimalFormat df = new DecimalFormat("0.0");
                        DecimalFormat df1 = new DecimalFormat("0.00");
                        String signnl = this.userService.getRank("11");
                        if (isMoreSchool.equals("T")) {
                            sheet.mergeCells(0, 0, 12, 0);
                            sheet.mergeCells(0, 1, 12, 1);
                            Label subject_title = new Label(0, 2, "科目", cFormat1);
                            sheet.addCell(subject_title);
                            Label subjectFull_title = new Label(1, 2, "学科满分", cFormat1);
                            sheet.addCell(subjectFull_title);
                            Label rawScore_title = new Label(2, 2, "原始分", cFormat1);
                            sheet.addCell(rawScore_title);
                            if ("0".equals(signnl)) {
                                Label schoolPercentRank_title = new Label(3, 2, "学校百分等级", cFormat1);
                                sheet.addCell(schoolPercentRank_title);
                            } else if ("1".equals(signnl)) {
                                Label schoolPercentRank_title2 = new Label(3, 2, "年级排名", cFormat1);
                                sheet.addCell(schoolPercentRank_title2);
                            }
                            if ("0".equals(signnl)) {
                                Label countyPercentRank_title = new Label(4, 2, "区县百分等级", cFormat1);
                                sheet.addCell(countyPercentRank_title);
                            } else if ("1".equals(signnl)) {
                                Label countyPercentRank_title2 = new Label(4, 2, "区县排名", cFormat1);
                                sheet.addCell(countyPercentRank_title2);
                            }
                            Label schoolStandard_title = new Label(5, 2, "学校标准分T", cFormat1);
                            sheet.addCell(schoolStandard_title);
                            Label countyStandard_title = new Label(6, 2, "区县标准分T", cFormat1);
                            sheet.addCell(countyStandard_title);
                            Label classAvg_title = new Label(7, 2, "班级平均分", cFormat1);
                            sheet.addCell(classAvg_title);
                            Label classMax_title = new Label(8, 2, "班级最高分", cFormat1);
                            sheet.addCell(classMax_title);
                            Label gradeAvg_title = new Label(9, 2, "年级平均分", cFormat1);
                            sheet.addCell(gradeAvg_title);
                            Label gradeMax_title = new Label(10, 2, "年级最高分", cFormat1);
                            sheet.addCell(gradeMax_title);
                            Label countyAvg_title = new Label(11, 2, "区县平均分", cFormat1);
                            sheet.addCell(countyAvg_title);
                            Label countyMax_title = new Label(12, 2, "区县最高分", cFormat1);
                            sheet.addCell(countyMax_title);
                            for (int i = 0; i < list.size(); i++) {
                                if (i % 2 != 0) {
                                    Label subjectName = new Label(0, 3 + i, list.get(i).getSubjectName(), cFormat2);
                                    sheet.addCell(subjectName);
                                    sheet.setColumnView(0, 6);
                                    Number subjectFull = new Number(1, 3 + i, Double.parseDouble(df.format(list.get(i).getFullScore())), cFormat2);
                                    sheet.addCell(subjectFull);
                                    sheet.setColumnView(1, 6);
                                    Number rawScore = new Number(2, 3 + i, Double.parseDouble(df.format(list.get(i).getTotalScore())), cFormat2);
                                    sheet.addCell(rawScore);
                                    sheet.setColumnView(2, 6);
                                    if (list.get(i).getSubjectName().equals("1总分")) {
                                        Label schoolPercentRank = new Label(3, 3 + i, "", cFormat2);
                                        sheet.addCell(schoolPercentRank);
                                        sheet.setColumnView(3, 6);
                                        Label countyPercentRank = new Label(4, 3 + i, "", cFormat2);
                                        sheet.addCell(countyPercentRank);
                                        sheet.setColumnView(4, 6);
                                    } else if ("0".equals(signnl)) {
                                        Number schoolPercentRank2 = new Number(3, 3 + i, Double.parseDouble(df.format(list.get(i).getSchoolRank())), cFormat2);
                                        sheet.addCell(schoolPercentRank2);
                                        sheet.setColumnView(3, 6);
                                        Number countyPercentRank2 = new Number(4, 3 + i, Double.parseDouble(df.format(list.get(i).getAreaRank())), cFormat2);
                                        sheet.addCell(countyPercentRank2);
                                        sheet.setColumnView(4, 6);
                                    } else if ("1".equals(signnl)) {
                                        Number schoolPercentRank3 = new Number(3, 3 + i, Double.valueOf(list.get(i).getExt2()).doubleValue(), cFormat2);
                                        sheet.addCell(schoolPercentRank3);
                                        sheet.setColumnView(3, 6);
                                        Number countyPercentRank3 = new Number(4, 3 + i, Double.parseDouble(df.format(list.get(i).getAreaRanking())), cFormat2);
                                        sheet.addCell(countyPercentRank3);
                                        sheet.setColumnView(4, 6);
                                    }
                                    Number schoolStandard = new Number(5, 3 + i, Double.parseDouble(df.format(list.get(i).getSsdt())), cFormat2);
                                    sheet.addCell(schoolStandard);
                                    sheet.setColumnView(5, 6);
                                    Number countyStandard = new Number(6, 3 + i, Double.parseDouble(df.format(list.get(i).getStandardScore_q())), cFormat2);
                                    sheet.addCell(countyStandard);
                                    sheet.setColumnView(6, 6);
                                    Number classAvg = new Number(7, 3 + i, Double.parseDouble(df.format(list.get(i).getClassAverage())), cFormat2);
                                    sheet.addCell(classAvg);
                                    sheet.setColumnView(7, 6);
                                    Number classMax = new Number(8, 3 + i, Double.parseDouble(df.format(list.get(i).getClassMax())), cFormat2);
                                    sheet.addCell(classMax);
                                    sheet.setColumnView(8, 6);
                                    Number gradeAvg = new Number(9, 3 + i, Double.parseDouble(df.format(list.get(i).getGradeAverage())), cFormat2);
                                    sheet.addCell(gradeAvg);
                                    sheet.setColumnView(9, 6);
                                    Number gradeMax = new Number(10, 3 + i, Double.parseDouble(df.format(list.get(i).getGradeMax())), cFormat2);
                                    sheet.addCell(gradeMax);
                                    sheet.setColumnView(10, 6);
                                    Number countyAvg = new Number(11, 3 + i, Double.parseDouble(df.format(list.get(i).getAreaAvg())), cFormat2);
                                    sheet.addCell(countyAvg);
                                    Number countyMax = new Number(12, 3 + i, Double.parseDouble(df.format(list.get(i).getAreaMax())), cFormat2);
                                    sheet.addCell(countyMax);
                                    sheet.setColumnView(12, 6);
                                } else {
                                    Label subjectName2 = new Label(0, 3 + i, list.get(i).getSubjectName(), cFormat3);
                                    sheet.addCell(subjectName2);
                                    sheet.setColumnView(0, 6);
                                    Number subjectFull2 = new Number(1, 3 + i, Double.parseDouble(df.format(list.get(i).getFullScore())), cFormat3);
                                    sheet.addCell(subjectFull2);
                                    sheet.setColumnView(1, 6);
                                    Number rawScore2 = new Number(2, 3 + i, Double.parseDouble(df.format(list.get(i).getTotalScore())), cFormat3);
                                    sheet.addCell(rawScore2);
                                    sheet.setColumnView(2, 6);
                                    if (list.get(i).getSubjectName().equals("1总分")) {
                                        Label schoolPercentRank4 = new Label(3, 3 + i, "", cFormat3);
                                        sheet.addCell(schoolPercentRank4);
                                        sheet.setColumnView(3, 6);
                                        Label countyPercentRank4 = new Label(4, 3 + i, "", cFormat3);
                                        sheet.addCell(countyPercentRank4);
                                        sheet.setColumnView(4, 6);
                                    } else if ("0".equals(signnl)) {
                                        Number schoolPercentRank5 = new Number(3, 3 + i, Double.parseDouble(df.format(list.get(i).getSchoolRank())), cFormat3);
                                        sheet.addCell(schoolPercentRank5);
                                        sheet.setColumnView(3, 6);
                                        Number countyPercentRank5 = new Number(4, 3 + i, Double.parseDouble(df.format(list.get(i).getAreaRank())), cFormat3);
                                        sheet.addCell(countyPercentRank5);
                                        sheet.setColumnView(4, 6);
                                    } else if ("1".equals(signnl)) {
                                        Number schoolPercentRank6 = new Number(3, 3 + i, Double.valueOf(list.get(i).getExt2()).doubleValue(), cFormat3);
                                        sheet.addCell(schoolPercentRank6);
                                        sheet.setColumnView(3, 6);
                                        Number countyPercentRank6 = new Number(4, 3 + i, Double.parseDouble(df.format(list.get(i).getAreaRanking())), cFormat3);
                                        sheet.addCell(countyPercentRank6);
                                        sheet.setColumnView(4, 6);
                                    }
                                    Number schoolStandard2 = new Number(5, 3 + i, Double.parseDouble(df.format(list.get(i).getSsdt())), cFormat3);
                                    sheet.addCell(schoolStandard2);
                                    sheet.setColumnView(5, 6);
                                    Number countyStandard2 = new Number(6, 3 + i, Double.parseDouble(df.format(list.get(i).getStandardScore_q())), cFormat3);
                                    sheet.addCell(countyStandard2);
                                    sheet.setColumnView(6, 6);
                                    Number classAvg2 = new Number(7, 3 + i, Double.parseDouble(df.format(list.get(i).getClassAverage())), cFormat3);
                                    sheet.addCell(classAvg2);
                                    sheet.setColumnView(7, 6);
                                    Number classMax2 = new Number(8, 3 + i, Double.parseDouble(df.format(list.get(i).getClassMax())), cFormat3);
                                    sheet.addCell(classMax2);
                                    sheet.setColumnView(8, 6);
                                    Number gradeAvg2 = new Number(9, 3 + i, Double.parseDouble(df.format(list.get(i).getGradeAverage())), cFormat3);
                                    sheet.addCell(gradeAvg2);
                                    sheet.setColumnView(9, 6);
                                    Number gradeMax2 = new Number(10, 3 + i, Double.parseDouble(df.format(list.get(i).getGradeMax())), cFormat3);
                                    sheet.addCell(gradeMax2);
                                    sheet.setColumnView(10, 6);
                                    Number countyAvg2 = new Number(11, 3 + i, Double.parseDouble(df.format(list.get(i).getAreaAvg())), cFormat3);
                                    sheet.addCell(countyAvg2);
                                    sheet.setColumnView(11, 6);
                                    Number countyMax2 = new Number(12, 3 + i, Double.parseDouble(df.format(list.get(i).getAreaMax())), cFormat3);
                                    sheet.addCell(countyMax2);
                                    sheet.setColumnView(12, 6);
                                }
                            }
                        } else {
                            sheet.mergeCells(0, 0, 8, 0);
                            sheet.mergeCells(0, 1, 8, 1);
                            Label subject_title2 = new Label(0, 2, "科目", cFormat1);
                            sheet.addCell(subject_title2);
                            Label subjectFull_title2 = new Label(1, 2, "学科满分", cFormat1);
                            sheet.addCell(subjectFull_title2);
                            Label rawScore_title2 = new Label(2, 2, "原始分", cFormat1);
                            sheet.addCell(rawScore_title2);
                            if ("0".equals(signnl)) {
                                Label schoolPercentRank_title3 = new Label(3, 2, "学校百分等级", cFormat1);
                                sheet.addCell(schoolPercentRank_title3);
                            } else if ("1".equals(signnl)) {
                                Label schoolPercentRank_title4 = new Label(3, 2, "年级排名", cFormat1);
                                sheet.addCell(schoolPercentRank_title4);
                            }
                            Label schoolStandard_title2 = new Label(4, 2, "学校标准分T", cFormat1);
                            sheet.addCell(schoolStandard_title2);
                            Label classAvg_title2 = new Label(5, 2, "班级平均分", cFormat1);
                            sheet.addCell(classAvg_title2);
                            Label classMax_title2 = new Label(6, 2, "班级最高分", cFormat1);
                            sheet.addCell(classMax_title2);
                            Label gradeAvg_title2 = new Label(7, 2, "年级平均分", cFormat1);
                            sheet.addCell(gradeAvg_title2);
                            Label gradeMax_title2 = new Label(8, 2, "年级最高分", cFormat1);
                            sheet.addCell(gradeMax_title2);
                            for (int i2 = 0; i2 < list.size(); i2++) {
                                if (i2 % 2 != 0) {
                                    Label subjectName3 = new Label(0, 3 + i2, list.get(i2).getSubjectName(), cFormat2);
                                    sheet.addCell(subjectName3);
                                    sheet.setColumnView(0, 7);
                                    Number subjectFull3 = new Number(1, 3 + i2, list.get(i2).getFullScore(), cFormat2);
                                    sheet.addCell(subjectFull3);
                                    sheet.setColumnView(1, 7);
                                    Number rawScore3 = new Number(2, 3 + i2, Double.parseDouble(df.format(list.get(i2).getTotalScore())), cFormat2);
                                    sheet.addCell(rawScore3);
                                    sheet.setColumnView(2, 7);
                                    if (list.get(i2).getSubjectName().equals("1总分")) {
                                        Label schoolPercentRank7 = new Label(3, 3 + i2, "", cFormat2);
                                        sheet.addCell(schoolPercentRank7);
                                        sheet.setColumnView(3, 7);
                                    } else if ("0".equals(signnl)) {
                                        Number schoolPercentRank8 = new Number(3, 3 + i2, Double.parseDouble(df.format(list.get(i2).getSchoolRank())), cFormat2);
                                        sheet.addCell(schoolPercentRank8);
                                        sheet.setColumnView(3, 7);
                                    } else if ("1".equals(signnl)) {
                                        Number schoolPercentRank9 = new Number(3, 3 + i2, Double.valueOf(list.get(i2).getExt2()).doubleValue(), cFormat2);
                                        sheet.addCell(schoolPercentRank9);
                                        sheet.setColumnView(3, 7);
                                    }
                                    Number schoolStandard3 = new Number(4, 3 + i2, Double.parseDouble(df.format(list.get(i2).getSsdt())), cFormat2);
                                    sheet.addCell(schoolStandard3);
                                    sheet.setColumnView(4, 7);
                                    Number classAvg3 = new Number(5, 3 + i2, Double.parseDouble(df.format(list.get(i2).getClassAverage())), cFormat2);
                                    sheet.addCell(classAvg3);
                                    sheet.setColumnView(5, 7);
                                    Number classMax3 = new Number(6, 3 + i2, Double.parseDouble(df.format(list.get(i2).getClassMax())), cFormat2);
                                    sheet.addCell(classMax3);
                                    sheet.setColumnView(6, 7);
                                    Number gradeAvg3 = new Number(7, 3 + i2, Double.parseDouble(df.format(list.get(i2).getGradeAverage())), cFormat2);
                                    sheet.addCell(gradeAvg3);
                                    sheet.setColumnView(7, 7);
                                    Number gradeMax3 = new Number(8, 3 + i2, Double.parseDouble(df.format(list.get(i2).getGradeMax())), cFormat2);
                                    sheet.addCell(gradeMax3);
                                    sheet.setColumnView(8, 7);
                                } else {
                                    Label subjectName4 = new Label(0, 3 + i2, list.get(i2).getSubjectName(), cFormat3);
                                    sheet.addCell(subjectName4);
                                    sheet.setColumnView(0, 7);
                                    Number subjectFull4 = new Number(1, 3 + i2, list.get(i2).getFullScore(), cFormat3);
                                    sheet.addCell(subjectFull4);
                                    sheet.setColumnView(1, 7);
                                    Number rawScore4 = new Number(2, 3 + i2, Double.parseDouble(df.format(list.get(i2).getTotalScore())), cFormat3);
                                    sheet.addCell(rawScore4);
                                    sheet.setColumnView(2, 7);
                                    if (list.get(i2).getSubjectName().equals("1总分")) {
                                        Label schoolPercentRank10 = new Label(3, 3 + i2, "", cFormat3);
                                        sheet.addCell(schoolPercentRank10);
                                        sheet.setColumnView(3, 7);
                                    } else if ("0".equals(signnl)) {
                                        Number schoolPercentRank11 = new Number(3, 3 + i2, Double.parseDouble(df.format(list.get(i2).getSchoolRank())), cFormat3);
                                        sheet.addCell(schoolPercentRank11);
                                        sheet.setColumnView(3, 7);
                                    } else if ("1".equals(signnl)) {
                                        Number schoolPercentRank12 = new Number(3, 3 + i2, Double.valueOf(list.get(i2).getExt2()).doubleValue());
                                        sheet.addCell(schoolPercentRank12);
                                        sheet.setColumnView(3, 7);
                                    }
                                    Number schoolStandard4 = new Number(4, 3 + i2, Double.parseDouble(df.format(list.get(i2).getSsdt())), cFormat3);
                                    sheet.addCell(schoolStandard4);
                                    sheet.setColumnView(4, 7);
                                    Number classAvg4 = new Number(5, 3 + i2, Double.parseDouble(df.format(list.get(i2).getClassAverage())), cFormat3);
                                    sheet.addCell(classAvg4);
                                    sheet.setColumnView(5, 7);
                                    Number classMax4 = new Number(6, 3 + i2, Double.parseDouble(df.format(list.get(i2).getClassMax())), cFormat3);
                                    sheet.addCell(classMax4);
                                    sheet.setColumnView(6, 7);
                                    Number gradeAvg4 = new Number(7, 3 + i2, Double.parseDouble(df.format(list.get(i2).getGradeAverage())), cFormat3);
                                    sheet.addCell(gradeAvg4);
                                    sheet.setColumnView(7, 7);
                                    Number gradeMax4 = new Number(8, 3 + i2, Double.parseDouble(df.format(list.get(i2).getGradeMax())), cFormat3);
                                    sheet.addCell(gradeMax4);
                                    sheet.setColumnView(8, 7);
                                }
                            }
                        }
                        int a = list.size() + 3;
                        String[] strArr = new String[0];
                        String[] rowKeys2 = new String[0];
                        if (show.equals("1")) {
                            if (isMoreSchool.equals("T")) {
                                row = "class,grade,county";
                                row2 = "ssdt,areassdt";
                            } else {
                                row = "class,grade";
                                row2 = "ssdt";
                            }
                            String[] rowKeys0 = row.split(Const.STRING_SEPERATOR);
                            rowKeys2 = row2.split(Const.STRING_SEPERATOR);
                            for (int x = 0; x < rowKeys0.length; x++) {
                                File imgFile = getSubChartImgFile_s1(list, studentId, rowKeys0[x], useId, subPngFlag, dirPath);
                                WritableImage image = new WritableImage(0.0d, a + (x * 20.0d) + 1.0d, 13.0d, 20.0d, imgFile);
                                sheet.addImage(image);
                            }
                            a = (int) (a + (rowKeys0.length * 20.0d));
                            for (int y = 0; y < rowKeys2.length; y++) {
                                File imgFile2 = getSubChartImgFile_s1(list, studentId, rowKeys2[y], useId, subPngFlag, dirPath);
                                WritableImage image2 = new WritableImage(0.0d, a + (y * 20.0d) + 1.0d, 13.0d, 20.0d, imgFile2);
                                sheet.addImage(image2);
                            }
                        }
                        int a2 = (int) (a + (rowKeys2.length * 20.0d) + 5.0d);
                        new ArrayList();
                        List<AjaxData> subjectList = this.analy.getSubject(examNum, null, gradeNum, studentType, "false", "0", subCompose);
                        if (null != subjectList && subjectList.size() > 0) {
                            for (int i3 = 0; i3 < subjectList.size(); i3++) {
                                String subjectNum2 = subjectList.get(i3).getNum();
                                String levelclass = this.system.getIsLevelClass(examNum, gradeNum, subjectNum2, null);
                                if (null != levelclass && levelclass.equals("T") && null != (li = this.sp.getStuLevelCla(subjectNum2, studentId)) && li.size() > 0) {
                                    classNum = ((Levelstudent) li.get(0)).getClassNum();
                                }
                                Label sjt = new Label(0, a2 - 2, (i3 + 1) + "、" + subjectList.get(i3).getName() + "学科分析", cFormatq);
                                sheet.addCell(sjt);
                                sheet.setRowView(a2 - 2, Const.height_500);
                                sheet.mergeCells(0, a2 - 2, 7, a2 - 2);
                                List<RptHeader> slist = this.sp.getStuQuestionScore(examNum, subjectNum2, gradeNum, schoolNum, classNum, studentId, studentType, source, type, subCompose);
                                if (null != slist && slist.size() > 0) {
                                    Label sjta = new Label(0, a2 - 1, subjectList.get(i3).getName() + "小题分析", cFormatq2);
                                    sheet.addCell(sjta);
                                    sheet.setRowView(a2 - 1, Const.height_500);
                                    sheet.mergeCells(0, a2 - 1, 7, a2 - 1);
                                    Label qName = new Label(0, a2, "小题" + subjectList.get(i3).getName(), cFormat1);
                                    sheet.addCell(qName);
                                    Label qtype = new Label(1, a2, "题型", cFormat1);
                                    sheet.addCell(qtype);
                                    Label qfull = new Label(2, a2, "满分值", cFormat1);
                                    sheet.addCell(qfull);
                                    Label qscore = new Label(3, a2, "得分", cFormat1);
                                    sheet.addCell(qscore);
                                    Label gmaxScore = new Label(4, a2, "班级最高分", cFormat1);
                                    sheet.addCell(gmaxScore);
                                    Label gAvg = new Label(5, a2, "班级平均分", cFormat1);
                                    sheet.addCell(gAvg);
                                    Label amaxScore = new Label(6, a2, "区县最高分", cFormat1);
                                    sheet.addCell(amaxScore);
                                    Label aAvg = new Label(7, a2, "区县平均分", cFormat1);
                                    sheet.addCell(aAvg);
                                    for (int si = 0; si < slist.size(); si++) {
                                        if (si % 2 != 0) {
                                            Label qName2 = new Label(0, a2 + 1 + si, slist.get(si).getQuestionNum(), cFormat2);
                                            sheet.addCell(qName2);
                                            Label qtype2 = new Label(1, a2 + 1 + si, slist.get(si).getQtype(), cFormat2);
                                            sheet.addCell(qtype2);
                                            Number qfull2 = new Number(2, a2 + 1 + si, Double.parseDouble(df.format(slist.get(si).getFullScore())), cFormat2);
                                            sheet.addCell(qfull2);
                                            Number qscore2 = new Number(3, a2 + 1 + si, Double.parseDouble(df.format(slist.get(si).getQuestionScore())), cFormat2);
                                            sheet.addCell(qscore2);
                                            Number gmaxScore2 = new Number(4, a2 + 1 + si, Double.parseDouble(df.format(slist.get(si).getC_max())), cFormat2);
                                            sheet.addCell(gmaxScore2);
                                            Number gAvg2 = new Number(5, a2 + 1 + si, Double.parseDouble(df1.format(slist.get(si).getCavg())), cFormat2);
                                            sheet.addCell(gAvg2);
                                            Number amaxScore2 = new Number(6, a2 + 1 + si, Double.parseDouble(df.format(slist.get(si).getAr_max())), cFormat2);
                                            sheet.addCell(amaxScore2);
                                            Number aAvg2 = new Number(7, a2 + 1 + si, Double.parseDouble(df1.format(slist.get(si).getAravg())), cFormat2);
                                            sheet.addCell(aAvg2);
                                        } else {
                                            Label qName22 = new Label(0, a2 + 1 + si, slist.get(si).getQuestionNum(), cFormat3);
                                            sheet.addCell(qName22);
                                            Label qtype22 = new Label(1, a2 + 1 + si, slist.get(si).getQtype(), cFormat3);
                                            sheet.addCell(qtype22);
                                            Number qfull22 = new Number(2, a2 + 1 + si, Double.parseDouble(df.format(slist.get(si).getFullScore())), cFormat3);
                                            sheet.addCell(qfull22);
                                            Number qscore22 = new Number(3, a2 + 1 + si, Double.parseDouble(df.format(slist.get(si).getQuestionScore())), cFormat3);
                                            sheet.addCell(qscore22);
                                            Number gmaxScore22 = new Number(4, a2 + 1 + si, Double.parseDouble(df.format(slist.get(si).getC_max())), cFormat3);
                                            sheet.addCell(gmaxScore22);
                                            Number gAvg22 = new Number(5, a2 + 1 + si, Double.parseDouble(df1.format(slist.get(si).getCavg())), cFormat3);
                                            sheet.addCell(gAvg22);
                                            Number amaxScore22 = new Number(6, a2 + 1 + si, Double.parseDouble(df.format(slist.get(si).getAr_max())), cFormat3);
                                            sheet.addCell(amaxScore22);
                                            Number aAvg22 = new Number(7, a2 + 1 + si, Double.parseDouble(df1.format(slist.get(si).getAravg())), cFormat3);
                                            sheet.addCell(aAvg22);
                                        }
                                    }
                                    a2 = a2 + slist.size() + 5;
                                    if (show.equals("1")) {
                                        String row3 = !isMoreSchool.equals("T") ? "questionfilec,questionfileg" : "questionfilec,questionfileg,questionfileq";
                                        String[] rowKeys = row3.split(Const.STRING_SEPERATOR);
                                        for (int k = 0; k < rowKeys.length; k++) {
                                            File imgFile3 = getSubChartImgFileQuestionNum(slist, studentId + "_" + subjectNum2, rowKeys[k], useId, dirPath, subPngFlag);
                                            WritableImage image3 = new WritableImage(0.0d, a2 + (k * 20.0d) + 1.0d, 13.0d, 20.0d, imgFile3);
                                            sheet.addImage(image3);
                                        }
                                        a2 = (int) (a2 + (rowKeys.length * 20.0d) + 5.0d);
                                    }
                                }
                                List<RptHeader> klist = this.ska.getStuKnowledgeScore(examNum, subjectNum2, gradeNum, schoolNum, classNum, studentId, type, studentType, source, subCompose);
                                if (null != klist && klist.size() > 0) {
                                    Label sjtak = new Label(0, a2 - 1, subjectList.get(i3).getName() + "知识点分析", cFormatq2);
                                    sheet.addCell(sjtak);
                                    sheet.setRowView(a2 - 1, Const.height_500);
                                    sheet.mergeCells(0, a2 - 1, 9, a2 - 1);
                                    Label kNum = new Label(0, a2, "知识点编号", cFormat1);
                                    sheet.addCell(kNum);
                                    Label kName = new Label(1, a2, "知识点名称", cFormat1);
                                    sheet.addCell(kName);
                                    Label kfull = new Label(2, a2, "满分值", cFormat1);
                                    sheet.addCell(kfull);
                                    Label kscore = new Label(3, a2, "得分", cFormat1);
                                    sheet.addCell(kscore);
                                    Label kscorep = new Label(4, a2, "得分率", cFormat1);
                                    sheet.addCell(kscorep);
                                    Label kcAvg = new Label(5, a2, "班级最高分", cFormat1);
                                    sheet.addCell(kcAvg);
                                    Label kcAvgp = new Label(6, a2, "班级平均得分率", cFormat1);
                                    sheet.addCell(kcAvgp);
                                    Label kgAvg = new Label(7, a2, "年级最高分", cFormat1);
                                    sheet.addCell(kgAvg);
                                    Label kgAvgp = new Label(8, a2, "年级平均得分率", cFormat1);
                                    sheet.addCell(kgAvgp);
                                    Label kaAvg = new Label(9, a2, "区县最高分", cFormat1);
                                    sheet.addCell(kaAvg);
                                    Label kaAvgp = new Label(10, a2, "区县平均得分率", cFormat1);
                                    sheet.addCell(kaAvgp);
                                    for (int ki = 0; ki < klist.size(); ki++) {
                                        if (ki % 2 != 0) {
                                            Label kNum2 = new Label(0, a2 + 1 + ki, klist.get(ki).getKonwNum(), cFormat2);
                                            sheet.addCell(kNum2);
                                            Label kName2 = new Label(1, a2 + 1 + ki, klist.get(ki).getKnoName(), cFormat2);
                                            sheet.addCell(kName2);
                                            Number kfull2 = new Number(2, a2 + 1 + ki, Double.parseDouble(df.format(klist.get(ki).getTotalScore())), cFormat2);
                                            sheet.addCell(kfull2);
                                            Number kscore2 = new Number(3, a2 + 1 + ki, Double.parseDouble(df.format(klist.get(ki).getScore())), cFormat2);
                                            sheet.addCell(kscore2);
                                            Label kscorep2 = new Label(4, a2 + 1 + ki, String.valueOf(df.format(Double.valueOf(klist.get(ki).getScore() / klist.get(ki).getTotalScore()).doubleValue() * 100.0d)) + "%", cFormat2);
                                            sheet.addCell(kscorep2);
                                            Number kcAvg2 = new Number(5, a2 + 1 + ki, Double.parseDouble(df.format(klist.get(ki).getCm())), cFormat2);
                                            sheet.addCell(kcAvg2);
                                            Label kcAvgp2 = new Label(6, a2 + 1 + ki, String.valueOf(df.format(Double.valueOf(klist.get(ki).getCavg() / klist.get(ki).getTotalScore()).doubleValue() * 100.0d)) + "%", cFormat2);
                                            sheet.addCell(kcAvgp2);
                                            Number kgAvg2 = new Number(7, a2 + 1 + ki, Double.parseDouble(df.format(klist.get(ki).getGm())), cFormat2);
                                            sheet.addCell(kgAvg2);
                                            Label kgAvgp2 = new Label(8, a2 + 1 + ki, String.valueOf(df.format(Double.valueOf(klist.get(ki).getGavg() / klist.get(ki).getTotalScore()).doubleValue() * 100.0d)) + "%", cFormat2);
                                            sheet.addCell(kgAvgp2);
                                            Number kaAvg2 = new Number(9, a2 + 1 + ki, Double.parseDouble(df.format(klist.get(ki).getAr_max())), cFormat2);
                                            sheet.addCell(kaAvg2);
                                            Label kaAvgp2 = new Label(10, a2 + 1 + ki, String.valueOf(df.format(Double.valueOf(klist.get(ki).getAravg() / klist.get(ki).getTotalScore()).doubleValue() * 100.0d)) + "%", cFormat2);
                                            sheet.addCell(kaAvgp2);
                                        } else {
                                            Label kNum22 = new Label(0, a2 + 1 + ki, klist.get(ki).getKonwNum(), cFormat3);
                                            sheet.addCell(kNum22);
                                            Label kName22 = new Label(1, a2 + 1 + ki, klist.get(ki).getKnoName(), cFormat3);
                                            sheet.addCell(kName22);
                                            Number kfull22 = new Number(2, a2 + 1 + ki, Double.parseDouble(df.format(klist.get(ki).getTotalScore())), cFormat3);
                                            sheet.addCell(kfull22);
                                            Number kscore22 = new Number(3, a2 + 1 + ki, Double.parseDouble(df.format(klist.get(ki).getScore())), cFormat3);
                                            sheet.addCell(kscore22);
                                            Label kscorep22 = new Label(4, a2 + 1 + ki, String.valueOf(df.format(Double.valueOf(klist.get(ki).getScore() / klist.get(ki).getTotalScore()).doubleValue() * 100.0d)) + "%", cFormat3);
                                            sheet.addCell(kscorep22);
                                            Number kcAvg22 = new Number(5, a2 + 1 + ki, Double.parseDouble(df.format(klist.get(ki).getCm())), cFormat3);
                                            sheet.addCell(kcAvg22);
                                            Label kcAvgp22 = new Label(6, a2 + 1 + ki, String.valueOf(df.format(Double.valueOf(klist.get(ki).getCavg() / klist.get(ki).getTotalScore()).doubleValue() * 100.0d)) + "%", cFormat3);
                                            sheet.addCell(kcAvgp22);
                                            Number kgAvg22 = new Number(7, a2 + 1 + ki, Double.parseDouble(df.format(klist.get(ki).getGm())), cFormat3);
                                            sheet.addCell(kgAvg22);
                                            Label kgAvgp22 = new Label(8, a2 + 1 + ki, String.valueOf(df.format(Double.valueOf(klist.get(ki).getGavg() / klist.get(ki).getTotalScore()).doubleValue() * 100.0d)) + "%", cFormat3);
                                            sheet.addCell(kgAvgp22);
                                            Number kaAvg22 = new Number(9, a2 + 1 + ki, Double.parseDouble(df.format(klist.get(ki).getAr_max())), cFormat3);
                                            sheet.addCell(kaAvg22);
                                            Label kaAvgp22 = new Label(10, a2 + 1 + ki, String.valueOf(df.format(Double.valueOf(klist.get(ki).getAravg() / klist.get(ki).getTotalScore()).doubleValue() * 100.0d)) + "%", cFormat3);
                                            sheet.addCell(kaAvgp22);
                                        }
                                    }
                                    a2 = a2 + klist.size() + 5;
                                    if (show.equals("1")) {
                                        String row4 = !isMoreSchool.equals("T") ? "knoC,knoG" : "knoC,knoG,knoQ";
                                        String[] arr = row4.split(Const.STRING_SEPERATOR);
                                        for (int k2 = 0; k2 < arr.length; k2++) {
                                            File imgFile4 = getSubChartImgFileQuestionNum(studentId + "_" + subjectNum2, arr[k2], useId, klist, dirPath);
                                            WritableImage image4 = new WritableImage(0.0d, a2 + (k2 * 20.0d) + 1.0d, 13.0d, 20.0d, imgFile4);
                                            sheet.addImage(image4);
                                        }
                                        a2 = (int) (a2 + (arr.length * 20.0d) + 5.0d);
                                    }
                                }
                                List<RptHeader> alist = this.ska.getStuAbilityScore(examNum, subjectNum2, gradeNum, schoolNum, classNum, studentId, type, studentType, source, subCompose);
                                if (null != alist && alist.size() > 0) {
                                    Label sjtaa = new Label(0, a2 - 1, subjectList.get(i3).getName() + "能力点点分析", cFormatq2);
                                    sheet.addCell(sjtaa);
                                    sheet.setRowView(a2 - 1, Const.height_500);
                                    sheet.mergeCells(0, a2 - 1, 9, a2 - 1);
                                    Label kNum3 = new Label(0, a2, "能力点编号", cFormat1);
                                    sheet.addCell(kNum3);
                                    Label kName3 = new Label(1, a2, "能力点名称", cFormat1);
                                    sheet.addCell(kName3);
                                    Label kfull3 = new Label(2, a2, "满分值", cFormat1);
                                    sheet.addCell(kfull3);
                                    Label kscore3 = new Label(3, a2, "得分", cFormat1);
                                    sheet.addCell(kscore3);
                                    Label kscorep3 = new Label(4, a2, "得分率", cFormat1);
                                    sheet.addCell(kscorep3);
                                    Label kcAvg3 = new Label(5, a2, "班级最高分", cFormat1);
                                    sheet.addCell(kcAvg3);
                                    Label kcAvgp3 = new Label(6, a2, "班级平均得分率", cFormat1);
                                    sheet.addCell(kcAvgp3);
                                    Label kgAvg3 = new Label(7, a2, "年级最高分", cFormat1);
                                    sheet.addCell(kgAvg3);
                                    Label kgAvgp3 = new Label(8, a2, "年级平均得分率", cFormat1);
                                    sheet.addCell(kgAvgp3);
                                    Label kaAvg3 = new Label(9, a2, "区县最高分", cFormat1);
                                    sheet.addCell(kaAvg3);
                                    Label kaAvgp3 = new Label(10, a2, "区县平均得分率", cFormat1);
                                    sheet.addCell(kaAvgp3);
                                    for (int ai = 0; ai < alist.size(); ai++) {
                                        if (ai % 2 != 0) {
                                            Label kNum23 = new Label(0, a2 + 1 + ai, alist.get(ai).getAbilityPointNum(), cFormat2);
                                            sheet.addCell(kNum23);
                                            Label kName23 = new Label(1, a2 + 1 + ai, alist.get(ai).getName(), cFormat2);
                                            sheet.addCell(kName23);
                                            Number kfull23 = new Number(2, a2 + 1 + ai, Double.parseDouble(df.format(alist.get(ai).getTotalScore())), cFormat2);
                                            sheet.addCell(kfull23);
                                            Number kscore23 = new Number(3, a2 + 1 + ai, Double.parseDouble(df.format(alist.get(ai).getScore())), cFormat2);
                                            sheet.addCell(kscore23);
                                            Label kscorep23 = new Label(4, a2 + 1 + ai, String.valueOf(df.format(Double.valueOf(alist.get(ai).getScore() / alist.get(ai).getTotalScore()).doubleValue() * 100.0d)) + "%", cFormat2);
                                            sheet.addCell(kscorep23);
                                            Number kcAvg23 = new Number(5, a2 + 1 + ai, Double.parseDouble(df.format(alist.get(ai).getCm())), cFormat2);
                                            sheet.addCell(kcAvg23);
                                            Label kcAvgp23 = new Label(6, a2 + 1 + ai, String.valueOf(df.format(Double.valueOf(alist.get(ai).getCavg() / alist.get(ai).getTotalScore()).doubleValue() * 100.0d)) + "%", cFormat2);
                                            sheet.addCell(kcAvgp23);
                                            Number kgAvg23 = new Number(7, a2 + 1 + ai, Double.parseDouble(df.format(alist.get(ai).getGm())), cFormat2);
                                            sheet.addCell(kgAvg23);
                                            Label kgAvgp23 = new Label(8, a2 + 1 + ai, String.valueOf(df.format(Double.valueOf(alist.get(ai).getGavg() / alist.get(ai).getTotalScore()).doubleValue() * 100.0d)) + "%", cFormat2);
                                            sheet.addCell(kgAvgp23);
                                            Number kaAvg23 = new Number(9, a2 + 1 + ai, Double.parseDouble(df.format(alist.get(ai).getAr_max())), cFormat2);
                                            sheet.addCell(kaAvg23);
                                            Label kaAvgp23 = new Label(10, a2 + 1 + ai, String.valueOf(df.format(Double.valueOf(alist.get(ai).getAravg() / alist.get(ai).getTotalScore()).doubleValue() * 100.0d)) + "%", cFormat2);
                                            sheet.addCell(kaAvgp23);
                                        } else {
                                            Label kNum24 = new Label(0, a2 + 1 + ai, alist.get(ai).getAbilityPointNum(), cFormat3);
                                            sheet.addCell(kNum24);
                                            Label kName24 = new Label(1, a2 + 1 + ai, alist.get(ai).getName(), cFormat3);
                                            sheet.addCell(kName24);
                                            Number kfull24 = new Number(2, a2 + 1 + ai, Double.parseDouble(df.format(alist.get(ai).getTotalScore())), cFormat3);
                                            sheet.addCell(kfull24);
                                            Number kscore24 = new Number(3, a2 + 1 + ai, Double.parseDouble(df.format(alist.get(ai).getScore())), cFormat3);
                                            sheet.addCell(kscore24);
                                            Label kscorep24 = new Label(4, a2 + 1 + ai, String.valueOf(df.format(Double.valueOf(alist.get(ai).getScore() / alist.get(ai).getTotalScore()).doubleValue() * 100.0d)) + "%", cFormat3);
                                            sheet.addCell(kscorep24);
                                            Number kcAvg24 = new Number(5, a2 + 1 + ai, Double.parseDouble(df.format(alist.get(ai).getCm())), cFormat3);
                                            sheet.addCell(kcAvg24);
                                            Label kcAvgp24 = new Label(6, a2 + 1 + ai, String.valueOf(df.format(Double.valueOf(alist.get(ai).getCavg() / alist.get(ai).getTotalScore()).doubleValue() * 100.0d)) + "%", cFormat3);
                                            sheet.addCell(kcAvgp24);
                                            Number kgAvg24 = new Number(7, a2 + 1 + ai, Double.parseDouble(df.format(alist.get(ai).getGm())), cFormat3);
                                            sheet.addCell(kgAvg24);
                                            Label kgAvgp24 = new Label(8, a2 + 1 + ai, String.valueOf(df.format(Double.valueOf(alist.get(ai).getGavg() / alist.get(ai).getTotalScore()).doubleValue() * 100.0d)) + "%", cFormat3);
                                            sheet.addCell(kgAvgp24);
                                            Number kaAvg24 = new Number(9, a2 + 1 + ai, Double.parseDouble(df.format(alist.get(ai).getAr_max())), cFormat3);
                                            sheet.addCell(kaAvg24);
                                            Label kaAvgp24 = new Label(10, a2 + 1 + ai, String.valueOf(df.format(Double.valueOf(alist.get(ai).getAravg() / alist.get(ai).getTotalScore()).doubleValue() * 100.0d)) + "%", cFormat3);
                                            sheet.addCell(kaAvgp24);
                                        }
                                    }
                                    a2 = a2 + alist.size() + 5;
                                    if (show.equals("1")) {
                                        String row5 = !isMoreSchool.equals("T") ? "abilityknoC,abilityknoG" : "abilityknoC,abilityknoG,abilityknoQ";
                                        String[] arr2 = row5.split(Const.STRING_SEPERATOR);
                                        for (int k3 = 0; k3 < arr2.length; k3++) {
                                            File imgFile5 = getSubChartImgFileKnowledge_s4(studentId + "_" + subjectNum2, arr2[k3], useId, alist, dirPath);
                                            WritableImage image5 = new WritableImage(0.0d, a2 + (k3 * 20.0d) + 1.0d, 13.0d, 20.0d, imgFile5);
                                            sheet.addImage(image5);
                                        }
                                        a2 = ((int) (a2 + (arr2.length * 20.0d))) + 5;
                                    }
                                }
                                List<RptHeader> qtlist = this.sq.getStuQtypeScore(examNum, subjectNum2, gradeNum, schoolNum, classNum, studentId, type, studentType, source, subCompose);
                                if (null != qtlist && qtlist.size() > 0) {
                                    Label sjtaqt = new Label(0, a2 - 1, subjectList.get(i3).getName() + "题型分析", cFormatq2);
                                    sheet.addCell(sjtaqt);
                                    sheet.setRowView(a2 - 1, Const.height_500);
                                    sheet.mergeCells(0, a2 - 1, 9, a2 - 1);
                                    Label kNum4 = new Label(0, a2, "题型编号", cFormat1);
                                    sheet.addCell(kNum4);
                                    Label kName4 = new Label(1, a2, "题型名称", cFormat1);
                                    sheet.addCell(kName4);
                                    Label kfull4 = new Label(2, a2, "满分值", cFormat1);
                                    sheet.addCell(kfull4);
                                    Label kscore4 = new Label(3, a2, "得分", cFormat1);
                                    sheet.addCell(kscore4);
                                    Label kscorep4 = new Label(4, a2, "得分率", cFormat1);
                                    sheet.addCell(kscorep4);
                                    Label kcAvg4 = new Label(5, a2, "班级最高分", cFormat1);
                                    sheet.addCell(kcAvg4);
                                    Label kcAvgp4 = new Label(6, a2, "班级平均得分率", cFormat1);
                                    sheet.addCell(kcAvgp4);
                                    Label kgAvg4 = new Label(7, a2, "年级最高分", cFormat1);
                                    sheet.addCell(kgAvg4);
                                    Label kgAvgp4 = new Label(8, a2, "年级平均得分率", cFormat1);
                                    sheet.addCell(kgAvgp4);
                                    Label kaAvg4 = new Label(9, a2, "区县最高分", cFormat1);
                                    sheet.addCell(kaAvg4);
                                    Label kaAvgp4 = new Label(10, a2, "区县平均得分率", cFormat1);
                                    sheet.addCell(kaAvgp4);
                                    for (int qti = 0; qti < qtlist.size(); qti++) {
                                        if (qti % 2 != 0) {
                                            Label kNum25 = new Label(0, a2 + 1 + qti, qtlist.get(qti).getAbilityPointNum(), cFormat2);
                                            sheet.addCell(kNum25);
                                            Label kName25 = new Label(1, a2 + 1 + qti, qtlist.get(qti).getName(), cFormat2);
                                            sheet.addCell(kName25);
                                            Number kfull25 = new Number(2, a2 + 1 + qti, Double.parseDouble(df.format(qtlist.get(qti).getTotalScore())), cFormat2);
                                            sheet.addCell(kfull25);
                                            Number kscore25 = new Number(3, a2 + 1 + qti, Double.parseDouble(df.format(qtlist.get(qti).getScore())), cFormat2);
                                            sheet.addCell(kscore25);
                                            Label kscorep25 = new Label(4, a2 + 1 + qti, String.valueOf(df.format(Double.valueOf(qtlist.get(qti).getScore() / qtlist.get(qti).getTotalScore()).doubleValue() * 100.0d)) + "%", cFormat2);
                                            sheet.addCell(kscorep25);
                                            Number kcAvg25 = new Number(5, a2 + 1 + qti, Double.parseDouble(df.format(qtlist.get(qti).getCm())), cFormat2);
                                            sheet.addCell(kcAvg25);
                                            Label kcAvgp25 = new Label(6, a2 + 1 + qti, String.valueOf(df.format(Double.valueOf(qtlist.get(qti).getCavg() / qtlist.get(qti).getTotalScore()).doubleValue() * 100.0d)) + "%", cFormat2);
                                            sheet.addCell(kcAvgp25);
                                            Number kgAvg25 = new Number(7, a2 + 1 + qti, Double.parseDouble(df.format(qtlist.get(qti).getGm())), cFormat2);
                                            sheet.addCell(kgAvg25);
                                            Label kgAvgp25 = new Label(8, a2 + 1 + qti, String.valueOf(df.format(Double.valueOf(qtlist.get(qti).getGavg() / qtlist.get(qti).getTotalScore()).doubleValue() * 100.0d)) + "%", cFormat2);
                                            sheet.addCell(kgAvgp25);
                                            Number kaAvg25 = new Number(9, a2 + 1 + qti, Double.parseDouble(df.format(qtlist.get(qti).getAr_max())), cFormat2);
                                            sheet.addCell(kaAvg25);
                                            Label kaAvgp25 = new Label(10, a2 + 1 + qti, String.valueOf(df.format(Double.valueOf(qtlist.get(qti).getAravg() / qtlist.get(qti).getTotalScore()).doubleValue() * 100.0d)) + "%", cFormat2);
                                            sheet.addCell(kaAvgp25);
                                        } else {
                                            Label kNum26 = new Label(0, a2 + 1 + qti, qtlist.get(qti).getAbilityPointNum(), cFormat3);
                                            sheet.addCell(kNum26);
                                            Label kName26 = new Label(1, a2 + 1 + qti, qtlist.get(qti).getName(), cFormat3);
                                            sheet.addCell(kName26);
                                            Number kfull26 = new Number(2, a2 + 1 + qti, Double.parseDouble(df.format(qtlist.get(qti).getTotalScore())), cFormat3);
                                            sheet.addCell(kfull26);
                                            Number kscore26 = new Number(3, a2 + 1 + qti, Double.parseDouble(df.format(qtlist.get(qti).getScore())), cFormat3);
                                            sheet.addCell(kscore26);
                                            Label kscorep26 = new Label(4, a2 + 1 + qti, String.valueOf(df.format(Double.valueOf(qtlist.get(qti).getScore() / qtlist.get(qti).getTotalScore()).doubleValue() * 100.0d)) + "%", cFormat3);
                                            sheet.addCell(kscorep26);
                                            Number kcAvg26 = new Number(5, a2 + 1 + qti, Double.parseDouble(df.format(qtlist.get(qti).getCm())), cFormat3);
                                            sheet.addCell(kcAvg26);
                                            Label kcAvgp26 = new Label(6, a2 + 1 + qti, String.valueOf(df.format(Double.valueOf(qtlist.get(qti).getCavg() / qtlist.get(qti).getTotalScore()).doubleValue() * 100.0d)) + "%", cFormat3);
                                            sheet.addCell(kcAvgp26);
                                            Number kgAvg26 = new Number(7, a2 + 1 + qti, Double.parseDouble(df.format(qtlist.get(qti).getGm())), cFormat3);
                                            sheet.addCell(kgAvg26);
                                            Label kgAvgp26 = new Label(8, a2 + 1 + qti, String.valueOf(df.format(Double.valueOf(qtlist.get(qti).getGavg() / qtlist.get(qti).getTotalScore()).doubleValue() * 100.0d)) + "%", cFormat3);
                                            sheet.addCell(kgAvgp26);
                                            Number kaAvg26 = new Number(9, a2 + 1 + qti, Double.parseDouble(df.format(qtlist.get(qti).getAr_max())), cFormat3);
                                            sheet.addCell(kaAvg26);
                                            Label kaAvgp26 = new Label(10, a2 + 1 + qti, String.valueOf(df.format(Double.valueOf(qtlist.get(qti).getAravg() / qtlist.get(qti).getTotalScore()).doubleValue() * 100.0d)) + "%", cFormat3);
                                            sheet.addCell(kaAvgp26);
                                        }
                                    }
                                    a2 = a2 + qtlist.size() + 5;
                                    if (show.equals("1")) {
                                        String row6 = !isMoreSchool.equals("T") ? "qtypeC,qtypeG" : "qtypeC,qtypeG,qtypeQ";
                                        String[] arr3 = row6.split(Const.STRING_SEPERATOR);
                                        for (int k4 = 0; k4 < arr3.length; k4++) {
                                            File imgFile6 = getSubChartQuestionType_s5(studentId + "_" + subjectNum2, arr3[k4], useId, qtlist, dirPath);
                                            WritableImage image6 = new WritableImage(0.0d, a2 + (k4 * 20.0d) + 1.0d, 13.0d, 20.0d, imgFile6);
                                            sheet.addImage(image6);
                                        }
                                        a2 = (int) (a2 + (arr3.length * 20.0d) + 5.0d);
                                    }
                                }
                            }
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    wwBook.write();
                    if (wwBook != null) {
                        try {
                            wwBook.close();
                            if ((null == isSaveWrite || !isSaveWrite.equals("F")) && Integer.valueOf(all_class).intValue() == 1) {
                                HttpServletResponse response = ServletActionContext.getResponse();
                                response.reset();
                                ServletOutputStream outputStream = response.getOutputStream();
                                String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName2, "UTF-8") : new String(excelName2.getBytes("UTF-8"), "ISO8859-1");
                                String loadFileName2 = loadFileName.replace("+", " ");
                                response.setContentType("Content-type: applicationnd.ms-excel");
                                response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xls");
                                response.setHeader("Content-length", String.valueOf(excelFile.length()));
                                byte[] tempByte = new byte[1024];
                                FileInputStream in = new FileInputStream(excelFile);
                                while (true) {
                                    int n = in.read(tempByte);
                                    if (n == -1) {
                                        break;
                                    }
                                    try {
                                        outputStream.write(tempByte, 0, n);
                                    } catch (Exception e2) {
                                        this.log.error("保存未成功", e2);
                                    }
                                }
                                outputStream.flush();
                                outputStream.close();
                                in.close();
                            }
                        } catch (WriteException e3) {
                            e3.printStackTrace();
                        }
                    }
                } catch (Exception e4) {
                    if (wwBook != null) {
                        try {
                            wwBook.close();
                            if ((null == isSaveWrite || !isSaveWrite.equals("F")) && Integer.valueOf(all_class).intValue() == 1) {
                                HttpServletResponse response2 = ServletActionContext.getResponse();
                                response2.reset();
                                ServletOutputStream outputStream2 = response2.getOutputStream();
                                String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName2, "UTF-8") : new String(excelName2.getBytes("UTF-8"), "ISO8859-1");
                                String loadFileName4 = loadFileName3.replace("+", " ");
                                response2.setContentType("Content-type: applicationnd.ms-excel");
                                response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xls");
                                response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                                byte[] tempByte2 = new byte[1024];
                                FileInputStream in2 = new FileInputStream(excelFile);
                                while (true) {
                                    int n2 = in2.read(tempByte2);
                                    if (n2 == -1) {
                                        break;
                                    }
                                    try {
                                        outputStream2.write(tempByte2, 0, n2);
                                    } catch (Exception e5) {
                                        this.log.error("保存未成功", e5);
                                    }
                                }
                                outputStream2.flush();
                                outputStream2.close();
                                in2.close();
                            }
                        } catch (WriteException e6) {
                            e6.printStackTrace();
                        }
                    }
                }
            } catch (Throwable th) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if ((null == isSaveWrite || !isSaveWrite.equals("F")) && Integer.valueOf(all_class).intValue() == 1) {
                            HttpServletResponse response3 = ServletActionContext.getResponse();
                            response3.reset();
                            ServletOutputStream outputStream3 = response3.getOutputStream();
                            String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName2, "UTF-8") : new String(excelName2.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName6 = loadFileName5.replace("+", " ");
                            response3.setContentType("Content-type: applicationnd.ms-excel");
                            response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xls");
                            response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte3 = new byte[1024];
                            FileInputStream in3 = new FileInputStream(excelFile);
                            while (true) {
                                int n3 = in3.read(tempByte3);
                                if (n3 == -1) {
                                    break;
                                }
                                try {
                                    outputStream3.write(tempByte3, 0, n3);
                                } catch (Exception e7) {
                                    this.log.error("保存未成功", e7);
                                }
                            }
                            outputStream3.flush();
                            outputStream3.close();
                            in3.close();
                        }
                    } catch (WriteException e8) {
                        e8.printStackTrace();
                        throw th;
                    }
                }
                throw th;
            }
        } catch (Exception e9) {
            e9.printStackTrace();
        }
        return null;
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public void exportObjectAnaly(List quAnCountList, List header, HttpServletRequest request) {
        String xmlpath = CommonUtil.getRootPath(request);
        HSSFWorkbook wb = new HSSFWorkbook();
        HSSFSheet sheet = wb.createSheet("客观题错因分析");
        sheet.createFreezePane(2, 4, 2, 4);
        HSSFRow row = sheet.createRow(0);
        HSSFFont font = wb.createFont();
        font.setBold(true);
        font.setFontName("宋体");
        font.setFontHeightInPoints((short) 18);
        HSSFCellStyle style = wb.createCellStyle();
        style.setAlignment(HorizontalAlignment.CENTER);
        style.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
        style.setFont(font);
        HSSFCellStyle style1 = wb.createCellStyle();
        style1.setAlignment(HorizontalAlignment.CENTER);
        style1.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
        style1.setBorderBottom(BorderStyle.THIN);
        style1.setBorderLeft(BorderStyle.THIN);
        style1.setBorderRight(BorderStyle.THIN);
        style1.setBorderTop(BorderStyle.THIN);
        style1.setBottomBorderColor(Const.border_color);
        HSSFCellStyle style2 = wb.createCellStyle();
        style2.setBorderBottom(BorderStyle.THIN);
        style2.setBorderLeft(BorderStyle.THIN);
        style2.setBorderRight(BorderStyle.THIN);
        style2.setBorderTop(BorderStyle.THIN);
        style2.setFillForegroundColor(Const.FillForeground_color1);
        style2.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        style2.setAlignment(HorizontalAlignment.CENTER);
        style2.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
        HSSFCellStyle style3 = wb.createCellStyle();
        style3.setFillForegroundColor(Const.FillForeground_color2);
        style3.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        style3.setAlignment(HorizontalAlignment.CENTER);
        style3.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
        style3.setBorderBottom(BorderStyle.THIN);
        style3.setBorderLeft(BorderStyle.THIN);
        style3.setBorderRight(BorderStyle.THIN);
        style3.setBorderTop(BorderStyle.THIN);
        style3.setBottomBorderColor(Const.border_color);
        HSSFCell ce = row.createCell(0);
        ce.setCellValue("客观题错因分析");
        ce.setCellStyle(style);
        HSSFRow row4 = sheet.createRow(1);
        RptHeader h = (RptHeader) header.get(0);
        HSSFCell ce4 = row4.createCell(0);
        ce4.setCellValue("学科：" + h.getSubjectName());
        HSSFCell ce42 = row4.createCell(2);
        ce42.setCellValue("学校 ：" + h.getSchoolName());
        HSSFCell ce43 = row4.createCell(4);
        ce43.setCellValue("班级：" + h.getClassName());
        HSSFCell ce44 = row4.createCell(6);
        ce44.setCellValue("班主任：" + h.getT2());
        HSSFCell ce45 = row4.createCell(8);
        ce45.setCellValue("学科教师：" + h.getT1());
        HSSFRow row2 = sheet.createRow(2);
        HSSFRow row3 = sheet.createRow(3);
        HSSFRow row5 = null;
        HSSFRow row6 = null;
        int count = 0;
        int count1 = 0;
        int count2 = 0;
        int count3 = 0;
        int count4 = 0;
        int count5 = 0;
        String studata = "";
        String errorCount = "";
        for (int i = 0; i < quAnCountList.size(); i++) {
            ObjecterrorAnaly o = (ObjecterrorAnaly) quAnCountList.get(i);
            if (o.getOrder1().equals("1")) {
                if (i == 0) {
                    count++;
                    CellRangeAddressUtil.add(sheet, new CellRangeAddress(2, 2, 0, 1));
                    HSSFCell ce2 = row2.createCell(0);
                    ce2.setCellValue(o.getName1());
                    ce2.setCellStyle(style3);
                    row2.createCell(1).setCellStyle(style3);
                    HSSFCell ce22 = row2.createCell(2);
                    ce22.setCellValue(o.getValue1());
                    ce22.setCellStyle(style3);
                } else {
                    count++;
                    HSSFCell ce23 = row2.createCell(((short) i) + 2);
                    ce23.setCellValue(o.getValue1());
                    ce23.setCellStyle(style3);
                    if (!o.getOrder1().equals(((ObjecterrorAnaly) quAnCountList.get(i + 1)).getOrder1())) {
                        sheet.addMergedRegion(new CellRangeAddress(2, 3, i + 3, i + 3));
                        HSSFCell ce24 = row2.createCell(((short) i) + 3);
                        ce24.setCellValue("错答题数");
                        ce24.setCellStyle(style3);
                        row3.createCell(((short) i) + 3).setCellStyle(style3);
                    }
                }
            }
            if (o.getOrder1().equals("2")) {
                if (i == count) {
                    CellRangeAddressUtil.add(sheet, new CellRangeAddress(3, 3, 0, 1));
                    HSSFCell ce25 = row3.createCell(0);
                    ce25.setCellValue(o.getName1());
                    ce25.setCellStyle(style3);
                    row3.createCell(1).setCellStyle(style3);
                    HSSFCell ce26 = row3.createCell(2);
                    ce26.setCellValue(o.getValue1());
                    ce26.setCellStyle(style3);
                } else {
                    count1++;
                    HSSFCell ce27 = row3.createCell(((short) count1) + 2);
                    ce27.setCellValue(o.getValue1());
                    ce27.setCellStyle(style3);
                }
            }
            if (o.getOrder1().equals("3")) {
                if (!studata.equals(o.getOrder2())) {
                    count2++;
                    count3 = 0;
                    count5 = 0;
                    CellRangeAddressUtil.add(sheet, new CellRangeAddress(3 + count2, 3 + count2, 0, 1));
                    row5 = sheet.createRow(3 + count2);
                    HSSFCell ce28 = row5.createCell(0);
                    ce28.setCellValue(o.getName1());
                    ce28.setCellStyle(style1);
                    row5.createCell(1).setCellStyle(style1);
                    if (Double.valueOf(o.getQuestionScore()).doubleValue() < Double.valueOf(o.getFullScore()).doubleValue() && Double.valueOf(o.getQuestionScore()).doubleValue() > 0.0d) {
                        count5 = 0 + 1;
                        HSSFCell ce29 = row5.createCell(2);
                        ce29.setCellValue(o.getValue1());
                        ce29.setCellStyle(style2);
                    }
                    if (Double.valueOf(o.getQuestionScore()).doubleValue() == 0.0d) {
                        count5++;
                        HSSFCell ce210 = row5.createCell(2);
                        ce210.setCellValue(o.getValue1());
                        ce210.setCellStyle(style1);
                    } else {
                        HSSFCell ce211 = row5.createCell(2);
                        ce211.setCellValue("");
                        ce211.setCellStyle(style1);
                    }
                } else {
                    count3++;
                    if (Double.valueOf(o.getQuestionScore()).doubleValue() < Double.valueOf(o.getFullScore()).doubleValue() && Double.valueOf(o.getQuestionScore()).doubleValue() > 0.0d) {
                        count5++;
                        HSSFCell ce212 = row5.createCell(((short) count3) + 2);
                        ce212.setCellValue(o.getValue1());
                        ce212.setCellStyle(style2);
                    } else if (Double.valueOf(o.getQuestionScore()).doubleValue() == 0.0d) {
                        count5++;
                        HSSFCell ce213 = row5.createCell(((short) count3) + 2);
                        ce213.setCellValue(o.getValue1());
                        ce213.setCellStyle(style1);
                    } else {
                        HSSFCell ce214 = row5.createCell(((short) count3) + 2);
                        ce214.setCellValue("");
                        ce214.setCellStyle(style1);
                    }
                    if (!o.getOrder2().equals(((ObjecterrorAnaly) quAnCountList.get(i + 1)).getOrder1())) {
                        HSSFCell ce215 = row5.createCell(((short) count3) + 3);
                        ce215.setCellValue(count5);
                        ce215.setCellStyle(style1);
                    }
                }
                studata = o.getOrder2();
            }
            HSSFCell ce46 = row4.createCell(10);
            ce46.setCellValue("参考人数：" + count2);
            if (o.getOrder1().equals("6")) {
                if (!o.getOrder1().equals(((ObjecterrorAnaly) quAnCountList.get(i - 1)).getOrder1())) {
                    count3 = 0;
                    CellRangeAddressUtil.add(sheet, new CellRangeAddress(4 + count2, 4 + count2, 0, 1));
                    row5 = sheet.createRow(4 + count2);
                    HSSFCell ce216 = row5.createCell(0);
                    ce216.setCellValue(o.getName1());
                    ce216.setCellStyle(style3);
                    HSSFCell ce217 = row5.createCell(2);
                    ce217.setCellValue(o.getValue1());
                    ce217.setCellStyle(style3);
                } else {
                    count3++;
                    HSSFCell ce218 = row5.createCell(((short) count3) + 2);
                    ce218.setCellValue(o.getValue1());
                    ce218.setCellStyle(style3);
                }
            }
            if (o.getOrder1().equals("7")) {
                if (!errorCount.equals(o.getOrder2())) {
                    count4++;
                    count3 = 0;
                    row6 = sheet.createRow(4 + count2 + count4);
                    HSSFCell ce219 = row6.createCell(0);
                    ce219.setCellValue("错题人数");
                    ce219.setCellStyle(style3);
                    HSSFCell ce220 = row6.createCell(1);
                    ce220.setCellValue(o.getName1());
                    ce220.setCellStyle(style3);
                    HSSFCell ce221 = row6.createCell(2);
                    ce221.setCellValue(o.getValue1());
                    ce221.setCellStyle(style3);
                } else {
                    count3++;
                    HSSFCell ce222 = row6.createCell(((short) count3) + 2);
                    ce222.setCellValue(o.getValue1());
                    ce222.setCellStyle(style3);
                }
                errorCount = o.getOrder2();
            }
        }
        if (count4 > 1) {
            CellRangeAddressUtil.add(sheet, new CellRangeAddress(4 + count2 + 1, (((4 + count2) + 1) + count4) - 1, 0, 0));
        }
        HSSFRow row62 = sheet.createRow(4 + count2 + 1 + count4);
        row62.createCell(0).setCellValue("注：1.学生答而不全用底纹标注；2.小题列超链接“原题”；3.错答人数超链接“学生清单”；4.错答选项按照选项个数和ABCD顺序排列。");
        CellRangeAddressUtil.add(sheet, new CellRangeAddress(0, 0, 0, count + 2));
        File file = new File(xmlpath + "/upload");
        if (file != null) {
            file.mkdirs();
        }
        try {
            FileOutputStream fout = new FileOutputStream(xmlpath + "/upload/" + h.getSchoolName() + "" + h.getGradeName() + h.getClassName() + "" + h.getSubjectName() + "客观题错因分析.xls");
            wb.write(fout);
            fout.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String C14_export(String examNum, String gradeNum, String schoolNum, String studentType, String type, String source, String rptTitle, String dirPath, String rpt_name, String loginUserNum, String agent, Double minRange, Double maxRange, Double maxRank, String rangeName, String getDataType) {
        Double min;
        Double d;
        List list = new ArrayList();
        ArrayList arrayList = new ArrayList();
        ListOrderedMap classMap = ListOrderedMap.decorate(this.g.getClassList(examNum, gradeNum, studentType, schoolNum));
        ListOrderedMap newMap = new ListOrderedMap();
        if ("0".equals(getDataType)) {
            newMap.put("asub", minRange + " % ~ " + maxRange + " %");
        } else {
            newMap.put("asub", "前" + maxRank + "名");
        }
        newMap.put("全年级", "全年级");
        newMap.putAll(classMap);
        list.add(newMap);
        List subList = this.g.getSubjectList(examNum, gradeNum, studentType, schoolNum, type, source);
        for (int i = 0; i < subList.size(); i++) {
            Object[] sub = (Object[]) subList.get(i);
            if ("0".equals(getDataType)) {
                min = Double.valueOf(Math.floor((minRange.doubleValue() / 100.0d) * Integer.valueOf(sub[2].toString()).intValue()));
                d = Double.valueOf(Math.floor((maxRange.doubleValue() / 100.0d) * Integer.valueOf(sub[2].toString()).intValue()));
            } else {
                min = Double.valueOf(0.0d);
                d = maxRank;
            }
            Double max = d;
            ListOrderedMap dataMap = ListOrderedMap.decorate(this.g.getC14Data(examNum, gradeNum, studentType, schoolNum, type, source, String.valueOf(sub[0]), min, max));
            ListOrderedMap newDataMap = new ListOrderedMap();
            newDataMap.put("asub", String.valueOf(sub[1]));
            newDataMap.putAll(dataMap);
            arrayList.add(newDataMap);
        }
        list.add(arrayList);
        String folderPath = "ExportFolder/reportExcel" + loginUserNum;
        String str = "reportExcel" + loginUserNum;
        String str2 = "reportExcel" + loginUserNum;
        String excelName = rpt_name + "_" + gradeNum;
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        try {
            WritableWorkbook wwBook = Workbook.createWorkbook(excelFile);
            WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
            biaotis1.setAlignment(Alignment.LEFT);
            biaotis1.setVerticalAlignment(VerticalAlignment.CENTRE);
            WritableFont titles = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat title = new WritableCellFormat(titles);
            title.setAlignment(Alignment.LEFT);
            title.setVerticalAlignment(VerticalAlignment.CENTRE);
            title.setWrap(true);
            WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            WritableCellFormat cFormat1 = new WritableCellFormat(font1);
            cFormat1.setAlignment(Alignment.CENTRE);
            cFormat1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1.setBackground(Const.titleBackground_color);
            cFormat1.setWrap(true);
            WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            CellFormat writableCellFormat = new WritableCellFormat(font2);
            writableCellFormat.setAlignment(Alignment.CENTRE);
            writableCellFormat.setVerticalAlignment(VerticalAlignment.CENTRE);
            writableCellFormat.setBackground(Const.textOuBackGround_color);
            writableCellFormat.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            writableCellFormat.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            writableCellFormat.setBorder(Border.LEFT, BorderLineStyle.THIN);
            writableCellFormat.setBorder(Border.TOP, BorderLineStyle.THIN);
            writableCellFormat.setWrap(true);
            WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            CellFormat writableCellFormat2 = new WritableCellFormat(font3);
            writableCellFormat2.setAlignment(Alignment.CENTRE);
            writableCellFormat2.setVerticalAlignment(VerticalAlignment.CENTRE);
            writableCellFormat2.setBackground(Const.textJiBackGround_color);
            writableCellFormat2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            writableCellFormat2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            writableCellFormat2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            writableCellFormat2.setBorder(Border.TOP, BorderLineStyle.THIN);
            writableCellFormat2.setWrap(true);
            try {
                WritableSheet sheet = wwBook.createSheet(rpt_name, 0);
                sheet.getSettings().setShowGridLines(false);
                try {
                    Label biaotou = new Label(0, 0, rpt_name, biaotis1);
                    sheet.addCell(biaotou);
                    Label xinxi = new Label(0, 1, rptTitle, title);
                    sheet.addCell(xinxi);
                    sheet.setRowView(1, Const.height_500);
                    sheet.setColumnView(0, 20);
                    sheet.setColumnView(1, 15);
                    sheet.mergeCells(0, 0, newMap.size() - 1, 0);
                    sheet.mergeCells(0, 1, newMap.size() - 1, 1);
                    if (newMap.size() > 2) {
                        for (int k = 0; k < newMap.size(); k++) {
                            if (k == 0) {
                                Label classNum = new Label(k, 2, rangeName, cFormat1);
                                sheet.addCell(classNum);
                            } else {
                                Label classNum2 = new Label(k, 2, String.valueOf(newMap.getValue(k)), cFormat1);
                                sheet.addCell(classNum2);
                            }
                        }
                        for (int j = 0; j < arrayList.size(); j++) {
                            CellFormat cellFormat = j % 2 == 0 ? writableCellFormat2 : writableCellFormat;
                            ListOrderedMap map = (ListOrderedMap) arrayList.get(j);
                            for (int k2 = 0; k2 < newMap.size(); k2++) {
                                boolean flag = false;
                                String classKey = String.valueOf(newMap.get(k2));
                                for (int z = 0; z < map.size(); z++) {
                                    if (classKey.equals(map.get(z).toString())) {
                                        if (k2 == 0) {
                                            Label datatr = new Label(k2, j + 3, String.valueOf(map.getValue(z).toString()), cellFormat);
                                            sheet.addCell(datatr);
                                        } else {
                                            Number datatr2 = new Number(k2, j + 3, Integer.valueOf(map.getValue(z).toString()).intValue(), cellFormat);
                                            sheet.addCell(datatr2);
                                        }
                                        flag = true;
                                    }
                                }
                                if (!flag) {
                                    Number datatr3 = new Number(k2, j + 3, 0.0d, cellFormat);
                                    sheet.addCell(datatr3);
                                }
                            }
                        }
                    } else {
                        Label classNum3 = new Label(0, 2, "数据为空", cFormat1);
                        sheet.addCell(classNum3);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                wwBook.write();
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        HttpServletResponse response = ServletActionContext.getResponse();
                        response.reset();
                        ServletOutputStream outputStream = response.getOutputStream();
                        String excelName2 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                        response.setContentType("Content-type: applicationnd.ms-excel");
                        response.setHeader("Content-disposition", "attachment;filename=" + excelName2 + ".xls");
                        response.setHeader("Content-length", String.valueOf(excelFile.length()));
                        byte[] tempByte = new byte[1024];
                        FileInputStream in = new FileInputStream(excelFile);
                        while (true) {
                            int n = in.read(tempByte);
                            if (n == -1) {
                                break;
                            }
                            try {
                                outputStream.write(tempByte, 0, n);
                            } catch (Exception e2) {
                                this.log.error("保存未成功", e2);
                            }
                        }
                        outputStream.flush();
                        outputStream.close();
                        in.close();
                    } catch (WriteException e3) {
                        e3.printStackTrace();
                    }
                }
            } catch (Exception e4) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        HttpServletResponse response2 = ServletActionContext.getResponse();
                        response2.reset();
                        ServletOutputStream outputStream2 = response2.getOutputStream();
                        String excelName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                        response2.setContentType("Content-type: applicationnd.ms-excel");
                        response2.setHeader("Content-disposition", "attachment;filename=" + excelName3 + ".xls");
                        response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                        byte[] tempByte2 = new byte[1024];
                        FileInputStream in2 = new FileInputStream(excelFile);
                        while (true) {
                            int n2 = in2.read(tempByte2);
                            if (n2 == -1) {
                                break;
                            }
                            try {
                                outputStream2.write(tempByte2, 0, n2);
                            } catch (Exception e5) {
                                this.log.error("保存未成功", e5);
                            }
                        }
                        outputStream2.flush();
                        outputStream2.close();
                        in2.close();
                    } catch (WriteException e6) {
                        e6.printStackTrace();
                    }
                }
            } catch (Throwable th) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        HttpServletResponse response3 = ServletActionContext.getResponse();
                        response3.reset();
                        ServletOutputStream outputStream3 = response3.getOutputStream();
                        String excelName4 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                        response3.setContentType("Content-type: applicationnd.ms-excel");
                        response3.setHeader("Content-disposition", "attachment;filename=" + excelName4 + ".xls");
                        response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                        byte[] tempByte3 = new byte[1024];
                        FileInputStream in3 = new FileInputStream(excelFile);
                        while (true) {
                            int n3 = in3.read(tempByte3);
                            if (n3 == -1) {
                                break;
                            }
                            try {
                                outputStream3.write(tempByte3, 0, n3);
                            } catch (Exception e7) {
                                this.log.error("保存未成功", e7);
                            }
                        }
                        outputStream3.flush();
                        outputStream3.close();
                        in3.close();
                    } catch (WriteException e8) {
                        e8.printStackTrace();
                        throw th;
                    }
                }
                throw th;
            }
        } catch (Exception e9) {
            e9.printStackTrace();
        }
        return null;
    }

    public File getC14ChartImgFile(String loginUserNum, String imgName, String dirPath, List list) {
        c14LineImage(loginUserNum, imgName, list);
        File file = new File(dirPath + File.separator + "tmpLinePng" + File.separator + loginUserNum + imgName + ".png");
        return file;
    }

    public void c14LineImage(String userId, String imgName, List list) {
        new ListOrderedMap();
        new ArrayList();
        ListOrderedMap classMap = (ListOrderedMap) list.get(0);
        List list1 = (List) list.get(1);
        String[] rowKeys = new String[list1.size()];
        String[] columnKeys = new String[classMap.size() - 1];
        for (int i = 0; i < classMap.size(); i++) {
            if (i != 0) {
                columnKeys[i - 1] = String.valueOf(classMap.getValue(i));
            }
        }
        double[][] data = new double[list1.size()][classMap.size() - 1];
        List num_list = new ArrayList();
        for (int j = 0; j < list1.size(); j++) {
            ListOrderedMap map = (ListOrderedMap) list1.get(j);
            for (int k = 0; k < classMap.size(); k++) {
                if (k != 0) {
                    Double num = Double.valueOf(0.0d);
                    boolean flag = false;
                    String classKey = String.valueOf(classMap.get(k));
                    for (int z = 0; z < map.size(); z++) {
                        if (classKey.equals(map.get(z).toString())) {
                            num = Double.valueOf(map.getValue(z).toString());
                            data[j][k - 1] = num.doubleValue();
                            flag = true;
                        }
                    }
                    if (!flag) {
                        num = Double.valueOf(0.0d);
                        data[j][k - 1] = num.doubleValue();
                    }
                    num_list.add(num);
                } else {
                    rowKeys[j] = map.getValue(0).toString();
                }
            }
        }
        Double maxDesc = (Double) Collections.max(num_list);
        Double minDesc = (Double) Collections.min(num_list);
        Double count_unit = Double.valueOf((maxDesc.doubleValue() - minDesc.doubleValue()) / 5.0d);
        try {
            HttpServletResponse response = ServletActionContext.getResponse();
            response.reset();
            response.setContentType("image/jpeg");
            JFreeChart chart = this.lc.getLineChar(data, rowKeys, columnKeys, "班级", "人数", imgName + " 分布对比图", "#0", count_unit, 1, "Y", "##.##");
            getChartImageFolder(chart, "tmpLinePng", Const.width_1100, Const.height_500, userId + imgName);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String exportC19Data(String examNum, String gradeNum, String schoolNum, String studentType, String type, String source, String rptTitle, String dirPath, String rpt_name, String loginUserNum, String agent, String zhengshiSubNum, String dengjiSortRule) {
        String folderPath = "ExportFolder/reportExcel" + loginUserNum;
        String str = "reportExcel" + loginUserNum;
        String str2 = "reportExcel" + loginUserNum;
        String excelName = rpt_name + "_" + gradeNum;
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        try {
            WritableWorkbook wwBook = Workbook.createWorkbook(excelFile);
            WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
            biaotis1.setAlignment(Alignment.LEFT);
            biaotis1.setVerticalAlignment(VerticalAlignment.CENTRE);
            WritableFont titles = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat title = new WritableCellFormat(titles);
            title.setAlignment(Alignment.LEFT);
            title.setVerticalAlignment(VerticalAlignment.CENTRE);
            title.setWrap(true);
            WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            WritableCellFormat cFormat1 = new WritableCellFormat(font1);
            cFormat1.setAlignment(Alignment.CENTRE);
            cFormat1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1.setBackground(Const.titleBackground_color);
            cFormat1.setWrap(true);
            WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            CellFormat writableCellFormat = new WritableCellFormat(font2);
            writableCellFormat.setAlignment(Alignment.CENTRE);
            writableCellFormat.setVerticalAlignment(VerticalAlignment.CENTRE);
            writableCellFormat.setBackground(Const.textOuBackGround_color);
            writableCellFormat.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            writableCellFormat.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            writableCellFormat.setBorder(Border.LEFT, BorderLineStyle.THIN);
            writableCellFormat.setBorder(Border.TOP, BorderLineStyle.THIN);
            writableCellFormat.setWrap(true);
            WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            CellFormat writableCellFormat2 = new WritableCellFormat(font3);
            writableCellFormat2.setAlignment(Alignment.CENTRE);
            writableCellFormat2.setVerticalAlignment(VerticalAlignment.CENTRE);
            writableCellFormat2.setBackground(Const.textJiBackGround_color);
            writableCellFormat2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            writableCellFormat2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            writableCellFormat2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            writableCellFormat2.setBorder(Border.TOP, BorderLineStyle.THIN);
            writableCellFormat2.setWrap(true);
            try {
                WritableSheet sheet = wwBook.createSheet(rpt_name, 0);
                sheet.getSettings().setShowGridLines(false);
                try {
                    List<Object> list = this.c19.getC19Data(examNum, gradeNum, schoolNum, studentType, type, source, zhengshiSubNum, dengjiSortRule);
                    List<Subject> sjtList = (List) list.get(0);
                    List<Object> dataList = (List) list.get(1);
                    Label biaotou = new Label(0, 0, rpt_name, biaotis1);
                    sheet.addCell(biaotou);
                    Label xinxi = new Label(0, 1, rptTitle, title);
                    sheet.addCell(xinxi);
                    sheet.setRowView(1, Const.height_500);
                    sheet.setColumnView(2, 15);
                    sheet.setColumnView(3, 15);
                    sheet.mergeCells(0, 1, 6, 1);
                    Label num = new Label(0, 2, "编号", cFormat1);
                    sheet.addCell(num);
                    Label cla = new Label(1, 2, "班级", cFormat1);
                    sheet.addCell(cla);
                    Label stuNum = new Label(2, 2, "学号", cFormat1);
                    sheet.addCell(stuNum);
                    Label stuName = new Label(3, 2, "姓名", cFormat1);
                    sheet.addCell(stuName);
                    int rankStep = 0;
                    for (int i = 0; i < sjtList.size(); i++) {
                        Label subName = new Label(i + 4 + rankStep, 2, sjtList.get(i).getSubjectName(), cFormat1);
                        sheet.addCell(subName);
                        if ("0".equals(sjtList.get(i).getExt1())) {
                            Label subRank = new Label(i + 5 + rankStep, 2, sjtList.get(i).getSubjectName() + "排名", cFormat1);
                            sheet.addCell(subRank);
                            rankStep++;
                        }
                    }
                    int subLen = sjtList.size();
                    Label dengjiRank = new Label(subLen + 4 + rankStep, 2, "中考科目等级排名", cFormat1);
                    sheet.addCell(dengjiRank);
                    Label zfdengjiStr = new Label(subLen + 5 + rankStep, 2, "总分等级组合分布", cFormat1);
                    sheet.addCell(zfdengjiStr);
                    Label zkkmdengjiStr = new Label(subLen + 6 + rankStep, 2, "中考科目等级组合分布", cFormat1);
                    sheet.addCell(zkkmdengjiStr);
                    for (int j = 0; j < dataList.size(); j++) {
                        CellFormat cellFormat = j % 2 == 0 ? writableCellFormat2 : writableCellFormat;
                        List rowData = (List) dataList.get(j);
                        Object[] rowFirst = (Object[]) rowData.get(0);
                        Number numStr = new Number(0, j + 3, j + 1, cellFormat);
                        sheet.addCell(numStr);
                        Label claStr = new Label(1, j + 3, String.valueOf(rowFirst[0]), cellFormat);
                        sheet.addCell(claStr);
                        Label stuNumStr = new Label(2, j + 3, String.valueOf(rowFirst[2]), cellFormat);
                        sheet.addCell(stuNumStr);
                        Label stuNameStr = new Label(3, j + 3, String.valueOf(rowFirst[3]), cellFormat);
                        sheet.addCell(stuNameStr);
                        String zkkmdengjiHtml = "";
                        String zfdengjiHtml = "";
                        int subRankStep = 0;
                        for (int k = 0; k < rowData.size(); k++) {
                            sheet.setColumnView(k + 4 + subRankStep, 15);
                            Object[] rowSub = (Object[]) rowData.get(k);
                            String subStr = "".equals(String.valueOf(rowSub[6])) ? "" : rowSub[6] + "(" + String.valueOf(rowSub[7]) + ")";
                            Label subNameStr = new Label(k + 4 + subRankStep, j + 3, subStr, cellFormat);
                            sheet.addCell(subNameStr);
                            if ("0".equals(String.valueOf(rowSub[12]))) {
                                sheet.setColumnView(k + 5 + subRankStep, 15);
                                Number totRankStr = new Number(k + 5 + subRankStep, j + 3, Integer.valueOf(rowSub[8].toString()).intValue(), cellFormat);
                                sheet.addCell(totRankStr);
                                subRankStep++;
                            }
                            if ("-1".equals(String.valueOf(rowSub[4]))) {
                                zkkmdengjiHtml = String.valueOf(rowSub[10]);
                                zfdengjiHtml = String.valueOf(rowSub[11]);
                            }
                        }
                        int rowLen = rowData.size();
                        Number dengjiRankStr = new Number(rowLen + 4 + subRankStep, j + 3, Integer.valueOf(rowFirst[9].toString()).intValue(), cellFormat);
                        sheet.addCell(dengjiRankStr);
                        sheet.setColumnView(rowLen + 5 + subRankStep, 20);
                        Label zfdengji = new Label(rowLen + 5 + subRankStep, j + 3, zfdengjiHtml, cellFormat);
                        sheet.addCell(zfdengji);
                        sheet.setColumnView(rowLen + 6 + subRankStep, 25);
                        Label zkkmdengji = new Label(rowLen + 6 + subRankStep, j + 3, zkkmdengjiHtml, cellFormat);
                        sheet.addCell(zkkmdengji);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                wwBook.write();
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        HttpServletResponse response = ServletActionContext.getResponse();
                        response.reset();
                        ServletOutputStream outputStream = response.getOutputStream();
                        String excelName2 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                        response.setContentType("Content-type: applicationnd.ms-excel");
                        response.setHeader("Content-disposition", "attachment;filename=" + excelName2 + ".xls");
                        response.setHeader("Content-length", String.valueOf(excelFile.length()));
                        byte[] tempByte = new byte[1024];
                        FileInputStream in = new FileInputStream(excelFile);
                        while (true) {
                            int n = in.read(tempByte);
                            if (n == -1) {
                                break;
                            }
                            try {
                                outputStream.write(tempByte, 0, n);
                            } catch (Exception e2) {
                                this.log.error("保存未成功", e2);
                            }
                        }
                        outputStream.flush();
                        outputStream.close();
                        in.close();
                    } catch (WriteException e3) {
                        e3.printStackTrace();
                    }
                }
            } catch (Exception e4) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        HttpServletResponse response2 = ServletActionContext.getResponse();
                        response2.reset();
                        ServletOutputStream outputStream2 = response2.getOutputStream();
                        String excelName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                        response2.setContentType("Content-type: applicationnd.ms-excel");
                        response2.setHeader("Content-disposition", "attachment;filename=" + excelName3 + ".xls");
                        response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                        byte[] tempByte2 = new byte[1024];
                        FileInputStream in2 = new FileInputStream(excelFile);
                        while (true) {
                            int n2 = in2.read(tempByte2);
                            if (n2 == -1) {
                                break;
                            }
                            try {
                                outputStream2.write(tempByte2, 0, n2);
                            } catch (Exception e5) {
                                this.log.error("保存未成功", e5);
                            }
                        }
                        outputStream2.flush();
                        outputStream2.close();
                        in2.close();
                    } catch (WriteException e6) {
                        e6.printStackTrace();
                    }
                }
            } catch (Throwable th) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        HttpServletResponse response3 = ServletActionContext.getResponse();
                        response3.reset();
                        ServletOutputStream outputStream3 = response3.getOutputStream();
                        String excelName4 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                        response3.setContentType("Content-type: applicationnd.ms-excel");
                        response3.setHeader("Content-disposition", "attachment;filename=" + excelName4 + ".xls");
                        response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                        byte[] tempByte3 = new byte[1024];
                        FileInputStream in3 = new FileInputStream(excelFile);
                        while (true) {
                            int n3 = in3.read(tempByte3);
                            if (n3 == -1) {
                                break;
                            }
                            try {
                                outputStream3.write(tempByte3, 0, n3);
                            } catch (Exception e7) {
                                this.log.error("保存未成功", e7);
                            }
                        }
                        outputStream3.flush();
                        outputStream3.close();
                        in3.close();
                    } catch (WriteException e8) {
                        e8.printStackTrace();
                        throw th;
                    }
                }
                throw th;
            }
        } catch (Exception e9) {
            e9.printStackTrace();
        }
        return null;
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String c18_exportgetData(String jisuanzhonglei, String examNum, String gradeNum, String teachUnit, String studentType, String statisticType, String source, String subjectNum, String classNum, String studentId, String type, String sNum, String c_exam, String rpt_name, String isMoreSchool, String rptTitle, String string, String isSaveWrite, String dirPath, String uri, String loginUserNum, String string2, String string3, String string4, String string5, String dirPath2, String agent, String rangefrom, String rangeto, String step, String teachUnit_s, String subCompose, String fufen) {
        ServletOutputStream outputStream;
        byte[] tempByte;
        FileInputStream in;
        ServletOutputStream outputStream2;
        byte[] tempByte2;
        FileInputStream in2;
        ServletOutputStream outputStream3;
        byte[] tempByte3;
        FileInputStream in3;
        CellFormat cellFormat;
        CellFormat cellFormat2;
        CellFormat cellFormat3;
        CellFormat cellFormat4;
        String folderPath = "reportExcel" + loginUserNum;
        String str = "reportExcel" + loginUserNum;
        String str2 = "reportExcel" + loginUserNum;
        String excelName = rpt_name + "_" + gradeNum;
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        WritableWorkbook wb = null;
        try {
            try {
                wb = Workbook.createWorkbook(excelFile);
                DecimalFormat df01 = new DecimalFormat("0.0");
                DecimalFormat df02 = new DecimalFormat("0.00");
                DecimalFormat df03 = new DecimalFormat("0.000");
                df01.setRoundingMode(RoundingMode.HALF_UP);
                df02.setRoundingMode(RoundingMode.HALF_UP);
                df03.setRoundingMode(RoundingMode.HALF_UP);
                DateFormat df_0 = new DateFormat("0%");
                DateFormat df_1 = new DateFormat("0.0%");
                DateFormat df_2 = new DateFormat("0.00%");
                WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
                WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
                biaotis1.setAlignment(Alignment.LEFT);
                biaotis1.setVerticalAlignment(VerticalAlignment.CENTRE);
                WritableFont title = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
                WritableCellFormat titlee = new WritableCellFormat(title);
                titlee.setAlignment(Alignment.LEFT);
                titlee.setVerticalAlignment(VerticalAlignment.CENTRE);
                titlee.setWrap(true);
                WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
                WritableCellFormat cFormat1 = new WritableCellFormat(font1);
                cFormat1.setAlignment(Alignment.CENTRE);
                cFormat1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
                cFormat1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
                cFormat1.setBorder(Border.LEFT, BorderLineStyle.THIN);
                cFormat1.setBorder(Border.TOP, BorderLineStyle.THIN);
                cFormat1.setVerticalAlignment(VerticalAlignment.CENTRE);
                cFormat1.setBackground(Const.titleBackground_color);
                cFormat1.setWrap(true);
                WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
                CellFormat writableCellFormat = new WritableCellFormat(font2);
                writableCellFormat.setAlignment(Alignment.CENTRE);
                writableCellFormat.setVerticalAlignment(VerticalAlignment.CENTRE);
                writableCellFormat.setBackground(Const.textOuBackGround_color);
                writableCellFormat.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
                writableCellFormat.setBorder(Border.RIGHT, BorderLineStyle.THIN);
                writableCellFormat.setBorder(Border.LEFT, BorderLineStyle.THIN);
                writableCellFormat.setBorder(Border.TOP, BorderLineStyle.THIN);
                writableCellFormat.setWrap(true);
                CellFormat writableCellFormat2 = new WritableCellFormat(font2, df_0);
                writableCellFormat2.setAlignment(Alignment.CENTRE);
                writableCellFormat2.setVerticalAlignment(VerticalAlignment.CENTRE);
                writableCellFormat2.setBackground(Const.textOuBackGround_color);
                writableCellFormat2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
                writableCellFormat2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
                writableCellFormat2.setBorder(Border.LEFT, BorderLineStyle.THIN);
                writableCellFormat2.setBorder(Border.TOP, BorderLineStyle.THIN);
                writableCellFormat2.setWrap(true);
                CellFormat writableCellFormat3 = new WritableCellFormat(font2, df_1);
                writableCellFormat3.setAlignment(Alignment.CENTRE);
                writableCellFormat3.setVerticalAlignment(VerticalAlignment.CENTRE);
                writableCellFormat3.setBackground(Const.textOuBackGround_color);
                writableCellFormat3.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
                writableCellFormat3.setBorder(Border.RIGHT, BorderLineStyle.THIN);
                writableCellFormat3.setBorder(Border.LEFT, BorderLineStyle.THIN);
                writableCellFormat3.setBorder(Border.TOP, BorderLineStyle.THIN);
                writableCellFormat3.setWrap(true);
                CellFormat writableCellFormat4 = new WritableCellFormat(font2, df_2);
                writableCellFormat4.setAlignment(Alignment.CENTRE);
                writableCellFormat4.setVerticalAlignment(VerticalAlignment.CENTRE);
                writableCellFormat4.setBackground(Const.textOuBackGround_color);
                writableCellFormat4.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
                writableCellFormat4.setBorder(Border.RIGHT, BorderLineStyle.THIN);
                writableCellFormat4.setBorder(Border.LEFT, BorderLineStyle.THIN);
                writableCellFormat4.setBorder(Border.TOP, BorderLineStyle.THIN);
                writableCellFormat4.setWrap(true);
                WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
                CellFormat writableCellFormat5 = new WritableCellFormat(font3);
                writableCellFormat5.setAlignment(Alignment.CENTRE);
                writableCellFormat5.setVerticalAlignment(VerticalAlignment.CENTRE);
                writableCellFormat5.setBackground(Const.textJiBackGround_color);
                writableCellFormat5.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
                writableCellFormat5.setBorder(Border.RIGHT, BorderLineStyle.THIN);
                writableCellFormat5.setBorder(Border.LEFT, BorderLineStyle.THIN);
                writableCellFormat5.setBorder(Border.TOP, BorderLineStyle.THIN);
                writableCellFormat5.setWrap(true);
                CellFormat writableCellFormat6 = new WritableCellFormat(font3, df_0);
                writableCellFormat6.setAlignment(Alignment.CENTRE);
                writableCellFormat6.setVerticalAlignment(VerticalAlignment.CENTRE);
                writableCellFormat6.setBackground(Const.textJiBackGround_color);
                writableCellFormat6.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
                writableCellFormat6.setBorder(Border.RIGHT, BorderLineStyle.THIN);
                writableCellFormat6.setBorder(Border.LEFT, BorderLineStyle.THIN);
                writableCellFormat6.setBorder(Border.TOP, BorderLineStyle.THIN);
                writableCellFormat6.setWrap(true);
                CellFormat writableCellFormat7 = new WritableCellFormat(font3, df_1);
                writableCellFormat7.setAlignment(Alignment.CENTRE);
                writableCellFormat7.setVerticalAlignment(VerticalAlignment.CENTRE);
                writableCellFormat7.setBackground(Const.textJiBackGround_color);
                writableCellFormat7.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
                writableCellFormat7.setBorder(Border.RIGHT, BorderLineStyle.THIN);
                writableCellFormat7.setBorder(Border.LEFT, BorderLineStyle.THIN);
                writableCellFormat7.setBorder(Border.TOP, BorderLineStyle.THIN);
                writableCellFormat7.setWrap(true);
                CellFormat writableCellFormat8 = new WritableCellFormat(font3, df_2);
                writableCellFormat8.setAlignment(Alignment.CENTRE);
                writableCellFormat8.setVerticalAlignment(VerticalAlignment.CENTRE);
                writableCellFormat8.setBackground(Const.textJiBackGround_color);
                writableCellFormat8.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
                writableCellFormat8.setBorder(Border.RIGHT, BorderLineStyle.THIN);
                writableCellFormat8.setBorder(Border.LEFT, BorderLineStyle.THIN);
                writableCellFormat8.setBorder(Border.TOP, BorderLineStyle.THIN);
                writableCellFormat8.setWrap(true);
                List<DengJi> list = this.c18.getSubjectDengjiTable(jisuanzhonglei, examNum, gradeNum, teachUnit, studentType, statisticType, source, subjectNum, teachUnit_s, subCompose, fufen);
                WritableSheet sheet = wb.createSheet(rpt_name, 0);
                sheet.getSettings().setShowGridLines(false);
                Label biaotou = new Label(0, 0, rpt_name, biaotis1);
                sheet.addCell(biaotou);
                Label xinxi = new Label(0, 1, rptTitle);
                sheet.addCell(xinxi);
                String titles = "01".equals(teachUnit_s) ? "班级名称" : "类层名称";
                sheet.addCell(new Label(0, 2, "等级", cFormat1));
                sheet.mergeCells(0, 2, 1, 2);
                sheet.addCell(new Label(0, 3, titles, cFormat1));
                sheet.addCell(new Label(1, 3, "参考人数", cFormat1));
                sheet.setColumnView(0, 30);
                String[] dengjiArray = list.get(0).getDengji().split(Const.STRING_SEPERATOR);
                for (int m = 0; m < dengjiArray.length; m++) {
                    sheet.mergeCells((m * 2) + 2, 2, (m * 2) + 3, 2);
                    sheet.addCell(new Label((m * 2) + 2, 2, dengjiArray[m], cFormat1));
                    sheet.addCell(new Label((m * 2) + 2, 3, "人数", cFormat1));
                    sheet.addCell(new Label((m * 2) + 3, 3, "比例", cFormat1));
                }
                for (int j = 0; j < list.size(); j++) {
                    DengJi dengJi = list.get(j);
                    if (j % 2 == 0) {
                        cellFormat = writableCellFormat5;
                        cellFormat2 = writableCellFormat6;
                        cellFormat3 = writableCellFormat7;
                        cellFormat4 = writableCellFormat8;
                    } else {
                        cellFormat = writableCellFormat;
                        cellFormat2 = writableCellFormat2;
                        cellFormat3 = writableCellFormat3;
                        cellFormat4 = writableCellFormat4;
                    }
                    sheet.addCell(new Label(0, j + 4, dengJi.getClassName(), cellFormat));
                    sheet.addCell(new Number(1, j + 4, Integer.valueOf(dengJi.getTwo()).intValue(), cellFormat));
                    String[] renshuArray = dengJi.getRenshu().split(Const.STRING_SEPERATOR);
                    String[] biliArray = dengJi.getOne().split(Const.STRING_SEPERATOR);
                    for (int n = 0; n < renshuArray.length; n++) {
                        String bili = "-".equals(biliArray[n]) ? "" : biliArray[n] + "";
                        if (Integer.valueOf(renshuArray[n]).intValue() == 0) {
                            bili = "";
                            sheet.addCell(new Label((n * 2) + 2, j + 4, "", cellFormat));
                        } else {
                            sheet.addCell(new Number((n * 2) + 2, j + 4, Integer.valueOf(renshuArray[n]).intValue(), cellFormat));
                        }
                        if (bili.equals("")) {
                            sheet.addCell(new Label((n * 2) + 3, j + 4, bili, cellFormat));
                        } else {
                            String fullscore = Convert.toBigDecimal(df02.format(Double.valueOf(bili))).stripTrailingZeros().toPlainString();
                            if (fullscore.indexOf(".") == -1) {
                                sheet.addCell(new Number((n * 2) + 3, j + 4, Convert.toInt(fullscore).intValue() / 100, cellFormat2));
                            } else {
                                int i = fullscore.length() - (fullscore.indexOf(".") + 1);
                                if (i == 1) {
                                    sheet.addCell(new Number((n * 2) + 3, j + 4, Float.valueOf(fullscore).floatValue() / 100.0f, cellFormat3));
                                } else {
                                    sheet.addCell(new Number((n * 2) + 3, j + 4, Float.valueOf(fullscore).floatValue() / 100.0f, cellFormat4));
                                }
                            }
                        }
                    }
                }
                wb.write();
            } catch (Throwable th) {
                if (wb != null) {
                    try {
                        wb.close();
                        HttpServletResponse response = ServletActionContext.getResponse();
                        response.reset();
                        outputStream = response.getOutputStream();
                        String excelName2 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                        response.setContentType("Content-type: applicationnd.ms-excel");
                        response.setHeader("Content-disposition", "attachment;filename=" + excelName2 + ".xls");
                        response.setHeader("Content-length", String.valueOf(excelFile.length()));
                        tempByte = new byte[1024];
                        in = new FileInputStream(excelFile);
                    } catch (Exception e) {
                        e.printStackTrace();
                        throw th;
                    }
                    while (true) {
                        int n2 = in.read(tempByte);
                        if (n2 == -1) {
                            break;
                        }
                        try {
                            outputStream.write(tempByte, 0, n2);
                        } catch (Exception e2) {
                            this.log.error("保存未成功", e2);
                        }
                        e.printStackTrace();
                        throw th;
                    }
                    outputStream.flush();
                    outputStream.close();
                    in.close();
                }
                throw th;
            }
        } catch (Exception e3) {
            e3.printStackTrace();
            if (wb != null) {
                try {
                    wb.close();
                    HttpServletResponse response2 = ServletActionContext.getResponse();
                    response2.reset();
                    outputStream2 = response2.getOutputStream();
                    String excelName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                    response2.setContentType("Content-type: applicationnd.ms-excel");
                    response2.setHeader("Content-disposition", "attachment;filename=" + excelName3 + ".xls");
                    response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                    tempByte2 = new byte[1024];
                    in2 = new FileInputStream(excelFile);
                } catch (Exception e4) {
                    e4.printStackTrace();
                }
                while (true) {
                    int n3 = in2.read(tempByte2);
                    if (n3 == -1) {
                        break;
                    }
                    try {
                        outputStream2.write(tempByte2, 0, n3);
                    } catch (Exception e5) {
                        this.log.error("保存未成功", e5);
                    }
                    e4.printStackTrace();
                }
                outputStream2.flush();
                outputStream2.close();
                in2.close();
            }
        }
        if (wb != null) {
            try {
                wb.close();
                HttpServletResponse response3 = ServletActionContext.getResponse();
                response3.reset();
                outputStream3 = response3.getOutputStream();
                String excelName4 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                response3.setContentType("Content-type: applicationnd.ms-excel");
                response3.setHeader("Content-disposition", "attachment;filename=" + excelName4 + ".xls");
                response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                tempByte3 = new byte[1024];
                in3 = new FileInputStream(excelFile);
            } catch (Exception e6) {
                e6.printStackTrace();
            }
            while (true) {
                int n4 = in3.read(tempByte3);
                if (n4 == -1) {
                    break;
                }
                try {
                    outputStream3.write(tempByte3, 0, n4);
                } catch (Exception e7) {
                    this.log.error("保存未成功", e7);
                }
                e6.printStackTrace();
                return null;
            }
            outputStream3.flush();
            outputStream3.close();
            in3.close();
        }
        return null;
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String c17_exportgetData(String jisuanzhonglei, String examNum, String gradeNum, String schoolNum, String studentType, String statisticType, String source, String subjectNum, String classNum, String studentId, String type, String step, String sNum, String c_exam, String rpt_name, String isMoreSchool, String rptTitle, String string, String isSaveWrite, String dirPath, String uri, String loginUserNum, String string2, String string3, String string4, String string5, String dirPath2, String agent, String rangefrom, String rangeto, String step2, String dengjiType) {
        ServletOutputStream outputStream;
        byte[] tempByte;
        FileInputStream in;
        ServletOutputStream outputStream2;
        byte[] tempByte2;
        FileInputStream in2;
        ServletOutputStream outputStream3;
        byte[] tempByte3;
        FileInputStream in3;
        String djName = "1".equals(dengjiType) ? "区基准" : "校基准";
        String folderPath = "reportExcel" + loginUserNum;
        String str = "reportExcel" + loginUserNum;
        String str2 = "reportExcel" + loginUserNum;
        String excelName = rpt_name + "_" + gradeNum + "_" + djName;
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        WritableWorkbook wb = null;
        try {
            try {
                wb = Workbook.createWorkbook(excelFile);
                WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
                WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
                biaotis1.setAlignment(Alignment.LEFT);
                biaotis1.setVerticalAlignment(VerticalAlignment.CENTRE);
                WritableFont title = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
                WritableCellFormat titlee = new WritableCellFormat(title);
                titlee.setAlignment(Alignment.LEFT);
                titlee.setVerticalAlignment(VerticalAlignment.CENTRE);
                titlee.setWrap(true);
                WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
                WritableCellFormat cFormat1 = new WritableCellFormat(font1);
                cFormat1.setAlignment(Alignment.CENTRE);
                cFormat1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
                cFormat1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
                cFormat1.setBorder(Border.LEFT, BorderLineStyle.THIN);
                cFormat1.setBorder(Border.TOP, BorderLineStyle.THIN);
                cFormat1.setVerticalAlignment(VerticalAlignment.CENTRE);
                cFormat1.setBackground(Const.titleBackground_color);
                cFormat1.setWrap(true);
                WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
                CellFormat writableCellFormat = new WritableCellFormat(font2);
                writableCellFormat.setAlignment(Alignment.CENTRE);
                writableCellFormat.setVerticalAlignment(VerticalAlignment.CENTRE);
                writableCellFormat.setBackground(Const.textOuBackGround_color);
                writableCellFormat.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
                writableCellFormat.setBorder(Border.RIGHT, BorderLineStyle.THIN);
                writableCellFormat.setBorder(Border.LEFT, BorderLineStyle.THIN);
                writableCellFormat.setBorder(Border.TOP, BorderLineStyle.THIN);
                writableCellFormat.setWrap(true);
                WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
                CellFormat writableCellFormat2 = new WritableCellFormat(font3);
                writableCellFormat2.setAlignment(Alignment.CENTRE);
                writableCellFormat2.setVerticalAlignment(VerticalAlignment.CENTRE);
                writableCellFormat2.setBackground(Const.textJiBackGround_color);
                writableCellFormat2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
                writableCellFormat2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
                writableCellFormat2.setBorder(Border.LEFT, BorderLineStyle.THIN);
                writableCellFormat2.setBorder(Border.TOP, BorderLineStyle.THIN);
                writableCellFormat2.setWrap(true);
                List<DengJi> list = this.c17.getSubjectDengjiTable(jisuanzhonglei, examNum, gradeNum, schoolNum, studentType, statisticType, source, dengjiType);
                WritableSheet sheet = wb.createSheet(rpt_name, 0);
                sheet.getSettings().setShowGridLines(false);
                sheet.mergeCells(0, 0, 13, 0);
                Label biaotou = new Label(0, 0, rpt_name, biaotis1);
                sheet.addCell(biaotou);
                Label xinxi = new Label(0, 1, rptTitle);
                sheet.addCell(xinxi);
                sheet.setColumnView(1, 15);
                String[] titles = {"科目", "等级", "A+", "A", "B+", "B", "C+", "C", "D", "E"};
                for (int i = 0; i < titles.length; i++) {
                    sheet.addCell(new Label(i, 2, titles[i], cFormat1));
                }
                for (int j = 0; j < list.size(); j++) {
                    DengJi dengJi = list.get(j);
                    String[] dengjiArray = dengJi.getDengji().split(Const.STRING_SEPERATOR);
                    String[] renshuArray = dengJi.getRenshu().split(Const.STRING_SEPERATOR);
                    String[] mintotalScore = dengJi.getMintotalScore().split(Const.STRING_SEPERATOR);
                    CellFormat cellFormat = j % 2 == 0 ? writableCellFormat2 : writableCellFormat;
                    sheet.mergeCells(0, (j * 3) + 3, 0, (j * 3) + 5);
                    sheet.addCell(new Label(0, (j * 3) + 3, dengJi.getSubjectName(), cellFormat));
                    sheet.addCell(new Label(1, (j * 3) + 3, "等级", cellFormat));
                    sheet.addCell(new Label(1, (j * 3) + 4, "（百分比）", cellFormat));
                    sheet.addCell(new Label(1, (j * 3) + 5, "分数线", cellFormat));
                    for (int k = 0; k < dengjiArray.length; k++) {
                        sheet.addCell(new Label(k + 2, (j * 3) + 3, dengjiArray[k], cellFormat));
                        sheet.addCell(new Label(k + 2, (j * 3) + 4, renshuArray[k], cellFormat));
                        sheet.addCell(new Number(k + 2, (j * 3) + 5, Double.valueOf(mintotalScore[k]).doubleValue(), cellFormat));
                    }
                }
                wb.write();
            } catch (Exception e) {
                e.printStackTrace();
                if (wb != null) {
                    try {
                        wb.close();
                        HttpServletResponse response = ServletActionContext.getResponse();
                        response.reset();
                        outputStream = response.getOutputStream();
                        String excelName2 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                        response.setContentType("Content-type: applicationnd.ms-excel");
                        response.setHeader("Content-disposition", "attachment;filename=" + excelName2 + ".xls");
                        response.setHeader("Content-length", String.valueOf(excelFile.length()));
                        tempByte = new byte[1024];
                        in = new FileInputStream(excelFile);
                    } catch (Exception e2) {
                        e2.printStackTrace();
                    }
                    while (true) {
                        int n = in.read(tempByte);
                        if (n == -1) {
                            break;
                        }
                        try {
                            outputStream.write(tempByte, 0, n);
                        } catch (Exception e3) {
                            this.log.error("保存未成功", e3);
                        }
                        e2.printStackTrace();
                    }
                    outputStream.flush();
                    outputStream.close();
                    in.close();
                }
            }
            if (wb != null) {
                try {
                    wb.close();
                    HttpServletResponse response2 = ServletActionContext.getResponse();
                    response2.reset();
                    outputStream3 = response2.getOutputStream();
                    String excelName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                    response2.setContentType("Content-type: applicationnd.ms-excel");
                    response2.setHeader("Content-disposition", "attachment;filename=" + excelName3 + ".xls");
                    response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                    tempByte3 = new byte[1024];
                    in3 = new FileInputStream(excelFile);
                } catch (Exception e4) {
                    e4.printStackTrace();
                }
                while (true) {
                    int n2 = in3.read(tempByte3);
                    if (n2 == -1) {
                        break;
                    }
                    try {
                        outputStream3.write(tempByte3, 0, n2);
                    } catch (Exception e5) {
                        this.log.error("保存未成功", e5);
                    }
                    e4.printStackTrace();
                    return null;
                }
                outputStream3.flush();
                outputStream3.close();
                in3.close();
            }
            return null;
        } catch (Throwable th) {
            if (wb != null) {
                try {
                    wb.close();
                    HttpServletResponse response3 = ServletActionContext.getResponse();
                    response3.reset();
                    outputStream2 = response3.getOutputStream();
                    String excelName4 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                    response3.setContentType("Content-type: applicationnd.ms-excel");
                    response3.setHeader("Content-disposition", "attachment;filename=" + excelName4 + ".xls");
                    response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                    tempByte2 = new byte[1024];
                    in2 = new FileInputStream(excelFile);
                } catch (Exception e6) {
                    e6.printStackTrace();
                    throw th;
                }
                while (true) {
                    int n3 = in2.read(tempByte2);
                    if (n3 == -1) {
                        break;
                    }
                    try {
                        outputStream2.write(tempByte2, 0, n3);
                    } catch (Exception e7) {
                        this.log.error("保存未成功", e7);
                    }
                    e6.printStackTrace();
                    throw th;
                }
                outputStream2.flush();
                outputStream2.close();
                in2.close();
            }
            throw th;
        }
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String exportC21Data(String examNum, String gradeNum, String schoolNum, String studentType, String type, String source, String rptTitle, String dirPath, String rpt_name, String loginUserNum, String agent) {
        String folderPath = "ExportFolder/reportExcel" + loginUserNum;
        String str = "reportExcel" + loginUserNum;
        String str2 = "reportExcel" + loginUserNum;
        String excelName = rpt_name + "_" + gradeNum;
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        try {
            WritableWorkbook wwBook = Workbook.createWorkbook(excelFile);
            WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
            biaotis1.setAlignment(Alignment.LEFT);
            biaotis1.setVerticalAlignment(VerticalAlignment.CENTRE);
            WritableFont titles = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat title = new WritableCellFormat(titles);
            title.setAlignment(Alignment.LEFT);
            title.setVerticalAlignment(VerticalAlignment.CENTRE);
            title.setWrap(true);
            WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            WritableCellFormat cFormat1 = new WritableCellFormat(font1);
            cFormat1.setAlignment(Alignment.CENTRE);
            cFormat1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1.setBackground(Const.titleBackground_color);
            cFormat1.setWrap(true);
            WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            CellFormat writableCellFormat = new WritableCellFormat(font2);
            writableCellFormat.setAlignment(Alignment.CENTRE);
            writableCellFormat.setVerticalAlignment(VerticalAlignment.CENTRE);
            writableCellFormat.setBackground(Const.textOuBackGround_color);
            writableCellFormat.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            writableCellFormat.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            writableCellFormat.setBorder(Border.LEFT, BorderLineStyle.THIN);
            writableCellFormat.setBorder(Border.TOP, BorderLineStyle.THIN);
            writableCellFormat.setWrap(true);
            WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            CellFormat writableCellFormat2 = new WritableCellFormat(font3);
            writableCellFormat2.setAlignment(Alignment.CENTRE);
            writableCellFormat2.setVerticalAlignment(VerticalAlignment.CENTRE);
            writableCellFormat2.setBackground(Const.textJiBackGround_color);
            writableCellFormat2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            writableCellFormat2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            writableCellFormat2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            writableCellFormat2.setBorder(Border.TOP, BorderLineStyle.THIN);
            writableCellFormat2.setWrap(true);
            try {
                WritableSheet sheet = wwBook.createSheet(rpt_name, 0);
                sheet.getSettings().setShowGridLines(false);
                try {
                    List<Object> list = this.c19.getC21Data(examNum, gradeNum, schoolNum, studentType, type, source);
                    Label biaotou = new Label(0, 0, rpt_name, biaotis1);
                    sheet.addCell(biaotou);
                    Label xinxi = new Label(0, 1, rptTitle, title);
                    sheet.addCell(xinxi);
                    sheet.setRowView(1, Const.height_500);
                    sheet.mergeCells(0, 1, 6, 1);
                    if (null == list || null == ((List) list.get(0)).get(0)) {
                        Label desc = new Label(0, 2, "数据为空", writableCellFormat);
                        sheet.addCell(desc);
                    } else {
                        List dataList1 = (List) list.get(0);
                        sheet.setColumnView(1, 20);
                        sheet.mergeCells(0, 3, 0, 17);
                        Label num = new Label(0, 2, "科目", cFormat1);
                        sheet.addCell(num);
                        Label cla = new Label(1, 2, "班级", cFormat1);
                        sheet.addCell(cla);
                        String[] clas = (String[]) dataList1.get(2);
                        for (int i = 0; i < clas.length; i++) {
                            Label claName = new Label(i + 2, 2, clas[i], cFormat1);
                            sheet.addCell(claName);
                        }
                        String[] item = {"班级类型", "班级人数", "优秀人数", "优秀序", "良好人数", "良好序", "合格人数", "合格序", "原始均分", "考试均分", "均分差额", "差额序", "班级得分", "排序", "班主任"};
                        int itemLen = item.length;
                        for (int j = 0; j < itemLen; j++) {
                            CellFormat cellFormat = j % 2 == 0 ? writableCellFormat2 : writableCellFormat;
                            String[] data = (String[]) dataList1.get(j + 3);
                            Label subName = new Label(0, j + 3, String.valueOf(dataList1.get(0)), writableCellFormat2);
                            sheet.addCell(subName);
                            Label desc2 = new Label(1, j + 3, item[j], cellFormat);
                            sheet.addCell(desc2);
                            for (int k = 0; k < data.length; k++) {
                                String totalData = String.valueOf(data[k]);
                                if (j == 0 || j == itemLen - 1 || null == totalData || "null".equals(totalData) || " ".equals(totalData)) {
                                    Label stuNameStr = new Label(k + 2, j + 3, totalData, cellFormat);
                                    sheet.addCell(stuNameStr);
                                } else {
                                    Number stuNameStr2 = new Number(k + 2, j + 3, Double.valueOf(totalData).doubleValue(), cellFormat);
                                    sheet.addCell(stuNameStr2);
                                }
                            }
                        }
                        String[] item2 = {"优秀人数", "优秀序", "良好人数", "良好序", "合格人数", "合格序", "原始均分", "考试均分", "均分差额", "差额序", "绝对有效数", "绝对有效序", "学科得分", "学科排序", "考核分", "科任教师"};
                        String[] item3 = {"优秀人数", "优秀序", "良好人数", "良好序", "合格人数", "合格序", "绝对有效数", "绝对有效序"};
                        int item2Len = item2.length;
                        int item3Len = item3.length;
                        for (int j2 = 1; j2 < list.size(); j2++) {
                            List dataList2 = (List) list.get(j2);
                            if ("文综".equals(String.valueOf(dataList2.get(0))) || "理综".equals(String.valueOf(dataList2.get(0)))) {
                                sheet.mergeCells(0, ((j2 - 1) * item2Len) + 18, 0, ((j2 - 1) * item2Len) + 25);
                                int k2 = 0;
                                while (k2 < item3Len) {
                                    CellFormat cellFormat2 = k2 % 2 == 0 ? writableCellFormat2 : writableCellFormat;
                                    Label subName2 = new Label(0, k2 + 18 + ((j2 - 1) * item2Len), String.valueOf(dataList2.get(0)), cellFormat2);
                                    sheet.addCell(subName2);
                                    Label desc3 = new Label(1, k2 + 18 + ((j2 - 1) * item2Len), item3[k2], cellFormat2);
                                    sheet.addCell(desc3);
                                    String[] data2 = k2 > 5 ? (String[]) dataList2.get(k2 + 7) : (String[]) dataList2.get(k2 + 3);
                                    for (int z2 = 0; z2 < data2.length; z2++) {
                                        String subData = String.valueOf(data2[z2]);
                                        if (null == subData || "null".equals(subData) || " ".equals(subData)) {
                                            Label stuNameStr3 = new Label(z2 + 2, k2 + 18 + ((j2 - 1) * item2Len), subData, cellFormat2);
                                            sheet.addCell(stuNameStr3);
                                        } else {
                                            Number stuNameStr4 = new Number(z2 + 2, k2 + 18 + ((j2 - 1) * item2Len), Double.valueOf(subData).doubleValue(), cellFormat2);
                                            sheet.addCell(stuNameStr4);
                                        }
                                    }
                                    k2++;
                                }
                            } else {
                                sheet.mergeCells(0, ((j2 - 1) * item2Len) + 18, 0, ((j2 - 1) * item2Len) + 33);
                                for (int k22 = 0; k22 < item2Len; k22++) {
                                    CellFormat cellFormat3 = k22 % 2 == 0 ? writableCellFormat2 : writableCellFormat;
                                    String[] data22 = (String[]) dataList2.get(k22 + 3);
                                    Label subName3 = new Label(0, k22 + 18 + ((j2 - 1) * item2Len), String.valueOf(dataList2.get(0)), cellFormat3);
                                    sheet.addCell(subName3);
                                    Label desc4 = new Label(1, k22 + 18 + ((j2 - 1) * item2Len), item2[k22], cellFormat3);
                                    sheet.addCell(desc4);
                                    for (int z22 = 0; z22 < data22.length; z22++) {
                                        String subData2 = String.valueOf(data22[z22]);
                                        if (k22 == item2Len - 1 || null == subData2 || "null".equals(subData2) || " ".equals(subData2)) {
                                            Label stuNameStr5 = new Label(z22 + 2, k22 + 18 + ((j2 - 1) * item2Len), subData2, cellFormat3);
                                            sheet.addCell(stuNameStr5);
                                        } else {
                                            Number stuNameStr6 = new Number(z22 + 2, k22 + 18 + ((j2 - 1) * item2Len), Double.valueOf(subData2).doubleValue(), cellFormat3);
                                            sheet.addCell(stuNameStr6);
                                        }
                                    }
                                }
                            }
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                wwBook.write();
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        HttpServletResponse response = ServletActionContext.getResponse();
                        response.reset();
                        ServletOutputStream outputStream = response.getOutputStream();
                        String excelName2 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                        response.setContentType("Content-type: applicationnd.ms-excel");
                        response.setHeader("Content-disposition", "attachment;filename=" + excelName2 + ".xls");
                        response.setHeader("Content-length", String.valueOf(excelFile.length()));
                        byte[] tempByte = new byte[1024];
                        FileInputStream in = new FileInputStream(excelFile);
                        while (true) {
                            int n = in.read(tempByte);
                            if (n == -1) {
                                break;
                            }
                            try {
                                outputStream.write(tempByte, 0, n);
                            } catch (Exception e2) {
                                this.log.error("保存未成功", e2);
                            }
                        }
                        outputStream.flush();
                        outputStream.close();
                        in.close();
                    } catch (WriteException e3) {
                        e3.printStackTrace();
                    }
                }
            } catch (Exception e4) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        HttpServletResponse response2 = ServletActionContext.getResponse();
                        response2.reset();
                        ServletOutputStream outputStream2 = response2.getOutputStream();
                        String excelName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                        response2.setContentType("Content-type: applicationnd.ms-excel");
                        response2.setHeader("Content-disposition", "attachment;filename=" + excelName3 + ".xls");
                        response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                        byte[] tempByte2 = new byte[1024];
                        FileInputStream in2 = new FileInputStream(excelFile);
                        while (true) {
                            int n2 = in2.read(tempByte2);
                            if (n2 == -1) {
                                break;
                            }
                            try {
                                outputStream2.write(tempByte2, 0, n2);
                            } catch (Exception e5) {
                                this.log.error("保存未成功", e5);
                            }
                        }
                        outputStream2.flush();
                        outputStream2.close();
                        in2.close();
                    } catch (WriteException e6) {
                        e6.printStackTrace();
                    }
                }
            } catch (Throwable th) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        HttpServletResponse response3 = ServletActionContext.getResponse();
                        response3.reset();
                        ServletOutputStream outputStream3 = response3.getOutputStream();
                        String excelName4 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                        response3.setContentType("Content-type: applicationnd.ms-excel");
                        response3.setHeader("Content-disposition", "attachment;filename=" + excelName4 + ".xls");
                        response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                        byte[] tempByte3 = new byte[1024];
                        FileInputStream in3 = new FileInputStream(excelFile);
                        while (true) {
                            int n3 = in3.read(tempByte3);
                            if (n3 == -1) {
                                break;
                            }
                            try {
                                outputStream3.write(tempByte3, 0, n3);
                            } catch (Exception e7) {
                                this.log.error("保存未成功", e7);
                            }
                        }
                        outputStream3.flush();
                        outputStream3.close();
                        in3.close();
                    } catch (WriteException e8) {
                        e8.printStackTrace();
                        throw th;
                    }
                }
                throw th;
            }
        } catch (Exception e9) {
            e9.printStackTrace();
        }
        return null;
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String c22AllSubCount(String teachUnit_s, String examNum, String gradeNum, String teachUnit, String subjectNum, String classNum, String studentId, String studentType, String type, String source, String rpt_name, String isMoreSchool, String rptTitle, String isSaveWrite, String dirPath, String userNum, String gradeName, String className, String imgRoot, String agent, String fufen, String jizhun, String subCompose, String islevel, String subjectPermission) {
        String rptTitle2 = this.sp.getHeaderStr(examNum, subjectNum, gradeNum, teachUnit, classNum, studentId, studentType, true, true, false, false, false, true, false, true, false, false, false, false, false, true, false, subCompose, fufen);
        String rpt_name2 = rpt_name + "--基本统计";
        String folderPath = "ExportFolder/reportExcel" + userNum;
        String str = "reportExcel" + userNum;
        String str2 = "reportExcel" + userNum;
        String excelName = (null == gradeName || "".equals(gradeName)) ? rpt_name2 + "_" + gradeNum : rpt_name2 + "_" + gradeName;
        if (null != classNum && !"".equals(classNum) && !classNum.contains(Const.STRING_SEPERATOR)) {
            excelName = (null == className || "".equals(className)) ? excelName + "_" + classNum : excelName + "_" + className;
        }
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        try {
            WritableWorkbook wwBook = Workbook.createWorkbook(excelFile);
            WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
            biaotis1.setAlignment(Alignment.LEFT);
            biaotis1.setVerticalAlignment(VerticalAlignment.CENTRE);
            WritableFont titles = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat title = new WritableCellFormat(titles);
            title.setAlignment(Alignment.LEFT);
            title.setVerticalAlignment(VerticalAlignment.CENTRE);
            title.setWrap(true);
            WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            WritableCellFormat cFormat1 = new WritableCellFormat(font1);
            cFormat1.setAlignment(Alignment.CENTRE);
            cFormat1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1.setBackground(Const.titleBackground_color);
            cFormat1.setWrap(true);
            WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat2 = new WritableCellFormat(font2);
            cFormat2.setAlignment(Alignment.CENTRE);
            cFormat2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2.setBackground(Const.textOuBackGround_color);
            cFormat2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2.setWrap(true);
            DateFormat df1 = new DateFormat("0.00%");
            WritableCellFormat cFormat2_0 = new WritableCellFormat(font2, df1);
            cFormat2_0.setAlignment(Alignment.CENTRE);
            cFormat2_0.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_0.setBackground(Const.textOuBackGround_color);
            cFormat2_0.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_0.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_0.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_0.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_0.setWrap(true);
            NumberFormat nf2 = new NumberFormat("0.00");
            WritableCellFormat cFormat2_2 = new WritableCellFormat(font2, nf2);
            cFormat2_2.setAlignment(Alignment.CENTRE);
            cFormat2_2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_2.setBackground(Const.textOuBackGround_color);
            cFormat2_2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_2.setWrap(true);
            WritableFont font2_bold = new WritableFont(WritableFont.ARIAL, 10, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat2_bold = new WritableCellFormat(font2_bold);
            cFormat2_bold.setAlignment(Alignment.CENTRE);
            cFormat2_bold.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_bold.setBackground(Const.textOuBackGround_color);
            cFormat2_bold.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_bold.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_bold.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_bold.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_bold.setWrap(true);
            WritableCellFormat cFormat2_bold_0 = new WritableCellFormat(font2_bold, df1);
            cFormat2_bold_0.setAlignment(Alignment.CENTRE);
            cFormat2_bold_0.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_bold_0.setBackground(Const.textOuBackGround_color);
            cFormat2_bold_0.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_bold_0.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_bold_0.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_bold_0.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_bold_0.setWrap(true);
            WritableCellFormat cFormat2_bold_2 = new WritableCellFormat(font2_bold, nf2);
            cFormat2_bold_2.setAlignment(Alignment.CENTRE);
            cFormat2_bold_2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_bold_2.setBackground(Const.textOuBackGround_color);
            cFormat2_bold_2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_bold_2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_bold_2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_bold_2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_bold_2.setWrap(true);
            WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat3 = new WritableCellFormat(font3);
            cFormat3.setAlignment(Alignment.CENTRE);
            cFormat3.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3.setBackground(Const.textJiBackGround_color);
            cFormat3.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3.setWrap(true);
            WritableCellFormat cFormat3_0 = new WritableCellFormat(font3, df1);
            cFormat3_0.setAlignment(Alignment.CENTRE);
            cFormat3_0.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_0.setBackground(Const.textJiBackGround_color);
            cFormat3_0.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_0.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_0.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_0.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_0.setWrap(true);
            WritableCellFormat cFormat3_2 = new WritableCellFormat(font3, nf2);
            cFormat3_2.setAlignment(Alignment.CENTRE);
            cFormat3_2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_2.setBackground(Const.textJiBackGround_color);
            cFormat3_2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_2.setWrap(true);
            WritableFont font3_bold = new WritableFont(WritableFont.ARIAL, 10, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat3_bold = new WritableCellFormat(font3_bold);
            cFormat3_bold.setAlignment(Alignment.CENTRE);
            cFormat3_bold.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_bold.setBackground(Const.textJiBackGround_color);
            cFormat3_bold.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_bold.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_bold.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_bold.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_bold.setWrap(true);
            WritableCellFormat cFormat3_bold_0 = new WritableCellFormat(font3_bold, df1);
            cFormat3_bold_0.setAlignment(Alignment.CENTRE);
            cFormat3_bold_0.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_bold_0.setBackground(Const.textJiBackGround_color);
            cFormat3_bold_0.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_bold_0.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_bold_0.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_bold_0.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_bold_0.setWrap(true);
            WritableCellFormat cFormat3_bold_2 = new WritableCellFormat(font3_bold, nf2);
            cFormat3_bold_2.setAlignment(Alignment.CENTRE);
            cFormat3_bold_2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_bold_2.setBackground(Const.textJiBackGround_color);
            cFormat3_bold_2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_bold_2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_bold_2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_bold_2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_bold_2.setWrap(true);
            List quest = this.c22.getAllSubRwCount(teachUnit_s, examNum, gradeNum, teachUnit, subjectNum, studentType, type, source, fufen, jizhun, subCompose, islevel, userNum, subjectPermission);
            try {
                try {
                    WritableSheet sheet = wwBook.createSheet(rpt_name2, 0);
                    sheet.getSettings().setShowGridLines(false);
                    try {
                        Label biaotou = new Label(0, 0, rpt_name2, biaotis1);
                        sheet.addCell(biaotou);
                        new DecimalFormat("0");
                        DecimalFormat df02 = new DecimalFormat("0.00");
                        DecimalFormat df03 = new DecimalFormat("0.0000");
                        df02.setRoundingMode(RoundingMode.HALF_UP);
                        df03.setRoundingMode(RoundingMode.HALF_UP);
                        Label xinxi = new Label(0, 1, rptTitle2, title);
                        sheet.addCell(xinxi);
                        int ii = 0;
                        sheet.setRowView(1, Const.height_500);
                        sheet.mergeCells(0, 0, 17, 0);
                        sheet.mergeCells(0, 1, 17, 1);
                        sheet.mergeCells(0, 2, 0, 3);
                        sheet.mergeCells(1, 2, 1, 3);
                        if ("00".equals(teachUnit_s) && jizhun.equals("1")) {
                            sheet.mergeCells(2, 2, 2, 3);
                            ii = 1;
                        }
                        sheet.mergeCells(2 + ii, 2, 2 + ii, 3);
                        sheet.mergeCells(3 + ii, 2, 4 + ii, 2);
                        sheet.mergeCells(5 + ii, 2, 6 + ii, 2);
                        sheet.mergeCells(7 + ii, 2, 8 + ii, 2);
                        sheet.mergeCells(9 + ii, 2, 10 + ii, 2);
                        sheet.mergeCells(11 + ii, 2, 12 + ii, 2);
                        sheet.mergeCells(13 + ii, 2, 13 + ii, 3);
                        sheet.mergeCells(14 + ii, 2, 14 + ii, 3);
                        Label kemu = new Label(0, 2, "科目", cFormat1);
                        sheet.addCell(kemu);
                        if ("00".equals(teachUnit_s)) {
                            Label banren = new Label(1, 2, "学校", cFormat1);
                            sheet.addCell(banren);
                            if (jizhun.equals("1")) {
                                Label banren1 = new Label(2, 2, "班级", cFormat1);
                                sheet.addCell(banren1);
                            }
                        } else {
                            Label banren2 = new Label(1, 2, "班级", cFormat1);
                            sheet.addCell(banren2);
                        }
                        Label a18 = new Label(2 + ii, 2, "参考人数", cFormat1);
                        sheet.addCell(a18);
                        Label a10 = new Label(3 + ii, 2, "高分", cFormat1);
                        sheet.addCell(a10);
                        Label a101 = new Label(3 + ii, 3, "率", cFormat1);
                        sheet.addCell(a101);
                        Label a102 = new Label(4 + ii, 3, "Rw", cFormat1);
                        sheet.addCell(a102);
                        Label a12 = new Label(5 + ii, 2, "优秀", cFormat1);
                        sheet.addCell(a12);
                        Label a121 = new Label(5 + ii, 3, "优秀", cFormat1);
                        sheet.addCell(a121);
                        Label a122 = new Label(6 + ii, 3, "Rw", cFormat1);
                        sheet.addCell(a122);
                        Label a14 = new Label(7 + ii, 2, "及格", cFormat1);
                        sheet.addCell(a14);
                        Label a141 = new Label(7 + ii, 3, "率", cFormat1);
                        sheet.addCell(a141);
                        Label a142 = new Label(8 + ii, 3, "Rw", cFormat1);
                        sheet.addCell(a142);
                        Label a15 = new Label(9 + ii, 2, "低分", cFormat1);
                        sheet.addCell(a15);
                        Label a151 = new Label(9 + ii, 3, "率", cFormat1);
                        sheet.addCell(a151);
                        Label a152 = new Label(10 + ii, 3, "Rw", cFormat1);
                        sheet.addCell(a152);
                        Label a4 = new Label(11 + ii, 2, "均分", cFormat1);
                        sheet.addCell(a4);
                        Label a401 = new Label(11 + ii, 3, "率", cFormat1);
                        sheet.addCell(a401);
                        Label a402 = new Label(12 + ii, 3, "Rw", cFormat1);
                        sheet.addCell(a402);
                        Label a16 = new Label(13 + ii, 2, "RSRw", cFormat1);
                        sheet.addCell(a16);
                        Label a17 = new Label(14 + ii, 2, "排名", cFormat1);
                        sheet.addCell(a17);
                        int m = 0;
                        int n = 0;
                        for (int k = 0; k < quest.size(); k++) {
                            List list1 = (List) quest.get(k);
                            n += list1.size();
                            int p = 3 + (n * 1);
                            for (int i = 0; i < list1.size(); i++) {
                                if (i == 0) {
                                    Label a0 = new Label(0, 4 + m, (String) ((Object[]) ((List) quest.get(k)).get(0))[2], cFormat3_bold);
                                    sheet.addCell(a0);
                                    sheet.mergeCells(0, 4 + m, 0, p);
                                }
                                if (i % 2 != 0) {
                                    if (((Object[]) list1.get(i))[3].equals("99999")) {
                                        if ("00".equals(teachUnit_s) && jizhun.equals("1")) {
                                            Label b = new Label(1, 4 + m + i, ((Object[]) list1.get(i))[19] + "", cFormat2_bold);
                                            sheet.addCell(b);
                                        }
                                        Label b1 = new Label(1 + ii, 4 + m + i, ((Object[]) list1.get(i))[4] + "", cFormat2_bold);
                                        sheet.addCell(b1);
                                        Label b15 = new Label(2 + ii, 4 + m + i, ((Object[]) list1.get(i))[17] + "", cFormat2_bold);
                                        sheet.addCell(b15);
                                        Number b2 = new Number(3 + ii, 4 + m + i, Double.parseDouble(df03.format(((Object[]) list1.get(i))[5])), cFormat2_bold_0);
                                        sheet.addCell(b2);
                                        Label b3 = new Label(4 + ii, 4 + m + i, "", cFormat2_bold);
                                        sheet.addCell(b3);
                                        Object b4_val = ((Object[]) list1.get(i))[7];
                                        Double b4_val_D = Double.valueOf(df03.format(b4_val));
                                        Number b4 = new Number(5 + ii, 4 + m + i, b4_val_D.doubleValue(), cFormat2_bold_0);
                                        sheet.addCell(b4);
                                        Label b5 = new Label(6 + ii, 4 + m + i, "", cFormat2_bold);
                                        sheet.addCell(b5);
                                        Object b6_val = ((Object[]) list1.get(i))[9];
                                        Double b6_val_D = Double.valueOf(df03.format(b6_val));
                                        Number b6 = new Number(7 + ii, 4 + m + i, b6_val_D.doubleValue(), cFormat2_bold_0);
                                        sheet.addCell(b6);
                                        Label b7 = new Label(8 + ii, 4 + m + i, "", cFormat2_bold);
                                        sheet.addCell(b7);
                                        Number b9 = new Number(9 + ii, 4 + m + i, Double.parseDouble(df03.format(((Object[]) list1.get(i))[11])), cFormat2_bold_0);
                                        sheet.addCell(b9);
                                        Label b10 = new Label(10 + ii, 4 + m + i, "", cFormat2_bold);
                                        sheet.addCell(b10);
                                        Number b11 = new Number(11 + ii, 4 + m + i, Double.parseDouble(df02.format(((Object[]) list1.get(i))[13])), cFormat2_bold_2);
                                        sheet.addCell(b11);
                                        Label b12 = new Label(12 + ii, 4 + m + i, "", cFormat2_bold);
                                        sheet.addCell(b12);
                                        Label b13 = new Label(13 + ii, 4 + m + i, "", cFormat2_bold);
                                        sheet.addCell(b13);
                                        Label b14 = new Label(14 + ii, 4 + m + i, "", cFormat2_bold);
                                        sheet.addCell(b14);
                                    } else {
                                        if ("00".equals(teachUnit_s) && jizhun.equals("1")) {
                                            Label b8 = new Label(1, 4 + m + i, ((Object[]) list1.get(i))[19] + "", cFormat2_bold);
                                            sheet.addCell(b8);
                                        }
                                        Label b16 = new Label(1 + ii, 4 + m + i, ((Object[]) list1.get(i))[4] + "", cFormat2_bold);
                                        sheet.addCell(b16);
                                        Label b152 = new Label(2 + ii, 4 + m + i, ((Object[]) list1.get(i))[17] + "", cFormat2);
                                        sheet.addCell(b152);
                                        Number b22 = new Number(3 + ii, 4 + m + i, Double.parseDouble(df03.format(((Object[]) list1.get(i))[5])), cFormat2_0);
                                        sheet.addCell(b22);
                                        Object b3_val = ((Object[]) list1.get(i))[6];
                                        BigDecimal bigDecimal = new BigDecimal((null == b3_val ? 0 : b3_val) + "");
                                        Double b3_val_D = Double.valueOf(df02.format(bigDecimal));
                                        Number b32 = new Number(4 + ii, 4 + m + i, b3_val_D.doubleValue(), cFormat2_2);
                                        sheet.addCell(b32);
                                        Object b4_val2 = ((Object[]) list1.get(i))[7];
                                        Double b4_val_D2 = Double.valueOf(df03.format(b4_val2));
                                        Number b42 = new Number(5 + ii, 4 + m + i, b4_val_D2.doubleValue(), cFormat2_0);
                                        sheet.addCell(b42);
                                        Object b5_val = ((Object[]) list1.get(i))[8];
                                        BigDecimal bigDecimal2 = new BigDecimal((null == b5_val ? 0 : b5_val) + "");
                                        Double b5_val_D = Double.valueOf(df02.format(bigDecimal2));
                                        Number b52 = new Number(6 + ii, 4 + m + i, b5_val_D.doubleValue(), cFormat2_2);
                                        sheet.addCell(b52);
                                        Object b6_val2 = ((Object[]) list1.get(i))[9];
                                        Double b6_val_D2 = Double.valueOf(df03.format(b6_val2));
                                        Number b62 = new Number(7 + ii, 4 + m + i, b6_val_D2.doubleValue(), cFormat2_0);
                                        sheet.addCell(b62);
                                        Object b7_val = ((Object[]) list1.get(i))[10];
                                        BigDecimal bigDecimal3 = new BigDecimal((null == b7_val ? 0 : b7_val) + "");
                                        Double b7_val_D = Double.valueOf(df02.format(bigDecimal3));
                                        Number b72 = new Number(8 + ii, 4 + m + i, b7_val_D.doubleValue(), cFormat2_2);
                                        sheet.addCell(b72);
                                        Number b92 = new Number(9 + ii, 4 + m + i, Double.parseDouble(df03.format(((Object[]) list1.get(i))[11])), cFormat2_0);
                                        sheet.addCell(b92);
                                        Object b10_val = ((Object[]) list1.get(i))[12];
                                        BigDecimal bigDecimal4 = new BigDecimal((null == b10_val ? 0 : b10_val) + "");
                                        Double b10_val_D = Double.valueOf(df02.format(bigDecimal4));
                                        Number b102 = new Number(10 + ii, 4 + m + i, b10_val_D.doubleValue(), cFormat2_2);
                                        sheet.addCell(b102);
                                        Number b112 = new Number(11 + ii, 4 + m + i, Double.parseDouble(df02.format(((Object[]) list1.get(i))[13])), cFormat2_2);
                                        sheet.addCell(b112);
                                        Object b12_val = ((Object[]) list1.get(i))[14];
                                        BigDecimal bigDecimal5 = new BigDecimal((null == b12_val ? 0 : b12_val) + "");
                                        Double b12_val_D = Double.valueOf(df02.format(bigDecimal5));
                                        Number b122 = new Number(12 + ii, 4 + m + i, b12_val_D.doubleValue(), cFormat2_2);
                                        sheet.addCell(b122);
                                        Object b13_val = ((Object[]) list1.get(i))[15];
                                        BigDecimal bigDecimal6 = new BigDecimal((null == b13_val ? 0 : b13_val) + "");
                                        Double b13_val_D = Double.valueOf(df02.format(bigDecimal6));
                                        Number b132 = new Number(13 + ii, 4 + m + i, b13_val_D.doubleValue(), cFormat2_2);
                                        sheet.addCell(b132);
                                        Number b142 = new Number(14 + ii, 4 + m + i, Integer.valueOf(((Object[]) list1.get(i))[16] + "").intValue(), cFormat2);
                                        sheet.addCell(b142);
                                    }
                                } else if (((Object[]) list1.get(i))[3].equals("99999")) {
                                    if ("00".equals(teachUnit_s) && jizhun.equals("1")) {
                                        Label b17 = new Label(1, 4 + m + i, ((Object[]) list1.get(i))[19] + "", cFormat3_bold);
                                        sheet.addCell(b17);
                                    }
                                    Label b18 = new Label(1 + ii, 4 + m + i, ((Object[]) list1.get(i))[4] + "", cFormat3_bold);
                                    sheet.addCell(b18);
                                    Label b153 = new Label(2 + ii, 4 + m + i, ((Object[]) list1.get(i))[17] + "", cFormat3_bold);
                                    sheet.addCell(b153);
                                    Number b23 = new Number(3 + ii, 4 + m + i, Double.parseDouble(df03.format(((Object[]) list1.get(i))[5])), cFormat3_bold_0);
                                    sheet.addCell(b23);
                                    Label b33 = new Label(4 + ii, 4 + m + i, "", cFormat3_bold);
                                    sheet.addCell(b33);
                                    Number b43 = new Number(5 + ii, 4 + m + i, Double.parseDouble(df03.format(((Object[]) list1.get(i))[7])), cFormat3_bold_0);
                                    sheet.addCell(b43);
                                    Label b53 = new Label(6 + ii, 4 + m + i, "", cFormat3_bold);
                                    sheet.addCell(b53);
                                    Object b6_val3 = ((Object[]) list1.get(i))[9];
                                    Double b6_val_D3 = Double.valueOf(df03.format(b6_val3));
                                    Number b63 = new Number(7 + ii, 4 + m + i, b6_val_D3.doubleValue(), cFormat3_bold_0);
                                    sheet.addCell(b63);
                                    Label b73 = new Label(8 + ii, 4 + m + i, "", cFormat3_bold);
                                    sheet.addCell(b73);
                                    Object b8_val = ((Object[]) list1.get(i))[11];
                                    Double b8_val_D = Double.valueOf(df03.format(b8_val));
                                    Number b82 = new Number(9 + ii, 4 + m + i, b8_val_D.doubleValue(), cFormat3_bold_0);
                                    sheet.addCell(b82);
                                    Label b93 = new Label(10 + ii, 4 + m + i, "", cFormat3_bold);
                                    sheet.addCell(b93);
                                    Number b103 = new Number(11 + ii, 4 + m + i, Double.parseDouble(df02.format(((Object[]) list1.get(i))[13])), cFormat3_bold_2);
                                    sheet.addCell(b103);
                                    Label b113 = new Label(12 + ii, 4 + m + i, "", cFormat3_bold);
                                    sheet.addCell(b113);
                                    Label b123 = new Label(13 + ii, 4 + m + i, "", cFormat3_bold);
                                    sheet.addCell(b123);
                                    Label b133 = new Label(14 + ii, 4 + m + i, "", cFormat3_bold);
                                    sheet.addCell(b133);
                                } else {
                                    if ("00".equals(teachUnit_s) && jizhun.equals("1")) {
                                        Label b19 = new Label(1, 4 + m + i, ((Object[]) list1.get(i))[19] + "", cFormat3_bold);
                                        sheet.addCell(b19);
                                    }
                                    Label b110 = new Label(1 + ii, 4 + m + i, ((Object[]) list1.get(i))[4] + "", cFormat3_bold);
                                    sheet.addCell(b110);
                                    Label b154 = new Label(2 + ii, 4 + m + i, ((Object[]) list1.get(i))[17] + "", cFormat3);
                                    sheet.addCell(b154);
                                    Number b24 = new Number(3 + ii, 4 + m + i, Double.parseDouble(df03.format(((Object[]) list1.get(i))[5])), cFormat3_0);
                                    sheet.addCell(b24);
                                    Object b3_val2 = ((Object[]) list1.get(i))[6];
                                    BigDecimal bigDecimal7 = new BigDecimal((null == b3_val2 ? 0 : b3_val2) + "");
                                    String higRw = df03.format(bigDecimal7);
                                    Double b3_val_D2 = Double.valueOf(higRw);
                                    Number b34 = new Number(4 + ii, 4 + m + i, b3_val_D2.doubleValue(), cFormat3_2);
                                    sheet.addCell(b34);
                                    Number b44 = new Number(5 + ii, 4 + m + i, Double.parseDouble(df03.format(((Object[]) list1.get(i))[7])), cFormat3_0);
                                    sheet.addCell(b44);
                                    Object b5_val2 = ((Object[]) list1.get(i))[8];
                                    BigDecimal bigDecimal8 = new BigDecimal((null == b5_val2 ? 0 : b5_val2) + "");
                                    Double b5_val_D2 = Double.valueOf(df02.format(bigDecimal8));
                                    Number b54 = new Number(6 + ii, 4 + m + i, b5_val_D2.doubleValue(), cFormat3_2);
                                    sheet.addCell(b54);
                                    Object b6_val4 = ((Object[]) list1.get(i))[9];
                                    Double b6_val_D4 = Double.valueOf(df03.format(b6_val4));
                                    Number b64 = new Number(7 + ii, 4 + m + i, b6_val_D4.doubleValue(), cFormat3_0);
                                    sheet.addCell(b64);
                                    Object b7_val2 = ((Object[]) list1.get(i))[10];
                                    BigDecimal bigDecimal9 = new BigDecimal((null == b7_val2 ? 0 : b7_val2) + "");
                                    Double b7_val_D2 = Double.valueOf(df02.format(bigDecimal9));
                                    Number b74 = new Number(8 + ii, 4 + m + i, b7_val_D2.doubleValue(), cFormat3_2);
                                    sheet.addCell(b74);
                                    Object b8_val2 = ((Object[]) list1.get(i))[11];
                                    Double b8_val_D2 = Double.valueOf(df03.format(b8_val2));
                                    Number b83 = new Number(9 + ii, 4 + m + i, b8_val_D2.doubleValue(), cFormat3_0);
                                    sheet.addCell(b83);
                                    Object b9_val = ((Object[]) list1.get(i))[12];
                                    BigDecimal bigDecimal10 = new BigDecimal((null == b9_val ? 0 : b9_val) + "");
                                    Double b9_val_D = Double.valueOf(df02.format(bigDecimal10));
                                    Number b94 = new Number(10 + ii, 4 + m + i, b9_val_D.doubleValue(), cFormat3_2);
                                    sheet.addCell(b94);
                                    Number b104 = new Number(11 + ii, 4 + m + i, Double.parseDouble(df02.format(((Object[]) list1.get(i))[13])), cFormat3_2);
                                    sheet.addCell(b104);
                                    Object b11_val = ((Object[]) list1.get(i))[14];
                                    BigDecimal bigDecimal11 = new BigDecimal((null == b11_val ? 0 : b11_val) + "");
                                    Double b11_val_D = Double.valueOf(df02.format(bigDecimal11));
                                    Number b114 = new Number(12 + ii, 4 + m + i, b11_val_D.doubleValue(), cFormat3_2);
                                    sheet.addCell(b114);
                                    Object b12_val2 = ((Object[]) list1.get(i))[15];
                                    BigDecimal bigDecimal12 = new BigDecimal((null == b12_val2 ? 0 : b12_val2) + "");
                                    Double b12_val_D2 = Double.valueOf(df02.format(bigDecimal12));
                                    Number b124 = new Number(13 + ii, 4 + m + i, b12_val_D2.doubleValue(), cFormat3_2);
                                    sheet.addCell(b124);
                                    Number b134 = new Number(14 + ii, 4 + m + i, Integer.valueOf(((Object[]) list1.get(i))[16] + "").intValue(), cFormat3);
                                    sheet.addCell(b134);
                                }
                            }
                            m += list1.size();
                        }
                        Examsetting examSet = this.c22.getExamSet(examNum);
                        StringBuffer msg = new StringBuffer();
                        msg.append("2.各指标的权重（W）分别为");
                        msg.append("高分率").append(df02.format(examSet.getRSRw_highScore())).append("、");
                        msg.append("优分率").append(df02.format(examSet.getRSRw_highScore())).append("、");
                        msg.append("及格率").append(df02.format(examSet.getRSRw_highScore())).append("、");
                        msg.append("低分率").append(df02.format(examSet.getRSRw_highScore())).append("、");
                        msg.append("平均分").append(df02.format(examSet.getRSRw_highScore())).append("。");
                        ImgUtil.pressText(FileUtil.file(imgRoot + "common\\image\\RSRwImg\\RSRw2.png"), FileUtil.file(imgRoot + "common\\image\\RSRwImg\\RSRw3.png"), msg.toString(), Color.black, new java.awt.Font("宋体", 0, 15), -45, 35, 1.0f);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    wwBook.write();
                    if (wwBook != null) {
                        try {
                            wwBook.close();
                            if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                                HttpServletResponse response = ServletActionContext.getResponse();
                                response.reset();
                                ServletOutputStream outputStream = response.getOutputStream();
                                String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                String loadFileName2 = loadFileName.replace("+", " ");
                                response.setContentType("Content-type: applicationnd.ms-excel");
                                response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xls");
                                response.setHeader("Content-length", String.valueOf(excelFile.length()));
                                byte[] tempByte = new byte[1024];
                                FileInputStream in = new FileInputStream(excelFile);
                                while (true) {
                                    int n2 = in.read(tempByte);
                                    if (n2 == -1) {
                                        break;
                                    }
                                    try {
                                        outputStream.write(tempByte, 0, n2);
                                    } catch (Exception e2) {
                                        this.log.error("保存未成功", e2);
                                    }
                                }
                                outputStream.flush();
                                outputStream.close();
                                in.close();
                            }
                        } catch (WriteException e3) {
                            e3.printStackTrace();
                        }
                    }
                } catch (Exception e4) {
                    if (wwBook != null) {
                        try {
                            wwBook.close();
                            if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                                HttpServletResponse response2 = ServletActionContext.getResponse();
                                response2.reset();
                                ServletOutputStream outputStream2 = response2.getOutputStream();
                                String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                String loadFileName4 = loadFileName3.replace("+", " ");
                                response2.setContentType("Content-type: applicationnd.ms-excel");
                                response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xls");
                                response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                                byte[] tempByte2 = new byte[1024];
                                FileInputStream in2 = new FileInputStream(excelFile);
                                while (true) {
                                    int n3 = in2.read(tempByte2);
                                    if (n3 == -1) {
                                        break;
                                    }
                                    try {
                                        outputStream2.write(tempByte2, 0, n3);
                                    } catch (Exception e5) {
                                        this.log.error("保存未成功", e5);
                                    }
                                }
                                outputStream2.flush();
                                outputStream2.close();
                                in2.close();
                            }
                        } catch (WriteException e6) {
                            e6.printStackTrace();
                        }
                    }
                }
            } catch (Throwable th) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response3 = ServletActionContext.getResponse();
                            response3.reset();
                            ServletOutputStream outputStream3 = response3.getOutputStream();
                            String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName6 = loadFileName5.replace("+", " ");
                            response3.setContentType("Content-type: applicationnd.ms-excel");
                            response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xls");
                            response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte3 = new byte[1024];
                            FileInputStream in3 = new FileInputStream(excelFile);
                            while (true) {
                                int n4 = in3.read(tempByte3);
                                if (n4 == -1) {
                                    break;
                                }
                                try {
                                    outputStream3.write(tempByte3, 0, n4);
                                } catch (Exception e7) {
                                    this.log.error("保存未成功", e7);
                                }
                            }
                            outputStream3.flush();
                            outputStream3.close();
                            in3.close();
                        }
                    } catch (WriteException e8) {
                        e8.printStackTrace();
                        throw th;
                    }
                }
                throw th;
            }
        } catch (Exception e9) {
            e9.printStackTrace();
        }
        return null;
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String c22AllSubRatesAve(String teachUnit_s, String examNum, String gradeNum, String teachUnit, String subjectNum, String classNum, String studentId, String studentType, String type, String source, String rpt_name, String isMoreSchool, String rptTitle, String isSaveWrite, String dirPath, String userNum, String gradeName, String className, String imgRoot, String agent, String fufen, String jizhun, String subCompose, String islevel, String subjectPermission) {
        String rpt_name2 = rpt_name + "--四率一分排名";
        String rptTitle2 = this.sp.getHeaderStr(examNum, subjectNum, gradeNum, teachUnit, classNum, studentId, studentType, true, true, false, false, false, true, false, true, false, false, false, false, false, true, false, subCompose, fufen);
        String folderPath = "ExportFolder/reportExcel" + userNum;
        String str = "reportExcel" + userNum;
        String str2 = "reportExcel" + userNum;
        String excelName = (null == gradeName || "".equals(gradeName)) ? rpt_name2 + "_" + gradeNum : rpt_name2 + "_" + gradeName;
        if (null != classNum && !"".equals(classNum) && !classNum.contains(Const.STRING_SEPERATOR)) {
            excelName = (null == className || "".equals(className)) ? excelName + "_" + classNum : excelName + "_" + className;
        }
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        try {
            WritableWorkbook wwBook = Workbook.createWorkbook(excelFile);
            WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
            biaotis1.setAlignment(Alignment.LEFT);
            biaotis1.setVerticalAlignment(VerticalAlignment.CENTRE);
            WritableFont titles = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat title = new WritableCellFormat(titles);
            title.setAlignment(Alignment.LEFT);
            title.setVerticalAlignment(VerticalAlignment.CENTRE);
            title.setWrap(true);
            WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            WritableCellFormat cFormat1 = new WritableCellFormat(font1);
            cFormat1.setAlignment(Alignment.CENTRE);
            cFormat1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1.setBackground(Const.titleBackground_color);
            cFormat1.setWrap(true);
            WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat2 = new WritableCellFormat(font2);
            cFormat2.setAlignment(Alignment.CENTRE);
            cFormat2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2.setBackground(Const.textOuBackGround_color);
            cFormat2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2.setWrap(true);
            WritableFont font2_bold = new WritableFont(WritableFont.ARIAL, 10, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat2_bold = new WritableCellFormat(font2_bold);
            cFormat2_bold.setAlignment(Alignment.CENTRE);
            cFormat2_bold.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_bold.setBackground(Const.textOuBackGround_color);
            cFormat2_bold.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_bold.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_bold.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_bold.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_bold.setWrap(true);
            WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat3 = new WritableCellFormat(font3);
            cFormat3.setAlignment(Alignment.CENTRE);
            cFormat3.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3.setBackground(Const.textJiBackGround_color);
            cFormat3.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3.setWrap(true);
            WritableFont font3_bold = new WritableFont(WritableFont.ARIAL, 10, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Colour.BLACK);
            WritableCellFormat cFormat3_bold = new WritableCellFormat(font3_bold);
            cFormat3_bold.setAlignment(Alignment.CENTRE);
            cFormat3_bold.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_bold.setBackground(Const.textJiBackGround_color);
            cFormat3_bold.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_bold.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_bold.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_bold.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_bold.setWrap(true);
            List quest = this.c22Rates.getAllSubRatesAve(teachUnit_s, examNum, gradeNum, teachUnit, subjectNum, studentType, type, source, fufen, jizhun, subCompose, islevel, userNum, subjectPermission);
            try {
                WritableSheet sheet = wwBook.createSheet(rpt_name2, 0);
                sheet.getSettings().setShowGridLines(false);
                try {
                    Label biaotou = new Label(0, 0, rpt_name2, biaotis1);
                    sheet.addCell(biaotou);
                    Label xinxi = new Label(0, 1, rptTitle2, title);
                    sheet.addCell(xinxi);
                    int ii = 0;
                    sheet.setRowView(1, Const.height_500);
                    sheet.mergeCells(0, 0, 17, 0);
                    sheet.mergeCells(0, 1, 17, 1);
                    sheet.mergeCells(0, 2, 0, 3);
                    sheet.mergeCells(1, 2, 1, 3);
                    if ("00".equals(teachUnit_s) && jizhun.equals("1")) {
                        sheet.mergeCells(2, 2, 2, 3);
                        ii = 1;
                    }
                    sheet.mergeCells(2 + ii, 2, 2 + ii, 3);
                    sheet.mergeCells(8 + ii, 2, 8 + ii, 3);
                    Label kemu = new Label(0, 2, "科目", cFormat1);
                    sheet.addCell(kemu);
                    if ("00".equals(teachUnit_s)) {
                        Label banren = new Label(1, 2, "学校", cFormat1);
                        sheet.addCell(banren);
                        if (jizhun.equals("1")) {
                            Label banren1 = new Label(2, 2, "班级", cFormat1);
                            sheet.addCell(banren1);
                        }
                    } else {
                        Label banren2 = new Label(1, 2, "班级", cFormat1);
                        sheet.addCell(banren2);
                    }
                    Label a18 = new Label(2 + ii, 2, "参考人数", cFormat1);
                    sheet.addCell(a18);
                    Label a10 = new Label(3 + ii, 2, "高分", cFormat1);
                    sheet.addCell(a10);
                    Label a101 = new Label(3 + ii, 3, "排名", cFormat1);
                    sheet.addCell(a101);
                    Label a12 = new Label(4 + ii, 2, "优秀", cFormat1);
                    sheet.addCell(a12);
                    Label a121 = new Label(4 + ii, 3, "排名", cFormat1);
                    sheet.addCell(a121);
                    Label a14 = new Label(5 + ii, 2, "及格", cFormat1);
                    sheet.addCell(a14);
                    Label a141 = new Label(5 + ii, 3, "排名", cFormat1);
                    sheet.addCell(a141);
                    Label a15 = new Label(6 + ii, 2, "低分", cFormat1);
                    sheet.addCell(a15);
                    Label a151 = new Label(6 + ii, 3, "排名", cFormat1);
                    sheet.addCell(a151);
                    Label a4 = new Label(7 + ii, 2, "均分", cFormat1);
                    sheet.addCell(a4);
                    Label a401 = new Label(7 + ii, 3, "排名", cFormat1);
                    sheet.addCell(a401);
                    Label a17 = new Label(8 + ii, 2, "排名", cFormat1);
                    sheet.addCell(a17);
                    int m = 0;
                    int n = 0;
                    for (int k = 0; k < quest.size(); k++) {
                        List list1 = (List) quest.get(k);
                        n += list1.size();
                        int p = 3 + (n * 1);
                        if (list1.size() % 2 == 0) {
                            for (int i = 0; i < list1.size(); i++) {
                                if (i == 0) {
                                    Label a0 = new Label(0, 4 + m, (String) ((Object[]) ((List) quest.get(k)).get(0))[2], cFormat3_bold);
                                    sheet.addCell(a0);
                                    sheet.mergeCells(0, 4 + m, 0, p);
                                }
                                if (i % 2 != 0) {
                                    if ("00".equals(teachUnit_s) && jizhun.equals("1")) {
                                        Label b1 = new Label(1, 4 + m + i, ((Object[]) list1.get(i))[13] + "", cFormat2_bold);
                                        sheet.addCell(b1);
                                    }
                                    Label b12 = new Label(1 + ii, 4 + m + i, ((Object[]) list1.get(i))[4] + "", cFormat2_bold);
                                    sheet.addCell(b12);
                                    Label b2 = new Label(2 + ii, 4 + m + i, ((Object[]) list1.get(i))[5] + "", cFormat2);
                                    sheet.addCell(b2);
                                    Number b3 = new Number(3 + ii, 4 + m + i, Integer.valueOf(((Object[]) list1.get(i))[6] + "").intValue(), cFormat2);
                                    sheet.addCell(b3);
                                    Number b4 = new Number(4 + ii, 4 + m + i, Integer.valueOf(((Object[]) list1.get(i))[7] + "").intValue(), cFormat2);
                                    sheet.addCell(b4);
                                    Number b5 = new Number(5 + ii, 4 + m + i, Integer.valueOf(((Object[]) list1.get(i))[8] + "").intValue(), cFormat2);
                                    sheet.addCell(b5);
                                    Number b6 = new Number(6 + ii, 4 + m + i, Integer.valueOf(((Object[]) list1.get(i))[9] + "").intValue(), cFormat2);
                                    sheet.addCell(b6);
                                    Number b7 = new Number(7 + ii, 4 + m + i, Integer.valueOf(((Object[]) list1.get(i))[10] + "").intValue(), cFormat2);
                                    sheet.addCell(b7);
                                    Number b8 = new Number(8 + ii, 4 + m + i, Integer.valueOf(((Object[]) list1.get(i))[11] + "").intValue(), cFormat2);
                                    sheet.addCell(b8);
                                } else {
                                    if ("00".equals(teachUnit_s) && jizhun.equals("1")) {
                                        Label b13 = new Label(1, 4 + m + i, ((Object[]) list1.get(i))[13] + "", cFormat3_bold);
                                        sheet.addCell(b13);
                                    }
                                    Label b14 = new Label(1 + ii, 4 + m + i, ((Object[]) list1.get(i))[4] + "", cFormat3_bold);
                                    sheet.addCell(b14);
                                    Label b22 = new Label(2 + ii, 4 + m + i, ((Object[]) list1.get(i))[5] + "", cFormat3);
                                    sheet.addCell(b22);
                                    Number b32 = new Number(3 + ii, 4 + m + i, Integer.valueOf(((Object[]) list1.get(i))[6] + "").intValue(), cFormat3);
                                    sheet.addCell(b32);
                                    Number b42 = new Number(4 + ii, 4 + m + i, Integer.valueOf(((Object[]) list1.get(i))[7] + "").intValue(), cFormat3);
                                    sheet.addCell(b42);
                                    Number b52 = new Number(5 + ii, 4 + m + i, Integer.valueOf(((Object[]) list1.get(i))[8] + "").intValue(), cFormat3);
                                    sheet.addCell(b52);
                                    Number b62 = new Number(6 + ii, 4 + m + i, Integer.valueOf(((Object[]) list1.get(i))[9] + "").intValue(), cFormat3);
                                    sheet.addCell(b62);
                                    Number b72 = new Number(7 + ii, 4 + m + i, Integer.valueOf(((Object[]) list1.get(i))[10] + "").intValue(), cFormat3);
                                    sheet.addCell(b72);
                                    Number b82 = new Number(8 + ii, 4 + m + i, Integer.valueOf(((Object[]) list1.get(i))[11] + "").intValue(), cFormat3);
                                    sheet.addCell(b82);
                                }
                            }
                        } else if (k % 2 == 0) {
                            for (int i2 = 0; i2 < list1.size(); i2++) {
                                if (i2 == 0) {
                                    Label a02 = new Label(0, 4 + m, (String) ((Object[]) ((List) quest.get(k)).get(0))[2], cFormat3_bold);
                                    sheet.addCell(a02);
                                    sheet.mergeCells(0, 4 + m, 0, p);
                                }
                                if (i2 % 2 != 0) {
                                    if ("00".equals(teachUnit_s) && jizhun.equals("1")) {
                                        Label b15 = new Label(1, 4 + m + i2, ((Object[]) list1.get(i2))[13] + "", cFormat2_bold);
                                        sheet.addCell(b15);
                                    }
                                    Label b16 = new Label(1 + ii, 4 + m + i2, ((Object[]) list1.get(i2))[4] + "", cFormat2_bold);
                                    sheet.addCell(b16);
                                    Label b23 = new Label(2 + ii, 4 + m + i2, ((Object[]) list1.get(i2))[5] + "", cFormat2);
                                    sheet.addCell(b23);
                                    Number b33 = new Number(3 + ii, 4 + m + i2, Integer.valueOf(((Object[]) list1.get(i2))[6] + "").intValue(), cFormat2);
                                    sheet.addCell(b33);
                                    Number b43 = new Number(4 + ii, 4 + m + i2, Integer.valueOf(((Object[]) list1.get(i2))[7] + "").intValue(), cFormat2);
                                    sheet.addCell(b43);
                                    Number b53 = new Number(5 + ii, 4 + m + i2, Integer.valueOf(((Object[]) list1.get(i2))[8] + "").intValue(), cFormat2);
                                    sheet.addCell(b53);
                                    Number b63 = new Number(6 + ii, 4 + m + i2, Integer.valueOf(((Object[]) list1.get(i2))[9] + "").intValue(), cFormat2);
                                    sheet.addCell(b63);
                                    Number b73 = new Number(7 + ii, 4 + m + i2, Integer.valueOf(((Object[]) list1.get(i2))[10] + "").intValue(), cFormat2);
                                    sheet.addCell(b73);
                                    Number b83 = new Number(8 + ii, 4 + m + i2, Integer.valueOf(((Object[]) list1.get(i2))[11] + "").intValue(), cFormat2);
                                    sheet.addCell(b83);
                                } else {
                                    if ("00".equals(teachUnit_s) && jizhun.equals("1")) {
                                        Label b17 = new Label(1, 4 + m + i2, ((Object[]) list1.get(i2))[13] + "", cFormat3_bold);
                                        sheet.addCell(b17);
                                    }
                                    Label b18 = new Label(1 + ii, 4 + m + i2, ((Object[]) list1.get(i2))[4] + "", cFormat3_bold);
                                    sheet.addCell(b18);
                                    Label b24 = new Label(2 + ii, 4 + m + i2, ((Object[]) list1.get(i2))[5] + "", cFormat3);
                                    sheet.addCell(b24);
                                    Number b34 = new Number(3 + ii, 4 + m + i2, Integer.valueOf(((Object[]) list1.get(i2))[6] + "").intValue(), cFormat3);
                                    sheet.addCell(b34);
                                    Number b44 = new Number(4 + ii, 4 + m + i2, Integer.valueOf(((Object[]) list1.get(i2))[7] + "").intValue(), cFormat3);
                                    sheet.addCell(b44);
                                    Number b54 = new Number(5 + ii, 4 + m + i2, Integer.valueOf(((Object[]) list1.get(i2))[8] + "").intValue(), cFormat3);
                                    sheet.addCell(b54);
                                    Number b64 = new Number(6 + ii, 4 + m + i2, Integer.valueOf(((Object[]) list1.get(i2))[9] + "").intValue(), cFormat3);
                                    sheet.addCell(b64);
                                    Number b74 = new Number(7 + ii, 4 + m + i2, Integer.valueOf(((Object[]) list1.get(i2))[10] + "").intValue(), cFormat3);
                                    sheet.addCell(b74);
                                    Number b84 = new Number(8 + ii, 4 + m + i2, Integer.valueOf(((Object[]) list1.get(i2))[11] + "").intValue(), cFormat3);
                                    sheet.addCell(b84);
                                }
                            }
                        } else {
                            for (int i3 = 0; i3 < list1.size(); i3++) {
                                if (i3 == 0) {
                                    Label a03 = new Label(0, 4 + m, (String) ((Object[]) ((List) quest.get(k)).get(0))[2], cFormat3_bold);
                                    sheet.addCell(a03);
                                    sheet.mergeCells(0, 4 + m, 0, p);
                                }
                                if (i3 % 2 != 0) {
                                    if ("00".equals(teachUnit_s) && jizhun.equals("1")) {
                                        Label b19 = new Label(1, 4 + m + i3, ((Object[]) list1.get(i3))[13] + "", cFormat3_bold);
                                        sheet.addCell(b19);
                                    }
                                    Label b110 = new Label(1 + ii, 4 + m + i3, ((Object[]) list1.get(i3))[4] + "", cFormat3_bold);
                                    sheet.addCell(b110);
                                    Label b25 = new Label(2 + ii, 4 + m + i3, ((Object[]) list1.get(i3))[5] + "", cFormat3);
                                    sheet.addCell(b25);
                                    Number b35 = new Number(3 + ii, 4 + m + i3, Integer.valueOf(((Object[]) list1.get(i3))[6] + "").intValue(), cFormat3);
                                    sheet.addCell(b35);
                                    Number b45 = new Number(4 + ii, 4 + m + i3, Integer.valueOf(((Object[]) list1.get(i3))[7] + "").intValue(), cFormat3);
                                    sheet.addCell(b45);
                                    Number b55 = new Number(5 + ii, 4 + m + i3, Integer.valueOf(((Object[]) list1.get(i3))[8] + "").intValue(), cFormat3);
                                    sheet.addCell(b55);
                                    Number b65 = new Number(6 + ii, 4 + m + i3, Integer.valueOf(((Object[]) list1.get(i3))[9] + "").intValue(), cFormat3);
                                    sheet.addCell(b65);
                                    Number b75 = new Number(7 + ii, 4 + m + i3, Integer.valueOf(((Object[]) list1.get(i3))[10] + "").intValue(), cFormat3);
                                    sheet.addCell(b75);
                                    Number b85 = new Number(8 + ii, 4 + m + i3, Integer.valueOf(((Object[]) list1.get(i3))[11] + "").intValue(), cFormat3);
                                    sheet.addCell(b85);
                                } else {
                                    if ("00".equals(teachUnit_s) && jizhun.equals("1")) {
                                        Label b111 = new Label(1, 4 + m + i3, ((Object[]) list1.get(i3))[13] + "", cFormat2_bold);
                                        sheet.addCell(b111);
                                    }
                                    Label b112 = new Label(1 + ii, 4 + m + i3, ((Object[]) list1.get(i3))[4] + "", cFormat2_bold);
                                    sheet.addCell(b112);
                                    Label b26 = new Label(2 + ii, 4 + m + i3, ((Object[]) list1.get(i3))[5] + "", cFormat2);
                                    sheet.addCell(b26);
                                    Number b36 = new Number(3 + ii, 4 + m + i3, Integer.valueOf(((Object[]) list1.get(i3))[6] + "").intValue(), cFormat2);
                                    sheet.addCell(b36);
                                    Number b46 = new Number(4 + ii, 4 + m + i3, Integer.valueOf(((Object[]) list1.get(i3))[7] + "").intValue(), cFormat2);
                                    sheet.addCell(b46);
                                    Number b56 = new Number(5 + ii, 4 + m + i3, Integer.valueOf(((Object[]) list1.get(i3))[8] + "").intValue(), cFormat2);
                                    sheet.addCell(b56);
                                    Number b66 = new Number(6 + ii, 4 + m + i3, Integer.valueOf(((Object[]) list1.get(i3))[9] + "").intValue(), cFormat2);
                                    sheet.addCell(b66);
                                    Number b76 = new Number(7 + ii, 4 + m + i3, Integer.valueOf(((Object[]) list1.get(i3))[10] + "").intValue(), cFormat2);
                                    sheet.addCell(b76);
                                    Number b86 = new Number(8 + ii, 4 + m + i3, Integer.valueOf(((Object[]) list1.get(i3))[11] + "").intValue(), cFormat2);
                                    sheet.addCell(b86);
                                }
                            }
                        }
                        m += list1.size();
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                wwBook.write();
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response = ServletActionContext.getResponse();
                            response.reset();
                            ServletOutputStream outputStream = response.getOutputStream();
                            String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName2 = loadFileName.replace("+", " ");
                            response.setContentType("Content-type: applicationnd.ms-excel");
                            response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xls");
                            response.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte = new byte[1024];
                            FileInputStream in = new FileInputStream(excelFile);
                            while (true) {
                                int n2 = in.read(tempByte);
                                if (n2 == -1) {
                                    break;
                                }
                                try {
                                    outputStream.write(tempByte, 0, n2);
                                } catch (Exception e2) {
                                    this.log.error("保存未成功", e2);
                                }
                            }
                            outputStream.flush();
                            outputStream.close();
                            in.close();
                        }
                    } catch (WriteException e3) {
                        e3.printStackTrace();
                    }
                }
            } catch (Exception e4) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response2 = ServletActionContext.getResponse();
                            response2.reset();
                            ServletOutputStream outputStream2 = response2.getOutputStream();
                            String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName4 = loadFileName3.replace("+", " ");
                            response2.setContentType("Content-type: applicationnd.ms-excel");
                            response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xls");
                            response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte2 = new byte[1024];
                            FileInputStream in2 = new FileInputStream(excelFile);
                            while (true) {
                                int n3 = in2.read(tempByte2);
                                if (n3 == -1) {
                                    break;
                                }
                                try {
                                    outputStream2.write(tempByte2, 0, n3);
                                } catch (Exception e5) {
                                    this.log.error("保存未成功", e5);
                                }
                            }
                            outputStream2.flush();
                            outputStream2.close();
                            in2.close();
                        }
                    } catch (WriteException e6) {
                        e6.printStackTrace();
                    }
                }
            } catch (Throwable th) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response3 = ServletActionContext.getResponse();
                            response3.reset();
                            ServletOutputStream outputStream3 = response3.getOutputStream();
                            String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName6 = loadFileName5.replace("+", " ");
                            response3.setContentType("Content-type: applicationnd.ms-excel");
                            response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xls");
                            response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte3 = new byte[1024];
                            FileInputStream in3 = new FileInputStream(excelFile);
                            while (true) {
                                int n4 = in3.read(tempByte3);
                                if (n4 == -1) {
                                    break;
                                }
                                try {
                                    outputStream3.write(tempByte3, 0, n4);
                                } catch (Exception e7) {
                                    this.log.error("保存未成功", e7);
                                }
                            }
                            outputStream3.flush();
                            outputStream3.close();
                            in3.close();
                        }
                    } catch (WriteException e8) {
                        e8.printStackTrace();
                        throw th;
                    }
                }
                throw th;
            }
        } catch (Exception e9) {
            e9.printStackTrace();
        }
        return null;
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String c22AllSchoolSubjectRank(String teachUnit_s, String examNum, String gradeNum, String teachUnit, String subjectNum, String classNum, String studentId, String studentType, String type, String source, String rpt_name, String isMoreSchool, String rptTitle, String isSaveWrite, String dirPath, String userNum, String gradeName, String className, String imgRoot, String agent, String fufen, String jizhun, String subCompose, String islevel, String subjectPermission) {
        String rpt_name2 = rpt_name + "--总体排名";
        String rptTitle2 = this.sp.getHeaderStr(examNum, subjectNum, gradeNum, teachUnit, classNum, studentId, studentType, true, true, false, false, false, true, false, true, false, false, false, false, false, true, false, subCompose, fufen);
        String folderPath = "ExportFolder/reportExcel" + userNum;
        String str = "reportExcel" + userNum;
        String str2 = "reportExcel" + userNum;
        String excelName = (null == gradeName || "".equals(gradeName)) ? rpt_name2 + "_" + gradeNum : rpt_name2 + "_" + gradeName;
        if (null != classNum && !"".equals(classNum) && !classNum.contains(Const.STRING_SEPERATOR)) {
            excelName = (null == className || "".equals(className)) ? excelName + "_" + classNum : excelName + "_" + className;
        }
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        try {
            WritableWorkbook wwBook = Workbook.createWorkbook(excelFile);
            WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
            biaotis1.setAlignment(Alignment.LEFT);
            biaotis1.setVerticalAlignment(VerticalAlignment.CENTRE);
            WritableFont titles = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat title = new WritableCellFormat(titles);
            title.setAlignment(Alignment.LEFT);
            title.setVerticalAlignment(VerticalAlignment.CENTRE);
            title.setWrap(true);
            WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            WritableCellFormat cFormat1 = new WritableCellFormat(font1);
            cFormat1.setAlignment(Alignment.CENTRE);
            cFormat1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1.setBackground(Const.titleBackground_color);
            cFormat1.setWrap(true);
            WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat2 = new WritableCellFormat(font2);
            cFormat2.setAlignment(Alignment.CENTRE);
            cFormat2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2.setBackground(Const.textOuBackGround_color);
            cFormat2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2.setWrap(true);
            WritableFont font2_bold = new WritableFont(WritableFont.ARIAL, 10, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat2_bold = new WritableCellFormat(font2_bold);
            cFormat2_bold.setAlignment(Alignment.CENTRE);
            cFormat2_bold.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_bold.setBackground(Const.textOuBackGround_color);
            cFormat2_bold.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_bold.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_bold.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_bold.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_bold.setWrap(true);
            WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat3 = new WritableCellFormat(font3);
            cFormat3.setAlignment(Alignment.CENTRE);
            cFormat3.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3.setBackground(Const.textJiBackGround_color);
            cFormat3.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3.setWrap(true);
            WritableFont font3_bold = new WritableFont(WritableFont.ARIAL, 10, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat3_bold = new WritableCellFormat(font3_bold);
            cFormat3_bold.setAlignment(Alignment.CENTRE);
            cFormat3_bold.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_bold.setBackground(Const.textJiBackGround_color);
            cFormat3_bold.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_bold.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_bold.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_bold.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_bold.setWrap(true);
            List quest = this.c22Rank.getAllSchoolSubjectRank(teachUnit_s, examNum, gradeNum, teachUnit, subjectNum, studentType, type, source, fufen, jizhun, subCompose, islevel, userNum, subjectPermission);
            int size = quest.size();
            try {
                WritableSheet sheet = wwBook.createSheet(rpt_name2, 0);
                sheet.getSettings().setShowGridLines(false);
                try {
                    Label biaotou = new Label(0, 0, rpt_name2, biaotis1);
                    sheet.addCell(biaotou);
                    Label xinxi = new Label(0, 1, rptTitle2, title);
                    sheet.addCell(xinxi);
                    int ii = 0;
                    sheet.setRowView(1, Const.height_500);
                    sheet.mergeCells(0, 0, 17, 0);
                    sheet.mergeCells(0, 1, 17, 1);
                    sheet.mergeCells(0, 2, 0, 3);
                    if ("00".equals(teachUnit_s) && jizhun.equals("1")) {
                        sheet.mergeCells(1, 2, 1, 3);
                        ii = 1;
                    }
                    sheet.mergeCells(1 + ii, 2, 1 + ii, 3);
                    sheet.mergeCells(3 + ii, 2, size + 1 + ii, 2);
                    if ("00".equals(teachUnit_s)) {
                        Label banren = new Label(0, 2, "学校", cFormat1);
                        sheet.addCell(banren);
                        if (jizhun.equals("1")) {
                            Label banren1 = new Label(1, 2, "班级", cFormat1);
                            sheet.addCell(banren1);
                        }
                    } else {
                        Label banren2 = new Label(0, 2, "班级", cFormat1);
                        sheet.addCell(banren2);
                    }
                    Label a18 = new Label(1 + ii, 2, "参考人数", cFormat1);
                    sheet.addCell(a18);
                    Label a10 = new Label(2 + ii, 2, "总体评价", cFormat1);
                    sheet.addCell(a10);
                    Label a101 = new Label(2 + ii, 3, "总分", cFormat1);
                    sheet.addCell(a101);
                    Label a12 = new Label(3 + ii, 2, "学科评价", cFormat1);
                    sheet.addCell(a12);
                    for (int i = 0; i < size; i++) {
                        Label a121 = new Label(((3 + i) - 1) + ii, 3, ((Object[]) ((List) quest.get(i)).get(0))[2] + "", cFormat1);
                        sheet.addCell(a121);
                    }
                    int m = 0;
                    int n = 0;
                    int totao_school = 0;
                    for (int k = 0; k < quest.size(); k++) {
                        totao_school = ((List) quest.get(0)).size() > totao_school ? ((List) quest.get(0)).size() : totao_school;
                    }
                    for (int k2 = 0; k2 < quest.size(); k2++) {
                        List list1 = (List) quest.get(k2);
                        n += list1.size();
                        int i2 = 3 + (n * 1);
                        for (int i3 = 0; i3 < totao_school; i3++) {
                            if (i3 % 2 != 0) {
                                if (k2 == 0) {
                                    if ("00".equals(teachUnit_s) && jizhun.equals("1")) {
                                        Label b1 = new Label(0, 4 + i3, ((Object[]) list1.get(i3))[8] + "", cFormat2_bold);
                                        sheet.addCell(b1);
                                    }
                                    Label b12 = new Label(0 + ii, 4 + i3, ((Object[]) list1.get(i3))[4] + "", cFormat2_bold);
                                    sheet.addCell(b12);
                                    Label b2 = new Label(1 + ii, 4 + i3, ((Object[]) list1.get(i3))[5] + "", cFormat2);
                                    sheet.addCell(b2);
                                }
                                if (list1.size() >= totao_school || i3 < list1.size()) {
                                    Label b3 = new Label(k2 + 2 + ii, 4 + i3, new StringBuilder().append(((Object[]) list1.get(i3))[6]).append("").toString().equals("null") ? "" : ((Object[]) list1.get(i3))[6] + "", cFormat2);
                                    sheet.addCell(b3);
                                } else {
                                    Label b32 = new Label(k2 + 2 + ii, 4 + i3, "", cFormat2);
                                    sheet.addCell(b32);
                                }
                            } else {
                                if (k2 == 0) {
                                    if ("00".equals(teachUnit_s) && jizhun.equals("1")) {
                                        Label b13 = new Label(0, 4 + i3, ((Object[]) list1.get(i3))[8] + "", cFormat3_bold);
                                        sheet.addCell(b13);
                                    }
                                    Label b14 = new Label(0 + ii, 4 + i3, ((Object[]) list1.get(i3))[4] + "", cFormat3_bold);
                                    sheet.addCell(b14);
                                    Label b22 = new Label(1 + ii, 4 + i3, ((Object[]) list1.get(i3))[5] + "", cFormat3);
                                    sheet.addCell(b22);
                                }
                                if (list1.size() >= totao_school || i3 < list1.size()) {
                                    Label b33 = new Label(k2 + 2 + ii, 4 + i3, new StringBuilder().append(((Object[]) list1.get(i3))[6]).append("").toString().equals("null") ? "" : ((Object[]) list1.get(i3))[6] + "", cFormat3);
                                    sheet.addCell(b33);
                                } else {
                                    Label b34 = new Label(k2 + 2 + ii, 4 + i3, "", cFormat3);
                                    sheet.addCell(b34);
                                }
                            }
                        }
                        m += list1.size();
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                wwBook.write();
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response = ServletActionContext.getResponse();
                            response.reset();
                            ServletOutputStream outputStream = response.getOutputStream();
                            String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName2 = loadFileName.replace("+", " ");
                            response.setContentType("Content-type: applicationnd.ms-excel");
                            response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xls");
                            response.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte = new byte[1024];
                            FileInputStream in = new FileInputStream(excelFile);
                            while (true) {
                                int n2 = in.read(tempByte);
                                if (n2 == -1) {
                                    break;
                                }
                                try {
                                    outputStream.write(tempByte, 0, n2);
                                } catch (Exception e2) {
                                    this.log.error("保存未成功", e2);
                                }
                            }
                            outputStream.flush();
                            outputStream.close();
                            in.close();
                        }
                    } catch (WriteException e3) {
                        e3.printStackTrace();
                    }
                }
            } catch (Exception e4) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response2 = ServletActionContext.getResponse();
                            response2.reset();
                            ServletOutputStream outputStream2 = response2.getOutputStream();
                            String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName4 = loadFileName3.replace("+", " ");
                            response2.setContentType("Content-type: applicationnd.ms-excel");
                            response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xls");
                            response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte2 = new byte[1024];
                            FileInputStream in2 = new FileInputStream(excelFile);
                            while (true) {
                                int n3 = in2.read(tempByte2);
                                if (n3 == -1) {
                                    break;
                                }
                                try {
                                    outputStream2.write(tempByte2, 0, n3);
                                } catch (Exception e5) {
                                    this.log.error("保存未成功", e5);
                                }
                            }
                            outputStream2.flush();
                            outputStream2.close();
                            in2.close();
                        }
                    } catch (WriteException e6) {
                        e6.printStackTrace();
                    }
                }
            } catch (Throwable th) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response3 = ServletActionContext.getResponse();
                            response3.reset();
                            ServletOutputStream outputStream3 = response3.getOutputStream();
                            String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName6 = loadFileName5.replace("+", " ");
                            response3.setContentType("Content-type: applicationnd.ms-excel");
                            response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xls");
                            response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte3 = new byte[1024];
                            FileInputStream in3 = new FileInputStream(excelFile);
                            while (true) {
                                int n4 = in3.read(tempByte3);
                                if (n4 == -1) {
                                    break;
                                }
                                try {
                                    outputStream3.write(tempByte3, 0, n4);
                                } catch (Exception e7) {
                                    this.log.error("保存未成功", e7);
                                }
                            }
                            outputStream3.flush();
                            outputStream3.close();
                            in3.close();
                        }
                    } catch (WriteException e8) {
                        e8.printStackTrace();
                        throw th;
                    }
                }
                throw th;
            }
        } catch (Exception e9) {
            e9.printStackTrace();
        }
        return null;
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String t15UnstandardScribble(Map<String, String> map, String subjectNum, String rpt_name, String examNum, String studentId, String studentType, String rptTitle, String isSaveWrite, String dirPath, String userNum, String gradeName, String className, String imgRoot, String agent) {
        String gradeNum = map.get(Const.EXPORTREPORT_gradeNum);
        String schoolNum = map.get(Const.EXPORTREPORT_schoolNum);
        String classNum = map.get(Const.EXPORTREPORT_classNum);
        String rptTitle2 = this.sp.getHeaderStr(examNum, subjectNum, gradeNum, schoolNum, classNum, studentId, studentType, true, true, false, false, false, true, false, true, false, false, false, false, false, true, false, "0", "0");
        String folderPath = "ExportFolder/reportExcel" + userNum;
        String str = "reportExcel" + userNum;
        String str2 = "reportExcel" + userNum;
        String excelName = (null == gradeName || "".equals(gradeName)) ? rpt_name + "_" + gradeNum : rpt_name + "_" + gradeName;
        if (null != classNum && !"".equals(classNum) && !classNum.contains(Const.STRING_SEPERATOR)) {
            excelName = (null == className || "".equals(className)) ? excelName + "_" + classNum : excelName + "_" + className;
        }
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        try {
            WritableWorkbook wwBook = Workbook.createWorkbook(excelFile);
            WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
            biaotis1.setAlignment(Alignment.LEFT);
            biaotis1.setVerticalAlignment(VerticalAlignment.CENTRE);
            WritableFont titles = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat title = new WritableCellFormat(titles);
            title.setAlignment(Alignment.LEFT);
            title.setVerticalAlignment(VerticalAlignment.CENTRE);
            title.setWrap(true);
            WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat1 = new WritableCellFormat(font1);
            cFormat1.setAlignment(Alignment.CENTRE);
            cFormat1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1.setBackground(Const.titleBackground_color);
            cFormat1.setWrap(true);
            WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat2 = new WritableCellFormat(font2);
            cFormat2.setAlignment(Alignment.CENTRE);
            cFormat2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2.setBackground(Const.textOuBackGround_color);
            cFormat2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2.setWrap(true);
            WritableFont font2_bold = new WritableFont(WritableFont.ARIAL, 10, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat2_bold = new WritableCellFormat(font2_bold);
            cFormat2_bold.setAlignment(Alignment.CENTRE);
            cFormat2_bold.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_bold.setBackground(Const.textOuBackGround_color);
            cFormat2_bold.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_bold.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_bold.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_bold.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_bold.setWrap(true);
            WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat3 = new WritableCellFormat(font3);
            cFormat3.setAlignment(Alignment.CENTRE);
            cFormat3.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3.setBackground(Const.textJiBackGround_color);
            cFormat3.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3.setWrap(true);
            WritableFont font3_bold = new WritableFont(WritableFont.ARIAL, 10, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat3_bold = new WritableCellFormat(font3_bold);
            cFormat3_bold.setAlignment(Alignment.CENTRE);
            cFormat3_bold.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_bold.setBackground(Const.textJiBackGround_color);
            cFormat3_bold.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_bold.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_bold.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_bold.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_bold.setWrap(true);
            List<Map<String, Object>> quest = this.t15Service.getUnstandardScrbCount(map);
            try {
                WritableSheet sheet = wwBook.createSheet(rpt_name, 0);
                sheet.getSettings().setShowGridLines(false);
                try {
                    Label biaotou = new Label(0, 0, rpt_name, biaotis1);
                    sheet.addCell(biaotou);
                    Label xinxi = new Label(0, 1, rptTitle2, title);
                    sheet.addCell(xinxi);
                    sheet.setRowView(1, Const.height_500);
                    sheet.mergeCells(0, 0, 17, 0);
                    sheet.mergeCells(0, 1, 17, 1);
                    sheet.mergeCells(0, 3 + quest.size(), 17, 3 + quest.size());
                    sheet.mergeCells(0, 3 + quest.size() + 1, 17, 3 + quest.size() + 1);
                    if (schoolNum == null || schoolNum.equals("null") || schoolNum.equals("")) {
                        schoolNum = "allschool";
                    }
                    if (schoolNum.equals("allschool")) {
                        Label banren = new Label(0, 2, "学校", cFormat1);
                        sheet.addCell(banren);
                    } else {
                        Label banren2 = new Label(0, 2, "班级", cFormat1);
                        sheet.addCell(banren2);
                    }
                    Label a18 = new Label(1, 2, "人数", cFormat1);
                    sheet.addCell(a18);
                    Label a10 = new Label(2, 2, "个数", cFormat1);
                    sheet.addCell(a10);
                    for (int k = 0; k < quest.size(); k++) {
                        Map<String, Object> data = quest.get(k);
                        if (k % 2 != 0) {
                            Label b1 = new Label(0, 3 + k, data.get("name") + "", cFormat2_bold);
                            sheet.addCell(b1);
                            Label b2 = new Label(1, 3 + k, data.get("s_count") + "", cFormat2);
                            sheet.addCell(b2);
                            Label b3 = new Label(2, 3 + k, data.get("q_count") + "", cFormat2);
                            sheet.addCell(b3);
                        } else {
                            Label b12 = new Label(0, 3 + k, data.get("name") + "", cFormat3_bold);
                            sheet.addCell(b12);
                            Label b22 = new Label(1, 3 + k, data.get("s_count") + "", cFormat3);
                            sheet.addCell(b22);
                            Label b32 = new Label(2, 3 + k, data.get("q_count") + "", cFormat3);
                            sheet.addCell(b32);
                        }
                    }
                    Label zhushi1 = new Label(0, 3 + quest.size(), "注：1．不规范填涂是指学生未按“涂满涂黑”的规范要求填涂，应注意养成规范填涂的习惯。", title);
                    sheet.addCell(zhushi1);
                    Label zhushi2 = new Label(0, 3 + quest.size() + 1, "       2．本统计包括两种情形：（1）裁切正常，最大填涂比低于75%，必需关注!（2）裁切不正常，导致最大 填涂比低于75%，无需关注!", title);
                    sheet.addCell(zhushi2);
                } catch (Exception e) {
                    e.printStackTrace();
                }
                wwBook.write();
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response = ServletActionContext.getResponse();
                            response.reset();
                            ServletOutputStream outputStream = response.getOutputStream();
                            String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName2 = loadFileName.replace("+", " ");
                            response.setContentType("Content-type: applicationnd.ms-excel");
                            response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xls");
                            response.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte = new byte[1024];
                            FileInputStream in = new FileInputStream(excelFile);
                            while (true) {
                                int n = in.read(tempByte);
                                if (n == -1) {
                                    break;
                                }
                                try {
                                    outputStream.write(tempByte, 0, n);
                                } catch (Exception e2) {
                                    this.log.error("保存未成功", e2);
                                }
                            }
                            outputStream.flush();
                            outputStream.close();
                            in.close();
                        }
                    } catch (WriteException e3) {
                        e3.printStackTrace();
                    }
                }
            } catch (Exception e4) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response2 = ServletActionContext.getResponse();
                            response2.reset();
                            ServletOutputStream outputStream2 = response2.getOutputStream();
                            String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName4 = loadFileName3.replace("+", " ");
                            response2.setContentType("Content-type: applicationnd.ms-excel");
                            response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xls");
                            response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte2 = new byte[1024];
                            FileInputStream in2 = new FileInputStream(excelFile);
                            while (true) {
                                int n2 = in2.read(tempByte2);
                                if (n2 == -1) {
                                    break;
                                }
                                try {
                                    outputStream2.write(tempByte2, 0, n2);
                                } catch (Exception e5) {
                                    this.log.error("保存未成功", e5);
                                }
                            }
                            outputStream2.flush();
                            outputStream2.close();
                            in2.close();
                        }
                    } catch (WriteException e6) {
                        e6.printStackTrace();
                    }
                }
            } catch (Throwable th) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response3 = ServletActionContext.getResponse();
                            response3.reset();
                            ServletOutputStream outputStream3 = response3.getOutputStream();
                            String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName6 = loadFileName5.replace("+", " ");
                            response3.setContentType("Content-type: applicationnd.ms-excel");
                            response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xls");
                            response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte3 = new byte[1024];
                            FileInputStream in3 = new FileInputStream(excelFile);
                            while (true) {
                                int n3 = in3.read(tempByte3);
                                if (n3 == -1) {
                                    break;
                                }
                                try {
                                    outputStream3.write(tempByte3, 0, n3);
                                } catch (Exception e7) {
                                    this.log.error("保存未成功", e7);
                                }
                            }
                            outputStream3.flush();
                            outputStream3.close();
                            in3.close();
                        }
                    } catch (WriteException e8) {
                        e8.printStackTrace();
                        throw th;
                    }
                }
                throw th;
            }
        } catch (Exception e9) {
            e9.printStackTrace();
        }
        return null;
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String t16studentExamMonitor(String areaval, String examNum, String gradeNum, String schoolNum, String schoolName, String subjectNum, String classNum, String studentId, String studentType, String type, String source, String rpt_name, String dirPath, String userNum, String gradeName, String className, String imgRoot, String agent, String monitor, String isSaveWrite, String subCompose, String islevel, String fufen, String minRank, String maxRank, String minRange, String maxRange, String getDataType) {
        String rptTitle = this.sp.getHeaderStr(examNum, subjectNum, gradeNum, schoolNum, classNum, studentId, studentType, true, true, false, false, false, true, false, true, false, false, false, false, false, true, false, subCompose, fufen);
        String folderPath = "ExportFolder/reportExcel" + userNum;
        String str = "reportExcel" + userNum;
        String str2 = "reportExcel" + userNum;
        if (rpt_name == null || rpt_name.equals("")) {
            rpt_name = "学生历次考试监测_" + schoolName + "_" + gradeName + "_" + className;
        }
        String excelName = rpt_name;
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        try {
            WritableWorkbook wwBook = Workbook.createWorkbook(excelFile);
            WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
            biaotis1.setAlignment(Alignment.LEFT);
            biaotis1.setVerticalAlignment(VerticalAlignment.CENTRE);
            WritableFont titles = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat title = new WritableCellFormat(titles);
            title.setAlignment(Alignment.LEFT);
            title.setVerticalAlignment(VerticalAlignment.CENTRE);
            title.setWrap(true);
            WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            WritableCellFormat cFormat1 = new WritableCellFormat(font1);
            cFormat1.setAlignment(Alignment.CENTRE);
            cFormat1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1.setBackground(Const.titleBackground_color);
            cFormat1.setWrap(true);
            WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat2 = new WritableCellFormat(font2);
            cFormat2.setAlignment(Alignment.CENTRE);
            cFormat2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2.setBackground(Const.textOuBackGround_color);
            cFormat2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2.setWrap(true);
            NumberFormat nf = new NumberFormat("0.00");
            WritableCellFormat cFormat2_2 = new WritableCellFormat(font2, nf);
            cFormat2_2.setAlignment(Alignment.CENTRE);
            cFormat2_2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_2.setBackground(Const.textOuBackGround_color);
            cFormat2_2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_2.setWrap(true);
            WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat3 = new WritableCellFormat(font3);
            cFormat3.setAlignment(Alignment.CENTRE);
            cFormat3.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3.setBackground(Const.textJiBackGround_color);
            cFormat3.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3.setWrap(true);
            WritableCellFormat cFormat3_2 = new WritableCellFormat(font2, nf);
            cFormat3_2.setAlignment(Alignment.CENTRE);
            cFormat3_2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_2.setBackground(Const.textJiBackGround_color);
            cFormat3_2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_2.setWrap(true);
            new DecimalFormat("0.00");
            List<Map<String, Object>> quest = this.t16service.getStudentExamList(examNum, schoolNum, classNum, gradeNum, subjectNum, (String) null, type, source, studentType, subCompose, islevel, fufen, minRank, maxRank, minRange, maxRange, getDataType);
            try {
                try {
                    WritableSheet sheet = wwBook.createSheet(rpt_name, 0);
                    sheet.getSettings().setShowGridLines(false);
                    try {
                        Label biaotou = new Label(0, 0, rpt_name, biaotis1);
                        sheet.addCell(biaotou);
                        Label xinxi = new Label(0, 1, rptTitle, title);
                        sheet.addCell(xinxi);
                        sheet.setRowView(1, Const.height_500);
                        sheet.mergeCells(0, 0, 17, 0);
                        sheet.mergeCells(0, 1, 17, 1);
                        sheet.mergeCells(0, 2, 0, 3);
                        sheet.mergeCells(1, 2, 1, 3);
                        sheet.mergeCells(2, 2, 2, 3);
                        sheet.mergeCells(3, 2, 3, 3);
                        sheet.setColumnView(0, 20);
                        sheet.setColumnView(3, 40);
                        if (quest.size() > 0) {
                            String[] subjects = (quest.get(0).get("subjectname") + "").split(Const.STRING_SEPERATOR);
                            examNum.substring(0, examNum.length() - 1).split(Const.STRING_SEPERATOR);
                            int c_exam = Integer.parseInt(this.t16service.getExamCountallclass(examNum, gradeNum, subjectNum, classNum, studentType, source, type, subCompose, islevel, fufen, schoolNum));
                            for (int i = 0; i < subjects.length; i++) {
                                sheet.mergeCells(4 + (2 * i), 2, 5 + (2 * i), 2);
                                Label a = new Label(4 + (2 * i), 2, subjects[i], cFormat1);
                                sheet.addCell(a);
                                Label a2 = new Label(4 + (2 * i), 3, "原始分", cFormat1);
                                sheet.addCell(a2);
                                if (monitor != null && monitor.equals("standard")) {
                                    Label a3 = new Label(5 + (2 * i), 3, "标准分", cFormat1);
                                    sheet.addCell(a3);
                                } else if (monitor != null && monitor.equals("percent")) {
                                    Label a32 = new Label(5 + (2 * i), 3, "百分等级分", cFormat1);
                                    sheet.addCell(a32);
                                } else if (monitor != null && monitor.equals("gradeRank")) {
                                    Label a33 = new Label(5 + (2 * i), 3, "年级排名", cFormat1);
                                    sheet.addCell(a33);
                                }
                            }
                            Label a1 = new Label(0, 2, "学号", cFormat1);
                            sheet.addCell(a1);
                            Label a22 = new Label(1, 2, "姓名", cFormat1);
                            sheet.addCell(a22);
                            Label a34 = new Label(2, 2, "行政班", cFormat1);
                            sheet.addCell(a34);
                            Label a4 = new Label(3, 2, "考试", cFormat1);
                            sheet.addCell(a4);
                            String stuId = "";
                            for (int k = 0; k < quest.size(); k++) {
                                Map<String, Object> data = quest.get(k);
                                if (k % 2 != 0) {
                                    if (!stuId.equals(data.get("studentid") + "")) {
                                        sheet.mergeCells(0, 4 + k, 0, 3 + k + c_exam);
                                        Label b1 = new Label(0, 4 + k, data.get("studentnum") + "", cFormat2);
                                        sheet.addCell(b1);
                                        sheet.mergeCells(1, 4 + k, 1, 3 + k + c_exam);
                                        Label b2 = new Label(1, 4 + k, data.get("studentname") + "", cFormat2);
                                        sheet.addCell(b2);
                                        sheet.mergeCells(2, 4 + k, 2, 3 + k + c_exam);
                                        Label b3 = new Label(2, 4 + k, data.get("classname") + "", cFormat2);
                                        sheet.addCell(b3);
                                    }
                                    Label b4 = new Label(3, 4 + k, data.get("examname") + "", cFormat2);
                                    sheet.addCell(b4);
                                    String[] totalscores = (data.get("totalscore") + "").split(Const.STRING_SEPERATOR);
                                    String[] standardScore = (data.get("standardscore") + "").split(Const.STRING_SEPERATOR);
                                    String[] schoolRanks = (data.get("schoolrank") + "").split(Const.STRING_SEPERATOR);
                                    String[] gradeRanks = (data.get("graderanking") + "").split(Const.STRING_SEPERATOR);
                                    for (int j = 0; j < totalscores.length; j++) {
                                        if ((totalscores[j] + "").equals(" ")) {
                                            sheet.addCell(new Label(4 + (2 * j), 4 + k, totalscores[j] + "", cFormat2));
                                        } else {
                                            sheet.addCell(new Number(4 + (2 * j), 4 + k, Double.valueOf(totalscores[j] + "").doubleValue(), cFormat2));
                                        }
                                        if (monitor == null || !monitor.equals("standard")) {
                                            if (monitor == null || !monitor.equals("percent")) {
                                                if (monitor != null && monitor.equals("gradeRank")) {
                                                    if ((gradeRanks[j] + "").equals(" ")) {
                                                        sheet.addCell(new Label(5 + (2 * j), 4 + k, gradeRanks[j] + "", cFormat2));
                                                    } else {
                                                        sheet.addCell(new Number(5 + (2 * j), 4 + k, Integer.parseInt(gradeRanks[j] + ""), cFormat2));
                                                    }
                                                }
                                            } else if ((schoolRanks[j] + "").equals(" ")) {
                                                sheet.addCell(new Label(5 + (2 * j), 4 + k, schoolRanks[j] + "", cFormat2));
                                            } else {
                                                sheet.addCell(new Number(5 + (2 * j), 4 + k, Double.valueOf(schoolRanks[j] + "").doubleValue(), cFormat2_2));
                                            }
                                        } else if ((standardScore[j] + "").equals(" ")) {
                                            sheet.addCell(new Label(5 + (2 * j), 4 + k, standardScore[j] + "", cFormat2));
                                        } else {
                                            sheet.addCell(new Number(5 + (2 * j), 4 + k, Double.valueOf(standardScore[j] + "").doubleValue(), cFormat2_2));
                                        }
                                    }
                                } else {
                                    if (!stuId.equals(data.get("studentid") + "")) {
                                        sheet.mergeCells(0, 4 + k, 0, 3 + k + c_exam);
                                        Label b12 = new Label(0, 4 + k, data.get("studentnum") + "", cFormat3);
                                        sheet.addCell(b12);
                                        sheet.mergeCells(1, 4 + k, 1, 3 + k + c_exam);
                                        Label b22 = new Label(1, 4 + k, data.get("studentname") + "", cFormat3);
                                        sheet.addCell(b22);
                                        sheet.mergeCells(2, 4 + k, 2, 3 + k + c_exam);
                                        Label b32 = new Label(2, 4 + k, data.get("classname") + "", cFormat3);
                                        sheet.addCell(b32);
                                    }
                                    Label b42 = new Label(3, 4 + k, data.get("examname") + "", cFormat3);
                                    sheet.addCell(b42);
                                    String[] totalscores2 = (data.get("totalscore") + "").split(Const.STRING_SEPERATOR);
                                    String[] standardScore2 = (data.get("standardscore") + "").split(Const.STRING_SEPERATOR);
                                    String[] schoolRanks2 = (data.get("schoolrank") + "").split(Const.STRING_SEPERATOR);
                                    String[] gradeRanks2 = (data.get("graderanking") + "").split(Const.STRING_SEPERATOR);
                                    for (int j2 = 0; j2 < totalscores2.length; j2++) {
                                        if ((totalscores2[j2] + "").equals(" ")) {
                                            sheet.addCell(new Label(4 + (2 * j2), 4 + k, totalscores2[j2] + "", cFormat3));
                                        } else {
                                            sheet.addCell(new Number(4 + (2 * j2), 4 + k, Double.valueOf(totalscores2[j2] + "").doubleValue(), cFormat3));
                                        }
                                        if (monitor == null || !monitor.equals("standard")) {
                                            if (monitor == null || !monitor.equals("percent")) {
                                                if (monitor != null && monitor.equals("gradeRank")) {
                                                    if ((gradeRanks2[j2] + "").equals(" ")) {
                                                        sheet.addCell(new Label(5 + (2 * j2), 4 + k, gradeRanks2[j2] + "", cFormat3));
                                                    } else {
                                                        sheet.addCell(new Number(5 + (2 * j2), 4 + k, Integer.parseInt(gradeRanks2[j2] + ""), cFormat3));
                                                    }
                                                }
                                            } else if ((schoolRanks2[j2] + "").equals(" ")) {
                                                sheet.addCell(new Label(5 + (2 * j2), 4 + k, schoolRanks2[j2] + "", cFormat3));
                                            } else {
                                                sheet.addCell(new Number(5 + (2 * j2), 4 + k, Double.valueOf(schoolRanks2[j2] + "").doubleValue(), cFormat3_2));
                                            }
                                        } else if ((standardScore2[j2] + "").equals(" ")) {
                                            sheet.addCell(new Label(5 + (2 * j2), 4 + k, standardScore2[j2] + "", cFormat3));
                                        } else {
                                            sheet.addCell(new Number(5 + (2 * j2), 4 + k, Double.valueOf(standardScore2[j2] + "").doubleValue(), cFormat3_2));
                                        }
                                    }
                                }
                                stuId = data.get("studentid") + "";
                            }
                        } else {
                            Label nodata = new Label(0, 2, "数据为空", title);
                            sheet.addCell(nodata);
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    wwBook.write();
                    if (wwBook != null) {
                        try {
                            wwBook.close();
                            if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                                HttpServletResponse response = ServletActionContext.getResponse();
                                response.reset();
                                ServletOutputStream outputStream = response.getOutputStream();
                                String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                String loadFileName2 = loadFileName.replace("+", " ");
                                response.setContentType("Content-type: applicationnd.ms-excel");
                                response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xls");
                                response.setHeader("Content-length", String.valueOf(excelFile.length()));
                                byte[] tempByte = new byte[1024];
                                FileInputStream in = new FileInputStream(excelFile);
                                while (true) {
                                    int n = in.read(tempByte);
                                    if (n == -1) {
                                        break;
                                    }
                                    try {
                                        outputStream.write(tempByte, 0, n);
                                    } catch (Exception e2) {
                                        this.log.error("保存未成功", e2);
                                    }
                                }
                                outputStream.flush();
                                outputStream.close();
                                in.close();
                            }
                        } catch (WriteException e3) {
                            e3.printStackTrace();
                        }
                    }
                } catch (Throwable th) {
                    if (wwBook != null) {
                        try {
                            wwBook.close();
                            if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                                HttpServletResponse response2 = ServletActionContext.getResponse();
                                response2.reset();
                                ServletOutputStream outputStream2 = response2.getOutputStream();
                                String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                String loadFileName4 = loadFileName3.replace("+", " ");
                                response2.setContentType("Content-type: applicationnd.ms-excel");
                                response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xls");
                                response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                                byte[] tempByte2 = new byte[1024];
                                FileInputStream in2 = new FileInputStream(excelFile);
                                while (true) {
                                    int n2 = in2.read(tempByte2);
                                    if (n2 == -1) {
                                        break;
                                    }
                                    try {
                                        outputStream2.write(tempByte2, 0, n2);
                                    } catch (Exception e4) {
                                        this.log.error("保存未成功", e4);
                                    }
                                }
                                outputStream2.flush();
                                outputStream2.close();
                                in2.close();
                            }
                        } catch (WriteException e5) {
                            e5.printStackTrace();
                            throw th;
                        }
                    }
                    throw th;
                }
            } catch (Exception e6) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response3 = ServletActionContext.getResponse();
                            response3.reset();
                            ServletOutputStream outputStream3 = response3.getOutputStream();
                            String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName6 = loadFileName5.replace("+", " ");
                            response3.setContentType("Content-type: applicationnd.ms-excel");
                            response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xls");
                            response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte3 = new byte[1024];
                            FileInputStream in3 = new FileInputStream(excelFile);
                            while (true) {
                                int n3 = in3.read(tempByte3);
                                if (n3 == -1) {
                                    break;
                                }
                                try {
                                    outputStream3.write(tempByte3, 0, n3);
                                } catch (Exception e7) {
                                    this.log.error("保存未成功", e7);
                                }
                            }
                            outputStream3.flush();
                            outputStream3.close();
                            in3.close();
                        }
                    } catch (WriteException e8) {
                        e8.printStackTrace();
                    }
                }
            }
        } catch (Exception e9) {
            e9.printStackTrace();
        }
        return null;
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String c27studentExamMonitor(String areaval, String examNum, String gradeNum, String schoolNum, String schoolName, String subjectNum, String classNum, String studentId, String studentType, String type, String source, String rpt_name, String dirPath, String userNum, String gradeName, String className, String imgRoot, String agent, String monitor, String isSaveWrite, String subCompose, String islevel, String fufen) {
        String rptTitle = this.sp.getHeaderStr(examNum, subjectNum, gradeNum, schoolNum, classNum, studentId, studentType, true, true, false, false, false, true, false, true, false, false, false, false, false, true, false, subCompose, fufen);
        String folderPath = "ExportFolder/reportExcel" + userNum;
        String str = "reportExcel" + userNum;
        String str2 = "reportExcel" + userNum;
        if (rpt_name == null || rpt_name.equals("")) {
            rpt_name = "学生历次考试监测_" + schoolName + "_" + gradeName + "_" + className;
        }
        String excelName = rpt_name;
        String excelName2 = (null == gradeName || "".equals(gradeName)) ? excelName + "_" + gradeNum : excelName + "_" + gradeName;
        if (null != classNum && !"".equals(classNum)) {
            excelName2 = (null == className || "".equals(className)) ? excelName2 + "_" + classNum : excelName2 + "_" + className;
        }
        String[] monitors = monitor.split(Const.STRING_SEPERATOR);
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFile(excelName2, dirPath, folderPath);
        try {
            WritableWorkbook wwBook = Workbook.createWorkbook(excelFile);
            WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
            biaotis1.setAlignment(Alignment.LEFT);
            biaotis1.setVerticalAlignment(VerticalAlignment.CENTRE);
            WritableFont titles = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat title = new WritableCellFormat(titles);
            title.setAlignment(Alignment.LEFT);
            title.setVerticalAlignment(VerticalAlignment.CENTRE);
            title.setWrap(true);
            WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            WritableCellFormat cFormat1 = new WritableCellFormat(font1);
            cFormat1.setAlignment(Alignment.CENTRE);
            cFormat1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1.setBackground(Const.titleBackground_color);
            cFormat1.setWrap(true);
            WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat2 = new WritableCellFormat(font2);
            cFormat2.setAlignment(Alignment.CENTRE);
            cFormat2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2.setBackground(Const.textOuBackGround_color);
            cFormat2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2.setWrap(true);
            NumberFormat nf = new NumberFormat("0.00");
            WritableCellFormat cFormat2_2 = new WritableCellFormat(font2, nf);
            cFormat2_2.setAlignment(Alignment.CENTRE);
            cFormat2_2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_2.setBackground(Const.textOuBackGround_color);
            cFormat2_2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_2.setWrap(true);
            WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat3 = new WritableCellFormat(font3);
            cFormat3.setAlignment(Alignment.CENTRE);
            cFormat3.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3.setBackground(Const.textJiBackGround_color);
            cFormat3.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3.setWrap(true);
            WritableCellFormat cFormat3_2 = new WritableCellFormat(font2, nf);
            cFormat3_2.setAlignment(Alignment.CENTRE);
            cFormat3_2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_2.setBackground(Const.textJiBackGround_color);
            cFormat3_2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_2.setWrap(true);
            DecimalFormat df02 = new DecimalFormat("0.00");
            List<Map<String, Object>> quest = this.c27.getData(examNum, gradeNum, subjectNum, schoolNum, classNum, studentType, source, type, subCompose, islevel, fufen, studentId);
            try {
                WritableSheet sheet = wwBook.createSheet(rpt_name, 0);
                sheet.getSettings().setShowGridLines(false);
                try {
                    Label biaotou = new Label(0, 0, rpt_name, biaotis1);
                    sheet.addCell(biaotou);
                    Label xinxi = new Label(0, 1, rptTitle, title);
                    sheet.addCell(xinxi);
                    sheet.setRowView(1, Const.height_500);
                    sheet.mergeCells(0, 0, 17, 0);
                    sheet.mergeCells(0, 1, 17, 1);
                    sheet.mergeCells(0, 2, 0, 3);
                    sheet.mergeCells(1, 2, 1, 3);
                    sheet.mergeCells(2, 2, 2, 3);
                    sheet.mergeCells(3, 2, 3, 3);
                    sheet.setColumnView(0, 20);
                    sheet.setColumnView(3, 40);
                    if (quest.size() > 0) {
                        String[] subjects = (quest.get(0).get("subjectname") + "").split(Const.STRING_SEPERATOR);
                        examNum.substring(0, examNum.length() - 1).split(Const.STRING_SEPERATOR);
                        int c_exam = Integer.parseInt(this.t16service.getCExamCount(examNum, gradeNum, subjectNum, classNum, studentType, source, type, subCompose, islevel, fufen));
                        int cells = "".equals(monitor) ? 0 : monitors.length;
                        Label a1 = new Label(0, 2, "学号", cFormat1);
                        sheet.addCell(a1);
                        Label a2 = new Label(1, 2, "姓名", cFormat1);
                        sheet.addCell(a2);
                        Label a3 = new Label(2, 2, "行政班", cFormat1);
                        sheet.addCell(a3);
                        Label a4 = new Label(3, 2, "考试", cFormat1);
                        sheet.addCell(a4);
                        Label a5 = new Label(4, 2, subjects[0], cFormat1);
                        sheet.addCell(a5);
                        sheet.mergeCells(4, 2, 4 + cells, 2);
                        Label a6 = new Label(4, 3, "原始分", cFormat1);
                        sheet.addCell(a6);
                        int index = 0;
                        for (int j = 0; j < cells; j++) {
                            if (monitors[j].equals("standard")) {
                                index++;
                                Label a7 = new Label(4 + index, 3, "标准分", cFormat1);
                                sheet.addCell(a7);
                            }
                            if (monitors[j].equals("subRank")) {
                                index++;
                                Label b6 = new Label(4 + index, 3, "百分等级", cFormat1);
                                sheet.addCell(b6);
                            }
                            if (monitors[j].equals("dengji")) {
                                index++;
                                Label a72 = new Label(4 + index, 3, "等级", cFormat1);
                                sheet.addCell(a72);
                            }
                            if (monitors[j].equals("classRank")) {
                                index++;
                                Label a73 = new Label(4 + index, 3, "班级排名", cFormat1);
                                sheet.addCell(a73);
                            }
                            if (monitors[j].equals("gradeRank")) {
                                index++;
                                Label a74 = new Label(4 + index, 3, "年级排名", cFormat1);
                                sheet.addCell(a74);
                            }
                            if (monitors[j].equals("areaRank")) {
                                index++;
                                Label a75 = new Label(4 + index, 3, "区排名", cFormat1);
                                sheet.addCell(a75);
                            }
                            if (monitors[j].equals("markAdvance")) {
                                index++;
                                Label a76 = new Label(4 + index, 3, "分数进步度", cFormat1);
                                sheet.addCell(a76);
                            }
                            if (monitors[j].equals("rankAdvance")) {
                                index++;
                                Label a77 = new Label(4 + index, 3, "排名进步度", cFormat1);
                                sheet.addCell(a77);
                            }
                            if (monitors[j].equals("standardAdvance")) {
                                index++;
                                Label a78 = new Label(4 + index, 3, "标准分进步度", cFormat1);
                                sheet.addCell(a78);
                            }
                        }
                        String stuId = "";
                        for (int k = 0; k < quest.size(); k++) {
                            Map<String, Object> data = quest.get(k);
                            if (k % 2 != 0) {
                                if (!stuId.equals(data.get("studentid") + "")) {
                                    sheet.mergeCells(0, 4 + k, 0, 3 + k + c_exam);
                                    Label b1 = new Label(0, 4 + k, data.get("studentnum") + "", cFormat2);
                                    sheet.addCell(b1);
                                    sheet.mergeCells(1, 4 + k, 1, 3 + k + c_exam);
                                    Label b2 = new Label(1, 4 + k, data.get("studentname") + "", cFormat2);
                                    sheet.addCell(b2);
                                    sheet.mergeCells(2, 4 + k, 2, 3 + k + c_exam);
                                    Label b3 = new Label(2, 4 + k, data.get("classname") + "", cFormat2);
                                    sheet.addCell(b3);
                                }
                                Label b4 = new Label(3, 4 + k, data.get("examname") + "", cFormat2);
                                sheet.addCell(b4);
                                if (data.get("totalscore").equals(" ")) {
                                    Label b5 = new Label(4, 4 + k, "", cFormat2);
                                    sheet.addCell(b5);
                                } else {
                                    Number b52 = new Number(4, 4 + k, Double.valueOf(data.get("totalscore") + "").doubleValue(), cFormat2);
                                    sheet.addCell(b52);
                                }
                                int index2 = 0;
                                for (int j2 = 0; j2 < cells; j2++) {
                                    if (monitors[j2].equals("standard")) {
                                        index2++;
                                        if (data.get("standardscore").equals(" ")) {
                                            Label b62 = new Label(4 + index2, 4 + k, "", cFormat2);
                                            sheet.addCell(b62);
                                        } else {
                                            Number b63 = new Number(4 + index2, 4 + k, Double.valueOf(data.get("standardscore") + "").doubleValue(), cFormat2);
                                            sheet.addCell(b63);
                                        }
                                    }
                                    if (monitors[j2].equals("subRank")) {
                                        index2++;
                                        if (data.get("schoolrank").equals(" ")) {
                                            Label b64 = new Label(4 + index2, 4 + k, "", cFormat2);
                                            sheet.addCell(b64);
                                        } else {
                                            Number b65 = new Number(4 + index2, 4 + k, Double.valueOf(data.get("schoolrank") + "").doubleValue(), cFormat2);
                                            sheet.addCell(b65);
                                        }
                                    }
                                    if (monitors[j2].equals("dengji")) {
                                        index2++;
                                        Label b66 = new Label(4 + index2, 4 + k, data.get("dengji") + "", cFormat2);
                                        sheet.addCell(b66);
                                    }
                                    if (monitors[j2].equals("classRank")) {
                                        index2++;
                                        if (data.get("classranking").equals(" ")) {
                                            Label b67 = new Label(4 + index2, 4 + k, "", cFormat2);
                                            sheet.addCell(b67);
                                        } else {
                                            Number b68 = new Number(4 + index2, 4 + k, Integer.valueOf(data.get("classranking") + "").intValue(), cFormat2);
                                            sheet.addCell(b68);
                                        }
                                    }
                                    if (monitors[j2].equals("gradeRank")) {
                                        index2++;
                                        if (data.get("graderanking").equals(" ")) {
                                            Label b69 = new Label(4 + index2, 4 + k, "", cFormat2);
                                            sheet.addCell(b69);
                                        } else {
                                            Number b610 = new Number(4 + index2, 4 + k, Integer.valueOf(data.get("graderanking") + "").intValue(), cFormat2);
                                            sheet.addCell(b610);
                                        }
                                    }
                                    if (monitors[j2].equals("areaRank")) {
                                        index2++;
                                        if (data.get("arearanking").equals(" ")) {
                                            Label b611 = new Label(4 + index2, 4 + k, "", cFormat2);
                                            sheet.addCell(b611);
                                        } else {
                                            Number b612 = new Number(4 + index2, 4 + k, Integer.valueOf(data.get("arearanking") + "").intValue(), cFormat2);
                                            sheet.addCell(b612);
                                        }
                                    }
                                    if (monitors[j2].equals("markAdvance")) {
                                        index2++;
                                        if (!stuId.equals(data.get("studentid") + "") || data.get("standardscore").equals(" ")) {
                                            Label b613 = new Label(4 + index2, 4 + k, "", cFormat2);
                                            sheet.addCell(b613);
                                        } else {
                                            Double lastScore = Double.valueOf(quest.get(k - 1).get("totalscore").equals(" ") ? "0" : quest.get(k - 1).get("totalscore") + "");
                                            Double totalScore = Double.valueOf(data.get("totalscore").equals(" ") ? "0" : data.get("totalscore") + "");
                                            Number b614 = new Number(4 + index2, 4 + k, totalScore.doubleValue() - lastScore.doubleValue(), cFormat2);
                                            sheet.addCell(b614);
                                        }
                                    }
                                    if (monitors[j2].equals("rankAdvance")) {
                                        index2++;
                                        if (!stuId.equals(data.get("studentid") + "") || data.get("standardscore").equals(" ") || quest.get(k - 1).get("graderanking").equals(" ")) {
                                            Label b615 = new Label(4 + index2, 4 + k, "", cFormat2);
                                            sheet.addCell(b615);
                                        } else {
                                            Integer lastRank = Integer.valueOf(quest.get(k - 1).get("graderanking").equals(" ") ? "0" : quest.get(k - 1).get("graderanking") + "");
                                            Integer gradeRank = Integer.valueOf(data.get("graderanking").equals(" ") ? "0" : data.get("graderanking") + "");
                                            Number b616 = new Number(4 + index2, 4 + k, lastRank.intValue() - gradeRank.intValue(), cFormat2);
                                            sheet.addCell(b616);
                                        }
                                    }
                                    if (monitors[j2].equals("standardAdvance")) {
                                        index2++;
                                        if (!stuId.equals(data.get("studentid") + "") || data.get("standardscore").equals(" ")) {
                                            Label b617 = new Label(4 + index2, 4 + k, "", cFormat2);
                                            sheet.addCell(b617);
                                        } else {
                                            Double lastStandard = Double.valueOf(quest.get(k - 1).get("standardscore").equals(" ") ? "0" : quest.get(k - 1).get("standardscore") + "");
                                            Double standardScore = Double.valueOf(data.get("standardscore").equals(" ") ? "0" : data.get("standardscore") + "");
                                            Number b618 = new Number(4 + index2, 4 + k, Double.valueOf(df02.format(standardScore.doubleValue() - lastStandard.doubleValue())).doubleValue(), cFormat2);
                                            sheet.addCell(b618);
                                        }
                                    }
                                }
                            } else {
                                if (!stuId.equals(data.get("studentid") + "")) {
                                    sheet.mergeCells(0, 4 + k, 0, 3 + k + c_exam);
                                    Label b12 = new Label(0, 4 + k, data.get("studentnum") + "", cFormat3);
                                    sheet.addCell(b12);
                                    sheet.mergeCells(1, 4 + k, 1, 3 + k + c_exam);
                                    Label b22 = new Label(1, 4 + k, data.get("studentname") + "", cFormat3);
                                    sheet.addCell(b22);
                                    sheet.mergeCells(2, 4 + k, 2, 3 + k + c_exam);
                                    Label b32 = new Label(2, 4 + k, data.get("classname") + "", cFormat3);
                                    sheet.addCell(b32);
                                }
                                Label b42 = new Label(3, 4 + k, data.get("examname") + "", cFormat3);
                                sheet.addCell(b42);
                                if (data.get("totalscore").equals(" ")) {
                                    Label b53 = new Label(4, 4 + k, "", cFormat3);
                                    sheet.addCell(b53);
                                } else {
                                    Number b54 = new Number(4, 4 + k, Double.valueOf(data.get("totalscore") + "").doubleValue(), cFormat3);
                                    sheet.addCell(b54);
                                }
                                int index3 = 0;
                                for (int j3 = 0; j3 < cells; j3++) {
                                    if (monitors[j3].equals("standard")) {
                                        index3++;
                                        if (data.get("standardscore").equals(" ")) {
                                            Label b619 = new Label(4 + index3, 4 + k, "", cFormat3);
                                            sheet.addCell(b619);
                                        } else {
                                            Number b620 = new Number(4 + index3, 4 + k, Double.valueOf(data.get("standardscore") + "").doubleValue(), cFormat3);
                                            sheet.addCell(b620);
                                        }
                                    }
                                    if (monitors[j3].equals("subRank")) {
                                        index3++;
                                        if (data.get("schoolrank").equals(" ")) {
                                            Label b621 = new Label(4 + index3, 4 + k, "", cFormat3);
                                            sheet.addCell(b621);
                                        } else {
                                            Number b622 = new Number(4 + index3, 4 + k, Double.valueOf(data.get("schoolrank") + "").doubleValue(), cFormat3);
                                            sheet.addCell(b622);
                                        }
                                    }
                                    if (monitors[j3].equals("dengji")) {
                                        index3++;
                                        Label b623 = new Label(4 + index3, 4 + k, data.get("dengji") + "", cFormat3);
                                        sheet.addCell(b623);
                                    }
                                    if (monitors[j3].equals("classRank")) {
                                        index3++;
                                        if (data.get("classranking").equals(" ")) {
                                            Label b624 = new Label(4 + index3, 4 + k, "", cFormat3);
                                            sheet.addCell(b624);
                                        } else {
                                            Number b625 = new Number(4 + index3, 4 + k, Integer.valueOf(data.get("classranking") + "").intValue(), cFormat3);
                                            sheet.addCell(b625);
                                        }
                                    }
                                    if (monitors[j3].equals("gradeRank")) {
                                        index3++;
                                        if (data.get("graderanking").equals(" ")) {
                                            Label b626 = new Label(4 + index3, 4 + k, "", cFormat3);
                                            sheet.addCell(b626);
                                        } else {
                                            Number b627 = new Number(4 + index3, 4 + k, Integer.valueOf(data.get("graderanking") + "").intValue(), cFormat3);
                                            sheet.addCell(b627);
                                        }
                                    }
                                    if (monitors[j3].equals("areaRank")) {
                                        index3++;
                                        if (data.get("arearanking").equals(" ")) {
                                            Label b628 = new Label(4 + index3, 4 + k, "", cFormat3);
                                            sheet.addCell(b628);
                                        } else {
                                            Number b629 = new Number(4 + index3, 4 + k, Integer.valueOf(data.get("arearanking") + "").intValue(), cFormat3);
                                            sheet.addCell(b629);
                                        }
                                    }
                                    if (monitors[j3].equals("markAdvance")) {
                                        index3++;
                                        if (!stuId.equals(data.get("studentid") + "") || data.get("standardscore").equals(" ")) {
                                            Label b630 = new Label(4 + index3, 4 + k, "", cFormat3);
                                            sheet.addCell(b630);
                                        } else {
                                            Double lastScore2 = Double.valueOf(quest.get(k - 1).get("totalscore").equals(" ") ? "0" : quest.get(k - 1).get("totalscore") + "");
                                            Double totalScore2 = Double.valueOf(data.get("totalscore").equals(" ") ? "0" : data.get("totalscore") + "");
                                            Number b631 = new Number(4 + index3, 4 + k, totalScore2.doubleValue() - lastScore2.doubleValue(), cFormat3);
                                            sheet.addCell(b631);
                                        }
                                    }
                                    if (monitors[j3].equals("rankAdvance")) {
                                        index3++;
                                        if (!stuId.equals(data.get("studentid") + "") || data.get("standardscore").equals(" ") || quest.get(k - 1).get("graderanking").equals(" ")) {
                                            Label b632 = new Label(4 + index3, 4 + k, "", cFormat3);
                                            sheet.addCell(b632);
                                        } else {
                                            Integer lastRank2 = Integer.valueOf(quest.get(k - 1).get("graderanking").equals(" ") ? "0" : quest.get(k - 1).get("graderanking") + "");
                                            Integer gradeRank2 = Integer.valueOf(data.get("graderanking").equals(" ") ? "0" : data.get("graderanking") + "");
                                            Number b633 = new Number(4 + index3, 4 + k, lastRank2.intValue() - gradeRank2.intValue(), cFormat3);
                                            sheet.addCell(b633);
                                        }
                                    }
                                    if (monitors[j3].equals("standardAdvance")) {
                                        index3++;
                                        if (!stuId.equals(data.get("studentid") + "") || data.get("standardscore").equals(" ")) {
                                            Label b634 = new Label(4 + index3, 4 + k, "", cFormat3);
                                            sheet.addCell(b634);
                                        } else {
                                            Double lastStandard2 = Double.valueOf(quest.get(k - 1).get("standardscore").equals(" ") ? "0" : quest.get(k - 1).get("standardscore") + "");
                                            Double standardScore2 = Double.valueOf(data.get("standardscore").equals(" ") ? "0" : data.get("standardscore") + "");
                                            Number b635 = new Number(4 + index3, 4 + k, Double.valueOf(df02.format(standardScore2.doubleValue() - lastStandard2.doubleValue())).doubleValue(), cFormat3);
                                            sheet.addCell(b635);
                                        }
                                    }
                                }
                            }
                            stuId = data.get("studentid") + "";
                        }
                    } else {
                        Label nodata = new Label(0, 2, "数据为空", title);
                        sheet.addCell(nodata);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                wwBook.write();
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response = ServletActionContext.getResponse();
                            response.reset();
                            ServletOutputStream outputStream = response.getOutputStream();
                            String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName2, "UTF-8") : new String(excelName2.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName2 = loadFileName.replace("+", " ");
                            response.setContentType("Content-type: applicationnd.ms-excel");
                            response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xls");
                            response.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte = new byte[1024];
                            FileInputStream in = new FileInputStream(excelFile);
                            while (true) {
                                int n = in.read(tempByte);
                                if (n == -1) {
                                    break;
                                }
                                try {
                                    outputStream.write(tempByte, 0, n);
                                } catch (Exception e2) {
                                    this.log.error("保存未成功", e2);
                                }
                            }
                            outputStream.flush();
                            outputStream.close();
                            in.close();
                        }
                    } catch (WriteException e3) {
                        e3.printStackTrace();
                    }
                }
            } catch (Exception e4) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response2 = ServletActionContext.getResponse();
                            response2.reset();
                            ServletOutputStream outputStream2 = response2.getOutputStream();
                            String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName2, "UTF-8") : new String(excelName2.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName4 = loadFileName3.replace("+", " ");
                            response2.setContentType("Content-type: applicationnd.ms-excel");
                            response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xls");
                            response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte2 = new byte[1024];
                            FileInputStream in2 = new FileInputStream(excelFile);
                            while (true) {
                                int n2 = in2.read(tempByte2);
                                if (n2 == -1) {
                                    break;
                                }
                                try {
                                    outputStream2.write(tempByte2, 0, n2);
                                } catch (Exception e5) {
                                    this.log.error("保存未成功", e5);
                                }
                            }
                            outputStream2.flush();
                            outputStream2.close();
                            in2.close();
                        }
                    } catch (WriteException e6) {
                        e6.printStackTrace();
                    }
                }
            } catch (Throwable th) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response3 = ServletActionContext.getResponse();
                            response3.reset();
                            ServletOutputStream outputStream3 = response3.getOutputStream();
                            String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName2, "UTF-8") : new String(excelName2.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName6 = loadFileName5.replace("+", " ");
                            response3.setContentType("Content-type: applicationnd.ms-excel");
                            response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xls");
                            response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte3 = new byte[1024];
                            FileInputStream in3 = new FileInputStream(excelFile);
                            while (true) {
                                int n3 = in3.read(tempByte3);
                                if (n3 == -1) {
                                    break;
                                }
                                try {
                                    outputStream3.write(tempByte3, 0, n3);
                                } catch (Exception e7) {
                                    this.log.error("保存未成功", e7);
                                }
                            }
                            outputStream3.flush();
                            outputStream3.close();
                            in3.close();
                        }
                    } catch (WriteException e8) {
                        e8.printStackTrace();
                        throw th;
                    }
                }
                throw th;
            }
        } catch (Exception e9) {
            e9.printStackTrace();
        }
        return null;
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String exportOneScoreTwoRate(String areaval, String examNum, String gradeNum, String schoolNum, String schoolName, String subjectNum, String classNum, String studentId, String studentType, String type, String source, String rpt_name, String dirPath, String userNum, String gradeName, String className, String imgRoot, String agent, String order, String isSaveWrite, String subCompose, String islevel, String fufen) {
        Map<String, String> map = new HashMap<>();
        map.put(Const.EXPORTREPORT_examNum, examNum);
        map.put(Const.EXPORTREPORT_gradeNum, gradeNum);
        map.put(Const.EXPORTREPORT_subjectNum, subjectNum);
        map.put(Const.EXPORTREPORT_schoolNum, schoolNum);
        map.put("source", source);
        map.put("type", type);
        map.put("fufen", fufen);
        map.put("order", order);
        String[] examArr = examNum.split(Const.STRING_SEPERATOR);
        String rptTitle = this.sp.getHeaderStr(examArr[0], subjectNum, gradeNum, schoolNum, classNum, studentId, studentType, false, true, true, false, false, false, false, false, false, false, false, false, false, false, false, subCompose, fufen);
        String folderPath = "ExportFolder/" + userNum + "/" + gradeName + "/";
        String str = "ExportFolder" + userNum;
        String excelName = (null == gradeName || "".equals(gradeName)) ? "班级一份两率_" + gradeNum : "班级一份两率_" + gradeName;
        File excelFile = getRptExcelFile(excelName, imgRoot, folderPath);
        String filePath = folderPath + excelName + ".xls";
        try {
            WritableWorkbook wwBook = Workbook.createWorkbook(excelFile);
            WritableSheet sheet = wwBook.createSheet("班级一份两率", 0);
            DateFormat df1 = new DateFormat("0.0%");
            WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
            biaotis1.setAlignment(Alignment.LEFT);
            biaotis1.setVerticalAlignment(VerticalAlignment.CENTRE);
            WritableFont titles = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat title = new WritableCellFormat(titles);
            title.setAlignment(Alignment.LEFT);
            title.setVerticalAlignment(VerticalAlignment.CENTRE);
            title.setWrap(true);
            WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            WritableCellFormat cFormat1 = new WritableCellFormat(font1);
            cFormat1.setAlignment(Alignment.CENTRE);
            cFormat1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1.setBackground(Const.titleBackground_color);
            cFormat1.setWrap(true);
            WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat2 = new WritableCellFormat(font2);
            cFormat2.setAlignment(Alignment.CENTRE);
            cFormat2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2.setBackground(Const.textOuBackGround_color);
            cFormat2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2.setWrap(true);
            WritableCellFormat cFormat2_0 = new WritableCellFormat(font2, df1);
            cFormat2_0.setAlignment(Alignment.CENTRE);
            cFormat2_0.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_0.setBackground(Const.textOuBackGround_color);
            cFormat2_0.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_0.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_0.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_0.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_0.setWrap(true);
            WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat3 = new WritableCellFormat(font3);
            cFormat3.setAlignment(Alignment.CENTRE);
            cFormat3.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3.setBackground(Const.textJiBackGround_color);
            cFormat3.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3.setWrap(true);
            WritableCellFormat cFormat3_0 = new WritableCellFormat(font3, df1);
            cFormat3_0.setAlignment(Alignment.CENTRE);
            cFormat3_0.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_0.setBackground(Const.textJiBackGround_color);
            cFormat3_0.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_0.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_0.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_0.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_0.setWrap(true);
            try {
                Label biaotou = new Label(0, 0, "班级一分两率", biaotis1);
                sheet.addCell(biaotou);
                Label xinxi = new Label(0, 1, rptTitle, title);
                sheet.addCell(xinxi);
                sheet.setRowView(1, Const.height_500);
                sheet.mergeCells(0, 0, 10, 0);
                sheet.mergeCells(0, 1, 10, 1);
                sheet.setColumnView(0, 40);
                sheet.setColumnView(3, 40);
                Label a1 = new Label(0, 2, "考试", cFormat1);
                sheet.addCell(a1);
                Label a2 = new Label(1, 2, "班级", cFormat1);
                sheet.addCell(a2);
                Label a3 = new Label(2, 2, "班主任", cFormat1);
                sheet.addCell(a3);
                Label a4 = new Label(3, 2, "任课教师", cFormat1);
                sheet.addCell(a4);
                Label a5 = new Label(4, 2, "参考人数", cFormat1);
                sheet.addCell(a5);
                Label a6 = new Label(5, 2, "满分", cFormat1);
                sheet.addCell(a6);
                Label a7 = new Label(6, 2, "平均分", cFormat1);
                sheet.addCell(a7);
                Label a8 = new Label(7, 2, "优秀人数", cFormat1);
                sheet.addCell(a8);
                Label a9 = new Label(8, 2, "优秀率", cFormat1);
                sheet.addCell(a9);
                Label a10 = new Label(9, 2, "及格人数", cFormat1);
                sheet.addCell(a10);
                Label a11 = new Label(10, 2, "及格率", cFormat1);
                sheet.addCell(a11);
                List<Map<String, Object>> quest = this.one.getData(map, "");
                for (int k = 0; k < quest.size(); k++) {
                    Map<String, Object> data = quest.get(k);
                    if (k % 2 != 0) {
                        Label b1 = new Label(0, 3 + k, data.get("examname") + "", cFormat2);
                        sheet.addCell(b1);
                        Label b2 = new Label(1, 3 + k, data.get("classname") + "", cFormat2);
                        sheet.addCell(b2);
                        Label b3 = new Label(2, 3 + k, data.get("teachername") + "", cFormat2);
                        sheet.addCell(b3);
                        Label b4 = new Label(3, 3 + k, data.get("rkjs") + "", cFormat2);
                        sheet.addCell(b4);
                        Number b5 = new Number(4, 3 + k, Convert.toInt(data.get("numofstudent")).intValue(), cFormat2);
                        sheet.addCell(b5);
                        Number b6 = new Number(5, 3 + k, Convert.toDouble(data.get("fullscore")).doubleValue(), cFormat2);
                        sheet.addCell(b6);
                        Number b7 = new Number(6, 3 + k, Convert.toDouble(data.get("average")).doubleValue(), cFormat2);
                        sheet.addCell(b7);
                        Number b8 = new Number(7, 3 + k, Convert.toInt(data.get("excellence")).intValue(), cFormat2);
                        sheet.addCell(b8);
                        Number b9 = new Number(8, 3 + k, Convert.toFloat(data.get("excellencerate")).floatValue() / 100.0f, cFormat2_0);
                        sheet.addCell(b9);
                        Number b10 = new Number(9, 3 + k, Convert.toInt(data.get("pass")).intValue(), cFormat2);
                        sheet.addCell(b10);
                        Number b11 = new Number(10, 3 + k, Convert.toFloat(data.get("passrate")).floatValue() / 100.0f, cFormat2_0);
                        sheet.addCell(b11);
                    } else {
                        Label b12 = new Label(0, 3 + k, data.get("examname") + "", cFormat3);
                        sheet.addCell(b12);
                        Label b22 = new Label(1, 3 + k, data.get("classname") + "", cFormat3);
                        sheet.addCell(b22);
                        Label b32 = new Label(2, 3 + k, data.get("teachername") + "", cFormat3);
                        sheet.addCell(b32);
                        Label b42 = new Label(3, 3 + k, data.get("rkjs") + "", cFormat3);
                        sheet.addCell(b42);
                        Number b52 = new Number(4, 3 + k, Convert.toInt(data.get("numofstudent")).intValue(), cFormat3);
                        sheet.addCell(b52);
                        Number b62 = new Number(5, 3 + k, Convert.toDouble(data.get("fullscore")).doubleValue(), cFormat3);
                        sheet.addCell(b62);
                        Number b72 = new Number(6, 3 + k, Convert.toDouble(data.get("average")).doubleValue(), cFormat3);
                        sheet.addCell(b72);
                        Number b82 = new Number(7, 3 + k, Convert.toInt(data.get("excellence")).intValue(), cFormat3);
                        sheet.addCell(b82);
                        Number b92 = new Number(8, 3 + k, Convert.toFloat(data.get("excellencerate")).floatValue() / 100.0f, cFormat3_0);
                        sheet.addCell(b92);
                        Number b102 = new Number(9, 3 + k, Convert.toInt(data.get("pass")).intValue(), cFormat3);
                        sheet.addCell(b102);
                        Number b112 = new Number(10, 3 + k, Convert.toFloat(data.get("passrate")).floatValue() / 100.0f, cFormat3_0);
                        sheet.addCell(b112);
                    }
                }
                if (quest.size() == 0) {
                    Label b13 = new Label(0, 2, "数据为空！", cFormat2);
                    sheet.addCell(b13);
                    sheet.mergeCells(0, 2, 10, 0);
                }
                wwBook.write();
                wwBook.close();
            } catch (Exception e) {
            }
        } catch (Exception e2) {
            e2.printStackTrace();
        }
        return filePath;
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String oneKeyexportOut_student(String rootPath, String schoolNum, String gradeNum, String classNum, String sex, String studentId, String studentName, String note, String aa, String position, String userId, String[] stuIds, String leiceng, String subjectCombineNum) {
        this.log.info("---导出学生-简版：--- " + userId + "---#######################查询数据-开始 ####################### ");
        List<Map<String, Object>> studentList = this.studentService.ExcelOut2(schoolNum, gradeNum, classNum, sex, studentId, studentName, note, aa, position, userId, stuIds, leiceng, subjectCombineNum);
        this.log.info("---导出学生-简版：--- " + userId + "---#######################查询数据-结束 ####################### ");
        String folderPath = "ExportFolder/export_excel_studentScore_" + userId;
        String excelName = Const.EXAM_EXPORT;
        if ("-1".equals(schoolNum)) {
            excelName = excelName + "_全部";
        }
        if (!"-1".equals(schoolNum)) {
            excelName = excelName + "_" + studentList.get(0).get("schoolName");
        }
        if (!"-1".equals(gradeNum)) {
            excelName = excelName + "_" + studentList.get(0).get("gradeName");
        }
        if (!"-1".equals(classNum)) {
            excelName = excelName + "_" + studentList.get(0).get("className");
        }
        String filePath = folderPath + "/" + (excelName + "_行政班学生信息") + ".xlsx";
        this.log.info("---导出学生-简版：--- " + userId + "---文件【" + filePath + "】#######################开始导出 ####################### ");
        FileUtil.del(rootPath + filePath);
        ExcelWriter writer = ExcelUtil.getWriter(rootPath + filePath);
        String[] header1 = {"基础信息"};
        String[] header2 = {"入学年份", "学校", "年级", "科类", "班级名称", "班级类型", "姓名", "ID号", "学号", "性别", "生源", "学生类型", "预置考号", "预置密码", "手机号", "学籍学校", "学籍班级", "家庭住址", "学生特长", "备注", "选考科目组合"};
        List<String> headerList1 = new ArrayList<>(Arrays.asList(header1));
        List<String> headerList2 = new ArrayList<>(Arrays.asList(header2));
        String[] nsz1 = new String[headerList1.size()];
        headerList1.toArray(nsz1);
        String[] nsz2 = new String[headerList2.size()];
        headerList2.toArray(nsz2);
        CollUtil.newArrayList(nsz1);
        List<String> rowHead2 = CollUtil.newArrayList(nsz2);
        writer.merge(rowHead2.size() - 1, "基础信息");
        writer.writeRow(rowHead2);
        writer.setCurrentRow(2);
        StyleSet styleSet = writer.getStyleSet();
        styleSet.setBorder(BorderStyle.NONE, IndexedColors.AUTOMATIC);
        writer.write(studentList);
        writer.close();
        this.log.info("---导出学生-简版：--- " + userId + "---文件【" + filePath + "】#######################导出结束 ####################### ");
        return filePath;
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String exportDetail(String examNum, String subjectNum, String gradeNum, String schoolNum, String subjectName, String gradeName, String rootPath, String loginUserNum, String agent, String type, String leiceng, String examinee) {
        String excelName;
        this.log.info("---导入分数-导出模板：--- " + loginUserNum + "---#######################查询数据-开始 ####################### ");
        List<Map<String, Object>> studentList = this.reportService.getStudent(examNum, subjectNum, gradeNum, schoolNum, leiceng, examinee);
        this.log.info("---导入分数-导出模板：--- " + loginUserNum + "---#######################查询数据-结束 ####################### ");
        String folderPath = "ExportFolder/detail" + loginUserNum + "/" + gradeName + "/" + subjectName + "/";
        String str = "ExportFolder" + loginUserNum;
        String excelName2 = (null == gradeName || "".equals(gradeName)) ? "模板_" + gradeNum : "模板_" + gradeName;
        if (null == subjectName || "".equals(subjectName)) {
            excelName = excelName2 + "_" + subjectNum;
        } else {
            excelName = excelName2 + "_" + subjectName;
        }
        String filePath = folderPath + (excelName + loginUserNum) + ".xlsx";
        this.log.info("---导入分数-导出模板：--- " + loginUserNum + "---文件【" + filePath + "】#######################开始导出 ####################### ");
        if ("1".equals(type)) {
            List<Define> defineList = this.reportService.getDefine(examNum, subjectNum, gradeNum, schoolNum);
            if (defineList.size() == 0) {
                return "该考试该年级该科目不存在双向细目表";
            }
            if (studentList.size() == 0) {
                return "该学校该年级下不存在学生";
            }
            List<Map<String, Object>> newList = new ArrayList<>();
            for (int i = 0; i < studentList.size(); i++) {
                Map<String, Object> sMap = studentList.get(i);
                Map<String, Object> newMap = new LinkedHashMap<>();
                newMap.put("学校名称*", sMap.get("schoolName"));
                newMap.put("年级*", sMap.get("gradeName"));
                newMap.put("ID号*", sMap.get(Const.EXPORTREPORT_studentId));
                newMap.put("考号*", sMap.get("examineeNum"));
                newMap.put("班级*", sMap.get("className"));
                newMap.put("姓名*", sMap.get("studentName"));
                newList.add(newMap);
            }
            ExcelWriter writer = ExcelUtil.getWriter(rootPath + filePath);
            String[] header1 = {"学校名称*", "年级*", "ID号*", "考号*", "班级*", "姓名*", "备注", "总分", "客观题选项*"};
            List<String> headerList1 = new ArrayList<>(Arrays.asList(header1));
            this.reportService.getSubject(examNum, gradeNum);
            for (int i2 = 0; i2 < defineList.size(); i2++) {
                headerList1.add("T" + defineList.get(i2).getQuestionNum());
            }
            String[] nsz1 = new String[headerList1.size()];
            headerList1.toArray(nsz1);
            System.out.println(Arrays.toString(nsz1));
            List<String> rowHead = CollUtil.newArrayList(nsz1);
            writer.writeRow(rowHead);
            writer.setCurrentRow(1);
            StyleSet styleSet = writer.getStyleSet();
            styleSet.setBorder(BorderStyle.NONE, IndexedColors.AUTOMATIC);
            writer.setColumnWidth(4, 15);
            writer.setColumnWidth(5, 15);
            writer.write(newList);
            writer.close();
        } else if ("2".equals(type)) {
            for (int i3 = 0; i3 < studentList.size(); i3++) {
                studentList.get(i3).put("科目", subjectName);
            }
            ExcelWriter writer2 = ExcelUtil.getWriter(rootPath + filePath);
            String[] header12 = {"序号", "学校名称", "年级", "班级", "考号", "ID号", "学生", "科目", "总分"};
            List<String> rowHead2 = CollUtil.newArrayList(header12);
            writer2.writeRow(rowHead2);
            writer2.setCurrentRow(1);
            StyleSet styleSet2 = writer2.getStyleSet();
            styleSet2.setBorder(BorderStyle.NONE, IndexedColors.AUTOMATIC);
            writer2.setColumnWidth(4, 15);
            writer2.setColumnWidth(5, 15);
            writer2.write(studentList);
            writer2.close();
        } else {
            ExcelWriter writer3 = ExcelUtil.getWriter(rootPath + filePath);
            String[] header13 = {"序号", "学校名称", "年级", "班级", "考号", "ID号", "学生"};
            String[] header2 = {"", "", "", "", "", "", "满分"};
            List<String> headerList12 = new ArrayList<>(Arrays.asList(header13));
            List<String> headerList2 = new ArrayList<>(Arrays.asList(header2));
            List<AjaxData> subList = this.reportService.getSubject(examNum, gradeNum);
            for (int i4 = 0; i4 < subList.size(); i4++) {
                headerList12.add(subList.get(i4).getName());
                headerList2.add(subList.get(i4).getExt1());
            }
            String[] nsz12 = new String[headerList12.size()];
            headerList12.toArray(nsz12);
            String[] nsz2 = new String[headerList2.size()];
            headerList2.toArray(nsz2);
            List<String> rowHead3 = CollUtil.newArrayList(nsz12);
            List<String> rowHead22 = CollUtil.newArrayList(nsz2);
            writer3.writeRow(rowHead3);
            writer3.writeRow(rowHead22);
            writer3.setCurrentRow(2);
            StyleSet styleSet3 = writer3.getStyleSet();
            styleSet3.setBorder(BorderStyle.NONE, IndexedColors.AUTOMATIC);
            writer3.setColumnWidth(4, 15);
            writer3.setColumnWidth(5, 15);
            writer3.write(studentList);
            writer3.close();
        }
        this.log.info("---导入分数-导出模板：--- " + loginUserNum + "---文件【" + filePath + "】#######################导出结束 ####################### ");
        return filePath;
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String t17knowledgeDefenlv(String examNum, String gradeNum, String schoolNum, String subjectNum, String classNum, String studentId, String studentType, String type, String source, String rpt_name, String dirPath, String userNum, String examName, String imgRoot, String agent, String isSaveWrite, String cexam, String subCompose, String islevel, String contrastObject, String contrast_s, String cUnit) {
        String folderPath = "ExportFolder/reportExcel" + userNum;
        String str = "reportExcel" + userNum;
        String str2 = "reportExcel" + userNum;
        String rptTitle = this.sp.getHeaderStr(examNum, subjectNum, gradeNum, schoolNum, classNum, studentId, studentType, true, true, false, false, false, true, false, true, false, false, false, false, false, true, false, subCompose, "0");
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFile(rpt_name, dirPath, folderPath);
        try {
            WritableWorkbook wwBook = Workbook.createWorkbook(excelFile);
            WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
            biaotis1.setAlignment(Alignment.LEFT);
            biaotis1.setVerticalAlignment(VerticalAlignment.CENTRE);
            WritableFont titles = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat title = new WritableCellFormat(titles);
            title.setAlignment(Alignment.LEFT);
            title.setVerticalAlignment(VerticalAlignment.CENTRE);
            title.setWrap(true);
            WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            WritableCellFormat cFormat1 = new WritableCellFormat(font1);
            cFormat1.setAlignment(Alignment.CENTRE);
            cFormat1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1.setBackground(Const.titleBackground_color);
            cFormat1.setWrap(true);
            WritableFont font_red = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat_red = new WritableCellFormat(font_red);
            cFormat_red.setAlignment(Alignment.LEFT);
            cFormat_red.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat_red.setBackground(Const.A6Text_color1);
            cFormat_red.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat_red.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat_red.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat_red.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat_red.setWrap(true);
            WritableFont font_orange = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat_orange = new WritableCellFormat(font_orange);
            cFormat_orange.setAlignment(Alignment.LEFT);
            cFormat_orange.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat_orange.setBackground(Const.A6Text_color2);
            cFormat_orange.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat_orange.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat_orange.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat_orange.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat_orange.setWrap(true);
            WritableFont font_yellow = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat_yellow = new WritableCellFormat(font_yellow);
            cFormat_yellow.setAlignment(Alignment.LEFT);
            cFormat_yellow.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat_yellow.setBackground(Const.A6Text_color3);
            cFormat_yellow.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat_yellow.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat_yellow.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat_yellow.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat_yellow.setWrap(true);
            WritableFont font_blue = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat_blue = new WritableCellFormat(font_blue);
            cFormat_blue.setAlignment(Alignment.LEFT);
            cFormat_blue.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat_blue.setBackground(Const.A6Text_color4);
            cFormat_blue.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat_blue.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat_blue.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat_blue.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat_blue.setWrap(true);
            WritableFont font = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat = new WritableCellFormat(font);
            cFormat.setAlignment(Alignment.LEFT);
            cFormat.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat.setWrap(true);
            new DecimalFormat("0.00");
            List<Map<String, Object>> quest = this.t17service.getKnowledgeDefenlvList(schoolNum, gradeNum, subjectNum, classNum, studentId, examNum, cexam, type, source, studentType, subCompose, islevel, contrastObject, contrast_s);
            try {
                WritableSheet sheet = wwBook.createSheet(rpt_name, 0);
                sheet.getSettings().setShowGridLines(true);
                try {
                    Label biaotou = new Label(0, 0, rpt_name, biaotis1);
                    sheet.addCell(biaotou);
                    Label xinxi = new Label(0, 1, rptTitle, title);
                    sheet.addCell(xinxi);
                    sheet.setRowView(1, Const.height_500);
                    sheet.mergeCells(0, 0, 17, 0);
                    sheet.mergeCells(0, 1, 17, 1);
                    sheet.mergeCells(0, 2, 0, 3);
                    sheet.mergeCells(1, 2, 1, 3);
                    sheet.setColumnView(0, 50);
                    String[] examNames = examName.split(Const.STRING_SEPERATOR);
                    int examLen = examNames.length;
                    int cloumns = 1;
                    if (contrastObject != null && !contrastObject.equals("")) {
                        cloumns = 2;
                    }
                    for (int i = 0; i < examLen; i++) {
                        if (contrastObject != null && !contrastObject.equals("")) {
                            sheet.mergeCells(2 + (cloumns * i), 2, 3 + (cloumns * i), 2);
                        }
                        sheet.setColumnView(2 + (cloumns * i), 14);
                        sheet.setColumnView(3 + (cloumns * i), 14);
                        Label a = new Label(2 + (cloumns * i), 2, "T" + (i + 1), cFormat1);
                        sheet.addCell(a);
                        Label a2 = new Label(2 + (cloumns * i), 3, "得分率(%)", cFormat1);
                        sheet.addCell(a2);
                        if (contrastObject != null && !contrastObject.equals("")) {
                            Label a3 = new Label(3 + (cloumns * i), 3, cUnit + "得分率(%)", cFormat1);
                            sheet.addCell(a3);
                        }
                    }
                    Label a1 = new Label(0, 2, "知识点", cFormat1);
                    sheet.addCell(a1);
                    Label a22 = new Label(1, 2, "综合评价", cFormat1);
                    sheet.addCell(a22);
                    for (int k = 0; k < quest.size(); k++) {
                        String spaceCount = "";
                        Map<String, Object> data = quest.get(k);
                        for (int i2 = 1; i2 < Integer.valueOf(data.get("level") + "").intValue(); i2++) {
                            spaceCount = spaceCount + "  ";
                        }
                        Label b1 = new Label(0, 4 + k, spaceCount + data.get("knowName") + "", cFormat);
                        sheet.addCell(b1);
                        if (null == data.get("avgDflv") || "".equals(data.get("avgDflv"))) {
                            Label b2 = new Label(1, 4 + k, "", cFormat);
                            sheet.addCell(b2);
                        } else {
                            double zonghepingjia = Double.valueOf(data.get("avgDflv").toString()).doubleValue();
                            if (zonghepingjia < 40.0d) {
                                Number b22 = new Number(1, 4 + k, zonghepingjia, cFormat_red);
                                sheet.addCell(b22);
                            } else if (zonghepingjia < 40.0d || zonghepingjia >= 80.0d) {
                                Number b23 = new Number(1, 4 + k, zonghepingjia, cFormat_blue);
                                sheet.addCell(b23);
                            } else {
                                Number b24 = new Number(1, 4 + k, zonghepingjia, cFormat_yellow);
                                sheet.addCell(b24);
                            }
                        }
                        for (int i3 = 0; i3 < examLen; i3++) {
                            Double exam_dfl = null;
                            Double cexam_dfl = null;
                            if (null != data.get("exam" + (i3 + 1)) && !"".equals(data.get("exam" + (i3 + 1)))) {
                                exam_dfl = Double.valueOf(data.get("exam" + (i3 + 1)).toString());
                            }
                            if (null != contrastObject && !"".equals(contrastObject) && null != data.get("defenlv" + (i3 + 1)) && !"".equals(data.get("defenlv" + (i3 + 1)))) {
                                cexam_dfl = Double.valueOf(data.get("defenlv" + (i3 + 1)).toString());
                            }
                            if (null == exam_dfl || null == cexam_dfl) {
                                if (null != exam_dfl) {
                                    Number b3 = new Number(2 + (cloumns * i3), 4 + k, exam_dfl.doubleValue(), cFormat);
                                    sheet.addCell(b3);
                                } else {
                                    Label b32 = new Label(2 + (cloumns * i3), 4 + k, "", cFormat);
                                    sheet.addCell(b32);
                                }
                                if (null != contrastObject && !"".equals(contrastObject)) {
                                    if (null != cexam_dfl) {
                                        Number b4 = new Number(3 + (cloumns * i3), 4 + k, cexam_dfl.doubleValue(), cFormat);
                                        sheet.addCell(b4);
                                    } else {
                                        Label b42 = new Label(3 + (cloumns * i3), 4 + k, "", cFormat);
                                        sheet.addCell(b42);
                                    }
                                }
                            } else {
                                double chajulv = (cexam_dfl.doubleValue() - exam_dfl.doubleValue()) / cexam_dfl.doubleValue();
                                if (chajulv >= 0.0d && chajulv <= 0.3d) {
                                    Number b33 = new Number(2 + (cloumns * i3), 4 + k, exam_dfl.doubleValue(), cFormat_yellow);
                                    sheet.addCell(b33);
                                } else if (chajulv > 0.3d && chajulv <= 0.6d) {
                                    Number b34 = new Number(2 + (cloumns * i3), 4 + k, exam_dfl.doubleValue(), cFormat_orange);
                                    sheet.addCell(b34);
                                } else if (chajulv > 0.6d) {
                                    Number b35 = new Number(2 + (cloumns * i3), 4 + k, exam_dfl.doubleValue(), cFormat_red);
                                    sheet.addCell(b35);
                                }
                                Number b43 = new Number(3 + (cloumns * i3), 4 + k, cexam_dfl.doubleValue(), cFormat);
                                sheet.addCell(b43);
                            }
                        }
                    }
                    String zhushi = "注：\r\n1、表中T1，T2，…，Tn代表历次考试（最近的考试在前）。其中：\r\n";
                    for (int i4 = 0; i4 < examLen; i4++) {
                        zhushi = zhushi + "      T" + (i4 + 1) + "：" + examNames[i4] + "\r\n";
                    }
                    Label b11 = new Label(0, 4 + quest.size() + 2, zhushi + "2、综合评价：根据历次考试的得分率平均值（R）进行评价，并进行颜色标注。红色：R小于40%，黄色：R大于等于40%且小于80%，蓝色：R大于等于80%。\r\n3、得分率颜色标注：根据自身得分率与对比对象得分率之间的差距率【差距率（D）=1-自身得分率/对比对象得分率】大小进行标注。黄色：D小于30%，橙色：D大于等于30%且小于60%，红色： D大于等于60%。", cFormat);
                    sheet.addCell(b11);
                    sheet.mergeCells(0, 4 + quest.size() + 2, 17, 4 + quest.size() + 2);
                    sheet.setRowView(4 + quest.size() + 2, 2000);
                } catch (Exception e) {
                    e.printStackTrace();
                }
                wwBook.write();
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response = ServletActionContext.getResponse();
                            response.reset();
                            ServletOutputStream outputStream = response.getOutputStream();
                            String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(rpt_name, "UTF-8") : new String(rpt_name.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName2 = loadFileName.replace("+", " ");
                            response.setContentType("Content-type: applicationnd.ms-excel");
                            response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xls");
                            response.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte = new byte[1024];
                            FileInputStream in = new FileInputStream(excelFile);
                            while (true) {
                                int n = in.read(tempByte);
                                if (n == -1) {
                                    break;
                                }
                                try {
                                    outputStream.write(tempByte, 0, n);
                                } catch (Exception e2) {
                                    this.log.error("保存未成功", e2);
                                }
                            }
                            outputStream.flush();
                            outputStream.close();
                            in.close();
                        }
                    } catch (WriteException e3) {
                        e3.printStackTrace();
                    }
                }
            } catch (Exception e4) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response2 = ServletActionContext.getResponse();
                            response2.reset();
                            ServletOutputStream outputStream2 = response2.getOutputStream();
                            String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(rpt_name, "UTF-8") : new String(rpt_name.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName4 = loadFileName3.replace("+", " ");
                            response2.setContentType("Content-type: applicationnd.ms-excel");
                            response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xls");
                            response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte2 = new byte[1024];
                            FileInputStream in2 = new FileInputStream(excelFile);
                            while (true) {
                                int n2 = in2.read(tempByte2);
                                if (n2 == -1) {
                                    break;
                                }
                                try {
                                    outputStream2.write(tempByte2, 0, n2);
                                } catch (Exception e5) {
                                    this.log.error("保存未成功", e5);
                                }
                            }
                            outputStream2.flush();
                            outputStream2.close();
                            in2.close();
                        }
                    } catch (WriteException e6) {
                        e6.printStackTrace();
                    }
                }
            } catch (Throwable th) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response3 = ServletActionContext.getResponse();
                            response3.reset();
                            ServletOutputStream outputStream3 = response3.getOutputStream();
                            String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(rpt_name, "UTF-8") : new String(rpt_name.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName6 = loadFileName5.replace("+", " ");
                            response3.setContentType("Content-type: applicationnd.ms-excel");
                            response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xls");
                            response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte3 = new byte[1024];
                            FileInputStream in3 = new FileInputStream(excelFile);
                            while (true) {
                                int n3 = in3.read(tempByte3);
                                if (n3 == -1) {
                                    break;
                                }
                                try {
                                    outputStream3.write(tempByte3, 0, n3);
                                } catch (Exception e7) {
                                    this.log.error("保存未成功", e7);
                                }
                            }
                            outputStream3.flush();
                            outputStream3.close();
                            in3.close();
                        }
                    } catch (WriteException e8) {
                        e8.printStackTrace();
                        throw th;
                    }
                }
                throw th;
            }
        } catch (Exception e9) {
            e9.printStackTrace();
        }
        return null;
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public Map<String, String> getOneSubTotalScore(String examNum, String gradeNum, String subjectNum) {
        Map args = new HashMap();
        args.put(Const.EXPORTREPORT_examNum, examNum);
        args.put(Const.EXPORTREPORT_gradeNum, gradeNum);
        args.put(Const.EXPORTREPORT_subjectNum, subjectNum);
        return this.dao2._querySimpleMap("select exampaperNum,e.subjectNum,subjectName,pexamPaperNum,totalScore from exampaper e  left join subject s on e.subjectNUm=s.subjectNum  where examNum={examNum} and gradeNum={gradeNum} and e.subjectNum={subjectNum} ", args);
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public List<AjaxData> getAllSchool(String userId) {
        String sql;
        if ("-1".equals(userId) || "-2".equals(userId)) {
            sql = "SELECT id num,schoolName name FROM school where isDelete = 'F' order by convert(schoolName using gbk)";
        } else {
            sql = "SELECT DISTINCT sch.id num,sch.schoolName name FROM school sch left join (select schoolNum from schauthormanage where userId = {userId} and isDelete = 'F' union select schoolNum from user where id = {userId} and isDelete = 'F') sc on sc.schoolNum = sch.id where sch.isDelete = 'F' and sc.schoolNum is not null order by convert(sch.schoolName using gbk)";
        }
        Map args = new HashMap();
        args.put("userId", userId);
        return this.dao2._queryBeanList(sql, AjaxData.class, args);
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public List<AjaxData> getClassBySch(String schoolNum, String gradeNum) {
        Map args = new HashMap();
        args.put(Const.EXPORTREPORT_schoolNum, schoolNum);
        args.put(Const.EXPORTREPORT_gradeNum, gradeNum);
        return this.dao2._queryBeanList("select DISTINCT id num,className name from class where  schoolNum={schoolNum} and gradeNUm={gradeNum} and isDelete='F'", AjaxData.class, args);
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public List<AjaxData> getStudent(String examNum, String gradeNum, String subjectNum, String schoolNum, String classNum) {
        String sql;
        Map args = new HashMap();
        args.put(Const.EXPORTREPORT_examNum, examNum);
        args.put(Const.EXPORTREPORT_gradeNum, gradeNum);
        args.put(Const.EXPORTREPORT_subjectNum, subjectNum);
        args.put(Const.EXPORTREPORT_schoolNum, schoolNum);
        args.put(Const.EXPORTREPORT_classNum, classNum);
        Exampaper exampaper = (Exampaper) this.dao2._queryBean("select exampaperNum,pexampaperNum,isHidden from exampaper where examnum={examNum} and gradeNum={gradeNum} and subjectNum={subjectNum}", Exampaper.class, args);
        args.put("examPaperNum", exampaper.getExamPaperNum());
        args.put("pexampaperNum", exampaper.getPexamPaperNum());
        args.put("isHidden", exampaper.getIsHidden());
        if (exampaper.getIsHidden().equals("T")) {
            new HashMap();
            args.put("examPaperNum", exampaper.getExamPaperNum());
            args.put("pexampaperNum", exampaper.getPexamPaperNum());
            String queStr = this.dao2._queryStr("select GROUP_CONCAT(id) from (   SELECT id,questionNum,orderNum,questiontype qtype,fullScore,choosename,category,exampaperNum   FROM define      WHERE category={examPaperNum}  and choosename!='T' AND isParent='0'     UNION       SELECT subdef.id,subdef.questionNum,subdef.orderNum,subdef.questiontype qtype,subdef.fullScore,def.choosename,def.category,def.exampaperNum   FROM define def      INNER JOIN subdefine subdef ON def.id=subdef.pid       WHERE def.category={examPaperNum} and subdef.choosename!='T'     ORDER BY questionNum *1, REPLACE ( SUBSTRING( questionNum, LOCATE('_', questionNum) + 1, LENGTH(questionNum) ), '_', '' ) ASC   )a", args);
            sql = "select studentNum num,studentName name from student s     left join (  select DISTINCT studentId from( select studentId from score where exampaperNum={pexampaperNum} and schoolNum={schoolNum} and classNum={classNum}  and questionNum in({queStr[]}) group by studentId union all  select studentId from objectivescore where exampaperNum={pexampaperNum} and schoolNum={schoolNum} and classNum={classNum}  and questionNum in({queStr[]}) group by studentId)a)b on s.id=b.studentId  where s.schoolNum={schoolNum} and s.classNum={classNum} and b.studentId is null and s.isDelete='F'";
            args.put("queStr", queStr);
        } else {
            sql = "select studentNum num,studentName name from student s  LEFT join  (select DISTINCT studentId,schoolNum,classNum from regexaminee  where exampaperNum={pexampaperNum} and schoolNum={schoolNum} and classNum={classNum}  and scan_import <> '2' )a on  s.id=a.studentId  LEFT join (  select DISTINCT studentId from studentlevel where exampaperNum={examPaperNum}  and schoolNum={schoolNum} and gradeNUm={gradeNum} and classNum={classNum}  union  select DISTINCT studentId from importstudentlevel where exampaperNum={examPaperNum}  and schoolNum={schoolNum} and gradeNUm={gradeNum} and classNum={classNum}  ) b on b.studentId=s.id  where s.schoolNum={schoolNum} and s.classNUm={classNum} and (a.studentId is null or b.studentId is null ) and s.isDelete='F' ";
        }
        return this.dao2._queryBeanList(sql, AjaxData.class, args);
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public List<AjaxData> getAllSubStudent(String examNum, String gradeNum, String subjectNum, String schoolNum, String classNum) {
        Map args = new HashMap();
        args.put(Const.EXPORTREPORT_examNum, examNum);
        args.put(Const.EXPORTREPORT_gradeNum, gradeNum);
        args.put(Const.EXPORTREPORT_schoolNum, schoolNum);
        args.put(Const.EXPORTREPORT_classNum, classNum);
        return this.dao2._queryBeanList("select DISTINCT s.studentNum num,s.studentName name from  (select id,studentNum,StudentId,studentName  from student s where s.schoolNum={schoolNum} and s.classNUm={classNum} and s.isDelete='F') s LEFT JOIN  (  select e.exampapernum,e.subjectNum,e.pexampapernum,e.isHidden,e.totalScore,if( pe.pexampapernum is null, '0' ,'1') zukemuqufen /* 0:非合卷 1：合卷 */ FROM exampaper e    left join(SELECT DISTINCT pexampapernum from  exampaper where examNum={examNum}  and gradeNum={gradeNum} and  isHidden='T') pe      on pe.pexampapernum= e.exampapernum where e.examNum={examNum}  and e.gradeNum={gradeNum}) p  on 1=1  LEFT JOIN regexaminee  r on r.exampapernum= p.pexampapernum and r.studentid=s.id  LEFT JOIN ( select studentId,exampapernum from studentlevel where examNum={examNum}  and gradeNum={gradeNum} and schoolNum={schoolNum} and classNum={classNum}  union all  select studentId,exampapernum from importstudentlevel where examNum={examNum}  and gradeNum={gradeNum} and schoolNum={schoolNum} and classNum={classNum} )  sl on sl.exampapernum= p.exampapernum and sl.studentid=s.id  where (r.studentId is null ) ", AjaxData.class, args);
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public List<Map<String, String>> getAddSub(String examNum, String gradeNum, String subjectNum, String schoolNum, String classNum, String studentNum) {
        Map args = new HashMap();
        args.put(Const.EXPORTREPORT_schoolNum, schoolNum);
        args.put(Const.EXPORTREPORT_gradeNum, gradeNum);
        args.put(Const.EXPORTREPORT_classNum, classNum);
        args.put(Const.EXPORTREPORT_examNum, examNum);
        args.put("studentNum", studentNum);
        String studentId = this.dao2._queryStr("select id from student where schoolNum={schoolNum} and gradeNum={gradeNum} and classNum={classNum} and studentNum={studentNum}", args);
        args.put(Const.EXPORTREPORT_studentId, studentId);
        return this.dao2._queryMapList("select exampaperNum,subjectNum,subjectName,pexamPaperNum,totalScore,isZiJi,zukemuqufen from (  select e.exampaperNum,e.subjectNum,sub.subjectName,e.pexamPaperNum,e.totalScore,zukemuqufen,IF(e.pexamPaperNum<>e.exampaperNum,1,0)isZiJi,  CASE   WHEN  e.zukemuqufen ='1' THEN '1'   WHEN (e.zukemuqufen ='0' and e.isHidden='T' and           ( r.exampapernum is null or ( r.scan_import=2 and s.exampapernum is null )))   THEN '1'   WHEN (e.zukemuqufen ='0' and e.isHidden='F' and r.exampapernum is null)  THEN '1'   ELSE '0'   END  shifoxianshi  from (select e.exampapernum,e.subjectNum,e.pexampapernum,e.isHidden,e.totalScore,if( pe.pexampapernum is null, '0' ,'1') zukemuqufen  FROM exampaper e                          left join(SELECT DISTINCT pexampapernum from  exampaper where examNum={examNum}  and gradeNum={gradeNum} and  isHidden='T')                 pe on pe.pexampapernum= e.exampapernum where e.examNum={examNum}  and e.gradeNum={gradeNum}) e  LEFT join     (select exampapernum,scan_import from regexaminee where studentid={studentId} GROUP BY exampapernum) r on r.exampapernum=e.pexampapernum  LEFT join (select exampapernum from studentlevel where examNum={examNum}  and gradeNum={gradeNum} and studentid={studentId} GROUP BY exampapernum  union all  select exampapernum from importstudentlevel where examNum={examNum}  and gradeNum={gradeNum} and studentid={studentId} GROUP BY exampapernum  ) s  on  s.exampapernum=e.exampapernum  left join subject sub on e.subjectNum=sub.subjectNum   where s.exampapernum is null  ) a where a.shifoxianshi=1  order by exampaperNum ", TypeEnum.StringObject, args);
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public List<Map<String, String>> getDefine(String examNum, String gradeNum, String subjectNum) {
        String defineSql;
        Map args = new HashMap();
        args.put(Const.EXPORTREPORT_examNum, examNum);
        args.put(Const.EXPORTREPORT_gradeNum, gradeNum);
        args.put(Const.EXPORTREPORT_subjectNum, subjectNum);
        Exampaper exampaper = (Exampaper) this.dao2._queryBean("select exampaperNum,isHidden from exampaper where examnum={examNum} and gradeNum={gradeNum} and subjectNum={subjectNum}", Exampaper.class, args);
        args.put("examPaperNum", exampaper.getExamPaperNum());
        if (exampaper.getIsHidden().equals("T")) {
            defineSql = "select IFNULL(sub.id,d.id)id,d.orderNum,pid pidNum,IFNULL(sub.questionNum,d.questionNum) questionNum,IFNULL(sub.fullScore,d.fullScore) fullScore,IFNULL(sub.questionType,d.questionType) questionType,IF(IFNULL(sub.questionType,d.questionType)=0,'客观题','主观题') questionTypeName,d.choosename choosename from define d left join subdefine sub on d.id=sub.pid  where d.category={examPaperNum} and (sub.choosename <> 'T' or d.choosename<>'T') ORDER BY d.questionNum*1 ";
        } else {
            defineSql = "select IFNULL(sub.id,d.id)id,d.orderNum,pid pidNum,IFNULL(sub.questionNum,d.questionNum) questionNum,IFNULL(sub.fullScore,d.fullScore) fullScore,IFNULL(sub.questionType,d.questionType) questionType,IF(IFNULL(sub.questionType,d.questionType)=0,'客观题','主观题') questionTypeName,d.choosename choosename from define d left join subdefine sub on d.id=sub.pid  where d.exampaperNum={examPaperNum} and (sub.choosename <> 'T' or d.choosename<>'T') ORDER BY d.questionNum*1 ";
        }
        return this.dao2._queryMapList(defineSql, TypeEnum.StringObject, args);
    }

    private void throwException(String e) {
        throw new SubException(e);
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String addXiaoTiScore(String examNum, String gradeNum, String subjectNum, String school, String class2, String student, String fullScore, Map<String, String> xiaotiScoreMap, String loginUserId, List<String> huchiSubList) {
        String fuExampaperNum;
        String fuSubjectNum;
        String str;
        String studentId = getStudentId(school, gradeNum, class2, student);
        Map<String, String> epMap = getExampaperNum(examNum, gradeNum, subjectNum);
        Map args_jieSql = new HashMap();
        args_jieSql.put(License.SCHOOL, school);
        args_jieSql.put(Const.EXPORTREPORT_gradeNum, gradeNum);
        String jie = this.dao2._queryStr("select jie from  grade where schoolNum={school} and gradeNum={gradeNum}", args_jieSql);
        String isImport = null;
        if (epMap.get("isHidden").equals("T")) {
            Map args_zhuKeMuSubjectSql = new HashMap();
            args_zhuKeMuSubjectSql.put("examppaerNUm", epMap.get("pexampaperNum"));
            Map<String, Object> zhuKeMuSubjectMap = this.dao2._querySimpleMap("select subjectNum,exampaperNum from exampaper where exampaperNum={examppaerNUm}", args_zhuKeMuSubjectSql);
            fuExampaperNum = Convert.toStr(zhuKeMuSubjectMap.get("exampaperNum"));
            fuSubjectNum = Convert.toStr(zhuKeMuSubjectMap.get(Const.EXPORTREPORT_subjectNum));
            isImport = "1";
        } else {
            fuExampaperNum = Convert.toStr(epMap.get("exampaperNum"));
            fuSubjectNum = subjectNum;
        }
        if (huchiSubList.size() > 0) {
            String huchiSub = "";
            for (int i = 0; i < huchiSubList.size(); i++) {
                if (i == 0) {
                    str = huchiSub + huchiSubList.get(i);
                } else {
                    str = huchiSub + Const.STRING_SEPERATOR + huchiSubList.get(i);
                }
                huchiSub = str;
            }
            Map args_isHaveHuChiSql = new HashMap();
            args_isHaveHuChiSql.put("huchiSub", huchiSub);
            args_isHaveHuChiSql.put(License.SCHOOL, school);
            args_isHaveHuChiSql.put("class2", class2);
            args_isHaveHuChiSql.put(Const.EXPORTREPORT_studentId, studentId);
            Integer count = this.dao2._queryInt("select  count(1) from  regexaminee where exampaperNum in({huchiSub[]}) and schoolNum={school} and classNum={class2} and studentId={studentId}", args_isHaveHuChiSql);
            if (count.intValue() > 0) {
                return "1";
            }
        }
        Map args_examinationnumSql = new HashMap();
        Map args_illSql = new HashMap();
        Map args_regSql = new HashMap();
        Map args_updateregSql = new HashMap();
        Map<Integer, String> regGuidMap = new HashMap<>();
        Examinationnum examinationnum = new Examinationnum();
        List<Map<String, String>> examinationMapList = getExamination(examNum, gradeNum, fuSubjectNum, studentId);
        new ArrayList();
        String examinationnumSql = "";
        if (examinationMapList.size() == 0) {
            int studentIdlen = student.length();
            if (studentIdlen > 19) {
                student.substring(0, 19);
            }
            examinationnumSql = "INSERT INTO `examinationnum` (`examinationRoomNum`, `examineeNum`, `studentId`, `insertUser`, `insertDate`, `isDelete`, `examNum`, `schoolNum`, `gradeNum`, `classNum`, `testingCentreId`, `subjectNum`, `xuankaoqufen`, `seatNum`) VALUES ('-1', {examineeNum}, {studentId}, {loginUserId}, now(), 'F', {examNum}, {school}, {gradeNum}, {class2}, '-1', {subjectNum}, NULL, '')";
            args_examinationnumSql.put("examineeNum", student);
            args_examinationnumSql.put(Const.EXPORTREPORT_studentId, studentId);
            args_examinationnumSql.put("loginUserId", loginUserId);
            args_examinationnumSql.put(Const.EXPORTREPORT_examNum, examNum);
            args_examinationnumSql.put(License.SCHOOL, school);
            args_examinationnumSql.put(Const.EXPORTREPORT_gradeNum, gradeNum);
            args_examinationnumSql.put("class2", class2);
            args_examinationnumSql.put(Const.EXPORTREPORT_subjectNum, fuSubjectNum);
            examinationnum.setExaminationRoomNum("-1");
            examinationnum.setTestingCentreId("-1");
        } else {
            examinationnum.setExaminationRoomNum(examinationMapList.get(0).get("testingCentreId"));
            examinationnum.setTestingCentreId(examinationMapList.get(0).get("testingCentreId"));
        }
        String queStr = "";
        if (epMap.get("isHidden").equals("T")) {
            Map args = new HashMap();
            args.put("examPaperNum", epMap.get("exampaperNum"));
            args.put("pexampaperNum", epMap.get("pexampaperNum"));
            queStr = this.dao2._queryStr("select GROUP_CONCAT(id) from (   SELECT id,questionNum,orderNum,questiontype qtype,fullScore,choosename,category,exampaperNum   FROM define      WHERE category={examPaperNum}  and choosename!='T' AND isParent='0'     UNION       SELECT subdef.id,subdef.questionNum,subdef.orderNum,subdef.questiontype qtype,subdef.fullScore,def.choosename,def.category,def.exampaperNum   FROM define def      INNER JOIN subdefine subdef ON def.id=subdef.pid       WHERE def.category={examPaperNum} and subdef.choosename!='T'     ORDER BY questionNum *1, REPLACE ( SUBSTRING( questionNum, LOCATE('_', questionNum) + 1, LENGTH(questionNum) ), '_', '' ) ASC   )a", args);
        }
        this.initDAO.delScore1Lx2(Convert.toStr(epMap.get("exampaperNum")), Convert.toStr(epMap.get("pexampaperNum")), studentId, epMap.get("isHidden"), queStr);
        String illSql = "INSERT INTO `illegal`  ( `regId`, `examPaperNum`, `schoolNum`, `examinationRoomNum`, `studentId`, `type`, `insertDate`, `insertUser`,`testingCentreId`)   VALUES   ({id}, {exampaperNum}, {school}, {examinationRoomNum}, '" + studentId + "', '2', now(),{loginUserId},{testingCentreId})";
        String regSql = "INSERT INTO `regexaminee`  (`id`, `examPaperNum`, `schoolNum`, `studentId`, `examinationRoomNum`, `page`, `classNum`, `insertUser`, `insertDate`, `cNum`, `type`,`testingCentreId`, `scan_import`,`isImport`)   VALUES ({id}, {exampaperNum}, {school}, {studentId}, {examinationRoomNum}, {page}, {class2}, {loginUserId}, now(), {id}, '2', {testingCentreId},1,{isImport})";
        String updateRegListSql = "";
        Map regSql_args = StreamMap.create().put("examPaperNum", (Object) epMap.get("pexampaperNum")).put("sid", (Object) studentId);
        List<Map<String, Object>> maps = this.dao2._queryMapList("select page,id from regexaminee where examPaperNum={examPaperNum}  and studentId={sid}", TypeEnum.StringObject, regSql_args);
        String id = GUID.getGUIDStr();
        if (epMap.get("isHidden").equals("T")) {
            if (maps.size() == 0) {
                Map illSql_args = StreamMap.create().put("exampaperNum", (Object) epMap.get("pexampaperNum")).put("sid", (Object) studentId);
                String ill = this.dao2._queryStr("select regId from illegal where exampaperNum={exampaperNum} and studentId={sid}", illSql_args);
                if (ill != null && !ill.equals("")) {
                    this.dao2._execute("DELETE  from illegal where examPaperNum={exampaperNum} and studentId={sid} ", illSql_args);
                }
                args_illSql.put("id", id);
                args_illSql.put("exampaperNum", fuExampaperNum);
                args_illSql.put(License.SCHOOL, school);
                args_illSql.put("examinationRoomNum", examinationnum.getExaminationRoomNum());
                args_illSql.put("loginUserId", loginUserId);
                args_illSql.put("testingCentreId", examinationnum.getTestingCentreId());
                args_regSql.put("id", id);
                args_regSql.put("exampaperNum", fuExampaperNum);
                args_regSql.put(License.SCHOOL, school);
                args_regSql.put(Const.EXPORTREPORT_studentId, studentId);
                args_regSql.put("examinationRoomNum", examinationnum.getExaminationRoomNum());
                args_regSql.put("page", 1);
                args_regSql.put("class2", class2);
                args_regSql.put("loginUserId", loginUserId);
                args_regSql.put("testingCentreId", examinationnum.getTestingCentreId());
                args_regSql.put("isImport", isImport);
                regGuidMap.put(1, id);
            } else {
                regSql = "";
                updateRegListSql = "update regexaminee set isImport='1' where examPaperNum={exampaperNum} and studentId={sid}";
                args_updateregSql.put("exampaperNum", fuExampaperNum);
                args_updateregSql.put("sid", studentId);
                regGuidMap.put(1, maps.get(0).get("id").toString());
            }
        } else if (maps.size() == 0) {
            args_illSql.put("id", id);
            args_illSql.put("exampaperNum", fuExampaperNum);
            args_illSql.put(License.SCHOOL, school);
            args_illSql.put("examinationRoomNum", examinationnum.getExaminationRoomNum());
            args_illSql.put("loginUserId", loginUserId);
            args_illSql.put("testingCentreId", examinationnum.getTestingCentreId());
            args_regSql.put("id", id);
            args_regSql.put("exampaperNum", fuExampaperNum);
            args_regSql.put(License.SCHOOL, school);
            args_regSql.put(Const.EXPORTREPORT_studentId, studentId);
            args_regSql.put("examinationRoomNum", examinationnum.getExaminationRoomNum());
            args_regSql.put("page", 1);
            args_regSql.put("class2", class2);
            args_regSql.put("loginUserId", loginUserId);
            args_regSql.put("testingCentreId", examinationnum.getTestingCentreId());
            args_regSql.put("isImport", isImport);
            regGuidMap.put(1, id);
        } else {
            regSql = "";
            updateRegListSql = "update regexaminee set scan_import='1' where examPaperNum={examPaperNum} and studentId={sid}";
            args_updateregSql.put("exampaperNum", fuExampaperNum);
            args_updateregSql.put(Const.EXPORTREPORT_studentId, studentId);
            regGuidMap.put(1, maps.get(0).get("id").toString());
        }
        List<Map<String, Object>> l1_obj = new ArrayList<>();
        List<Map<String, Object>> l1_sub = new ArrayList<>();
        Double totalScore = Double.valueOf(0.0d);
        Double objScore = Double.valueOf(0.0d);
        Double subScore = Double.valueOf(0.0d);
        for (String key : xiaotiScoreMap.keySet()) {
            Double score = Convert.toDouble(xiaotiScoreMap.get(key));
            String regid = regGuidMap.get(1);
            List<Define> defineList = getdefine(examNum.toString(), key.toString(), gradeNum.toString(), subjectNum.toString(), jie.toString(), Convert.toStr(epMap.get("pexampaperNum")));
            if (defineList.get(0).getQuestionType().equals("0")) {
                Map args_l1_obj_sql = new HashMap();
                args_l1_obj_sql.put("id", GUID.getGUIDStr());
                args_l1_obj_sql.put("regId", regid);
                args_l1_obj_sql.put("questionNum", key);
                args_l1_obj_sql.put("questionScore", score);
                args_l1_obj_sql.put(Const.EXPORTREPORT_studentId, studentId);
                args_l1_obj_sql.put("examPaperNum", epMap.get("pexampaperNum"));
                args_l1_obj_sql.put(Const.EXPORTREPORT_schoolNum, school);
                args_l1_obj_sql.put(Const.EXPORTREPORT_classNum, class2);
                args_l1_obj_sql.put(Const.EXPORTREPORT_gradeNum, gradeNum);
                args_l1_obj_sql.put("insertUser", loginUserId);
                args_l1_obj_sql.put("page", Integer.valueOf(defineList.get(0).getPage()));
                objScore = Double.valueOf(objScore.doubleValue() + score.doubleValue());
                l1_obj.add(args_l1_obj_sql);
            } else {
                Map args_l1_sub_sql = new HashMap();
                args_l1_sub_sql.put("id", GUID.getGUIDStr());
                args_l1_sub_sql.put("regId", regid);
                args_l1_sub_sql.put("questionNum", key);
                args_l1_sub_sql.put("questionScore", score);
                args_l1_sub_sql.put(Const.EXPORTREPORT_studentId, studentId);
                args_l1_sub_sql.put("examPaperNum", epMap.get("pexampaperNum"));
                args_l1_sub_sql.put(Const.EXPORTREPORT_schoolNum, school);
                args_l1_sub_sql.put(Const.EXPORTREPORT_classNum, class2);
                args_l1_sub_sql.put(Const.EXPORTREPORT_gradeNum, gradeNum);
                args_l1_sub_sql.put("insertUser", loginUserId);
                args_l1_sub_sql.put("page", Integer.valueOf(defineList.get(0).getPage()));
                subScore = Double.valueOf(subScore.doubleValue() + score.doubleValue());
                l1_sub.add(args_l1_sub_sql);
            }
            totalScore = Double.valueOf(totalScore.doubleValue() + score.doubleValue());
        }
        String studentType = getstudentType(school, gradeNum, class2);
        Map args_studentLevelSql = new HashMap();
        args_studentLevelSql.put(Const.EXPORTREPORT_examNum, examNum);
        args_studentLevelSql.put("exampaperNum", epMap.get("exampaperNum"));
        args_studentLevelSql.put(License.SCHOOL, school);
        args_studentLevelSql.put(Const.EXPORTREPORT_gradeNum, gradeNum);
        args_studentLevelSql.put("jie", jie);
        args_studentLevelSql.put(Const.EXPORTREPORT_subjectNum, subjectNum);
        args_studentLevelSql.put("class2", class2);
        args_studentLevelSql.put("totalScore", totalScore);
        args_studentLevelSql.put("sqts", subScore);
        args_studentLevelSql.put("oqts", objScore);
        args_studentLevelSql.put(Const.EXPORTREPORT_studentId, studentId);
        args_studentLevelSql.put("fullScore", epMap.get("totalScore"));
        args_studentLevelSql.put(Const.EXPORTREPORT_studentType, studentType);
        args_studentLevelSql.put("loginUserId", loginUserId);
        args_studentLevelSql.put("isHidden", "F");
        if (examinationnumSql != "") {
            try {
                if (args_examinationnumSql.size() > 0) {
                    this.dao2._execute(examinationnumSql, args_examinationnumSql);
                }
            } catch (Exception e2) {
                throwJbcdException(e2);
            }
        }
        if (illSql != "" && args_illSql.size() > 0) {
            this.dao2._execute(illSql, args_illSql);
        }
        if (regSql != "" && args_regSql.size() > 0) {
            this.dao2._execute(regSql, args_regSql);
        }
        if (updateRegListSql != "" && args_updateregSql.size() > 0) {
            this.dao2._execute(updateRegListSql, args_updateregSql);
        }
        if (null != l1_obj && l1_obj.size() > 0) {
            this.dao2._batchUpdate("INSERT INTO `objectivescore`  (`id`, `regId`, `questionNum`, `questionScore`, `regScore`, `studentId`, `examPaperNum`,  `schoolNum`, `classNum`, `gradeNum`, `insertUser`, `insertDate`,   `page`)   VALUES ({id}, {regId}, {questionNum}, {questionScore}, {questionScore}, {studentId}, {examPaperNum}, {schoolNum}, {classNum}, {gradeNum}, {insertUser}, now(),  {page}) ", l1_obj, 1000);
        }
        if (null != l1_sub && l1_sub.size() > 0) {
            this.dao2._batchUpdate("INSERT INTO `score` (`id`, `regId`, `questionNum`, `questionScore`, `regScore`, `studentId`, `examPaperNum`, `schoolNum`, `classNum`, `gradeNum`, `insertUser`, `insertDate`,`page`,`continued`)  VALUES  ({id}, {regId}, {questionNum}, {questionScore}, {questionScore}, {studentId}, {examPaperNum}, {schoolNum}, {classNum}, {gradeNum}, {insertUser}, now(), {page},'F')", l1_sub, 1000);
        }
        if ("INSERT INTO `studentlevel` (`examNum`, `examPaperNum`, `schoolNum`, `gradeNum`, `jie`, `subjectNum`, `classNum`, `totalScore`, `sqts`, `oqts`,`studentId`, `fullScore`, `statisticType`, `studentType`, `insertUser`, `insertDate`, `isDelete`, `isSub`,`ext1`,  `source`, `xuankezuhe`)  VALUES  ({examNum}, {exampaperNum}, {school}, {gradeNum}, {jie}, {subjectNum}, {class2}, {totalScore}, {sqts}, {oqts}, {studentId}, {fullScore}, '0', {studentType}, {loginUserId},now(),'F',{isHidden},2,0,0) ON DUPLICATE KEY UPDATE  examNum={examNum},examPaperNum={exampaperNum},schoolNum={school},gradeNum={gradeNum},jie={jie},subjectNum={subjectNum},classNum={class2},totalScore={totalScore}, sqts={sqts},oqts={oqts},studentId={studentId},fullScore={fullScore},statisticType='0',studentType={studentType},insertUser={loginUserId},insertDate=now(),isDelete='F',isSub={isHidden},ext1=2,source=0,xuankezuhe=0 " != "") {
            this.dao2._execute("INSERT INTO `studentlevel` (`examNum`, `examPaperNum`, `schoolNum`, `gradeNum`, `jie`, `subjectNum`, `classNum`, `totalScore`, `sqts`, `oqts`,`studentId`, `fullScore`, `statisticType`, `studentType`, `insertUser`, `insertDate`, `isDelete`, `isSub`,`ext1`,  `source`, `xuankezuhe`)  VALUES  ({examNum}, {exampaperNum}, {school}, {gradeNum}, {jie}, {subjectNum}, {class2}, {totalScore}, {sqts}, {oqts}, {studentId}, {fullScore}, '0', {studentType}, {loginUserId},now(),'F',{isHidden},2,0,0) ON DUPLICATE KEY UPDATE  examNum={examNum},examPaperNum={exampaperNum},schoolNum={school},gradeNum={gradeNum},jie={jie},subjectNum={subjectNum},classNum={class2},totalScore={totalScore}, sqts={sqts},oqts={oqts},studentId={studentId},fullScore={fullScore},statisticType='0',studentType={studentType},insertUser={loginUserId},insertDate=now(),isDelete='F',isSub={isHidden},ext1=2,source=0,xuankezuhe=0 ", args_studentLevelSql);
        }
        return "0";
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String addOneSubTotalScore(String examNum, String gradeNum, String subjectNum, String school, String class2, String student, String totalScore, String fullScore, String exampaperNUm, String pexampaperNum, String loginUserId, List<String> huchiSubList) {
        String fuExampaperNum;
        String fuSubjectNum;
        String str;
        String studentId = getStudentId(school, gradeNum, class2, student);
        Map args_jieSql = new HashMap();
        args_jieSql.put(License.SCHOOL, school);
        args_jieSql.put(Const.EXPORTREPORT_gradeNum, gradeNum);
        String jie = this.dao2._queryStr("select jie from  grade where schoolNum={school} and gradeNum={gradeNum}", args_jieSql);
        String studentType = getstudentType(school, gradeNum, class2);
        List<RowArg> examinationnumList = new ArrayList<>();
        List<RowArg> illList = new ArrayList<>();
        List<RowArg> regList = new ArrayList<>();
        new ArrayList();
        List<RowArg> studentLevelList = new ArrayList<>();
        Map args_updateRegListSql = new HashMap();
        Map args_fuSql = new HashMap();
        args_fuSql.put(Const.EXPORTREPORT_examNum, examNum);
        args_fuSql.put(Const.EXPORTREPORT_gradeNum, gradeNum);
        args_fuSql.put(Const.EXPORTREPORT_subjectNum, subjectNum);
        Map<String, ?> _querySimpleMap = this.dao2._querySimpleMap("select exampaperNum,e.subjectNum,pexamPaperNum,totalScore,e.isHidden from exampaper e left join subject s on e.subjectNUm=s.subjectNum where exampaperNum=(select pexamPaperNum from exampaper where examNum={examNum} and gradeNum={gradeNum} and subjectNum={subjectNum}) ", args_fuSql);
        Map args_regSqls = new HashMap();
        args_regSqls.put("exampaperNum", _querySimpleMap.get("pexampaperNum"));
        args_regSqls.put("student", student);
        Integer scan_import = this.dao2._queryInt("select scan_import from regexaminee where exampaperNum={exampaperNum} and studentId={student} and page=1", args_regSqls);
        if ("".equals(scan_import) && scan_import != null && scan_import.intValue() == 0) {
            return "2";
        }
        String isImport = null;
        String isHidden = "F";
        new ArrayList();
        if (Convert.toStr(_querySimpleMap.get("exampaperNum")).equals(pexampaperNum) && !Convert.toStr(_querySimpleMap.get(Const.EXPORTREPORT_subjectNum)).equals(subjectNum)) {
            fuExampaperNum = Convert.toStr(_querySimpleMap.get("exampaperNum"));
            fuSubjectNum = Convert.toStr(_querySimpleMap.get(Const.EXPORTREPORT_subjectNum));
            isImport = "1";
            isHidden = "T";
        } else {
            fuExampaperNum = exampaperNUm;
            fuSubjectNum = subjectNum;
        }
        if (huchiSubList.size() > 0) {
            String huchiSub = "";
            for (int i = 0; i < huchiSubList.size(); i++) {
                if (i == 0) {
                    str = huchiSub + huchiSubList.get(i);
                } else {
                    str = huchiSub + Const.STRING_SEPERATOR + huchiSubList.get(i);
                }
                huchiSub = str;
            }
            Map args_isHaveHuChiSql = new HashMap();
            args_isHaveHuChiSql.put("huchiSub", huchiSub);
            args_isHaveHuChiSql.put(License.SCHOOL, school);
            args_isHaveHuChiSql.put("class2", class2);
            args_isHaveHuChiSql.put(Const.EXPORTREPORT_studentId, studentId);
            Integer count = this.dao2._queryInt("select  count(1) from  regexaminee where exampaperNum in({huchiSub[]}) and schoolNum={school} and classNum={class2} and studentId={studentId}", args_isHaveHuChiSql);
            if (count.intValue() > 0) {
            }
        }
        Examinationnum examinationnum = new Examinationnum();
        List<Map<String, String>> examinationMapList = getExamination(examNum, gradeNum, fuSubjectNum, studentId);
        new ArrayList();
        Map args_examinationnumSql = new HashMap();
        if (examinationMapList.size() == 0) {
            int studentIdlen = student.length();
            if (studentIdlen > 19) {
                student.substring(0, 19);
            }
            args_examinationnumSql.put("examineeNum", studentId);
            args_examinationnumSql.put(Const.EXPORTREPORT_studentId, studentId);
            args_examinationnumSql.put("loginUserId", loginUserId);
            args_examinationnumSql.put(Const.EXPORTREPORT_examNum, examNum);
            args_examinationnumSql.put(License.SCHOOL, school);
            args_examinationnumSql.put(Const.EXPORTREPORT_gradeNum, gradeNum);
            args_examinationnumSql.put("class2", class2);
            args_examinationnumSql.put(Const.EXPORTREPORT_subjectNum, fuSubjectNum);
            examinationnum.setExaminationRoomNum("-1");
            examinationnum.setTestingCentreId("-1");
            examinationnumList.add(new RowArg("INSERT INTO `examinationnum` (`examinationRoomNum`, `examineeNum`, `studentId`, `insertUser`, `insertDate`, `isDelete`, `examNum`, `schoolNum`, `gradeNum`, `classNum`, `testingCentreId`, `subjectNum`, `xuankaoqufen`, `seatNum`) VALUES ('-1', {examineeNum}, {studentId}, {loginUserId}, now(), 'F', {examNum}, {school}, {gradeNum}, {class2}, '-1', {subjectNum}, NULL, '')", args_examinationnumSql));
        } else {
            examinationnum.setExaminationRoomNum(examinationMapList.get(0).get("testingCentreId"));
            examinationnum.setTestingCentreId(examinationMapList.get(0).get("testingCentreId"));
        }
        List<Map<String, String>> isHavIllMapList = getIsHavIll(fuExampaperNum, school, studentId);
        String id = GUID.getGUIDStr();
        if (isHavIllMapList.size() == 0) {
            String illSql = "INSERT INTO `illegal`  ( `regId`, `examPaperNum`, `schoolNum`, `examinationRoomNum`, `studentId`, `type`, `insertDate`, `insertUser`,`testingCentreId`)   VALUES   ({id}, {exampaperNum}, {school}, {examinationRoomNum}, '" + studentId + "', '2', now(),{loginUserId},{testingCentreId})";
            Map args_illSql = new HashMap();
            args_illSql.put("id", id);
            args_illSql.put("exampaperNum", fuExampaperNum);
            args_illSql.put(License.SCHOOL, school);
            args_illSql.put("examinationRoomNum", examinationnum.getExaminationRoomNum());
            args_illSql.put("loginUserId", loginUserId);
            args_illSql.put("testingCentreId", examinationnum.getTestingCentreId());
            illList.add(new RowArg(illSql, args_illSql));
        }
        List<Map<String, String>> isHavRegMapList = getIsHavReg(fuExampaperNum, school, studentId);
        String updateRegListSql = "";
        if (isHavRegMapList.size() == 0) {
            Map args_regSql = new HashMap();
            args_regSql.put("id", id);
            args_regSql.put("exampaperNum", fuExampaperNum);
            args_regSql.put(License.SCHOOL, school);
            args_regSql.put(Const.EXPORTREPORT_studentId, studentId);
            args_regSql.put("examinationRoomNum", examinationnum.getExaminationRoomNum());
            args_regSql.put("page", 1);
            args_regSql.put("class2", class2);
            args_regSql.put("loginUserId", loginUserId);
            args_regSql.put("testingCentreId", examinationnum.getTestingCentreId());
            args_regSql.put("isImport", isImport);
            regList.add(new RowArg("INSERT INTO `regexaminee`  (`id`, `examPaperNum`, `schoolNum`, `studentId`, `examinationRoomNum`, `page`, `classNum`, `insertUser`, `insertDate`, `cNum`, `type`,`testingCentreId`, `scan_import`, `isImport`)   VALUES ({id}, {exampaperNum}, {school}, {studentId}, {examinationRoomNum}, {page}, {class2}, {loginUserId}, now(), {id}, '2', {testingCentreId},2,{isImport})", args_regSql));
        } else {
            this.initDAO.delScore1Lx_all(Convert.toStr(_querySimpleMap.get("exampaperNum")), Convert.toStr(_querySimpleMap.get("pexampaperNum")), studentId, isHidden, (String) null);
            if ("1".equals(isImport)) {
                updateRegListSql = "update regexaminee set isImport='1' where examPaperNum={exampaperNum} and studentId={studentId}";
            } else {
                updateRegListSql = "update regexaminee set scan_import='2' where examPaperNum={exampaperNum} and studentId={studentId}";
            }
            args_updateRegListSql.put("exampaperNum", fuExampaperNum);
            args_updateRegListSql.put(Const.EXPORTREPORT_studentId, studentId);
        }
        Map args_studentLevelSql = new HashMap();
        args_studentLevelSql.put(Const.EXPORTREPORT_examNum, examNum);
        args_studentLevelSql.put("exampaperNum", exampaperNUm);
        args_studentLevelSql.put(License.SCHOOL, school);
        args_studentLevelSql.put(Const.EXPORTREPORT_gradeNum, gradeNum);
        args_studentLevelSql.put("jie", jie);
        args_studentLevelSql.put(Const.EXPORTREPORT_subjectNum, subjectNum);
        args_studentLevelSql.put("class2", class2);
        args_studentLevelSql.put("totalScore", totalScore);
        args_studentLevelSql.put("sqts", 0);
        args_studentLevelSql.put("oqts", 0);
        args_studentLevelSql.put(Const.EXPORTREPORT_studentId, studentId);
        args_studentLevelSql.put("fullScore", fullScore);
        args_studentLevelSql.put("loginUserId", loginUserId);
        args_studentLevelSql.put(Const.EXPORTREPORT_studentType, studentType);
        args_studentLevelSql.put("isHidden", isHidden);
        studentLevelList.add(new RowArg("INSERT INTO `importstudentlevel` (`examNum`, `examPaperNum`, `schoolNum`, `gradeNum`, `jie`, `subjectNum`, `classNum`, `totalScore`, `sqts`, `oqts`,`studentId`, `fullScore`, `insertUser`, `insertDate`,`updateUser`, `updateDate`, `isSub`, `studentType`)  VALUES  ({examNum}, {exampaperNum}, {school}, {gradeNum}, {jie}, {subjectNum}, {class2}, {totalScore}, {sqts}, {oqts}, {studentId}, {fullScore},  {loginUserId},now(),{loginUserId},now(),{isHidden}, {studentType}) ON DUPLICATE KEY UPDATE  examNum={examNum},examPaperNum={exampaperNum},schoolNum={school},gradeNum={gradeNum},jie={jie},subjectNum={subjectNum},classNum={class2},totalScore={totalScore}, sqts={sqts},oqts={oqts},studentId={studentId},fullScore={fullScore},updateUser={loginUserId},updateDate=now(),isSub={isHidden},studentType={studentType} ", args_studentLevelSql));
        if (null != examinationnumList) {
            try {
                if (examinationnumList.size() > 0) {
                    this.dao2._batchExecute(examinationnumList, 1000);
                }
            } catch (Exception e2) {
                throwJbcdException(e2);
            }
        }
        if (null != illList && illList.size() > 0) {
            this.dao2._batchExecute(illList, 1000);
        }
        if (null != regList && regList.size() > 0) {
            this.dao2._batchExecute(regList, 1000);
        }
        if (updateRegListSql != "" && args_updateRegListSql.size() > 0) {
            this.dao2._execute(updateRegListSql, args_updateRegListSql);
        }
        if (null != studentLevelList && studentLevelList.size() > 0) {
            this.dao2._batchExecute(studentLevelList, 1000);
        }
        return "0";
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String addAllSubTotalScore(String examNum, String gradeNum, String school, String class2, String student, Map<String, String> allSubScoreMap, Map<String, String> allSubFullScoreMap, Map<String, String> fujiSubsMap, Map<String, String> zijiSubsMap, String loginUserId, List<Map<String, String>> quankehuchiSubsMapList) {
        String studentId = getStudentId(school, gradeNum, class2, student);
        Map args_jieSql = new HashMap();
        args_jieSql.put(License.SCHOOL, school);
        args_jieSql.put(Const.EXPORTREPORT_gradeNum, gradeNum);
        String jie = this.dao2._queryStr("select jie from  grade where schoolNum={school} and gradeNum={gradeNum}", args_jieSql);
        String studentType = getstudentType(school, gradeNum, class2);
        List<RowArg> examinationnumList = new ArrayList<>();
        List<RowArg> illList = new ArrayList<>();
        List<RowArg> regList = new ArrayList<>();
        List<Map<String, Object>> updateRegList = new ArrayList<>();
        List<RowArg> studentLevelList = new ArrayList<>();
        HashMap hashMap = new HashMap();
        String updateRegListSql = "";
        for (String key : allSubScoreMap.keySet()) {
            String score = allSubScoreMap.get(key);
            String fullScore = allSubFullScoreMap.get(key);
            Map<String, String> epMap = getExampaperNum(examNum, gradeNum, key);
            String isHaveHuChi = "";
            int j = 0;
            for (int i = 0; i < quankehuchiSubsMapList.size(); i++) {
                if (quankehuchiSubsMapList.get(i).containsKey(key)) {
                    for (String huchikeys : quankehuchiSubsMapList.get(i).keySet()) {
                        if (!key.equals(huchikeys)) {
                            j++;
                            if (j == 1) {
                                isHaveHuChi = isHaveHuChi + quankehuchiSubsMapList.get(i).get(huchikeys);
                            } else {
                                isHaveHuChi = isHaveHuChi + Const.STRING_SEPERATOR + quankehuchiSubsMapList.get(i).get(huchikeys);
                            }
                        }
                    }
                }
            }
            Map args_isHaveHuChiSql = new HashMap();
            args_isHaveHuChiSql.put(Const.EXPORTREPORT_studentId, studentId);
            args_isHaveHuChiSql.put("isHaveHuChi", isHaveHuChi);
            Integer isHaveHuChiNum = this.dao2._queryInt("select count(1)count from regexaminee where studentId={studentId} and examPaperNum in({isHaveHuChi[]})", args_isHaveHuChiSql);
            if (isHaveHuChiNum.intValue() > 0) {
                return "设定的互斥科目中已有科目有成绩，请检查该学生成绩";
            }
            Iterator<String> it = fujiSubsMap.keySet().iterator();
            while (it.hasNext()) {
                if (key.equals(it.next())) {
                    Examinationnum examinationnum = new Examinationnum();
                    List<Map<String, String>> examinationMapList = getExamination(examNum, gradeNum, key, studentId);
                    new ArrayList();
                    Map args_examinationnumSql = new HashMap();
                    if (examinationMapList.size() == 0) {
                        int studentIdlen = student.length();
                        if (studentIdlen > 19) {
                            student.substring(0, 19);
                        }
                        args_examinationnumSql.put("examineeNum", studentId);
                        args_examinationnumSql.put(Const.EXPORTREPORT_studentId, studentId);
                        args_examinationnumSql.put("loginUserId", loginUserId);
                        args_examinationnumSql.put(Const.EXPORTREPORT_examNum, examNum);
                        args_examinationnumSql.put(License.SCHOOL, school);
                        args_examinationnumSql.put(Const.EXPORTREPORT_gradeNum, gradeNum);
                        args_examinationnumSql.put("class2", class2);
                        args_examinationnumSql.put(Const.EXPORTREPORT_subjectNum, key);
                        examinationnum.setExaminationRoomNum("-1");
                        examinationnum.setTestingCentreId("-1");
                        examinationnumList.add(new RowArg("INSERT INTO `examinationnum` (`examinationRoomNum`, `examineeNum`, `studentId`, `insertUser`, `insertDate`, `isDelete`, `examNum`, `schoolNum`, `gradeNum`, `classNum`, `testingCentreId`, `subjectNum`, `xuankaoqufen`, `seatNum`) VALUES ('-1', {examineeNum}, {studentId}, {loginUserId}, now(), 'F', {examNum}, {school}, {gradeNum}, {class2}, '-1', {subjectNum}, NULL, '')", args_examinationnumSql));
                    } else {
                        examinationnum.setExaminationRoomNum(examinationMapList.get(0).get("testingCentreId"));
                        examinationnum.setTestingCentreId(examinationMapList.get(0).get("testingCentreId"));
                    }
                    Map<String, String> regMap = this.initDAO.getRegMap(examNum, gradeNum, key);
                    Object scan_import = regMap.get(studentId + "-" + epMap.get("pexampaperNum"));
                    if ("1".equals(String.valueOf(scan_import))) {
                        this.initDAO.delScore1Lx_all(Convert.toStr(epMap.get("exampaperNum")), Convert.toStr(epMap.get("pexampaperNum")), studentId, Convert.toStr(epMap.get("isHidden")), (String) null);
                    } else if ("0".equals(String.valueOf(scan_import))) {
                        return "已有网阅成绩,不可补录！";
                    }
                    String illSql = "INSERT INTO `illegal`  ( `regId`, `examPaperNum`, `schoolNum`, `examinationRoomNum`, `studentId`, `type`, `insertDate`, `insertUser`,`testingCentreId`)   VALUES   ({id}, {exampaperNum}, {school}, {examinationRoomNum}, '" + studentId + "', '2', now(),{loginUserId},{testingCentreId})";
                    Map args_illSql = new HashMap();
                    args_illSql.put("id", GUID.getGUIDStr());
                    args_illSql.put("exampaperNum", epMap.get("exampaperNum"));
                    args_illSql.put(License.SCHOOL, school);
                    args_illSql.put("examinationRoomNum", examinationnum.getExaminationRoomNum());
                    args_illSql.put("loginUserId", loginUserId);
                    args_illSql.put("testingCentreId", examinationnum.getTestingCentreId());
                    illList.add(new RowArg(illSql, args_illSql));
                    List<Map<String, String>> isHavRegMapList = getIsHavReg(Convert.toStr(epMap.get("exampaperNum")), school, studentId);
                    if (isHavRegMapList.size() == 0) {
                        Map args_regSql = new HashMap();
                        args_regSql.put("id", GUID.getGUIDStr());
                        args_regSql.put("exampaperNum", epMap.get("exampaperNum"));
                        args_regSql.put(License.SCHOOL, school);
                        args_regSql.put(Const.EXPORTREPORT_studentId, studentId);
                        args_regSql.put("examinationRoomNum", examinationnum.getExaminationRoomNum());
                        args_regSql.put("page", 1);
                        args_regSql.put("class2", class2);
                        args_regSql.put("loginUserId", loginUserId);
                        args_regSql.put("testingCentreId", examinationnum.getTestingCentreId());
                        regList.add(new RowArg("INSERT INTO `regexaminee`  (`id`, `examPaperNum`, `schoolNum`, `studentId`, `examinationRoomNum`, `page`, `classNum`, `insertUser`, `insertDate`, `cNum`, `type`,`testingCentreId`, `scan_import`)   VALUES ({id}, {exampaperNum}, {school}, {studentId}, {examinationRoomNum}, {page}, {class2}, {loginUserId}, now(), {id}, '2', {testingCentreId},2)", args_regSql));
                    } else {
                        updateRegListSql = "update regexaminee set scan_import='1' where examPaperNum={exampaperNum} and studentId={studentId}";
                        Map args_updateRegListSql = new HashMap();
                        args_updateRegListSql.put("exampaperNum", epMap.get("exampaperNum"));
                        args_updateRegListSql.put(Const.EXPORTREPORT_studentId, studentId);
                        updateRegList.add(args_updateRegListSql);
                    }
                }
            }
            for (String zijikeys : zijiSubsMap.keySet()) {
                if (key.equals(zijikeys)) {
                    Map args_exampaperNumSql = new HashMap();
                    args_exampaperNumSql.put(Const.EXPORTREPORT_examNum, examNum);
                    args_exampaperNumSql.put(Const.EXPORTREPORT_gradeNum, gradeNum);
                    args_exampaperNumSql.put(Const.EXPORTREPORT_subjectNum, key);
                    Map<String, ?> _querySimpleMap = this.dao2._querySimpleMap("select subjectNum,exampaperNum from  (select  pexampaperNum from  exampaper where examNum={examNum} and gradeNum={gradeNum} and subjectNUm={subjectNum})a  left join exampaper e on a.pexampaperNum=e.exampaperNUm ", args_exampaperNumSql);
                    hashMap.put(Convert.toStr(_querySimpleMap.get(Const.EXPORTREPORT_subjectNum)), _querySimpleMap.get("exampaperNum"));
                }
            }
            String isHiiden = "F";
            if (!Convert.toStr(epMap.get("exampaperNum")).equals(Convert.toStr(epMap.get("pexampaperNum")))) {
                isHiiden = "T";
            }
            Map args_studentLevelSql = new HashMap();
            args_studentLevelSql.put(Const.EXPORTREPORT_examNum, examNum);
            args_studentLevelSql.put("exampaperNum", epMap.get("exampaperNum"));
            args_studentLevelSql.put(License.SCHOOL, school);
            args_studentLevelSql.put(Const.EXPORTREPORT_gradeNum, gradeNum);
            args_studentLevelSql.put("jie", jie);
            args_studentLevelSql.put(Const.EXPORTREPORT_subjectNum, key);
            args_studentLevelSql.put("class2", class2);
            args_studentLevelSql.put("totalScore", score);
            args_studentLevelSql.put("sqts", 0);
            args_studentLevelSql.put("oqts", 0);
            args_studentLevelSql.put(Const.EXPORTREPORT_studentId, studentId);
            args_studentLevelSql.put("fullScore", fullScore);
            args_studentLevelSql.put("loginUserId", loginUserId);
            args_studentLevelSql.put("isHidden", isHiiden);
            args_studentLevelSql.put(Const.EXPORTREPORT_studentType, studentType);
            studentLevelList.add(new RowArg("INSERT INTO `importstudentlevel` (`examNum`, `examPaperNum`, `schoolNum`, `gradeNum`, `jie`, `subjectNum`, `classNum`, `totalScore`, `sqts`, `oqts`,`studentId`, `fullScore`, `insertUser`, `insertDate`, `updateUser`, `updateDate`, `isSub`, `studentType`)  VALUES  ({examNum}, {exampaperNum}, {school}, {gradeNum}, {jie}, {subjectNum}, {class2}, {totalScore}, {sqts}, {oqts}, {studentId}, {fullScore}, {loginUserId},now(), {loginUserId},now(),{isHidden}, {studentType}) ON DUPLICATE KEY UPDATE  examNum={examNum},examPaperNum={exampaperNum},schoolNum={school},gradeNum={gradeNum},jie={jie},subjectNum={subjectNum},classNum={class2},totalScore={totalScore}, sqts={sqts},oqts={oqts},studentId={studentId},fullScore={fullScore},updateUser={loginUserId},updateDate=now(),isSub={isHidden},studentType={studentType}", args_studentLevelSql));
        }
        for (String keys : hashMap.keySet()) {
            Integer zhuTiexampaperNum = Convert.toInt(hashMap.get(keys));
            Examinationnum examinationnum2 = new Examinationnum();
            List<Map<String, String>> examinationMapList2 = getExamination(examNum, gradeNum, keys, studentId);
            new ArrayList();
            Map args_examinationnumSql2 = new HashMap();
            if (examinationMapList2.size() == 0) {
                int studentIdlen2 = student.length();
                if (studentIdlen2 > 19) {
                    student.substring(0, 19);
                }
                args_examinationnumSql2.put("examineeNum", studentId);
                args_examinationnumSql2.put(Const.EXPORTREPORT_studentId, studentId);
                args_examinationnumSql2.put("loginUserId", loginUserId);
                args_examinationnumSql2.put(Const.EXPORTREPORT_examNum, examNum);
                args_examinationnumSql2.put(License.SCHOOL, school);
                args_examinationnumSql2.put(Const.EXPORTREPORT_gradeNum, gradeNum);
                args_examinationnumSql2.put("class2", class2);
                args_examinationnumSql2.put(Const.EXPORTREPORT_subjectNum, keys);
                examinationnum2.setExaminationRoomNum("-1");
                examinationnum2.setTestingCentreId("-1");
                examinationnumList.add(new RowArg("INSERT INTO `examinationnum` (`examinationRoomNum`, `examineeNum`, `studentId`, `insertUser`, `insertDate`, `isDelete`, `examNum`, `schoolNum`, `gradeNum`, `classNum`, `testingCentreId`, `subjectNum`, `xuankaoqufen`, `seatNum`) VALUES ('-1', {examineeNum}, {studentId}, {loginUserId}, now(), 'F', {examNum}, {school}, {gradeNum}, {class2}, '-1', {subjectNum}, NULL, '')", args_examinationnumSql2));
            } else {
                examinationnum2.setExaminationRoomNum(examinationMapList2.get(0).get("testingCentreId"));
                examinationnum2.setTestingCentreId(examinationMapList2.get(0).get("testingCentreId"));
            }
            Map<String, String> regMap2 = this.initDAO.getRegMap(examNum, gradeNum, keys);
            if ("1".equals(String.valueOf(regMap2.get(studentId + "a-" + Convert.toStr(zhuTiexampaperNum))))) {
                this.initDAO.delScore1Lx(zhuTiexampaperNum + "", zhuTiexampaperNum + "", studentId);
            }
            String id = GUID.getGUIDStr();
            String illSql2 = "INSERT INTO `illegal`  ( `regId`, `examPaperNum`, `schoolNum`, `examinationRoomNum`, `studentId`, `type`, `insertDate`, `insertUser`,`testingCentreId`)   VALUES   ({id}, {exampaperNum}, {school}, {examinationRoomNum}, '" + studentId + "', '2', now(),{loginUserId},{testingCentreId})";
            Map args_illSql2 = new HashMap();
            args_illSql2.put("id", id);
            args_illSql2.put("exampaperNum", zhuTiexampaperNum);
            args_illSql2.put(License.SCHOOL, school);
            args_illSql2.put("examinationRoomNum", examinationnum2.getExaminationRoomNum());
            args_illSql2.put("loginUserId", loginUserId);
            args_illSql2.put("testingCentreId", examinationnum2.getTestingCentreId());
            illList.add(new RowArg(illSql2, args_illSql2));
            List<Map<String, String>> isHavRegMapList2 = getIsHavReg(zhuTiexampaperNum.toString(), school, studentId);
            if (isHavRegMapList2.size() == 0) {
                Map args_regSql2 = new HashMap();
                args_regSql2.put("id", id);
                args_regSql2.put("exampaperNum", zhuTiexampaperNum);
                args_regSql2.put(License.SCHOOL, school);
                args_regSql2.put(Const.EXPORTREPORT_studentId, studentId);
                args_regSql2.put("examinationRoomNum", examinationnum2.getExaminationRoomNum());
                args_regSql2.put("page", 1);
                args_regSql2.put("class2", class2);
                args_regSql2.put("loginUserId", loginUserId);
                args_regSql2.put("testingCentreId", examinationnum2.getTestingCentreId());
                regList.add(new RowArg("INSERT INTO `regexaminee`  (`id`, `examPaperNum`, `schoolNum`, `studentId`, `examinationRoomNum`, `page`, `classNum`, `insertUser`, `insertDate`, `cNum`, `type`,`testingCentreId`, `scan_import`, `isImport`)   VALUES ({id}, {exampaperNum}, {school}, {studentId}, {examinationRoomNum}, {page}, {class2}, {loginUserId}, now(), {id}, '2', {testingCentreId},2,1)", args_regSql2));
            } else {
                updateRegListSql = "update regexaminee set isImport='1' where examPaperNum={exampaperNum} and studentId={studentId}";
                Map args_updateRegListSql2 = new HashMap();
                args_updateRegListSql2.put("exampaperNum", zhuTiexampaperNum);
                args_updateRegListSql2.put(Const.EXPORTREPORT_studentId, studentId);
                updateRegList.add(args_updateRegListSql2);
            }
        }
        if (null != examinationnumList) {
            try {
                if (examinationnumList.size() > 0) {
                    this.dao2._batchExecute(examinationnumList, 1000);
                }
            } catch (Exception e2) {
                throwJbcdException(e2);
            }
        }
        if (null != illList && illList.size() > 0) {
            this.dao2._batchExecute(illList, 1000);
        }
        if (null != regList && regList.size() > 0) {
            this.dao2._batchExecute(regList, 1000);
        }
        if (null != updateRegList && updateRegList.size() > 0) {
            this.dao2._batchUpdate(updateRegListSql, updateRegList, 1000);
        }
        if (null != studentLevelList && studentLevelList.size() > 0) {
            this.dao2._batchExecute(studentLevelList, 1000);
        }
        return "补录成功";
    }

    public List<Map<String, String>> getIsHavIll(String examPaperNum, String schoolNum, String studentId) {
        Map args_ishavIllSql = new HashMap();
        args_ishavIllSql.put("examPaperNum", examPaperNum);
        args_ishavIllSql.put(Const.EXPORTREPORT_schoolNum, schoolNum);
        args_ishavIllSql.put(Const.EXPORTREPORT_studentId, studentId);
        return this.dao2._queryMapList("select * from illegal where examPaperNum={examPaperNum} and schoolNum={schoolNum} and studentId={studentId}", TypeEnum.StringObject, args_ishavIllSql);
    }

    public List<Map<String, String>> getIsHavReg(String examPaperNum, String schoolNum, String studentId) {
        Map args_ishavIllSql = new HashMap();
        args_ishavIllSql.put("examPaperNum", examPaperNum);
        args_ishavIllSql.put(Const.EXPORTREPORT_schoolNum, schoolNum);
        args_ishavIllSql.put(Const.EXPORTREPORT_studentId, studentId);
        return this.dao2._queryMapList("select * from regexaminee where examPaperNum={examPaperNum} and schoolNum={schoolNum} and studentId={studentId}", TypeEnum.StringObject, args_ishavIllSql);
    }

    public String getStudentId(String school, String gradeNum, String class2, String student) {
        Map args = new HashMap();
        args.put(Const.EXPORTREPORT_schoolNum, school);
        args.put(Const.EXPORTREPORT_gradeNum, gradeNum);
        args.put(Const.EXPORTREPORT_classNum, class2);
        args.put("student", student);
        return this.dao2._queryStr("select id from student where schoolNum={schoolNum} and gradeNum={gradeNum} and classNum={classNum} and studentNum={student}", args);
    }

    public Map<String, String> getExampaperNum(String examNum, String gradeNum, String subjectNum) {
        Map args2 = new HashMap();
        args2.put(Const.EXPORTREPORT_examNum, examNum);
        args2.put(Const.EXPORTREPORT_gradeNum, gradeNum);
        args2.put(Const.EXPORTREPORT_subjectNum, subjectNum);
        return this.dao2._querySimpleMap("select exampaperNum,totalPage,pexampaperNum,isHidden,totalScore from exampaper where examnum={examNum} and gradeNum={gradeNum} and subjectNum={subjectNum}", args2);
    }

    public List<Map<String, String>> getExamination(String examNum, String gradeNum, String subjectNum, String student) {
        String subjectStr = "";
        if (!"-1".equals(subjectNum)) {
            subjectStr = " and en.subjectNum={subjectNum} ";
        }
        String sql = "SELECT cast(stu.id as char)studentId,cast(en.subjectNum as char)subjectNum,cast(en.testingCentreId as char)examineeNum ,cast(en.testingCentreId as char)testingCentreId  FROM examinationnum en  LEFT JOIN student stu ON stu.id = en.studentId  WHERE en.examNum = {examNum} and en.gradeNum ={gradeNum} " + subjectStr + " and en.studentId={student} GROUP BY stu.id,en.subjectNum";
        Map args = new HashMap();
        args.put(Const.EXPORTREPORT_subjectNum, subjectNum);
        args.put(Const.EXPORTREPORT_examNum, examNum);
        args.put(Const.EXPORTREPORT_gradeNum, gradeNum);
        args.put("student", student);
        return this.dao2._queryMapList(sql, TypeEnum.StringObject, args);
    }

    public List<Define> getdefine(String exam, String questionNum, String grade, String subject, String jie, String exampaperNum) {
        Map args = StreamMap.create().put("exampaperNum", (Object) exampaperNum).put("questionNum", (Object) questionNum);
        return this.dao2._queryBeanList("select id,examPaperNum,questionType,questionNum,page,fullScore,choosename    from define  where examPaperNum ={exampaperNum} and id={questionNum} AND choosename<>'T'     UNION ALL  SELECT sd.id,sd.examPaperNum,sd.questionType,sd.questionNum,sd.page,sd.fullScore,(case when d.choosename<>'s' then CONCAT(d.choosename,d.questionNum) else d.choosename end ) choosename from define d  LEFT JOIN subdefine sd on d.id=sd.pid  where d.examPaperNum ={exampaperNum} and d.choosename<>'T'  and sd.id={questionNum}", Define.class, args);
    }

    public String getstudentType(String schoolNum, String gradeNum, String classNum) {
        Map args = new HashMap();
        args.put(Const.EXPORTREPORT_classNum, classNum);
        args.put(Const.EXPORTREPORT_gradeNum, gradeNum);
        args.put(Const.EXPORTREPORT_schoolNum, schoolNum);
        String studentType = this.dao2._queryStr(" select studentType,gradeNum,jie from class  where id={classNum}  and gradeNum={gradeNum}  and schoolNum={schoolNum} ", args);
        return studentType;
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String L13xuankezuhe(String examNum, String gradeNum, String schoolNum, String jizhun, String rpt_name, String dirPath, String userNum, String examName, String imgRoot, String agent, String isSaveWrite) {
        String rptTitle = this.sp.getHeaderStr(examNum, (String) null, gradeNum, schoolNum, (String) null, (String) null, (String) null, true, true, false, false, false, true, false, true, false, false, false, false, false, true, false, "0", "0");
        String folderPath = "ExportFolder/reportExcel" + userNum;
        String str = "reportExcel" + userNum;
        String str2 = "reportExcel" + userNum;
        if (rpt_name == null || rpt_name.equals("")) {
            rpt_name = "L13-选科组合查询";
        }
        String excelName = rpt_name;
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFileXLSX(excelName, dirPath, folderPath);
        try {
            XSSFWorkbook wwBook = new XSSFWorkbook();
            XSSFFont font_bold = wwBook.createFont();
            font_bold.setFontHeightInPoints((short) 15);
            font_bold.setFontName("Arial");
            font_bold.setBold(true);
            XSSFCellStyle biaotis1 = wwBook.createCellStyle();
            biaotis1.setAlignment(HorizontalAlignment.LEFT);
            biaotis1.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            biaotis1.setFont(font_bold);
            XSSFFont font = wwBook.createFont();
            font.setFontHeightInPoints((short) 10);
            font.setFontName("Arial");
            XSSFCellStyle title = wwBook.createCellStyle();
            title.setAlignment(HorizontalAlignment.LEFT);
            title.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            title.setFont(font);
            title.setWrapText(true);
            XSSFCellStyle cFormat1 = wwBook.createCellStyle();
            cFormat1.setAlignment(HorizontalAlignment.CENTER);
            cFormat1.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cFormat1.setFont(font);
            cFormat1.setWrapText(true);
            cFormat1.setFillForegroundColor(Const.fillForeground_color);
            cFormat1.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cFormat1.setBorderTop(BorderStyle.THIN);
            cFormat1.setBorderRight(BorderStyle.THIN);
            cFormat1.setBorderBottom(BorderStyle.THIN);
            cFormat1.setBorderLeft(BorderStyle.THIN);
            XSSFCellStyle cFormat2 = wwBook.createCellStyle();
            cFormat2.setAlignment(HorizontalAlignment.CENTER);
            cFormat2.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cFormat2.setFont(font);
            cFormat2.setWrapText(true);
            cFormat2.setFillForegroundColor(Const.fillForeground_color2);
            cFormat2.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cFormat2.setBorderTop(BorderStyle.THIN);
            cFormat2.setBorderRight(BorderStyle.THIN);
            cFormat2.setBorderBottom(BorderStyle.THIN);
            cFormat2.setBorderLeft(BorderStyle.THIN);
            XSSFCellStyle cFormat3 = wwBook.createCellStyle();
            cFormat3.setAlignment(HorizontalAlignment.CENTER);
            cFormat3.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cFormat3.setFont(font);
            cFormat3.setWrapText(true);
            cFormat3.setFillForegroundColor(Const.fillForeground_color3);
            cFormat3.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cFormat3.setBorderTop(BorderStyle.THIN);
            cFormat3.setBorderRight(BorderStyle.THIN);
            cFormat3.setBorderBottom(BorderStyle.THIN);
            cFormat3.setBorderLeft(BorderStyle.THIN);
            XSSFCellStyle cFormat2_left = wwBook.createCellStyle();
            cFormat2_left.setAlignment(HorizontalAlignment.LEFT);
            cFormat2_left.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cFormat2_left.setFont(font);
            cFormat2_left.setWrapText(true);
            cFormat2_left.setFillForegroundColor(Const.fillForeground_color2);
            cFormat2_left.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cFormat2_left.setBorderTop(BorderStyle.THIN);
            cFormat2_left.setBorderRight(BorderStyle.THIN);
            cFormat2_left.setBorderBottom(BorderStyle.THIN);
            cFormat2_left.setBorderLeft(BorderStyle.THIN);
            XSSFCellStyle cFormat3_left = wwBook.createCellStyle();
            cFormat3_left.setAlignment(HorizontalAlignment.LEFT);
            cFormat3_left.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
            cFormat3_left.setFont(font);
            cFormat3_left.setWrapText(true);
            cFormat3_left.setFillForegroundColor(Const.fillForeground_color3);
            cFormat3_left.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cFormat3_left.setBorderTop(BorderStyle.THIN);
            cFormat3_left.setBorderRight(BorderStyle.THIN);
            cFormat3_left.setBorderBottom(BorderStyle.THIN);
            cFormat3_left.setBorderLeft(BorderStyle.THIN);
            new DecimalFormat("0.00");
            List<List> quest = this.L13.getData(examNum, gradeNum, schoolNum, jizhun);
            List<String> list1 = quest.get(0);
            List<List<Map<String, Object>>> list2 = quest.get(1);
            try {
                try {
                    XSSFSheet sheet = wwBook.createSheet();
                    wwBook.setSheetName(0, rpt_name);
                    sheet.setDisplayGridlines(false);
                    try {
                        XSSFRow row0_0 = sheet.createRow(0);
                        XSSFCell biaotou = row0_0.createCell(0);
                        biaotou.setCellValue(rpt_name);
                        biaotou.setCellStyle(biaotis1);
                        XSSFRow row0_1 = sheet.createRow(1);
                        row0_1.setHeight((short) 500);
                        XSSFCell xinxi = row0_1.createCell(0);
                        xinxi.setCellValue(rptTitle);
                        xinxi.setCellStyle(title);
                        sheet.addMergedRegion(new CellRangeAddress(0, 0, 0, 17));
                        sheet.addMergedRegion(new CellRangeAddress(1, 1, 0, 17));
                        XSSFRow row0_2 = sheet.createRow(2);
                        XSSFCell xkzh = row0_2.createCell(0);
                        xkzh.setCellValue("选科组合");
                        xkzh.setCellStyle(cFormat1);
                        sheet.setColumnWidth(0, 3120);
                        for (int i = 0; i < list2.size(); i++) {
                            XSSFCell xx = row0_2.createCell((i * 2) + 1);
                            xx.setCellValue(list2.get(i).get(0).get("schoolName") + "");
                            xx.setCellStyle(cFormat1);
                            sheet.setColumnWidth((i * 2) + 1, 3120);
                            XSSFCell bl = row0_2.createCell((i * 2) + 2);
                            bl.setCellValue("占比%");
                            bl.setCellStyle(cFormat1);
                            sheet.setColumnWidth((i * 2) + 2, 2080);
                        }
                        new DecimalFormat("######0.00");
                        for (int k = 0; k < list1.size(); k++) {
                            XSSFRow row0_3k = sheet.createRow(3 + k);
                            if (k % 2 != 0) {
                                if (list1.get(k).length() > 3) {
                                    XSSFCell bl2 = row0_3k.createCell(0);
                                    bl2.setCellValue(list1.get(k) + "");
                                    bl2.setCellStyle(cFormat2_left);
                                } else {
                                    XSSFCell bl3 = row0_3k.createCell(0);
                                    bl3.setCellValue(list1.get(k) + "");
                                    bl3.setCellStyle(cFormat2);
                                }
                                for (int i2 = 0; i2 < list2.size(); i2++) {
                                    XSSFCell xx2 = row0_3k.createCell((i2 * 2) + 1);
                                    xx2.setCellValue(Integer.parseInt(list2.get(i2).get(k).get("c_Num") + ""));
                                    xx2.setCellStyle(cFormat2);
                                    String s = list2.get(i2).get(k).get("zyl").toString();
                                    String s1 = s.substring(0, s.indexOf(".") + 3);
                                    XSSFCell bl1 = row0_3k.createCell((i2 * 2) + 2);
                                    bl1.setCellValue(Double.valueOf(s1).doubleValue());
                                    bl1.setCellStyle(cFormat2);
                                }
                            } else {
                                if (list1.get(k).length() > 3) {
                                    XSSFCell bl4 = row0_3k.createCell(0);
                                    bl4.setCellValue(list1.get(k) + "");
                                    bl4.setCellStyle(cFormat3_left);
                                } else {
                                    XSSFCell bl5 = row0_3k.createCell(0);
                                    bl5.setCellValue(list1.get(k) + "");
                                    bl5.setCellStyle(cFormat3);
                                }
                                for (int i3 = 0; i3 < list2.size(); i3++) {
                                    XSSFCell xx3 = row0_3k.createCell((i3 * 2) + 1);
                                    xx3.setCellValue(Integer.parseInt(list2.get(i3).get(k).get("c_Num") + ""));
                                    xx3.setCellStyle(cFormat3);
                                    String s2 = list2.get(i3).get(k).get("zyl").toString();
                                    String s12 = s2.substring(0, s2.indexOf(".") + 3);
                                    XSSFCell bl12 = row0_3k.createCell((i3 * 2) + 2);
                                    bl12.setCellValue(Double.valueOf(s12).doubleValue());
                                    bl12.setCellStyle(cFormat3);
                                }
                            }
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    FileOutputStream fileOut = new FileOutputStream(excelFile);
                    wwBook.write(fileOut);
                    fileOut.close();
                    if (wwBook != null) {
                        try {
                            wwBook.close();
                            if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                                HttpServletResponse response = ServletActionContext.getResponse();
                                response.reset();
                                ServletOutputStream outputStream = response.getOutputStream();
                                String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                String loadFileName2 = loadFileName.replace("+", " ");
                                response.setContentType("Content-type: applicationnd.ms-excel");
                                response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xlsx");
                                response.setHeader("Content-length", String.valueOf(excelFile.length()));
                                byte[] tempByte = new byte[1024];
                                FileInputStream in = new FileInputStream(excelFile);
                                while (true) {
                                    int n = in.read(tempByte);
                                    if (n == -1) {
                                        break;
                                    }
                                    try {
                                        outputStream.write(tempByte, 0, n);
                                    } catch (Exception e2) {
                                        this.log.error("保存未成功", e2);
                                    }
                                }
                                outputStream.flush();
                                outputStream.close();
                                in.close();
                            }
                        } catch (Exception e3) {
                            e3.printStackTrace();
                        }
                    }
                } catch (Exception e4) {
                    if (wwBook != null) {
                        try {
                            wwBook.close();
                            if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                                HttpServletResponse response2 = ServletActionContext.getResponse();
                                response2.reset();
                                ServletOutputStream outputStream2 = response2.getOutputStream();
                                String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                String loadFileName4 = loadFileName3.replace("+", " ");
                                response2.setContentType("Content-type: applicationnd.ms-excel");
                                response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xlsx");
                                response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                                byte[] tempByte2 = new byte[1024];
                                FileInputStream in2 = new FileInputStream(excelFile);
                                while (true) {
                                    int n2 = in2.read(tempByte2);
                                    if (n2 == -1) {
                                        break;
                                    }
                                    try {
                                        outputStream2.write(tempByte2, 0, n2);
                                    } catch (Exception e5) {
                                        this.log.error("保存未成功", e5);
                                    }
                                }
                                outputStream2.flush();
                                outputStream2.close();
                                in2.close();
                            }
                        } catch (Exception e6) {
                            e6.printStackTrace();
                        }
                    }
                }
            } catch (Throwable th) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response3 = ServletActionContext.getResponse();
                            response3.reset();
                            ServletOutputStream outputStream3 = response3.getOutputStream();
                            String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName6 = loadFileName5.replace("+", " ");
                            response3.setContentType("Content-type: applicationnd.ms-excel");
                            response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xlsx");
                            response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte3 = new byte[1024];
                            FileInputStream in3 = new FileInputStream(excelFile);
                            while (true) {
                                int n3 = in3.read(tempByte3);
                                if (n3 == -1) {
                                    break;
                                }
                                try {
                                    outputStream3.write(tempByte3, 0, n3);
                                } catch (Exception e7) {
                                    this.log.error("保存未成功", e7);
                                }
                            }
                            outputStream3.flush();
                            outputStream3.close();
                            in3.close();
                        }
                    } catch (Exception e8) {
                        e8.printStackTrace();
                        throw th;
                    }
                }
                throw th;
            }
        } catch (Exception e9) {
            e9.printStackTrace();
        }
        return null;
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String exportC25Data(String examNum, String gradeNum, String subjectNum, String teachUnit, String teachUnit_s, String studentType, String type, String source, String rptTitle, String dirPath, String rpt_name, String loginUserNum, String agent, String zhType) {
        CellStyle cellStyle;
        CellStyle cellStyle2;
        String folderPath = "ExportFolder/reportExcel" + loginUserNum;
        String str = "reportExcel" + loginUserNum;
        String str2 = "reportExcel" + loginUserNum;
        String excelName = rpt_name + "_" + gradeNum;
        File excelFile = getRptExcelFileXLSX(excelName, dirPath, folderPath);
        XSSFWorkbook wwBook = new XSSFWorkbook();
        try {
            XSSFFont font = wwBook.createFont();
            font.setFontHeightInPoints((short) 15);
            font.setFontName("新宋体");
            XSSFCellStyle biaotis1 = wwBook.createCellStyle();
            biaotis1.setAlignment(HorizontalAlignment.CENTER);
            biaotis1.setFont(font);
            XSSFFont font2 = wwBook.createFont();
            font2.setFontHeightInPoints((short) 10);
            font2.setFontName("新宋体");
            XSSFCellStyle title = wwBook.createCellStyle();
            title.setAlignment(HorizontalAlignment.CENTER);
            title.setFont(font2);
            title.setWrapText(false);
            XSSFDataFormat createDataFormat = wwBook.createDataFormat();
            XSSFCellStyle cFormat1 = wwBook.createCellStyle();
            cFormat1.setAlignment(HorizontalAlignment.CENTER);
            cFormat1.setFont(font2);
            cFormat1.setFillForegroundColor(Const.fillForeground_color);
            cFormat1.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            cFormat1.setBorderTop(BorderStyle.THIN);
            cFormat1.setBorderRight(BorderStyle.THIN);
            cFormat1.setBorderBottom(BorderStyle.THIN);
            cFormat1.setBorderLeft(BorderStyle.THIN);
            cFormat1.setWrapText(false);
            CellStyle createCellStyle = wwBook.createCellStyle();
            createCellStyle.setAlignment(HorizontalAlignment.CENTER);
            createCellStyle.setFont(font2);
            createCellStyle.setFillForegroundColor(Const.fillForeground_color2);
            createCellStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            createCellStyle.setBorderTop(BorderStyle.THIN);
            createCellStyle.setBorderRight(BorderStyle.THIN);
            createCellStyle.setBorderBottom(BorderStyle.THIN);
            createCellStyle.setBorderLeft(BorderStyle.THIN);
            createCellStyle.setWrapText(false);
            CellStyle createCellStyle2 = wwBook.createCellStyle();
            createCellStyle2.setAlignment(HorizontalAlignment.CENTER);
            createCellStyle2.setFont(font2);
            createCellStyle2.setFillForegroundColor(Const.fillForeground_color2);
            createCellStyle2.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            createCellStyle2.setBorderTop(BorderStyle.THIN);
            createCellStyle2.setBorderRight(BorderStyle.THIN);
            createCellStyle2.setBorderBottom(BorderStyle.THIN);
            createCellStyle2.setBorderLeft(BorderStyle.THIN);
            createCellStyle2.setWrapText(false);
            createCellStyle2.setDataFormat(createDataFormat.getFormat("0.00%"));
            CellStyle createCellStyle3 = wwBook.createCellStyle();
            createCellStyle3.setAlignment(HorizontalAlignment.CENTER);
            createCellStyle3.setFont(font2);
            createCellStyle3.setFillForegroundColor(Const.fillForeground_color3);
            createCellStyle3.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            createCellStyle3.setBorderTop(BorderStyle.THIN);
            createCellStyle3.setBorderRight(BorderStyle.THIN);
            createCellStyle3.setBorderBottom(BorderStyle.THIN);
            createCellStyle3.setBorderLeft(BorderStyle.THIN);
            createCellStyle3.setWrapText(false);
            CellStyle createCellStyle4 = wwBook.createCellStyle();
            createCellStyle4.setAlignment(HorizontalAlignment.CENTER);
            createCellStyle4.setFont(font2);
            createCellStyle4.setFillForegroundColor(Const.fillForeground_color3);
            createCellStyle4.setFillPattern(FillPatternType.SOLID_FOREGROUND);
            createCellStyle4.setBorderTop(BorderStyle.THIN);
            createCellStyle4.setBorderRight(BorderStyle.THIN);
            createCellStyle4.setBorderBottom(BorderStyle.THIN);
            createCellStyle4.setBorderLeft(BorderStyle.THIN);
            createCellStyle4.setWrapText(false);
            createCellStyle4.setDataFormat(createDataFormat.getFormat("0.00%"));
            try {
                try {
                    XSSFSheet sheet = wwBook.createSheet(rpt_name);
                    try {
                        List<DengJi> list = this.c19.getC25Data(examNum, gradeNum, subjectNum, teachUnit, teachUnit_s, studentType, type, source, zhType);
                        String rowtitle = "1".equals(zhType) ? "中考科目等级组合" : "总分等级组合";
                        String coltitle = "allschool".equals(teachUnit) ? "学校名称" : "班级名称";
                        XSSFRow row0 = sheet.createRow(0);
                        XSSFCell cell00 = row0.createCell(0);
                        cell00.setCellValue(rpt_name);
                        cell00.setCellStyle(biaotis1);
                        XSSFRow row1 = sheet.createRow(1);
                        XSSFCell cell10 = row1.createCell(0);
                        cell10.setCellValue(rptTitle);
                        XSSFRow row2 = sheet.createRow(2);
                        XSSFCell cell20 = row2.createCell(0);
                        cell20.setCellValue(rowtitle);
                        cell20.setCellStyle(cFormat1);
                        XSSFRow row3 = sheet.createRow(3);
                        XSSFCell cell30 = row3.createCell(0);
                        cell30.setCellValue(coltitle);
                        cell30.setCellStyle(cFormat1);
                        sheet.setColumnWidth(0, 7680);
                        if (list.size() > 0) {
                            String[] dengjiArray = list.get(0).getDengji().split(Const.STRING_SEPERATOR);
                            for (int m = 0; m < dengjiArray.length; m++) {
                                CellRangeAddress cra = new CellRangeAddress(2, 2, (m * 2) + 1, (m * 2) + 2);
                                sheet.addMergedRegion(cra);
                                XSSFCell cell21 = row2.createCell((m * 2) + 1);
                                cell21.setCellValue(dengjiArray[m]);
                                cell21.setCellStyle(cFormat1);
                                XSSFCell cell31 = row3.createCell((m * 2) + 1);
                                cell31.setCellValue("人数");
                                cell31.setCellStyle(cFormat1);
                                XSSFCell cell32 = row3.createCell((m * 2) + 2);
                                cell32.setCellValue("比例");
                                cell32.setCellStyle(cFormat1);
                            }
                            for (int j = 0; j < list.size(); j++) {
                                DengJi dengJi = list.get(j);
                                if (j % 2 == 0) {
                                    cellStyle = createCellStyle3;
                                    cellStyle2 = createCellStyle4;
                                } else {
                                    cellStyle = createCellStyle;
                                    cellStyle2 = createCellStyle2;
                                }
                                XSSFRow row4 = sheet.createRow(j + 4);
                                XSSFCell cell40 = row4.createCell(0);
                                cell40.setCellValue(dengJi.getClassName());
                                cell40.setCellStyle(cellStyle);
                                String[] renshuArray = dengJi.getRenshu().split(Const.STRING_SEPERATOR);
                                String[] biliArray = dengJi.getOne().split(Const.STRING_SEPERATOR);
                                for (int n = 0; n < renshuArray.length; n++) {
                                    String bili = "-".equals(biliArray[n]) ? "" : biliArray[n].toString();
                                    XSSFCell cell41 = row4.createCell((n * 2) + 1);
                                    cell41.setCellValue(Integer.valueOf(renshuArray[n]).intValue());
                                    cell41.setCellStyle(cellStyle);
                                    if (bili.equals("")) {
                                        XSSFCell cell42 = row4.createCell((n * 2) + 2);
                                        cell42.setCellValue(bili);
                                        cell42.setCellStyle(cellStyle);
                                    } else {
                                        Double bili2 = Double.valueOf(Convert.toDouble(bili).doubleValue() / 100.0d);
                                        XSSFCell cell422 = row4.createCell((n * 2) + 2);
                                        cell422.setCellValue(bili2.doubleValue());
                                        cell422.setCellStyle(cellStyle2);
                                    }
                                }
                            }
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    FileOutputStream fileOut = new FileOutputStream(excelFile);
                    wwBook.write(fileOut);
                    fileOut.close();
                    if (wwBook != null) {
                        try {
                            HttpServletResponse response = ServletActionContext.getResponse();
                            response.reset();
                            ServletOutputStream outputStream = response.getOutputStream();
                            String excelName2 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            response.setContentType("Content-type: applicationnd.ms-excel");
                            response.setHeader("Content-disposition", "attachment;filename=" + excelName2 + ".xls");
                            response.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte = new byte[1024];
                            FileInputStream in = new FileInputStream(excelFile);
                            while (true) {
                                int n2 = in.read(tempByte);
                                if (n2 == -1) {
                                    break;
                                }
                                try {
                                    outputStream.write(tempByte, 0, n2);
                                } catch (Exception e2) {
                                    this.log.error("保存未成功", e2);
                                }
                            }
                            outputStream.flush();
                            outputStream.close();
                            in.close();
                        } catch (Exception e3) {
                            e3.printStackTrace();
                        }
                    }
                } catch (Throwable th) {
                    if (wwBook != null) {
                        try {
                            HttpServletResponse response2 = ServletActionContext.getResponse();
                            response2.reset();
                            ServletOutputStream outputStream2 = response2.getOutputStream();
                            String excelName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            response2.setContentType("Content-type: applicationnd.ms-excel");
                            response2.setHeader("Content-disposition", "attachment;filename=" + excelName3 + ".xls");
                            response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte2 = new byte[1024];
                            FileInputStream in2 = new FileInputStream(excelFile);
                            while (true) {
                                int n3 = in2.read(tempByte2);
                                if (n3 == -1) {
                                    break;
                                }
                                try {
                                    outputStream2.write(tempByte2, 0, n3);
                                } catch (Exception e4) {
                                    this.log.error("保存未成功", e4);
                                }
                            }
                            outputStream2.flush();
                            outputStream2.close();
                            in2.close();
                        } catch (Exception e5) {
                            e5.printStackTrace();
                            throw th;
                        }
                    }
                    throw th;
                }
            } catch (Exception e6) {
                if (wwBook != null) {
                    try {
                        HttpServletResponse response3 = ServletActionContext.getResponse();
                        response3.reset();
                        ServletOutputStream outputStream3 = response3.getOutputStream();
                        String excelName4 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                        response3.setContentType("Content-type: applicationnd.ms-excel");
                        response3.setHeader("Content-disposition", "attachment;filename=" + excelName4 + ".xls");
                        response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                        byte[] tempByte3 = new byte[1024];
                        FileInputStream in3 = new FileInputStream(excelFile);
                        while (true) {
                            int n4 = in3.read(tempByte3);
                            if (n4 == -1) {
                                break;
                            }
                            try {
                                outputStream3.write(tempByte3, 0, n4);
                            } catch (Exception e7) {
                                this.log.error("保存未成功", e7);
                            }
                        }
                        outputStream3.flush();
                        outputStream3.close();
                        in3.close();
                    } catch (Exception e8) {
                        e8.printStackTrace();
                    }
                }
            }
        } catch (Exception e9) {
            e9.printStackTrace();
        }
        return null;
    }

    /* JADX WARN: Multi-variable type inference failed */
    @Override // com.dmj.service.reportManagement.ReportExportService
    public String exportC28Data(String schoolNum, String gradeNum, String jie, String examNum, String statisticType, String source, String rptTitle, String dirPath, String rpt_name, String loginUserNum, String agent) {
        String folderPath = "ExportFolder/reportExcel" + loginUserNum;
        String str = "reportExcel" + loginUserNum;
        String str2 = "reportExcel" + loginUserNum;
        String excelName = rpt_name + "_" + gradeNum;
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        try {
            WritableWorkbook wwBook = Workbook.createWorkbook(excelFile);
            WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
            biaotis1.setAlignment(Alignment.LEFT);
            biaotis1.setVerticalAlignment(VerticalAlignment.CENTRE);
            WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            NumberFormat nf1 = new NumberFormat("0.00");
            WritableCellFormat cFormat1 = getCellFormat(font1, nf1, Const.titleBackground_color);
            WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            NumberFormat nf2 = new NumberFormat("0.00");
            CellFormat cellFormat = getCellFormat(font2, nf2, Const.textOuBackGround_color);
            WritableFont font2_red = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.G27RedFont_color);
            NumberFormat nf22 = new NumberFormat("0.00");
            CellFormat cellFormat2 = getCellFormat(font2_red, nf22, Const.textOuBackGround_color);
            WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            NumberFormat nf3 = new NumberFormat("0.00");
            CellFormat cellFormat3 = getCellFormat(font3, nf3, Const.textJiBackGround_color);
            WritableFont font3_red = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.G27RedFont_color);
            NumberFormat nf32 = new NumberFormat("0.00");
            CellFormat cellFormat4 = getCellFormat(font3_red, nf32, Const.textJiBackGround_color);
            try {
                WritableSheet sheet = wwBook.createSheet(rpt_name, 0);
                sheet.getSettings().setShowGridLines(false);
                try {
                    List<Object> list = this.c19.getC28Data(schoolNum, gradeNum, jie, examNum, statisticType, source);
                    List<String> examList = (List) list.get(0);
                    List<Object> userList = (List) list.get(1);
                    Label biaotou = new Label(0, 0, rpt_name, biaotis1);
                    sheet.addCell(biaotou);
                    if (examList.size() > 0) {
                        String[] tit = {"科目", "教师", "学科平均偏差", "任教班级", "班级平均偏差"};
                        int comTitLen = tit.length;
                        for (int t = 0; t < comTitLen; t++) {
                            sheet.setColumnView(t, 15);
                            sheet.mergeCells(t, 1, t, 2);
                            Label t_item = new Label(t, 1, tit[t], cFormat1);
                            sheet.addCell(t_item);
                        }
                        for (int e = 0; e < examList.size(); e++) {
                            comTitLen += e * 3;
                            sheet.mergeCells(comTitLen, 1, comTitLen + 2, 1);
                            Label t_exam = new Label(comTitLen, 1, examList.get(e), cFormat1);
                            sheet.addCell(t_exam);
                            String[] eArr = {"预估平均分", "实考平均分", "偏差"};
                            for (int i = 0; i < eArr.length; i++) {
                                sheet.setColumnView(comTitLen + i, 10);
                                Label t_yugu = new Label(comTitLen + i, 2, eArr[i], cFormat1);
                                sheet.addCell(t_yugu);
                            }
                        }
                        if (userList.size() > 0) {
                            int leiji = 3;
                            for (int u = 0; u < userList.size(); u++) {
                                if (u % 2 == 0) {
                                }
                                List<Object> uExamList = (List) userList.get(u);
                                int uExamLen = uExamList.size();
                                for (int ue = 0; ue < uExamLen; ue++) {
                                    Object[] obj = (Object[]) uExamList.get(ue);
                                    String[] yugu = obj[5].toString().split(Const.STRING_SEPERATOR);
                                    String[] shikao = obj[6].toString().split(Const.STRING_SEPERATOR);
                                    String[] piancha_e = obj[7].toString().split(Const.STRING_SEPERATOR);
                                    String[] strArr = {yugu, shikao, piancha_e};
                                    Object[] data = {obj[0], obj[1], obj[2], obj[3], obj[4]};
                                    int comdata = data.length;
                                    if (ue == 0) {
                                        for (int d = 0; d < comdata; d++) {
                                            CellFormat cellFormat5 = u % 2 == 0 ? cellFormat3 : cellFormat;
                                            if (d < 3) {
                                                sheet.mergeCells(d, ue + leiji, d, ((ue + leiji) + uExamLen) - 1);
                                            }
                                            if ((d == 2 || d == 4) && !"-".equals(data[d])) {
                                                Number d_item = new Number(d, ue + leiji, Double.valueOf(data[d].toString()).doubleValue(), cellFormat5);
                                                sheet.addCell(d_item);
                                            } else {
                                                Label d_item2 = new Label(d, ue + leiji, data[d].toString(), cellFormat5);
                                                sheet.addCell(d_item2);
                                            }
                                        }
                                    } else {
                                        for (int d2 = 3; d2 < comdata; d2++) {
                                            CellFormat cellFormat6 = u % 2 == 0 ? cellFormat3 : cellFormat;
                                            if (d2 != 4 || "-".equals(data[d2])) {
                                                Label d_item3 = new Label(d2, ue + leiji, data[d2].toString(), cellFormat6);
                                                sheet.addCell(d_item3);
                                            } else {
                                                Number d_item4 = new Number(d2, ue + leiji, Double.valueOf(data[d2].toString()).doubleValue(), cellFormat6);
                                                sheet.addCell(d_item4);
                                            }
                                        }
                                    }
                                    for (int e2 = 0; e2 < examList.size(); e2++) {
                                        comdata += e2 * 3;
                                        for (int i2 = 0; i2 < strArr.length; i2++) {
                                            sheet.setColumnView(comdata + i2, 10);
                                            CellFormat cellFormat7 = u % 2 == 0 ? cellFormat3 : cellFormat;
                                            if ("-".equals(strArr[i2][e2])) {
                                                Label d_yugu = new Label(comdata + i2, ue + leiji, strArr[i2][e2], cellFormat7);
                                                sheet.addCell(d_yugu);
                                            } else {
                                                if (i2 == 2) {
                                                    String[] mindev = obj[8].toString().split(Const.STRING_SEPERATOR);
                                                    String[] maxdev = obj[9].toString().split(Const.STRING_SEPERATOR);
                                                    double min = Double.valueOf(mindev[e2]).doubleValue();
                                                    double max = Double.valueOf(maxdev[e2]).doubleValue();
                                                    double piancha = Double.valueOf(strArr[i2][e2]).doubleValue();
                                                    if (piancha > max || piancha < min) {
                                                        cellFormat7 = u % 2 == 0 ? cellFormat4 : cellFormat2;
                                                    }
                                                }
                                                Number d_yugu2 = new Number(comdata + i2, ue + leiji, Double.valueOf(strArr[i2][e2]).doubleValue(), cellFormat7);
                                                sheet.addCell(d_yugu2);
                                            }
                                        }
                                    }
                                }
                                leiji += uExamLen;
                            }
                        }
                    }
                } catch (Exception e3) {
                    e3.printStackTrace();
                }
                wwBook.write();
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        HttpServletResponse response = ServletActionContext.getResponse();
                        response.reset();
                        ServletOutputStream outputStream = response.getOutputStream();
                        String excelName2 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                        response.setContentType("Content-type: applicationnd.ms-excel");
                        response.setHeader("Content-disposition", "attachment;filename=" + excelName2 + ".xls");
                        response.setHeader("Content-length", String.valueOf(excelFile.length()));
                        byte[] tempByte = new byte[1024];
                        FileInputStream in = new FileInputStream(excelFile);
                        while (true) {
                            int n = in.read(tempByte);
                            if (n == -1) {
                                break;
                            }
                            try {
                                outputStream.write(tempByte, 0, n);
                            } catch (Exception e4) {
                                this.log.error("保存未成功", e4);
                            }
                        }
                        outputStream.flush();
                        outputStream.close();
                        in.close();
                    } catch (WriteException e5) {
                        e5.printStackTrace();
                    }
                }
            } catch (Exception e6) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        HttpServletResponse response2 = ServletActionContext.getResponse();
                        response2.reset();
                        ServletOutputStream outputStream2 = response2.getOutputStream();
                        String excelName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                        response2.setContentType("Content-type: applicationnd.ms-excel");
                        response2.setHeader("Content-disposition", "attachment;filename=" + excelName3 + ".xls");
                        response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                        byte[] tempByte2 = new byte[1024];
                        FileInputStream in2 = new FileInputStream(excelFile);
                        while (true) {
                            int n2 = in2.read(tempByte2);
                            if (n2 == -1) {
                                break;
                            }
                            try {
                                outputStream2.write(tempByte2, 0, n2);
                            } catch (Exception e7) {
                                this.log.error("保存未成功", e7);
                            }
                        }
                        outputStream2.flush();
                        outputStream2.close();
                        in2.close();
                    } catch (WriteException e8) {
                        e8.printStackTrace();
                    }
                }
            } catch (Throwable th) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        HttpServletResponse response3 = ServletActionContext.getResponse();
                        response3.reset();
                        ServletOutputStream outputStream3 = response3.getOutputStream();
                        String excelName4 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                        response3.setContentType("Content-type: applicationnd.ms-excel");
                        response3.setHeader("Content-disposition", "attachment;filename=" + excelName4 + ".xls");
                        response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                        byte[] tempByte3 = new byte[1024];
                        FileInputStream in3 = new FileInputStream(excelFile);
                        while (true) {
                            int n3 = in3.read(tempByte3);
                            if (n3 == -1) {
                                break;
                            }
                            try {
                                outputStream3.write(tempByte3, 0, n3);
                            } catch (Exception e9) {
                                this.log.error("保存未成功", e9);
                            }
                        }
                        outputStream3.flush();
                        outputStream3.close();
                        in3.close();
                    } catch (WriteException e10) {
                        e10.printStackTrace();
                        throw th;
                    }
                }
                throw th;
            }
        } catch (Exception e11) {
            e11.printStackTrace();
        }
        return null;
    }

    public WritableCellFormat getCellFormat(WritableFont font, NumberFormat nf, Colour color) {
        WritableCellFormat cFormat = new WritableCellFormat(font, nf);
        try {
            cFormat.setBackground(color);
            cFormat.setAlignment(Alignment.CENTRE);
            cFormat.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat.setWrap(true);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return cFormat;
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String teaIntegral_exportgetData(String examNum, String gradeNum, String schoolNum, String subjectNum, String classNum, String studentId, String studentType, String type, String source, String step, String sNum, String c_exam, String rpt_name, String isMoreSchool, String rptTitle, String isHistory, String isSaveWrite, String dirPath, String uri, String userNum, String schName, String gradeName, String className, String subjectName, String imgRoot, String agent, String rank, String fufen, String subCompose, String islevel, String teachUnit, String teachUnit_s, String ordertype, String orderval) {
        String rptTitle2 = this.sp.getHeaderStr(examNum, subjectNum, gradeNum, schoolNum, classNum, studentId, studentType, true, true, true, true, false, true, false, true, false, false, false, false, false, false, false, subCompose, fufen);
        List quest = this.reportService.getTeacherIntegral(examNum, gradeNum, schoolNum, subjectNum, studentType, type, source, c_exam, "0", rank, fufen, subCompose, islevel, teachUnit, teachUnit_s, ordertype, orderval);
        String folderPath = "ExportFolder/reportExcel" + userNum;
        String str = "reportExcel" + userNum;
        String str2 = "reportExcel" + userNum;
        String excelName = (null == gradeName || "".equals(gradeName)) ? rpt_name + "_" + gradeNum : rpt_name + "_" + gradeName;
        if (null != classNum && !"".equals(classNum) && !classNum.contains(Const.STRING_SEPERATOR)) {
            excelName = (null == className || "".equals(className)) ? excelName + "_" + classNum : excelName + "_" + className;
        }
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        try {
            WritableWorkbook wwBook = Workbook.createWorkbook(excelFile);
            WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
            biaotis1.setAlignment(Alignment.LEFT);
            biaotis1.setVerticalAlignment(VerticalAlignment.CENTRE);
            WritableFont titles = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat title = new WritableCellFormat(titles);
            title.setAlignment(Alignment.LEFT);
            title.setVerticalAlignment(VerticalAlignment.CENTRE);
            title.setWrap(true);
            WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            WritableCellFormat cFormat1 = new WritableCellFormat(font1);
            cFormat1.setAlignment(Alignment.CENTRE);
            cFormat1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1.setBackground(Const.titleBackground_color);
            cFormat1.setWrap(true);
            WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat2 = new WritableCellFormat(font2);
            cFormat2.setAlignment(Alignment.CENTRE);
            cFormat2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2.setBackground(Const.textOuBackGround_color);
            cFormat2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2.setWrap(true);
            DateFormat df1 = new DateFormat("0.0%");
            WritableCellFormat cFormat2_0 = new WritableCellFormat(font2, df1);
            cFormat2_0.setAlignment(Alignment.CENTRE);
            cFormat2_0.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_0.setBackground(Const.textOuBackGround_color);
            cFormat2_0.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_0.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_0.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_0.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_0.setWrap(true);
            NumberFormat nf1 = new NumberFormat("0.0");
            WritableCellFormat cFormat2_1 = new WritableCellFormat(font2, nf1);
            cFormat2_1.setAlignment(Alignment.CENTRE);
            cFormat2_1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_1.setBackground(Const.textOuBackGround_color);
            cFormat2_1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_1.setWrap(true);
            NumberFormat nf2 = new NumberFormat("0.00");
            WritableCellFormat cFormat2_2 = new WritableCellFormat(font2, nf2);
            cFormat2_2.setAlignment(Alignment.CENTRE);
            cFormat2_2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_2.setBackground(Const.textOuBackGround_color);
            cFormat2_2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_2.setWrap(true);
            WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat3 = new WritableCellFormat(font3);
            cFormat3.setAlignment(Alignment.CENTRE);
            cFormat3.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3.setBackground(Const.textJiBackGround_color);
            cFormat3.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3.setWrap(true);
            WritableCellFormat cFormat3_0 = new WritableCellFormat(font3, df1);
            cFormat3_0.setAlignment(Alignment.CENTRE);
            cFormat3_0.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_0.setBackground(Const.textJiBackGround_color);
            cFormat3_0.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_0.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_0.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_0.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_0.setWrap(true);
            WritableCellFormat cFormat3_1 = new WritableCellFormat(font3, nf1);
            cFormat3_1.setAlignment(Alignment.CENTRE);
            cFormat3_1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_1.setBackground(Const.textJiBackGround_color);
            cFormat3_1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_1.setWrap(true);
            WritableCellFormat cFormat3_2 = new WritableCellFormat(font3, nf2);
            cFormat3_2.setAlignment(Alignment.CENTRE);
            cFormat3_2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_2.setBackground(Const.textJiBackGround_color);
            cFormat3_2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_2.setWrap(true);
            WritableFont font4 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat4 = new WritableCellFormat(font4);
            cFormat4.setAlignment(Alignment.LEFT);
            cFormat4.setBackground(Const.subject_color);
            cFormat4.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat4.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat4.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat4.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat4.setWrap(true);
            try {
                try {
                    WritableSheet sheet = wwBook.createSheet(rpt_name, 0);
                    sheet.getSettings().setShowGridLines(false);
                    try {
                        Label biaotou = new Label(0, 0, rpt_name, biaotis1);
                        sheet.addCell(biaotou);
                        DecimalFormat df01 = new DecimalFormat("0.0");
                        DecimalFormat df02 = new DecimalFormat("0.00");
                        DecimalFormat df03 = new DecimalFormat("0.000");
                        DecimalFormat df = new DecimalFormat("###.##");
                        df01.setRoundingMode(RoundingMode.HALF_UP);
                        df02.setRoundingMode(RoundingMode.HALF_UP);
                        df03.setRoundingMode(RoundingMode.HALF_UP);
                        Label xinxi = new Label(0, 1, rptTitle2, title);
                        sheet.addCell(xinxi);
                        sheet.setRowView(1, Const.height_500);
                        sheet.mergeCells(0, 0, 11, 0);
                        sheet.mergeCells(0, 1, 11, 1);
                        Label subject_label = new Label(0, 2, "学科 ", cFormat1);
                        sheet.addCell(subject_label);
                        sheet.setColumnView(0, 10);
                        Label school_label = new Label(1, 2, "学校", cFormat1);
                        sheet.addCell(school_label);
                        Label person_label = new Label(2, 2, "负责人", cFormat1);
                        sheet.addCell(person_label);
                        Label banji_label = new Label(3, 2, "班级", cFormat1);
                        sheet.addCell(banji_label);
                        sheet.setColumnView(3, 10);
                        int bb = 0 + 1;
                        Label cankao_label = new Label(3 + bb, 2, "参考人数", cFormat1);
                        sheet.addCell(cankao_label);
                        Label zongfen_label = new Label(4 + bb, 2, "所教班级学科总分", cFormat1);
                        sheet.addCell(zongfen_label);
                        sheet.setColumnView(5, 20);
                        Label average_label = new Label(5 + bb, 2, "平均分", cFormat1);
                        sheet.addCell(average_label);
                        Label highScoreNum_label = new Label(6 + bb, 2, "高分人数", cFormat1);
                        sheet.addCell(highScoreNum_label);
                        Label highScorerate_label = new Label(7 + bb, 2, "高分率", cFormat1);
                        sheet.addCell(highScorerate_label);
                        Label excellence_label = new Label(8 + bb, 2, "优秀人数", cFormat1);
                        sheet.addCell(excellence_label);
                        Label excellencerate_label = new Label(9 + bb, 2, "优秀率", cFormat1);
                        sheet.addCell(excellencerate_label);
                        Label wellrateNum_label = new Label(10 + bb, 2, "优良人数", cFormat1);
                        sheet.addCell(wellrateNum_label);
                        Label wellrate_label = new Label(11 + bb, 2, "优良率", cFormat1);
                        sheet.addCell(wellrate_label);
                        Label pass_label = new Label(12 + bb, 2, "及格人数", cFormat1);
                        sheet.addCell(pass_label);
                        Label passrate_label = new Label(13 + bb, 2, "及格率", cFormat1);
                        sheet.addCell(passrate_label);
                        Label lowScoreNum_label = new Label(14 + bb, 2, "低分人数", cFormat1);
                        sheet.addCell(lowScoreNum_label);
                        Label lowScorerate_label = new Label(15 + bb, 2, "低分率", cFormat1);
                        sheet.addCell(lowScorerate_label);
                        Label jifen_label = new Label(16 + bb, 2, "教师积分", cFormat1);
                        sheet.addCell(jifen_label);
                        int m = 0;
                        for (int i = 0; i < quest.size(); i++) {
                            List list1 = (List) quest.get(i);
                            for (int k = 0; k < list1.size(); k++) {
                                if (k == 0) {
                                    Label subject_val = new Label(0, 3 + i + k, null == ((Object[]) list1.get(k))[1] ? "" : ((Object[]) list1.get(k))[1].toString(), cFormat3);
                                    sheet.addCell(subject_val);
                                    sheet.mergeCells(0, 3 + i + k, 0, (((3 + i) + k) + list1.size()) - 1);
                                }
                                if (k % 2 != 0) {
                                    Label school_val = new Label(1, 3 + i + k, null == ((Object[]) list1.get(k))[0] ? "" : ((Object[]) list1.get(k))[0].toString(), cFormat2);
                                    sheet.addCell(school_val);
                                    Label person_val = new Label(2, 3 + i + k, null == ((Object[]) list1.get(k))[7] ? "" : ((Object[]) list1.get(k))[7].toString(), cFormat2);
                                    sheet.addCell(person_val);
                                    Label banji_val = new Label(3, 3 + i + k, null == ((Object[]) list1.get(k))[8] ? "" : ((Object[]) list1.get(k))[8].toString(), cFormat2);
                                    sheet.addCell(banji_val);
                                    Label cankao_val = new Label(3 + bb, 3 + i + k, null == ((Object[]) list1.get(k))[10] ? "" : ((Object[]) list1.get(k))[10].toString(), cFormat2);
                                    sheet.addCell(cankao_val);
                                    Double zongfenVal = Double.valueOf(Double.parseDouble(df.format(((Object[]) list1.get(k))[11])));
                                    Number zongfen_val = new Number(4 + bb, 3 + i + k, zongfenVal.doubleValue(), cFormat2);
                                    sheet.addCell(zongfen_val);
                                    Double averageVal = Double.valueOf(Double.parseDouble(df02.format(((Object[]) list1.get(k))[17])));
                                    Number average_val = new Number(5 + bb, 3 + i + k, averageVal.doubleValue(), cFormat2);
                                    sheet.addCell(average_val);
                                    Label highScoreNum_val = new Label(6 + bb, 3 + i + k, null == ((Object[]) list1.get(k))[12] ? "" : ((Object[]) list1.get(k))[12].toString(), cFormat2);
                                    sheet.addCell(highScoreNum_val);
                                    Double highScorerateVal = Double.valueOf(Double.parseDouble(df01.format(((Object[]) list1.get(k))[18])) / 100.0d);
                                    Number highScorerate_val = new Number(7 + bb, 3 + i + k, highScorerateVal.doubleValue(), cFormat2_0);
                                    sheet.addCell(highScorerate_val);
                                    Label excellence_val = new Label(8 + bb, 3 + i + k, null == ((Object[]) list1.get(k))[13] ? "" : ((Object[]) list1.get(k))[13].toString(), cFormat2);
                                    sheet.addCell(excellence_val);
                                    Double excellencerateVal = Double.valueOf(Double.parseDouble(df01.format(((Object[]) list1.get(k))[19])) / 100.0d);
                                    Number excellencerate_val = new Number(9 + bb, 3 + i + k, excellencerateVal.doubleValue(), cFormat2_0);
                                    sheet.addCell(excellencerate_val);
                                    Label wellrateNum_val = new Label(10 + bb, 3 + i + k, null == ((Object[]) list1.get(k))[14] ? "" : ((Object[]) list1.get(k))[14].toString(), cFormat2);
                                    sheet.addCell(wellrateNum_val);
                                    Double wellrateVal = Double.valueOf(Double.parseDouble(df01.format(((Object[]) list1.get(k))[20])) / 100.0d);
                                    Number wellrate_val = new Number(11 + bb, 3 + i + k, wellrateVal.doubleValue(), cFormat2_0);
                                    sheet.addCell(wellrate_val);
                                    Label pass_val = new Label(12 + bb, 3 + i + k, null == ((Object[]) list1.get(k))[15] ? "" : ((Object[]) list1.get(k))[15].toString(), cFormat2);
                                    sheet.addCell(pass_val);
                                    Double passrateVal = Double.valueOf(Double.parseDouble(df01.format(((Object[]) list1.get(k))[21])) / 100.0d);
                                    Number passrate_val = new Number(13 + bb, 3 + i + k, passrateVal.doubleValue(), cFormat2_0);
                                    sheet.addCell(passrate_val);
                                    Label lowScore_val = new Label(14 + bb, 3 + i + k, null == ((Object[]) list1.get(k))[16] ? "" : ((Object[]) list1.get(k))[16].toString(), cFormat2);
                                    sheet.addCell(lowScore_val);
                                    Double lowScorerateVal = Double.valueOf(Double.parseDouble(df01.format(((Object[]) list1.get(k))[22])) / 100.0d);
                                    Number lowScorerate_val = new Number(15 + bb, 3 + i + k, lowScorerateVal.doubleValue(), cFormat2_0);
                                    sheet.addCell(lowScorerate_val);
                                    Double jifenVal = Double.valueOf(Double.parseDouble(df02.format(((Object[]) list1.get(k))[23])));
                                    Number jifen_val = new Number(16 + bb, 3 + i + k, jifenVal.doubleValue(), cFormat2);
                                    sheet.addCell(jifen_val);
                                } else {
                                    Label school_val2 = new Label(1, 3 + i + k, null == ((Object[]) list1.get(k))[0] ? "" : ((Object[]) list1.get(k))[0].toString(), cFormat3);
                                    sheet.addCell(school_val2);
                                    Label person_val2 = new Label(2, 3 + i + k, null == ((Object[]) list1.get(k))[7] ? "" : ((Object[]) list1.get(k))[7].toString(), cFormat3);
                                    sheet.addCell(person_val2);
                                    Label banji_val2 = new Label(3, 3 + i + k, null == ((Object[]) list1.get(k))[8] ? "" : ((Object[]) list1.get(k))[8].toString(), cFormat3);
                                    sheet.addCell(banji_val2);
                                    Label cankao_val2 = new Label(3 + bb, 3 + i + k, null == ((Object[]) list1.get(k))[10] ? "" : ((Object[]) list1.get(k))[10].toString(), cFormat3);
                                    sheet.addCell(cankao_val2);
                                    Double zongfenVal2 = Double.valueOf(Double.parseDouble(df.format(((Object[]) list1.get(k))[11])));
                                    Number zongfen_val2 = new Number(4 + bb, 3 + i + k, zongfenVal2.doubleValue(), cFormat3);
                                    sheet.addCell(zongfen_val2);
                                    Double averageVal2 = Double.valueOf(Double.parseDouble(df02.format(((Object[]) list1.get(k))[17])));
                                    Number average_val2 = new Number(5 + bb, 3 + i + k, averageVal2.doubleValue(), cFormat3);
                                    sheet.addCell(average_val2);
                                    Label highScoreNum_val2 = new Label(6 + bb, 3 + i + k, null == ((Object[]) list1.get(k))[12] ? "" : ((Object[]) list1.get(k))[12].toString(), cFormat3);
                                    sheet.addCell(highScoreNum_val2);
                                    Double highScorerateVal2 = Double.valueOf(Double.parseDouble(df01.format(((Object[]) list1.get(k))[18])) / 100.0d);
                                    Number higScorerate_val = new Number(7 + bb, 3 + i + k, highScorerateVal2.doubleValue(), cFormat3_0);
                                    sheet.addCell(higScorerate_val);
                                    Label excellence_val2 = new Label(8 + bb, 3 + i + k, null == ((Object[]) list1.get(k))[13] ? "" : ((Object[]) list1.get(k))[13].toString(), cFormat3);
                                    sheet.addCell(excellence_val2);
                                    Double excellencerateVal2 = Double.valueOf(Double.parseDouble(df01.format(((Object[]) list1.get(k))[19])) / 100.0d);
                                    Number excellencerate_val2 = new Number(9 + bb, 3 + i + k, excellencerateVal2.doubleValue(), cFormat3_0);
                                    sheet.addCell(excellencerate_val2);
                                    Label wellrateNum_val2 = new Label(10 + bb, 3 + i + k, null == ((Object[]) list1.get(k))[14] ? "" : ((Object[]) list1.get(k))[14].toString(), cFormat3);
                                    sheet.addCell(wellrateNum_val2);
                                    Double wellrateVal2 = Double.valueOf(Double.parseDouble(df01.format(((Object[]) list1.get(k))[20])) / 100.0d);
                                    Number wellrate_val2 = new Number(11 + bb, 3 + i + k, wellrateVal2.doubleValue(), cFormat3_0);
                                    sheet.addCell(wellrate_val2);
                                    Label pass_val2 = new Label(12 + bb, 3 + i + k, null == ((Object[]) list1.get(k))[15] ? "" : ((Object[]) list1.get(k))[15].toString(), cFormat3);
                                    sheet.addCell(pass_val2);
                                    Double passrateVal2 = Double.valueOf(Double.parseDouble(df01.format(((Object[]) list1.get(k))[21])) / 100.0d);
                                    Number passrate_val2 = new Number(13 + bb, 3 + i + k, passrateVal2.doubleValue(), cFormat3_0);
                                    sheet.addCell(passrate_val2);
                                    Label lowscoreNum_val = new Label(14 + bb, 3 + i + k, null == ((Object[]) list1.get(k))[16] ? "" : ((Object[]) list1.get(k))[16].toString(), cFormat3);
                                    sheet.addCell(lowscoreNum_val);
                                    Double lowscorerateVal = Double.valueOf(Double.parseDouble(df01.format(((Object[]) list1.get(k))[22])) / 100.0d);
                                    Number lowscorerate_val = new Number(15 + bb, 3 + i + k, lowscorerateVal.doubleValue(), cFormat3_0);
                                    sheet.addCell(lowscorerate_val);
                                    Double jifenVal2 = Double.valueOf(Double.parseDouble(df02.format(((Object[]) list1.get(k))[23])));
                                    Number jifen_val2 = new Number(16 + bb, 3 + i + k, jifenVal2.doubleValue(), cFormat3);
                                    sheet.addCell(jifen_val2);
                                }
                            }
                            m += list1.size();
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    wwBook.write();
                    if (wwBook != null) {
                        try {
                            wwBook.close();
                            if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                                HttpServletResponse response = ServletActionContext.getResponse();
                                response.reset();
                                ServletOutputStream outputStream = response.getOutputStream();
                                String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                String loadFileName2 = loadFileName.replace("+", " ");
                                response.setContentType("Content-type: applicationnd.ms-excel");
                                response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xls");
                                response.setHeader("Content-length", String.valueOf(excelFile.length()));
                                byte[] tempByte = new byte[1024];
                                FileInputStream in = new FileInputStream(excelFile);
                                while (true) {
                                    int n = in.read(tempByte);
                                    if (n == -1) {
                                        break;
                                    }
                                    try {
                                        outputStream.write(tempByte, 0, n);
                                    } catch (Exception e2) {
                                        this.log.error("保存未成功", e2);
                                    }
                                }
                                outputStream.flush();
                                outputStream.close();
                                in.close();
                            }
                        } catch (WriteException e3) {
                            e3.printStackTrace();
                        }
                    }
                } catch (Throwable th) {
                    if (wwBook != null) {
                        try {
                            wwBook.close();
                            if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                                HttpServletResponse response2 = ServletActionContext.getResponse();
                                response2.reset();
                                ServletOutputStream outputStream2 = response2.getOutputStream();
                                String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                String loadFileName4 = loadFileName3.replace("+", " ");
                                response2.setContentType("Content-type: applicationnd.ms-excel");
                                response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xls");
                                response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                                byte[] tempByte2 = new byte[1024];
                                FileInputStream in2 = new FileInputStream(excelFile);
                                while (true) {
                                    int n2 = in2.read(tempByte2);
                                    if (n2 == -1) {
                                        break;
                                    }
                                    try {
                                        outputStream2.write(tempByte2, 0, n2);
                                    } catch (Exception e4) {
                                        this.log.error("保存未成功", e4);
                                    }
                                }
                                outputStream2.flush();
                                outputStream2.close();
                                in2.close();
                            }
                        } catch (WriteException e5) {
                            e5.printStackTrace();
                            throw th;
                        }
                    }
                    throw th;
                }
            } catch (Exception e6) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response3 = ServletActionContext.getResponse();
                            response3.reset();
                            ServletOutputStream outputStream3 = response3.getOutputStream();
                            String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName6 = loadFileName5.replace("+", " ");
                            response3.setContentType("Content-type: applicationnd.ms-excel");
                            response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xls");
                            response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte3 = new byte[1024];
                            FileInputStream in3 = new FileInputStream(excelFile);
                            while (true) {
                                int n3 = in3.read(tempByte3);
                                if (n3 == -1) {
                                    break;
                                }
                                try {
                                    outputStream3.write(tempByte3, 0, n3);
                                } catch (Exception e7) {
                                    this.log.error("保存未成功", e7);
                                }
                            }
                            outputStream3.flush();
                            outputStream3.close();
                            in3.close();
                        }
                    } catch (WriteException e8) {
                        e8.printStackTrace();
                    }
                }
            }
        } catch (Exception e9) {
            e9.printStackTrace();
        }
        return null;
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String teaIndexIntegral_exportgetData(String examNum, String gradeNum, String schoolNum, String subjectNum, String classNum, String studentId, String studentType, String type, String source, String step, String sNum, String c_exam, String rpt_name, String isMoreSchool, String rptTitle, String isHistory, String isSaveWrite, String dirPath, String uri, String userNum, String schName, String gradeName, String className, String subjectName, String imgRoot, String agent, String rank, String fufen, String subCompose, String islevel, String teachUnit, String teachUnit_s, String stage) {
        List quest = this.reportService.getTeacherIndexIntegralData(examNum, stage);
        List gradelist = this.reportService.getTeacherIndexGrade(examNum, stage);
        IndexIntegral indexObj = this.reportService.getTeacherIndex(examNum, stage);
        String folderPath = "ExportFolder/reportExcel" + userNum;
        String str = "reportExcel" + userNum;
        String str2 = "reportExcel" + userNum;
        String excelName = "学校综合得分_" + examNum;
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFile(excelName, dirPath, folderPath);
        try {
            WritableWorkbook wwBook = Workbook.createWorkbook(excelFile);
            WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
            biaotis1.setAlignment(Alignment.LEFT);
            biaotis1.setVerticalAlignment(VerticalAlignment.CENTRE);
            WritableFont titles = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat title = new WritableCellFormat(titles);
            title.setAlignment(Alignment.LEFT);
            title.setVerticalAlignment(VerticalAlignment.CENTRE);
            title.setWrap(true);
            WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            WritableCellFormat cFormat1 = new WritableCellFormat(font1);
            cFormat1.setAlignment(Alignment.CENTRE);
            cFormat1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1.setBackground(Const.titleBackground_color);
            cFormat1.setWrap(true);
            WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat2 = new WritableCellFormat(font2);
            cFormat2.setAlignment(Alignment.CENTRE);
            cFormat2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2.setBackground(Const.textOuBackGround_color);
            cFormat2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2.setWrap(true);
            DateFormat df1 = new DateFormat("0.0%");
            WritableCellFormat cFormat2_0 = new WritableCellFormat(font2, df1);
            cFormat2_0.setAlignment(Alignment.CENTRE);
            cFormat2_0.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_0.setBackground(Const.textOuBackGround_color);
            cFormat2_0.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_0.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_0.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_0.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_0.setWrap(true);
            NumberFormat nf1 = new NumberFormat("0.0");
            WritableCellFormat cFormat2_1 = new WritableCellFormat(font2, nf1);
            cFormat2_1.setAlignment(Alignment.CENTRE);
            cFormat2_1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_1.setBackground(Const.textOuBackGround_color);
            cFormat2_1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_1.setWrap(true);
            NumberFormat nf2 = new NumberFormat("0.00");
            WritableCellFormat cFormat2_2 = new WritableCellFormat(font2, nf2);
            cFormat2_2.setAlignment(Alignment.CENTRE);
            cFormat2_2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_2.setBackground(Const.textOuBackGround_color);
            cFormat2_2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_2.setWrap(true);
            WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat3 = new WritableCellFormat(font3);
            cFormat3.setAlignment(Alignment.CENTRE);
            cFormat3.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3.setBackground(Const.textJiBackGround_color);
            cFormat3.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3.setWrap(true);
            WritableCellFormat cFormat3_0 = new WritableCellFormat(font3, df1);
            cFormat3_0.setAlignment(Alignment.CENTRE);
            cFormat3_0.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_0.setBackground(Const.textJiBackGround_color);
            cFormat3_0.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_0.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_0.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_0.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_0.setWrap(true);
            WritableCellFormat cFormat3_1 = new WritableCellFormat(font3, nf1);
            cFormat3_1.setAlignment(Alignment.CENTRE);
            cFormat3_1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_1.setBackground(Const.textJiBackGround_color);
            cFormat3_1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_1.setWrap(true);
            WritableCellFormat cFormat3_2 = new WritableCellFormat(font3, nf2);
            cFormat3_2.setAlignment(Alignment.CENTRE);
            cFormat3_2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_2.setBackground(Const.textJiBackGround_color);
            cFormat3_2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_2.setWrap(true);
            WritableFont font4 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat4 = new WritableCellFormat(font4);
            cFormat4.setAlignment(Alignment.LEFT);
            cFormat4.setBackground(Const.subject_color);
            cFormat4.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat4.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat4.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat4.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat4.setWrap(true);
            DecimalFormat df01 = new DecimalFormat("0.0");
            DecimalFormat df02 = new DecimalFormat("0.00");
            DecimalFormat df03 = new DecimalFormat("0.000");
            DecimalFormat df = new DecimalFormat("#########.###");
            df01.setRoundingMode(RoundingMode.HALF_UP);
            df02.setRoundingMode(RoundingMode.HALF_UP);
            df03.setRoundingMode(RoundingMode.HALF_UP);
            df.setRoundingMode(RoundingMode.HALF_UP);
            try {
                WritableSheet sheet = wwBook.createSheet("学校综合得分", 0);
                sheet.getSettings().setShowGridLines(false);
                try {
                    Label biaotou = new Label(0, 0, "学校综合得分", biaotis1);
                    sheet.addCell(biaotou);
                    sheet.mergeCells(0, 0, 12 + (9 * gradelist.size()), 0);
                    Label z1 = new Label(0, 1, "", cFormat1);
                    sheet.addCell(z1);
                    Label z2 = new Label(1, 1, "", cFormat1);
                    sheet.addCell(z2);
                    Label z3 = new Label(2, 1, "", cFormat1);
                    sheet.addCell(z3);
                    String gradeNameStr = "52".equals(stage) ? "九" : "六";
                    Label a1 = new Label(3, 1, "人才培养得分（" + gradeNameStr + "年级折算分）", cFormat1);
                    sheet.addCell(a1);
                    sheet.mergeCells(3, 1, 9, 1);
                    Label b1 = new Label(0, 2, "学校", cFormat1);
                    sheet.addCell(b1);
                    sheet.mergeCells(0, 2, 0, 3);
                    Label b2 = new Label(1, 2, "学校综合得分", cFormat1);
                    sheet.addCell(b2);
                    sheet.mergeCells(1, 2, 1, 3);
                    sheet.setColumnView(1, 12);
                    Label b3 = new Label(2, 2, "学校综合得分排名", cFormat1);
                    sheet.addCell(b3);
                    sheet.mergeCells(2, 2, 2, 3);
                    Label b4 = new Label(3, 2, "指标一（前" + indexObj.getIndexone() + "名）", cFormat1);
                    sheet.addCell(b4);
                    sheet.mergeCells(3, 2, 5, 2);
                    Label c1 = new Label(3, 3, "指标数", cFormat1);
                    sheet.addCell(c1);
                    Label c2 = new Label(4, 3, "实际完成数", cFormat1);
                    sheet.addCell(c2);
                    sheet.setColumnView(4, 10);
                    Label c3 = new Label(5, 3, "得分", cFormat1);
                    sheet.addCell(c3);
                    Label b5 = new Label(6, 2, "指标二（前" + indexObj.getIndextwo() + "名）", cFormat1);
                    sheet.addCell(b5);
                    sheet.mergeCells(6, 2, 8, 2);
                    Label c4 = new Label(6, 3, "指标数", cFormat1);
                    sheet.addCell(c4);
                    Label c5 = new Label(7, 3, "实际完成数", cFormat1);
                    sheet.addCell(c5);
                    sheet.setColumnView(7, 10);
                    Label c6 = new Label(8, 3, "得分", cFormat1);
                    sheet.addCell(c6);
                    Label b6 = new Label(9, 2, "人才培养合计得分", cFormat1);
                    sheet.addCell(b6);
                    sheet.mergeCells(9, 2, 9, 3);
                    Label a2 = new Label(10, 1, "积分位次得分（原始分）", cFormat1);
                    sheet.addCell(a2);
                    int special2 = 0;
                    for (int y = 0; y < gradelist.size(); y++) {
                        if (9 == ((Grade) gradelist.get(y)).getGradeNum().intValue()) {
                            special2 = 3;
                        }
                    }
                    sheet.mergeCells(10, 1, 9 + (9 * gradelist.size()) + special2, 1);
                    int startlie = 10;
                    for (int y2 = 0; y2 < gradelist.size(); y2++) {
                        Grade g = (Grade) gradelist.get(y2);
                        int special = 0;
                        if (9 == g.getGradeNum().intValue()) {
                            sheet.addCell(new Label(startlie + 0, 3, "学籍报表数", cFormat1));
                            sheet.addCell(new Label(startlie + 1, 3, "在校报考学生", cFormat1));
                            sheet.addCell(new Label(startlie + 2, 3, "参考率", cFormat1));
                            special = 3;
                        }
                        sheet.addCell(new Label(startlie + 0, 2, g.getGradeName(), cFormat1));
                        sheet.mergeCells(startlie + 0, 2, startlie + special + 8, 2);
                        sheet.addCell(new Label(startlie + special + 0, 3, "需要统计成绩数", cFormat1));
                        sheet.addCell(new Label(startlie + special + 1, 3, "参考科目总分", cFormat1));
                        sheet.addCell(new Label(startlie + special + 2, 3, "总平均分", cFormat1));
                        sheet.addCell(new Label(startlie + special + 3, 3, "总及格人数", cFormat1));
                        sheet.addCell(new Label(startlie + special + 4, 3, "总及格率", cFormat1));
                        sheet.addCell(new Label(startlie + special + 5, 3, "积分", cFormat1));
                        sheet.addCell(new Label(startlie + special + 6, 3, "位次", cFormat1));
                        sheet.addCell(new Label(startlie + special + 7, 3, "起始位次", cFormat1));
                        sheet.addCell(new Label(startlie + special + 8, 3, "积分位次得分", cFormat1));
                        startlie = startlie + special + 9;
                    }
                    for (int i = 0; i < quest.size(); i++) {
                        IndexIntegral integral = (IndexIntegral) quest.get(i);
                        if (i % 2 != 0) {
                            Label school_name = new Label(0, 4 + i, integral.getsItemName(), cFormat2);
                            sheet.addCell(school_name);
                            Label compositescore = new Label(1, 4 + i, integral.getCompositescore(), cFormat2);
                            sheet.addCell(compositescore);
                            Label compositerank = new Label(2, 4 + i, integral.getCompositerank(), cFormat2);
                            sheet.addCell(compositerank);
                            Label indexone = new Label(3, 4 + i, integral.getIndexone(), cFormat2);
                            sheet.addCell(indexone);
                            Label indexonefinish = new Label(4, 4 + i, integral.getIndexonefinish(), cFormat2);
                            sheet.addCell(indexonefinish);
                            Double indexonescoreVal = Double.valueOf(Double.parseDouble(df.format(Double.parseDouble(integral.getIndexonescore()))));
                            Number indexonescore = new Number(5, 4 + i, indexonescoreVal.doubleValue(), cFormat2);
                            sheet.addCell(indexonescore);
                            Label indextwo = new Label(6, 4 + i, integral.getIndextwo(), cFormat2);
                            sheet.addCell(indextwo);
                            Label indextwofinish = new Label(7, 4 + i, integral.getIndextwofinish(), cFormat2);
                            sheet.addCell(indextwofinish);
                            Double indextwoscoreVal = Double.valueOf(Double.parseDouble(df.format(Double.parseDouble(integral.getIndextwoscore()))));
                            Number indextwoscore = new Number(8, 4 + i, indextwoscoreVal.doubleValue(), cFormat2);
                            sheet.addCell(indextwoscore);
                            Double developscoreVal = Double.valueOf(Double.parseDouble(df.format(Double.parseDouble(integral.getDevelopscore()))));
                            Number developscore = new Number(9, 4 + i, developscoreVal.doubleValue(), cFormat2);
                            sheet.addCell(developscore);
                            List<IndexIntegral> gradedatalist = integral.getList();
                            int startdatalie = 10;
                            for (int y3 = 0; y3 < gradelist.size(); y3++) {
                                IndexIntegral integral2 = gradedatalist.get(y3);
                                int special3 = 0;
                                if ("9".equals(integral2.getGradeNum())) {
                                    sheet.addCell(new Label(startdatalie + 0, 4 + i, integral2.getNumOfStudent2(), cFormat2));
                                    sheet.addCell(new Label(startdatalie + 1, 4 + i, integral2.getBaoKaoStudent(), cFormat2));
                                    sheet.addCell(new Label(startdatalie + 2, 4 + i, integral2.getReferrate(), cFormat2));
                                    special3 = 3;
                                }
                                sheet.addCell(new Label(startdatalie + special3 + 0, 4 + i, integral2.getNumOfstudent(), cFormat2));
                                sheet.addCell(new Number(startdatalie + special3 + 1, 4 + i, Double.parseDouble(df.format(Double.parseDouble(integral2.getTotalscore()))), cFormat2));
                                sheet.addCell(new Number(startdatalie + special3 + 2, 4 + i, Double.parseDouble(df.format(Double.parseDouble(integral2.getAverage()))), cFormat2));
                                sheet.addCell(new Label(startdatalie + special3 + 3, 4 + i, integral2.getPass(), cFormat2));
                                sheet.addCell(new Number(startdatalie + special3 + 4, 4 + i, Double.parseDouble(df.format(Double.parseDouble(integral2.getPassrate()))), cFormat2));
                                sheet.addCell(new Number(startdatalie + special3 + 5, 4 + i, Double.parseDouble(df.format(Double.parseDouble(integral2.getJifen()))), cFormat2));
                                sheet.addCell(new Label(startdatalie + special3 + 6, 4 + i, integral2.getJifenrank(), cFormat2));
                                sheet.addCell(new Label(startdatalie + special3 + 7, 4 + i, integral2.getOldrank(), cFormat2));
                                sheet.addCell(new Label(startdatalie + special3 + 8, 4 + i, integral2.getJifenscore(), cFormat2));
                                startdatalie = startdatalie + special3 + 9;
                            }
                        } else {
                            Label school_name2 = new Label(0, 4 + i, integral.getsItemName(), cFormat3);
                            sheet.addCell(school_name2);
                            Label compositescore2 = new Label(1, 4 + i, integral.getCompositescore(), cFormat3);
                            sheet.addCell(compositescore2);
                            Label compositerank2 = new Label(2, 4 + i, integral.getCompositerank(), cFormat3);
                            sheet.addCell(compositerank2);
                            Label indexone2 = new Label(3, 4 + i, integral.getIndexone(), cFormat3);
                            sheet.addCell(indexone2);
                            Label indexonefinish2 = new Label(4, 4 + i, integral.getIndexonefinish(), cFormat3);
                            sheet.addCell(indexonefinish2);
                            Double indexonescoreVal2 = Double.valueOf(Double.parseDouble(df.format(Double.parseDouble(integral.getIndexonescore()))));
                            Number indexonescore2 = new Number(5, 4 + i, indexonescoreVal2.doubleValue(), cFormat3);
                            sheet.addCell(indexonescore2);
                            Label indextwo2 = new Label(6, 4 + i, integral.getIndextwo(), cFormat3);
                            sheet.addCell(indextwo2);
                            Label indextwofinish2 = new Label(7, 4 + i, integral.getIndextwofinish(), cFormat3);
                            sheet.addCell(indextwofinish2);
                            Double indextwoscoreVal2 = Double.valueOf(Double.parseDouble(df.format(Double.parseDouble(integral.getIndextwoscore()))));
                            Number indextwoscore2 = new Number(8, 4 + i, indextwoscoreVal2.doubleValue(), cFormat3);
                            sheet.addCell(indextwoscore2);
                            Double developscoreVal2 = Double.valueOf(Double.parseDouble(df.format(Double.parseDouble(integral.getDevelopscore()))));
                            Number developscore2 = new Number(9, 4 + i, developscoreVal2.doubleValue(), cFormat3);
                            sheet.addCell(developscore2);
                            List<IndexIntegral> gradedatalist2 = integral.getList();
                            int startdatalie2 = 10;
                            for (int y4 = 0; y4 < gradelist.size(); y4++) {
                                IndexIntegral integral22 = gradedatalist2.get(y4);
                                int special4 = 0;
                                if ("9".equals(integral22.getGradeNum())) {
                                    sheet.addCell(new Label(startdatalie2 + 0, 4 + i, integral22.getNumOfStudent2(), cFormat3));
                                    sheet.addCell(new Label(startdatalie2 + 1, 4 + i, integral22.getBaoKaoStudent(), cFormat3));
                                    sheet.addCell(new Label(startdatalie2 + 2, 4 + i, integral22.getReferrate(), cFormat3));
                                    special4 = 3;
                                }
                                sheet.addCell(new Label(startdatalie2 + special4 + 0, 4 + i, integral22.getNumOfstudent(), cFormat3));
                                sheet.addCell(new Number(startdatalie2 + special4 + 1, 4 + i, Double.parseDouble(df.format(Double.parseDouble(integral22.getTotalscore()))), cFormat3));
                                sheet.addCell(new Number(startdatalie2 + special4 + 2, 4 + i, Double.parseDouble(df.format(Double.parseDouble(integral22.getAverage()))), cFormat3));
                                sheet.addCell(new Label(startdatalie2 + special4 + 3, 4 + i, integral22.getPass(), cFormat3));
                                sheet.addCell(new Number(startdatalie2 + special4 + 4, 4 + i, Double.parseDouble(df.format(Double.parseDouble(integral22.getPassrate()))), cFormat3));
                                sheet.addCell(new Number(startdatalie2 + special4 + 5, 4 + i, Double.parseDouble(df.format(Double.parseDouble(integral22.getJifen()))), cFormat3));
                                sheet.addCell(new Label(startdatalie2 + special4 + 6, 4 + i, integral22.getJifenrank(), cFormat3));
                                sheet.addCell(new Label(startdatalie2 + special4 + 7, 4 + i, integral22.getOldrank(), cFormat3));
                                sheet.addCell(new Label(startdatalie2 + special4 + 8, 4 + i, integral22.getJifenscore(), cFormat3));
                                startdatalie2 = startdatalie2 + special4 + 9;
                            }
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                wwBook.write();
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response = ServletActionContext.getResponse();
                            response.reset();
                            ServletOutputStream outputStream = response.getOutputStream();
                            String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName2 = loadFileName.replace("+", " ");
                            response.setContentType("Content-type: applicationnd.ms-excel");
                            response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xls");
                            response.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte = new byte[1024];
                            FileInputStream in = new FileInputStream(excelFile);
                            while (true) {
                                int n = in.read(tempByte);
                                if (n == -1) {
                                    break;
                                }
                                try {
                                    outputStream.write(tempByte, 0, n);
                                } catch (Exception e2) {
                                    this.log.error("保存未成功", e2);
                                }
                            }
                            outputStream.flush();
                            outputStream.close();
                            in.close();
                        }
                    } catch (WriteException e3) {
                        e3.printStackTrace();
                    }
                }
            } catch (Exception e4) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response2 = ServletActionContext.getResponse();
                            response2.reset();
                            ServletOutputStream outputStream2 = response2.getOutputStream();
                            String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName4 = loadFileName3.replace("+", " ");
                            response2.setContentType("Content-type: applicationnd.ms-excel");
                            response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xls");
                            response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte2 = new byte[1024];
                            FileInputStream in2 = new FileInputStream(excelFile);
                            while (true) {
                                int n2 = in2.read(tempByte2);
                                if (n2 == -1) {
                                    break;
                                }
                                try {
                                    outputStream2.write(tempByte2, 0, n2);
                                } catch (Exception e5) {
                                    this.log.error("保存未成功", e5);
                                }
                            }
                            outputStream2.flush();
                            outputStream2.close();
                            in2.close();
                        }
                    } catch (WriteException e6) {
                        e6.printStackTrace();
                    }
                }
            } catch (Throwable th) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            HttpServletResponse response3 = ServletActionContext.getResponse();
                            response3.reset();
                            ServletOutputStream outputStream3 = response3.getOutputStream();
                            String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                            String loadFileName6 = loadFileName5.replace("+", " ");
                            response3.setContentType("Content-type: applicationnd.ms-excel");
                            response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xls");
                            response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                            byte[] tempByte3 = new byte[1024];
                            FileInputStream in3 = new FileInputStream(excelFile);
                            while (true) {
                                int n3 = in3.read(tempByte3);
                                if (n3 == -1) {
                                    break;
                                }
                                try {
                                    outputStream3.write(tempByte3, 0, n3);
                                } catch (Exception e7) {
                                    this.log.error("保存未成功", e7);
                                }
                            }
                            outputStream3.flush();
                            outputStream3.close();
                            in3.close();
                        }
                    } catch (WriteException e8) {
                        e8.printStackTrace();
                        throw th;
                    }
                }
                throw th;
            }
        } catch (Exception e9) {
            e9.printStackTrace();
        }
        return null;
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String exportSankeyData(String teachUnit_s, String examNum, String gradeNum, String teachUnit, String subjectNum, String classNum, String studentId, String studentType, String type, String source, String step, String sNum, String c_exam, String rpt_name, String isMoreSchool, String rptTitle, String isHistory, String isSaveWrite, String dirPath, String uri, String userNum, String schName, String gradeName, String className, String subjectName, String imgRoot, String agent, String fufen, String subCompose, String islevel) {
        File excelFile;
        File excelFile2;
        File excelFile3;
        Map<String, Object> dataMap = this.reportService.getSankeyData(examNum, gradeNum, subjectNum, teachUnit_s, teachUnit, c_exam, islevel, subCompose, studentType, type, source, fufen);
        List<Map<String, String>> exams = (List) dataMap.get("exams");
        List<Map<String, Object>> dengjis = (List) dataMap.get("dengjis");
        List<Map<String, String>> stuAllExamDengjiList = (List) dataMap.get("stuAllExamDengjiList");
        Map<String, List<Map<String, String>>> oneExamOneDengjiAllStuDataMap = (Map) dataMap.get("oneExamOneDengjiMap");
        String excelName = (null == gradeName || "".equals(gradeName)) ? rpt_name + "_" + gradeNum : rpt_name + "_" + gradeName;
        String filePath = "leq/sankeyReport_" + userNum + "/" + excelName + ".xlsx";
        String excelFilePath = dirPath + filePath;
        FileUtil.del(excelFilePath);
        FileUtil.touch(excelFilePath);
        XSSFWorkbook wwBook = new XSSFWorkbook();
        XSSFFont titleFont = wwBook.createFont();
        titleFont.setFontHeightInPoints((short) 12);
        titleFont.setFontName("新宋体");
        titleFont.setBold(true);
        XSSFFont font = wwBook.createFont();
        font.setFontHeightInPoints((short) 12);
        font.setFontName("新宋体");
        XSSFCellStyle titleCellStyle = wwBook.createCellStyle();
        titleCellStyle.setAlignment(HorizontalAlignment.CENTER);
        titleCellStyle.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
        titleCellStyle.setFont(titleFont);
        titleCellStyle.setWrapText(true);
        titleCellStyle.setBorderTop(BorderStyle.THIN);
        titleCellStyle.setBorderRight(BorderStyle.THIN);
        titleCellStyle.setBorderBottom(BorderStyle.THIN);
        titleCellStyle.setBorderLeft(BorderStyle.THIN);
        XSSFCellStyle cellStyle = wwBook.createCellStyle();
        cellStyle.setAlignment(HorizontalAlignment.CENTER);
        cellStyle.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
        cellStyle.setFont(font);
        cellStyle.setWrapText(true);
        cellStyle.setBorderTop(BorderStyle.THIN);
        cellStyle.setBorderRight(BorderStyle.THIN);
        cellStyle.setBorderBottom(BorderStyle.THIN);
        cellStyle.setBorderLeft(BorderStyle.THIN);
        try {
            try {
                XSSFSheet sheet1 = wwBook.createSheet("教学单位学生组别");
                XSSFSheet sheet2 = wwBook.createSheet("结构变化-团体");
                sheet1.setDisplayGridlines(false);
                sheet2.setDisplayGridlines(false);
                XSSFRow row1_1 = sheet1.createRow(0);
                String[] title1 = {"学校", "班级", "学生"};
                for (int i = 0; i < title1.length; i++) {
                    XSSFCell titleCell = row1_1.createCell(i);
                    titleCell.setCellValue(title1[i]);
                    titleCell.setCellStyle(titleCellStyle);
                }
                for (int i2 = 0; i2 < exams.size(); i2++) {
                    XSSFCell titleCell2 = row1_1.createCell(i2 + title1.length);
                    titleCell2.setCellValue(exams.get(i2).get("examName"));
                    titleCell2.setCellStyle(titleCellStyle);
                    sheet1.setColumnWidth(i2 + title1.length, 7680);
                }
                LinkedHashMap<String, List<Map<String, String>>> oneStuAllExamMap = (LinkedHashMap) stuAllExamDengjiList.stream().collect(Collectors.groupingBy(m -> {
                    return (String) m.get(Const.EXPORTREPORT_studentId);
                }, LinkedHashMap::new, Collectors.toList()));
                int index = 0;
                for (Map.Entry<String, List<Map<String, String>>> entry : oneStuAllExamMap.entrySet()) {
                    List<Map<String, String>> oneStudentDataList = entry.getValue();
                    Map<String, String> oneStudentMap0 = oneStudentDataList.get(0);
                    String[] data1 = {oneStudentMap0.get("schoolName"), oneStudentMap0.get("className"), oneStudentMap0.get("studentName")};
                    XSSFRow row1_2 = sheet1.createRow(index + 1);
                    for (int i3 = 0; i3 < data1.length; i3++) {
                        XSSFCell dataCell = row1_2.createCell(i3);
                        dataCell.setCellValue(data1[i3]);
                        dataCell.setCellStyle(cellStyle);
                    }
                    for (int i4 = 0; i4 < oneStudentDataList.size(); i4++) {
                        XSSFCell dataCell2 = row1_2.createCell(i4 + title1.length);
                        dataCell2.setCellValue(oneStudentDataList.get(i4).get("dengji"));
                        dataCell2.setCellStyle(cellStyle);
                    }
                    index++;
                }
                for (int i5 = 0; i5 < title1.length; i5++) {
                    sheet1.autoSizeColumn(i5);
                }
                XSSFRow row2_1 = sheet2.createRow(0);
                XSSFRow row2_2 = sheet2.createRow(1);
                XSSFCell titleCell1 = row2_1.createCell(0);
                titleCell1.setCellValue("组别");
                titleCell1.setCellStyle(titleCellStyle);
                CellRangeAddress rangeAddress1 = new CellRangeAddress(0, 1, 0, 0);
                sheet2.addMergedRegion(rangeAddress1);
                setBorderStyle(BorderStyle.THIN, rangeAddress1, sheet2);
                for (int i6 = 0; i6 < exams.size(); i6++) {
                    XSSFCell titleCell22 = row2_1.createCell((i6 * 3) + 1);
                    titleCell22.setCellValue(exams.get(i6).get("examName") + "人数");
                    titleCell22.setCellStyle(titleCellStyle);
                    CellRangeAddress rangeAddress2 = new CellRangeAddress(0, 1, (i6 * 3) + 1, (i6 * 3) + 1);
                    sheet2.addMergedRegion(rangeAddress2);
                    setBorderStyle(BorderStyle.THIN, rangeAddress2, sheet2);
                    sheet2.setColumnWidth((i6 * 3) + 1, 7680);
                    if (i6 < exams.size() - 1) {
                        XSSFCell titleCell3 = row2_1.createCell((i6 * 3) + 2);
                        titleCell3.setCellValue("分流");
                        titleCell3.setCellStyle(titleCellStyle);
                        CellRangeAddress rangeAddress3 = new CellRangeAddress(0, 0, (i6 * 3) + 2, (i6 * 3) + 3);
                        sheet2.addMergedRegion(rangeAddress3);
                        setBorderStyle(BorderStyle.THIN, rangeAddress3, sheet2);
                        XSSFCell titleCell3_1 = row2_2.createCell((i6 * 3) + 2);
                        titleCell3_1.setCellValue("组别");
                        titleCell3_1.setCellStyle(titleCellStyle);
                        XSSFCell titleCell3_2 = row2_2.createCell((i6 * 3) + 3);
                        titleCell3_2.setCellValue("流量");
                        titleCell3_2.setCellStyle(titleCellStyle);
                    }
                }
                for (int d = 0; d < dengjis.size(); d++) {
                    String dengji = String.valueOf(dengjis.get(d).get("dengji"));
                    XSSFRow row2_3 = sheet2.createRow((d * dengjis.size()) + 2);
                    XSSFCell dataCell3_1 = row2_3.createCell(0);
                    dataCell3_1.setCellValue(dengji);
                    dataCell3_1.setCellStyle(cellStyle);
                    CellRangeAddress rangeAddress3_1 = new CellRangeAddress((d * dengjis.size()) + 2, ((d + 1) * dengjis.size()) + 1, 0, 0);
                    sheet2.addMergedRegion(rangeAddress3_1);
                    setBorderStyle(BorderStyle.THIN, rangeAddress3_1, sheet2);
                    for (int e = 0; e < exams.size(); e++) {
                        String examName = exams.get(e).get("examName");
                        List<Map<String, String>> oneExamOneDengjiAllStuList = oneExamOneDengjiAllStuDataMap.get(examName + "_" + dengji);
                        int renshu = null == oneExamOneDengjiAllStuList ? 0 : oneExamOneDengjiAllStuList.size();
                        XSSFCell dataCell3_2 = row2_3.createCell((e * 3) + 1);
                        dataCell3_2.setCellValue(renshu);
                        dataCell3_2.setCellStyle(cellStyle);
                        CellRangeAddress rangeAddress3_2 = new CellRangeAddress((d * dengjis.size()) + 2, ((d + 1) * dengjis.size()) + 1, (e * 3) + 1, (e * 3) + 1);
                        sheet2.addMergedRegion(rangeAddress3_2);
                        setBorderStyle(BorderStyle.THIN, rangeAddress3_2, sheet2);
                        if (e < exams.size() - 1) {
                            String examName2 = exams.get(e + 1).get("examName");
                            for (int z = 0; z < dengjis.size(); z++) {
                                String dengji2 = String.valueOf(dengjis.get(z).get("dengji"));
                                List<Map<String, String>> oneExamOneDengjiAllStuList2 = oneExamOneDengjiAllStuDataMap.get(examName2 + "_" + dengji2);
                                int renshu2 = 0;
                                if (null != oneExamOneDengjiAllStuList && null != oneExamOneDengjiAllStuList2) {
                                    List<Map<String, String>> linkStuList = (List) oneExamOneDengjiAllStuList.stream().filter(m2 -> {
                                        boolean res = false;
                                        int i7 = 0;
                                        while (true) {
                                            if (i7 >= oneExamOneDengjiAllStuList2.size()) {
                                                break;
                                            }
                                            if (!((String) m2.get(Const.EXPORTREPORT_studentId)).equals(((Map) oneExamOneDengjiAllStuList2.get(i7)).get(Const.EXPORTREPORT_studentId))) {
                                                i7++;
                                            } else {
                                                res = true;
                                                break;
                                            }
                                        }
                                        return res;
                                    }).collect(Collectors.toList());
                                    renshu2 = linkStuList.size();
                                }
                                XSSFRow row2_3_1 = sheet2.getRow((d * dengjis.size()) + 2 + z);
                                if (null == row2_3_1) {
                                    row2_3_1 = sheet2.createRow((d * dengjis.size()) + 2 + z);
                                }
                                XSSFCell dataCell3_3_1 = row2_3_1.createCell((e * 3) + 2);
                                dataCell3_3_1.setCellValue(dengji2);
                                dataCell3_3_1.setCellStyle(cellStyle);
                                XSSFCell dataCell3_3_2 = row2_3_1.createCell((e * 3) + 3);
                                if (renshu2 > 0) {
                                    dataCell3_3_2.setCellValue(renshu2);
                                    dataCell3_3_2.setCellStyle(cellStyle);
                                } else {
                                    dataCell3_3_2.setCellValue("");
                                    dataCell3_3_2.setCellStyle(cellStyle);
                                }
                            }
                        }
                    }
                }
                FileOutputStream fileOut1 = new FileOutputStream(excelFilePath);
                wwBook.write(fileOut1);
                fileOut1.close();
                if (wwBook != null) {
                    try {
                        excelFile3 = new File(excelFilePath);
                    } catch (Exception e2) {
                        e2.printStackTrace();
                        return null;
                    }
                    if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                        HttpServletResponse response = ServletActionContext.getResponse();
                        response.reset();
                        ServletOutputStream outputStream = response.getOutputStream();
                        String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                        String loadFileName2 = loadFileName.replace("+", " ");
                        response.setContentType("Content-type: applicationnd.ms-excel");
                        response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xlsx");
                        response.setHeader("Content-length", String.valueOf(excelFile3.length()));
                        byte[] tempByte = new byte[1024];
                        FileInputStream in = new FileInputStream(excelFile3);
                        while (true) {
                            int n = in.read(tempByte);
                            if (n == -1) {
                                break;
                            }
                            try {
                                outputStream.write(tempByte, 0, n);
                            } catch (Exception e3) {
                                this.log.error("保存未成功", e3);
                            }
                            e2.printStackTrace();
                            return null;
                        }
                        outputStream.flush();
                        outputStream.close();
                        in.close();
                    }
                }
                return null;
            } catch (Exception e4) {
                e4.printStackTrace();
                if (wwBook != null) {
                    try {
                        excelFile = new File(excelFilePath);
                    } catch (Exception e5) {
                        e5.printStackTrace();
                        return null;
                    }
                    if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                        HttpServletResponse response2 = ServletActionContext.getResponse();
                        response2.reset();
                        ServletOutputStream outputStream2 = response2.getOutputStream();
                        String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                        String loadFileName4 = loadFileName3.replace("+", " ");
                        response2.setContentType("Content-type: applicationnd.ms-excel");
                        response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xlsx");
                        response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                        byte[] tempByte2 = new byte[1024];
                        FileInputStream in2 = new FileInputStream(excelFile);
                        while (true) {
                            int n2 = in2.read(tempByte2);
                            if (n2 == -1) {
                                break;
                            }
                            try {
                                outputStream2.write(tempByte2, 0, n2);
                            } catch (Exception e6) {
                                this.log.error("保存未成功", e6);
                            }
                            e5.printStackTrace();
                            return null;
                        }
                        outputStream2.flush();
                        outputStream2.close();
                        in2.close();
                    }
                }
                return null;
            }
        } catch (Throwable th) {
            if (wwBook != null) {
                try {
                    excelFile2 = new File(excelFilePath);
                } catch (Exception e7) {
                    e7.printStackTrace();
                    throw th;
                }
                if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                    HttpServletResponse response3 = ServletActionContext.getResponse();
                    response3.reset();
                    ServletOutputStream outputStream3 = response3.getOutputStream();
                    String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                    String loadFileName6 = loadFileName5.replace("+", " ");
                    response3.setContentType("Content-type: applicationnd.ms-excel");
                    response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xlsx");
                    response3.setHeader("Content-length", String.valueOf(excelFile2.length()));
                    byte[] tempByte3 = new byte[1024];
                    FileInputStream in3 = new FileInputStream(excelFile2);
                    while (true) {
                        int n3 = in3.read(tempByte3);
                        if (n3 == -1) {
                            break;
                        }
                        try {
                            outputStream3.write(tempByte3, 0, n3);
                        } catch (Exception e8) {
                            this.log.error("保存未成功", e8);
                        }
                        e7.printStackTrace();
                        throw th;
                    }
                    outputStream3.flush();
                    outputStream3.close();
                    in3.close();
                }
            }
            throw th;
        }
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public void exportfufenduizhao(String examNum, String gradeNum, String subjectNum, String source, String statisticType, String dirPath, String isSaveWrite, String loginUserNum, String rpt_name, String agent) {
        String rptTitle = this.sp.getHeaderStr(examNum, subjectNum, gradeNum, (String) null, (String) null, (String) null, (String) null, true, false, true, false, false, true, false, true, false, false, false, false, false, false, false, "0", "0");
        Map args = new HashMap();
        args.put(Const.EXPORTREPORT_subjectNum, subjectNum);
        String subjectName = this.dao2._queryStr("SELECT subjectName from `subject` WHERE subjectNum={subjectNum}", args);
        String folderPath = "ExportFolder/reportExcel" + loginUserNum;
        String str = "reportExcel" + loginUserNum;
        String str2 = "reportExcel" + loginUserNum;
        String rpt_name2 = "F6-赋分对照查询-" + subjectName;
        if (null != isSaveWrite && isSaveWrite.equals("F")) {
            folderPath = "";
        }
        File excelFile = getRptExcelFile(rpt_name2, dirPath, folderPath);
        WritableWorkbook wwBook = null;
        try {
            wwBook = Workbook.createWorkbook(excelFile);
            DateFormat df1 = new DateFormat("0.00%");
            WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
            biaotis1.setAlignment(Alignment.LEFT);
            biaotis1.setVerticalAlignment(VerticalAlignment.CENTRE);
            WritableFont titles = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat title = new WritableCellFormat(titles);
            title.setAlignment(Alignment.LEFT);
            title.setVerticalAlignment(VerticalAlignment.CENTRE);
            title.setWrap(true);
            WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            WritableCellFormat cFormat1 = new WritableCellFormat(font1);
            cFormat1.setAlignment(Alignment.CENTRE);
            cFormat1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1.setBackground(Const.titleBackground_color);
            cFormat1.setWrap(true);
            WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat2 = new WritableCellFormat(font2);
            cFormat2.setAlignment(Alignment.CENTRE);
            cFormat2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2.setBackground(Const.textOuBackGround_color);
            cFormat2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2.setWrap(true);
            WritableCellFormat baifenbiFormat2 = new WritableCellFormat(font2, df1);
            baifenbiFormat2.setAlignment(Alignment.CENTRE);
            baifenbiFormat2.setVerticalAlignment(VerticalAlignment.CENTRE);
            baifenbiFormat2.setBackground(Const.textOuBackGround_color);
            baifenbiFormat2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            baifenbiFormat2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            baifenbiFormat2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            baifenbiFormat2.setBorder(Border.TOP, BorderLineStyle.THIN);
            baifenbiFormat2.setWrap(true);
            NumberFormat nf = new NumberFormat("0.00");
            WritableCellFormat cFormat2_2 = new WritableCellFormat(font2, nf);
            cFormat2_2.setAlignment(Alignment.CENTRE);
            cFormat2_2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat2_2.setBackground(Const.textOuBackGround_color);
            cFormat2_2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat2_2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat2_2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat2_2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat2_2.setWrap(true);
            WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            WritableCellFormat cFormat3 = new WritableCellFormat(font3);
            cFormat3.setAlignment(Alignment.CENTRE);
            cFormat3.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3.setBackground(Const.textJiBackGround_color);
            cFormat3.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3.setWrap(true);
            WritableCellFormat baifenbiFormat3 = new WritableCellFormat(font3, df1);
            baifenbiFormat3.setAlignment(Alignment.CENTRE);
            baifenbiFormat3.setVerticalAlignment(VerticalAlignment.CENTRE);
            baifenbiFormat3.setBackground(Const.textJiBackGround_color);
            baifenbiFormat3.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            baifenbiFormat3.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            baifenbiFormat3.setBorder(Border.LEFT, BorderLineStyle.THIN);
            baifenbiFormat3.setBorder(Border.TOP, BorderLineStyle.THIN);
            baifenbiFormat3.setWrap(true);
            WritableCellFormat cFormat3_2 = new WritableCellFormat(font2, nf);
            cFormat3_2.setAlignment(Alignment.CENTRE);
            cFormat3_2.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat3_2.setBackground(Const.textJiBackGround_color);
            cFormat3_2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat3_2.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat3_2.setWrap(true);
            new DecimalFormat("0.00");
            List<Map<String, Object>> list = this.f6.getData(examNum, gradeNum, subjectNum, source, statisticType);
            WritableSheet sheet = wwBook.createSheet(rpt_name2, 0);
            sheet.getSettings().setShowGridLines(false);
            Label biaotou = new Label(0, 0, rpt_name2, biaotis1);
            sheet.addCell(biaotou);
            Label xinxi = new Label(0, 1, rptTitle, title);
            sheet.addCell(xinxi);
            sheet.setRowView(1, Const.height_500);
            sheet.mergeCells(0, 0, 5, 0);
            sheet.mergeCells(0, 1, 10, 1);
            Label xkzh = new Label(0, 2, "等级", cFormat1);
            sheet.addCell(xkzh);
            Label xkzh1 = new Label(1, 2, "所占比例", cFormat1);
            sheet.addCell(xkzh1);
            Label xkzh2 = new Label(2, 2, "原始分", cFormat1);
            sheet.addCell(xkzh2);
            Label xkzh3 = new Label(3, 2, "赋分", cFormat1);
            sheet.addCell(xkzh3);
            sheet.setColumnView(0, 20);
            sheet.setColumnView(1, 15);
            sheet.setColumnView(2, 9);
            sheet.setColumnView(3, 9);
            String dengji = "0";
            int b = 0;
            int x = 0;
            for (int i = 0; i < list.size(); i++) {
                String dengji1 = list.get(i).get("dengji").toString();
                BigDecimal a = Convert.toBigDecimal(list.get(i).get("renshubili"));
                DecimalFormat df = new DecimalFormat("0.00");
                BigDecimal totalscoreyuanshifen = Convert.toBigDecimal(list.get(i).get("totalscoreyuanshifen")).stripTrailingZeros();
                String yuanshifen = totalscoreyuanshifen.toPlainString();
                BigDecimal totalscorefufen = Convert.toBigDecimal(list.get(i).get("totalscorefufen")).stripTrailingZeros();
                String fufen = totalscorefufen.toPlainString();
                BigDecimal beforscore = Convert.toBigDecimal(list.get(i).get("beforscore")).stripTrailingZeros();
                String befor = beforscore.toPlainString();
                BigDecimal endscore = Convert.toBigDecimal(list.get(i).get("endscore")).stripTrailingZeros();
                String end = endscore.toPlainString();
                String zhanbi = df.format(a);
                if (!dengji1.equals(dengji)) {
                    int j = i;
                    while (true) {
                        if (j >= list.size()) {
                            break;
                        }
                        String dengji2 = list.get(j).get("dengji").toString();
                        if (j > i && !dengji2.equals(dengji1)) {
                            x = j;
                            break;
                        } else {
                            if (j == list.size() - 1) {
                                x = j + 1;
                                break;
                            }
                            j++;
                        }
                    }
                    dengji = dengji1;
                    b = b == 0 ? 1 : 0;
                    if (list.get(i).get("qufen").toString().equals("1")) {
                        if (b == 0) {
                            Label bl = new Label(0, 3 + i, dengji, cFormat2);
                            sheet.addCell(bl);
                            Number bl1 = new Number(1, 3 + i, Double.valueOf(zhanbi).doubleValue() / 100.0d, baifenbiFormat2);
                            sheet.addCell(bl1);
                            Number bl2 = new Number(2, 3 + i, Double.valueOf(yuanshifen).doubleValue(), cFormat2);
                            sheet.addCell(bl2);
                            Number bl3 = new Number(3, 3 + i, Double.valueOf(fufen).doubleValue(), cFormat2);
                            sheet.addCell(bl3);
                        } else {
                            Label bl4 = new Label(0, 3 + i, dengji, cFormat3);
                            sheet.addCell(bl4);
                            Number bl12 = new Number(1, 3 + i, Double.valueOf(zhanbi).doubleValue() / 100.0d, baifenbiFormat3);
                            sheet.addCell(bl12);
                            Number bl22 = new Number(2, 3 + i, Double.valueOf(yuanshifen).doubleValue(), cFormat3);
                            sheet.addCell(bl22);
                            Number bl32 = new Number(3, 3 + i, Double.valueOf(fufen).doubleValue(), cFormat3);
                            sheet.addCell(bl32);
                        }
                    } else if (b == 0) {
                        Label bl5 = new Label(0, 3 + i, dengji + " [" + end + Const.STRING_SEPERATOR + befor + "]", cFormat2);
                        sheet.addCell(bl5);
                        Number bl13 = new Number(1, 3 + i, Double.valueOf(zhanbi).doubleValue() / 100.0d, baifenbiFormat2);
                        sheet.addCell(bl13);
                        Number bl23 = new Number(2, 3 + i, Double.valueOf(yuanshifen).doubleValue(), cFormat2);
                        sheet.addCell(bl23);
                        Number bl33 = new Number(3, 3 + i, Double.valueOf(fufen).doubleValue(), cFormat2);
                        sheet.addCell(bl33);
                    } else {
                        Label bl6 = new Label(0, 3 + i, dengji + " [" + end + Const.STRING_SEPERATOR + befor + "]", cFormat3);
                        sheet.addCell(bl6);
                        Number bl14 = new Number(1, 3 + i, Double.valueOf(zhanbi).doubleValue() / 100.0d, baifenbiFormat3);
                        sheet.addCell(bl14);
                        Number bl24 = new Number(2, 3 + i, Double.valueOf(yuanshifen).doubleValue(), cFormat3);
                        sheet.addCell(bl24);
                        Number bl34 = new Number(3, 3 + i, Double.valueOf(fufen).doubleValue(), cFormat3);
                        sheet.addCell(bl34);
                    }
                    sheet.mergeCells(0, 3 + i, 0, 2 + x);
                    sheet.mergeCells(1, 3 + i, 1, 2 + x);
                } else if (b == 0) {
                    Number bl25 = new Number(2, 3 + i, Double.valueOf(yuanshifen).doubleValue(), cFormat2);
                    sheet.addCell(bl25);
                    Number bl35 = new Number(3, 3 + i, Double.valueOf(fufen).doubleValue(), cFormat2);
                    sheet.addCell(bl35);
                } else {
                    Number bl26 = new Number(2, 3 + i, Double.valueOf(yuanshifen).doubleValue(), cFormat3);
                    sheet.addCell(bl26);
                    Number bl36 = new Number(3, 3 + i, Double.valueOf(fufen).doubleValue(), cFormat3);
                    sheet.addCell(bl36);
                }
            }
            wwBook.write();
            if (wwBook != null) {
                try {
                    wwBook.close();
                    if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                        HttpServletResponse response = ServletActionContext.getResponse();
                        response.reset();
                        ServletOutputStream outputStream = response.getOutputStream();
                        String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(rpt_name2, "UTF-8") : new String(rpt_name2.getBytes("UTF-8"), "ISO8859-1");
                        String loadFileName2 = loadFileName.replace("+", " ");
                        response.setContentType("Content-type: applicationnd.ms-excel");
                        response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xls");
                        response.setHeader("Content-length", String.valueOf(excelFile.length()));
                        byte[] tempByte = new byte[1024];
                        FileInputStream in = new FileInputStream(excelFile);
                        while (true) {
                            int n = in.read(tempByte);
                            if (n == -1) {
                                break;
                            }
                            try {
                                outputStream.write(tempByte, 0, n);
                            } catch (Exception e) {
                                this.log.error("保存未成功", e);
                            }
                        }
                        outputStream.flush();
                        outputStream.close();
                        in.close();
                    }
                } catch (WriteException e2) {
                    e2.printStackTrace();
                } catch (IOException e3) {
                    e3.printStackTrace();
                }
            }
        } catch (Exception e4) {
            if (wwBook != null) {
                try {
                    wwBook.close();
                    if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                        HttpServletResponse response2 = ServletActionContext.getResponse();
                        response2.reset();
                        ServletOutputStream outputStream2 = response2.getOutputStream();
                        String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(rpt_name2, "UTF-8") : new String(rpt_name2.getBytes("UTF-8"), "ISO8859-1");
                        String loadFileName4 = loadFileName3.replace("+", " ");
                        response2.setContentType("Content-type: applicationnd.ms-excel");
                        response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xls");
                        response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                        byte[] tempByte2 = new byte[1024];
                        FileInputStream in2 = new FileInputStream(excelFile);
                        while (true) {
                            int n2 = in2.read(tempByte2);
                            if (n2 == -1) {
                                break;
                            }
                            try {
                                outputStream2.write(tempByte2, 0, n2);
                            } catch (Exception e5) {
                                this.log.error("保存未成功", e5);
                            }
                        }
                        outputStream2.flush();
                        outputStream2.close();
                        in2.close();
                    }
                } catch (WriteException e6) {
                    e6.printStackTrace();
                } catch (IOException e7) {
                    e7.printStackTrace();
                }
            }
        } catch (Throwable th) {
            if (wwBook != null) {
                try {
                    wwBook.close();
                    if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                        HttpServletResponse response3 = ServletActionContext.getResponse();
                        response3.reset();
                        ServletOutputStream outputStream3 = response3.getOutputStream();
                        String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(rpt_name2, "UTF-8") : new String(rpt_name2.getBytes("UTF-8"), "ISO8859-1");
                        String loadFileName6 = loadFileName5.replace("+", " ");
                        response3.setContentType("Content-type: applicationnd.ms-excel");
                        response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xls");
                        response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                        byte[] tempByte3 = new byte[1024];
                        FileInputStream in3 = new FileInputStream(excelFile);
                        while (true) {
                            int n3 = in3.read(tempByte3);
                            if (n3 == -1) {
                                break;
                            }
                            try {
                                outputStream3.write(tempByte3, 0, n3);
                            } catch (Exception e8) {
                                this.log.error("保存未成功", e8);
                            }
                        }
                        outputStream3.flush();
                        outputStream3.close();
                        in3.close();
                    }
                } catch (IOException e9) {
                    e9.printStackTrace();
                    throw th;
                } catch (WriteException e10) {
                    e10.printStackTrace();
                    throw th;
                }
            }
            throw th;
        }
    }

    @Override // com.dmj.service.reportManagement.ReportExportService
    public String exportStudentXuankeTuijian(String examNum, String gradeNum, String studentType, String schoolNum, String classNum, String studentId, String studentName, String rptTitle, String rpt_name, String dirPath, String uri, String useId, String all_class, String agent, String isSaveWrite) {
        String folderName = "studentXuankeTuijian" + useId;
        String zipName = "学生选科推荐" + useId;
        String excelName = rpt_name + "_" + gradeNum;
        if (StrUtil.isNotEmpty(studentName)) {
            excelName = excelName + "_" + studentName;
        }
        File excelFile = getRptExcelFile(excelName, dirPath, folderName);
        String filePath = null;
        try {
            WritableWorkbook wwBook = Workbook.createWorkbook(excelFile);
            WritableFont biaotis = new WritableFont(WritableFont.ARIAL, 15, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat biaotis1 = new WritableCellFormat(biaotis);
            biaotis1.setAlignment(Alignment.LEFT);
            biaotis1.setVerticalAlignment(VerticalAlignment.CENTRE);
            WritableFont titles = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.biaotiFont_color);
            WritableCellFormat title = new WritableCellFormat(titles);
            title.setAlignment(Alignment.LEFT);
            title.setVerticalAlignment(VerticalAlignment.CENTRE);
            title.setWrap(true);
            WritableFont font1 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.titleFont_color);
            WritableCellFormat cFormat1 = new WritableCellFormat(font1);
            cFormat1.setAlignment(Alignment.CENTRE);
            cFormat1.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.LEFT, BorderLineStyle.THIN);
            cFormat1.setBorder(Border.TOP, BorderLineStyle.THIN);
            cFormat1.setVerticalAlignment(VerticalAlignment.CENTRE);
            cFormat1.setBackground(Const.titleBackground_color);
            cFormat1.setWrap(true);
            WritableFont font2 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            CellFormat writableCellFormat = new WritableCellFormat(font2);
            writableCellFormat.setAlignment(Alignment.CENTRE);
            writableCellFormat.setVerticalAlignment(VerticalAlignment.CENTRE);
            writableCellFormat.setBackground(Const.textOuBackGround_color);
            writableCellFormat.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            writableCellFormat.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            writableCellFormat.setBorder(Border.LEFT, BorderLineStyle.THIN);
            writableCellFormat.setBorder(Border.TOP, BorderLineStyle.THIN);
            writableCellFormat.setWrap(true);
            WritableFont font2_bold = new WritableFont(WritableFont.ARIAL, 10, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.jxl_red);
            CellFormat writableCellFormat2 = new WritableCellFormat(font2_bold);
            writableCellFormat2.setAlignment(Alignment.CENTRE);
            writableCellFormat2.setVerticalAlignment(VerticalAlignment.CENTRE);
            writableCellFormat2.setBackground(Const.textOuBackGround_color);
            writableCellFormat2.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            writableCellFormat2.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            writableCellFormat2.setBorder(Border.LEFT, BorderLineStyle.THIN);
            writableCellFormat2.setBorder(Border.TOP, BorderLineStyle.THIN);
            writableCellFormat2.setWrap(true);
            WritableFont font3 = new WritableFont(WritableFont.ARIAL, 10, WritableFont.NO_BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.textFont_color);
            CellFormat writableCellFormat3 = new WritableCellFormat(font3);
            writableCellFormat3.setAlignment(Alignment.CENTRE);
            writableCellFormat3.setVerticalAlignment(VerticalAlignment.CENTRE);
            writableCellFormat3.setBackground(Const.textJiBackGround_color);
            writableCellFormat3.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            writableCellFormat3.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            writableCellFormat3.setBorder(Border.LEFT, BorderLineStyle.THIN);
            writableCellFormat3.setBorder(Border.TOP, BorderLineStyle.THIN);
            writableCellFormat3.setWrap(true);
            WritableFont font3_bold = new WritableFont(WritableFont.ARIAL, 10, WritableFont.BOLD, false, UnderlineStyle.NO_UNDERLINE, Const.jxl_red);
            CellFormat writableCellFormat4 = new WritableCellFormat(font3_bold);
            writableCellFormat4.setAlignment(Alignment.CENTRE);
            writableCellFormat4.setVerticalAlignment(VerticalAlignment.CENTRE);
            writableCellFormat4.setBackground(Const.textJiBackGround_color);
            writableCellFormat4.setBorder(Border.BOTTOM, BorderLineStyle.THIN);
            writableCellFormat4.setBorder(Border.RIGHT, BorderLineStyle.THIN);
            writableCellFormat4.setBorder(Border.LEFT, BorderLineStyle.THIN);
            writableCellFormat4.setBorder(Border.TOP, BorderLineStyle.THIN);
            writableCellFormat4.setWrap(true);
            String showXuankeTuijian = this.sp.showXuankeTuijian_school(examNum, gradeNum, schoolNum);
            try {
                try {
                    WritableSheet sheet = wwBook.createSheet(rpt_name, 0);
                    sheet.getSettings().setShowGridLines(false);
                    try {
                        Label biaotou = new Label(0, 0, rpt_name, biaotis1);
                        sheet.addCell(biaotou);
                        sheet.mergeCells(0, 0, 8, 0);
                        Label xinxi = new Label(0, 1, rptTitle, title);
                        sheet.addCell(xinxi);
                        sheet.setRowView(1, Const.height_500);
                        sheet.mergeCells(0, 1, 8, 1);
                        String[] tabTitleArr = {"选科组合/科目", "综合分/标准分", "备注"};
                        for (int i = 0; i < tabTitleArr.length; i++) {
                            sheet.setColumnView(i, 20);
                            Label cell_title = new Label(i, 2, tabTitleArr[i], cFormat1);
                            sheet.addCell(cell_title);
                        }
                        int zhushiIndex = 4;
                        if ("F".equals(showXuankeTuijian)) {
                            Label tishiInfo = new Label(0, 3, "高一年级当前学校尚未确定选科组合时，才提供选科推荐！", writableCellFormat4);
                            sheet.addCell(tishiInfo);
                            sheet.mergeCells(0, 3, 2, 3);
                        } else {
                            List<Map<String, Object>> list = this.sp.getStudentXuankeTuijianMapList(examNum, gradeNum, studentType, schoolNum, classNum, studentId);
                            int len = list.size();
                            if (len < 1) {
                                Label tishiInfo2 = new Label(0, 3, "数据为空！", writableCellFormat4);
                                sheet.addCell(tishiInfo2);
                                sheet.mergeCells(0, 3, 2, 3);
                            } else {
                                zhushiIndex = 3 + len;
                                for (int j = 0; j < list.size(); j++) {
                                    Map<String, Object> oneRowDataMap = list.get(j);
                                    String isYoushi = Convert.toStr(oneRowDataMap.get("isYoushi"));
                                    CellFormat cellFormat = j % 2 != 0 ? "1".equals(isYoushi) ? writableCellFormat2 : writableCellFormat : "1".equals(isYoushi) ? writableCellFormat4 : writableCellFormat3;
                                    String name = Convert.toStr(oneRowDataMap.get("name"));
                                    Label cell_name = new Label(0, 3 + j, name, cellFormat);
                                    sheet.addCell(cell_name);
                                    BigDecimal biaozhunfen = Convert.toBigDecimal(oneRowDataMap.get("biaozhunfen"));
                                    if (null != biaozhunfen) {
                                        Number cell_biaozhunfen = new Number(1, 3 + j, Convert.toDouble(biaozhunfen).doubleValue(), cellFormat);
                                        sheet.addCell(cell_biaozhunfen);
                                    } else {
                                        Label cell_biaozhunfen2 = new Label(1, 3 + j, "--", cellFormat);
                                        sheet.addCell(cell_biaozhunfen2);
                                    }
                                    String beizhu = StrUtil.isEmpty(isYoushi) ? "" : "优势组合";
                                    Label cell_beizhu = new Label(2, 3 + j, beizhu, cellFormat);
                                    sheet.addCell(cell_beizhu);
                                }
                            }
                        }
                        Label tishiInfo3 = new Label(0, zhushiIndex, "注：1、优势组合是指该学生所有选科组合中综合分最高的组合；\n2、综合分为该组合各学科标准分加权平均值；\n3、科目不全的组合不计算综合分。", title);
                        sheet.addCell(tishiInfo3);
                        sheet.mergeCells(0, zhushiIndex, 8, zhushiIndex);
                        sheet.setRowView(zhushiIndex, 1000);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    wwBook.write();
                    if (wwBook != null) {
                        try {
                            wwBook.close();
                            if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                                if (Integer.valueOf(all_class).intValue() == 1) {
                                    HttpServletResponse response = ServletActionContext.getResponse();
                                    response.reset();
                                    ServletOutputStream outputStream = response.getOutputStream();
                                    String loadFileName = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                    String loadFileName2 = loadFileName.replace("+", " ");
                                    response.setContentType("Content-type: applicationnd.ms-excel");
                                    response.setHeader("Content-disposition", "attachment;filename=" + loadFileName2 + ".xls");
                                    response.setHeader("Content-length", String.valueOf(excelFile.length()));
                                    byte[] tempByte = new byte[1024];
                                    FileInputStream in = new FileInputStream(excelFile);
                                    while (true) {
                                        int n = in.read(tempByte);
                                        if (n == -1) {
                                            break;
                                        }
                                        try {
                                            outputStream.write(tempByte, 0, n);
                                        } catch (Exception e2) {
                                            this.log.error("保存未成功", e2);
                                        }
                                    }
                                    outputStream.flush();
                                    outputStream.close();
                                    in.close();
                                } else {
                                    filePath = methodZipAll(uri, dirPath, folderName, zipName);
                                }
                            }
                        } catch (WriteException e3) {
                            e3.printStackTrace();
                        }
                    }
                } catch (Exception e4) {
                    if (wwBook != null) {
                        try {
                            wwBook.close();
                            if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                                if (Integer.valueOf(all_class).intValue() == 1) {
                                    HttpServletResponse response2 = ServletActionContext.getResponse();
                                    response2.reset();
                                    ServletOutputStream outputStream2 = response2.getOutputStream();
                                    String loadFileName3 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                    String loadFileName4 = loadFileName3.replace("+", " ");
                                    response2.setContentType("Content-type: applicationnd.ms-excel");
                                    response2.setHeader("Content-disposition", "attachment;filename=" + loadFileName4 + ".xls");
                                    response2.setHeader("Content-length", String.valueOf(excelFile.length()));
                                    byte[] tempByte2 = new byte[1024];
                                    FileInputStream in2 = new FileInputStream(excelFile);
                                    while (true) {
                                        int n2 = in2.read(tempByte2);
                                        if (n2 == -1) {
                                            break;
                                        }
                                        try {
                                            outputStream2.write(tempByte2, 0, n2);
                                        } catch (Exception e5) {
                                            this.log.error("保存未成功", e5);
                                        }
                                    }
                                    outputStream2.flush();
                                    outputStream2.close();
                                    in2.close();
                                } else {
                                    filePath = methodZipAll(uri, dirPath, folderName, zipName);
                                }
                            }
                        } catch (WriteException e6) {
                            e6.printStackTrace();
                        }
                    }
                }
            } catch (Throwable th) {
                if (wwBook != null) {
                    try {
                        wwBook.close();
                        if (null == isSaveWrite || !isSaveWrite.equals("F")) {
                            if (Integer.valueOf(all_class).intValue() == 1) {
                                HttpServletResponse response3 = ServletActionContext.getResponse();
                                response3.reset();
                                ServletOutputStream outputStream3 = response3.getOutputStream();
                                String loadFileName5 = agent.indexOf("firefox") == -1 ? URLEncoder.encode(excelName, "UTF-8") : new String(excelName.getBytes("UTF-8"), "ISO8859-1");
                                String loadFileName6 = loadFileName5.replace("+", " ");
                                response3.setContentType("Content-type: applicationnd.ms-excel");
                                response3.setHeader("Content-disposition", "attachment;filename=" + loadFileName6 + ".xls");
                                response3.setHeader("Content-length", String.valueOf(excelFile.length()));
                                byte[] tempByte3 = new byte[1024];
                                FileInputStream in3 = new FileInputStream(excelFile);
                                while (true) {
                                    int n3 = in3.read(tempByte3);
                                    if (n3 == -1) {
                                        break;
                                    }
                                    try {
                                        outputStream3.write(tempByte3, 0, n3);
                                    } catch (Exception e7) {
                                        this.log.error("保存未成功", e7);
                                    }
                                }
                                outputStream3.flush();
                                outputStream3.close();
                                in3.close();
                            } else {
                                methodZipAll(uri, dirPath, folderName, zipName);
                            }
                        }
                    } catch (WriteException e8) {
                        e8.printStackTrace();
                        throw th;
                    }
                }
                throw th;
            }
        } catch (Exception e9) {
            e9.printStackTrace();
        }
        return filePath;
    }

    public void setBorderStyle(BorderStyle border, CellRangeAddress region, Sheet sheet) {
        RegionUtil.setBorderBottom(border, region, sheet);
        RegionUtil.setBorderLeft(border, region, sheet);
        RegionUtil.setBorderRight(border, region, sheet);
        RegionUtil.setBorderTop(border, region, sheet);
    }

    public byte[] convertToByteArray(File imgFile) throws IOException {
        FileInputStream fis = new FileInputStream(imgFile);
        BufferedInputStream bis = new BufferedInputStream(fis);
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        byte[] buffer = new byte[1024];
        while (true) {
            int len = bis.read(buffer);
            if (len > -1) {
                baos.write(buffer, 0, len);
            } else {
                baos.flush();
                byte[] imageBytes = baos.toByteArray();
                return imageBytes;
            }
        }
    }
}
